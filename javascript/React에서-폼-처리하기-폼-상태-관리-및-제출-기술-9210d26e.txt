1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","React%EC%97%90%EC%84%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EC%A0%9C%EC%B6%9C-%EA%B8%B0%EC%88%A0-9210d26e","d"],{"children":["__PAGE__?{\"slug\":\"React에서-폼-처리하기-폼-상태-관리-및-제출-기술-9210d26e\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","React%EC%97%90%EC%84%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EC%A0%9C%EC%B6%9C-%EA%B8%B0%EC%88%A0-9210d26e","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"React에서-폼-처리하기-폼-상태-관리-및-제출-기술-9210d26e\"}"},"styles":[]}],"segment":["slug","React%EC%97%90%EC%84%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EC%A0%9C%EC%B6%9C-%EA%B8%B0%EC%88%A0-9210d26e","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 React에서 폼을 처리하는 방법에 대해 알아보고, 상태 관리 및 폼 제출 기술에 대해 다룹니다. 사용자가 입력한 데이터를 효율적으로 관리하고 서버로 제출하는 과정을 이해하는 데 도움이 됩니다."}],["$","meta","3",{"name":"keywords","content":"React,Forms,State Management,Submission"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/React%EC%97%90%EC%84%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EC%A0%9C%EC%B6%9C-%EA%B8%B0%EC%88%A0-9210d26e"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 React에서 폼을 처리하는 방법에 대해 알아보고, 상태 관리 및 폼 제출 기술에 대해 다룹니다. 사용자가 입력한 데이터를 효율적으로 관리하고 서버로 제출하는 과정을 이해하는 데 도움이 됩니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/React%EC%97%90%EC%84%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%ED%8F%BC-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EB%B0%8F-%EC%A0%9C%EC%B6%9C-%EA%B8%B0%EC%88%A0-9210d26e"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 React에서 폼을 처리하는 방법에 대해 알아보고, 상태 관리 및 폼 제출 기술에 대해 다룹니다. 사용자가 입력한 데이터를 효율적으로 관리하고 서버로 제출하는 과정을 이해하는 데 도움이 됩니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
e:T49c,import React, { useState } from 'react';

function FormComponent() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    // 폼 데이터 수집
    const formData = {
      name,
      email
    };
    console.log('폼 제출됨:', formData);
    // 서버에 폼 데이터 제출 처리
    // 예: fetch('api/submit', { method: 'POST', body: JSON.stringify(formData) })
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={handleNameChange}
        />
      </div>
      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={handleEmailChange}
        />
      </div>
      <button type="submit">Submit</button>
    </form>
  );
}

export default FormComponent;
f:T49c,import React, { useState } from 'react';

function FormComponent() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    // 폼 데이터 수집
    const formData = {
      name,
      email
    };
    console.log('폼 제출됨:', formData);
    // 서버에 폼 데이터 제출 처리
    // 예: fetch('api/submit', { method: 'POST', body: JSON.stringify(formData) })
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={handleNameChange}
        />
      </div>
      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={handleEmailChange}
        />
      </div>
      <button type="submit">Submit</button>
    </form>
  );
}

export default FormComponent;
10:T612,import React, { useState } from 'react';

function FormComponent() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [errors, setErrors] = useState({});

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
  };

  const validate = () => {
    const newErrors = {};
    if (name.trim() === '') {
      newErrors.name = 'Name is required';
    }
    if (email.trim() === '') {
      newErrors.email = 'Email is required';
    }
    return newErrors;
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const newErrors = validate();
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    // 폼 데이터 수집
    const formData = { name, email };
    console.log('폼 제출됨:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={handleNameChange}
        />
        {errors.name && <span>{errors.name}</span>}
      </div>
      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={handleEmailChange}
        />
        {errors.email && <span>{errors.email}</span>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
}

export default FormComponent;
11:T612,import React, { useState } from 'react';

function FormComponent() {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [errors, setErrors] = useState({});

  const handleNameChange = (event) => {
    setName(event.target.value);
  };

  const handleEmailChange = (event) => {
    setEmail(event.target.value);
  };

  const validate = () => {
    const newErrors = {};
    if (name.trim() === '') {
      newErrors.name = 'Name is required';
    }
    if (email.trim() === '') {
      newErrors.email = 'Email is required';
    }
    return newErrors;
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    const newErrors = validate();
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    // 폼 데이터 수집
    const formData = { name, email };
    console.log('폼 제출됨:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          value={name}
          onChange={handleNameChange}
        />
        {errors.name && <span>{errors.name}</span>}
      </div>
      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          value={email}
          onChange={handleEmailChange}
        />
        {errors.email && <span>{errors.email}</span>}
      </div>
      <button type="submit">Submit</button>
    </form>
  );
}

export default FormComponent;
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-01"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fbf48bba","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술"}],"\n",["$","h2",null,{"id":"476966c5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React에서 폼은 단순한 사용자 인터페이스 컴포넌트를 넘어, 데이터 입력 및 제출의 중요한 역할을 합니다. 사용자가 입력한 데이터를 효과적으로 관리하고 서버에 제출할 수 있는 방법에 대해 알아봅시다. 이 글에서는 폼 상태 관리를 중심으로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":5,"column":136,"offset":177},"end":{"line":5,"column":146,"offset":187}}}],"position":{"start":{"line":5,"column":136,"offset":177},"end":{"line":5,"column":146,"offset":187}}},"children":"useState"}}]," 후크를 사용하는 방법과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onSubmit","position":{"start":{"line":5,"column":160,"offset":201},"end":{"line":5,"column":170,"offset":211}}}],"position":{"start":{"line":5,"column":160,"offset":201},"end":{"line":5,"column":170,"offset":211}}},"children":"onSubmit"}}]," 이벤트 핸들러를 다룰 것입니다."]}],"\n",["$","h2",null,{"id":"ebce8fb4","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"폼 상태 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React 컴포넌트에서 폼 상태를 관리하려면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":8,"column":26,"offset":267},"end":{"line":8,"column":36,"offset":277}}}],"position":{"start":{"line":8,"column":26,"offset":267},"end":{"line":8,"column":36,"offset":277}}},"children":"useState"}}]," 후크를 사용하여 각 입력 필드에 대한 상태를 정의할 수 있습니다. 아래는 간단한 예시입니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction FormComponent() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  return (\n    <form>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={name}\n          onChange={handleNameChange}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={email}\n          onChange={handleEmailChange}\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default FormComponent;\n"}],"position":{"start":{"line":10,"column":1,"offset":331},"end":{"line":50,"column":4,"offset":1127}}},"children":"import React, { useState } from 'react';\n\nfunction FormComponent() {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n\n  const handleNameChange = (event) => {\n    setName(event.target.value);\n  };\n\n  const handleEmailChange = (event) => {\n    setEmail(event.target.value);\n  };\n\n  return (\n    <form>\n      <div>\n        <label htmlFor=\"name\">Name:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={name}\n          onChange={handleNameChange}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"email\">Email:</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={email}\n          onChange={handleEmailChange}\n        />\n      </div>\n    </form>\n  );\n}\n\nexport default FormComponent;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 우리는 두 개의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":51,"column":17,"offset":1144},"end":{"line":51,"column":27,"offset":1154}}}],"position":{"start":{"line":51,"column":17,"offset":1144},"end":{"line":51,"column":27,"offset":1154}}},"children":"useState"}}]," 후크를 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name","position":{"start":{"line":51,"column":37,"offset":1164},"end":{"line":51,"column":43,"offset":1170}}}],"position":{"start":{"line":51,"column":37,"offset":1164},"end":{"line":51,"column":43,"offset":1170}}},"children":"name"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"email","position":{"start":{"line":51,"column":45,"offset":1172},"end":{"line":51,"column":52,"offset":1179}}}],"position":{"start":{"line":51,"column":45,"offset":1172},"end":{"line":51,"column":52,"offset":1179}}},"children":"email"}}]," 상태를 관리하고 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"handleNameChange","position":{"start":{"line":51,"column":68,"offset":1195},"end":{"line":51,"column":86,"offset":1213}}}],"position":{"start":{"line":51,"column":68,"offset":1195},"end":{"line":51,"column":86,"offset":1213}}},"children":"handleNameChange"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"handleEmailChange","position":{"start":{"line":51,"column":88,"offset":1215},"end":{"line":51,"column":107,"offset":1234}}}],"position":{"start":{"line":51,"column":88,"offset":1215},"end":{"line":51,"column":107,"offset":1234}}},"children":"handleEmailChange"}}]," 함수는 각각의 입력 필드 값이 변경될 때 상태를 업데이트합니다."]}],"\n",["$","h2",null,{"id":"9dedbd19","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"폼 제출 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["폼에서 사용자가 입력한 데이터를 수집하고 서버로 제출하려면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onSubmit","position":{"start":{"line":54,"column":34,"offset":1316},"end":{"line":54,"column":44,"offset":1326}}}],"position":{"start":{"line":54,"column":34,"offset":1316},"end":{"line":54,"column":44,"offset":1326}}},"children":"onSubmit"}}]," 이벤트 핸들러를 사용해야 합니다. 아래는 동일 폼에서 제출 처리를 추가한 예시입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":56,"column":1,"offset":1376},"end":{"line":109,"column":4,"offset":2522}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"handleSubmit","position":{"start":{"line":110,"column":6,"offset":2528},"end":{"line":110,"column":20,"offset":2542}}}],"position":{"start":{"line":110,"column":6,"offset":2528},"end":{"line":110,"column":20,"offset":2542}}},"children":"handleSubmit"}}]," 함수를 통해 폼 제출을 처리하고 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"event.preventDefault()","position":{"start":{"line":110,"column":45,"offset":2567},"end":{"line":110,"column":69,"offset":2591}}}],"position":{"start":{"line":110,"column":45,"offset":2567},"end":{"line":110,"column":69,"offset":2591}}},"children":"event.preventDefault()"}}]," 메서드를 사용하여 폼의 기본 제출 동작을 막고, JavaScript를 사용하여 필요한 작업을 수행할 수 있게 합니다. 예를 들어, 데이터가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"formData","position":{"start":{"line":110,"column":148,"offset":2670},"end":{"line":110,"column":158,"offset":2680}}}],"position":{"start":{"line":110,"column":148,"offset":2670},"end":{"line":110,"column":158,"offset":2680}}},"children":"formData"}}]," 객체에 수집되고 콘솔에 출력됩니다. 실제 서버에 데이터를 제출하려면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetch","position":{"start":{"line":110,"column":197,"offset":2719},"end":{"line":110,"column":204,"offset":2726}}}],"position":{"start":{"line":110,"column":197,"offset":2719},"end":{"line":110,"column":204,"offset":2726}}},"children":"fetch"}}]," API나 axios와 같은 라이브러리를 사용할 수 있습니다."]}],"\n",["$","h2",null,{"id":"039a847a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태와 유효성 검사"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"폼 유효성 검사를 실행하여 사용자가 올바른 데이터를 입력했는지 확인하는 것도 중요합니다. 상태를 이용하여 이 검사를 수행할 수 있습니다. 아래는 기본적인 유효성 검사 예시입니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":115,"column":1,"offset":2877},"end":{"line":182,"column":4,"offset":4421}}},"children":"$11"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예시에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"validate","position":{"start":{"line":183,"column":8,"offset":4429},"end":{"line":183,"column":18,"offset":4439}}}],"position":{"start":{"line":183,"column":8,"offset":4429},"end":{"line":183,"column":18,"offset":4439}}},"children":"validate"}}]," 함수는 폼 필드 값을 검사하여 오류가 있을 경우 오류 메시지를 반환합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"handleSubmit","position":{"start":{"line":183,"column":61,"offset":4482},"end":{"line":183,"column":75,"offset":4496}}}],"position":{"start":{"line":183,"column":61,"offset":4482},"end":{"line":183,"column":75,"offset":4496}}},"children":"handleSubmit"}}]," 함수에서 이 검사를 실행하고 오류가 있을 경우 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"errors","position":{"start":{"line":183,"column":102,"offset":4523},"end":{"line":183,"column":110,"offset":4531}}}],"position":{"start":{"line":183,"column":102,"offset":4523},"end":{"line":183,"column":110,"offset":4531}}},"children":"errors"}}]," 상태를 업데이트하여 화면에 오류 메시지를 표시합니다."]}],"\n",["$","h2",null,{"id":"ed8464a3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"마무리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 React에서 폼 상태를 관리하고 폼을 제출하는 기본적인 방법을 알아보았습니다. 또한, 폼 데이터를 유효성 검사하는 방법도 다루었습니다. 실제 프로젝트에서는 더 복잡한 폼 로직과 다양한 검증 절차가 필요할 수 있지만, 이 기본적인 개념을 이해하면 React에서 폼을 효과적으로 관리하고 제출하는 데 큰 도움이 될 것입니다."}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술.","toc":[{"tagName":"h1","title":"React에서 폼 처리하기: 폼 상태 관리 및 제출 기술","id":"fbf48bba"},{"tagName":"h2","title":"개요","id":"476966c5"},{"tagName":"h2","title":"폼 상태 관리","id":"ebce8fb4"},{"tagName":"h2","title":"폼 제출 처리","id":"9dedbd19"},{"tagName":"h2","title":"상태와 유효성 검사","id":"039a847a"},{"tagName":"h2","title":"마무리","id":"ed8464a3"}],"language":"kr"}]}]]}]]
8:null
