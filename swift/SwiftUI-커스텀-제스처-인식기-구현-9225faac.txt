1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%A0%9C%EC%8A%A4%EC%B2%98-%EC%9D%B8%EC%8B%9D%EA%B8%B0-%EA%B5%AC%ED%98%84-9225faac","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI-커스텀-제스처-인식기-구현-9225faac\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%A0%9C%EC%8A%A4%EC%B2%98-%EC%9D%B8%EC%8B%9D%EA%B8%B0-%EA%B5%AC%ED%98%84-9225faac","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI-커스텀-제스처-인식기-구현-9225faac\"}"},"styles":[]}],"segment":["slug","SwiftUI-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%A0%9C%EC%8A%A4%EC%B2%98-%EC%9D%B8%EC%8B%9D%EA%B8%B0-%EA%B5%AC%ED%98%84-9225faac","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI 커스텀 제스처 인식기 구현 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI에서 커스텀 제스처 인식기를 구현하는 방법에 대해 다루는 글입니다. SwiftUI의 기본 제스처 외에 직접 제스처를 커스터마이징하여 앱에 통합하는 법을 배웁니다. 기본 단계부터 고급 사용법까지 포괄합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,커스텀 제스처,iOS 개발,Swift"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%A0%9C%EC%8A%A4%EC%B2%98-%EC%9D%B8%EC%8B%9D%EA%B8%B0-%EA%B5%AC%ED%98%84-9225faac"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI 커스텀 제스처 인식기 구현 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI 커스텀 제스처 인식기 구현 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI에서 커스텀 제스처 인식기를 구현하는 방법에 대해 다루는 글입니다. SwiftUI의 기본 제스처 외에 직접 제스처를 커스터마이징하여 앱에 통합하는 법을 배웁니다. 기본 단계부터 고급 사용법까지 포괄합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%A0%9C%EC%8A%A4%EC%B2%98-%EC%9D%B8%EC%8B%9D%EA%B8%B0-%EA%B5%AC%ED%98%84-9225faac"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI 커스텀 제스처 인식기 구현 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI에서 커스텀 제스처 인식기를 구현하는 방법에 대해 다루는 글입니다. SwiftUI의 기본 제스처 외에 직접 제스처를 커스터마이징하여 앱에 통합하는 법을 배웁니다. 기본 단계부터 고급 사용법까지 포괄합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI 커스텀 제스처 인식기 구현"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI 커스텀 제스처 인식기 구현"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-09"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"ccb08a08","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"SwiftUI에서 커스텀 제스처 인식기 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 iOS 앱 개발을 단순화하고 직관적으로 만들어 주는 다양한 기능을 제공합니다. 그 중 제스처 인식은 매우 중요한 기능 중 하나입니다. 기본적으로 제공되는 제스처 말고도, 개발자가 직접 커스텀 제스처 인식기를 구현할 수 있습니다. 이 글에서는 SwiftUI에서 커스텀 제스처 인식기를 구현하는 방법에 대해 알아보겠습니다."}],"\n",["$","h2",null,{"id":"e2e236be","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 제스처 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 몇 가지 기본적인 제스처를 제공합니다. 탭, 스와이프, 드래그, 롱 프레스 등이 여기에 포함됩니다. 예를 들어, 탭 제스처는 다음과 같이 구현할 수 있습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n            .onTapGesture {\n                print(\"Text tapped!\")\n            }\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":335},"end":{"line":21,"column":4,"offset":534}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n            .onTapGesture {\n                print(\"Text tapped!\")\n            }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드는 간단한 탭 인식기를 Text에 추가합니다. 사용자가 텍스트를 탭하면 해당 이벤트가 콘솔에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Text tapped!","position":{"start":{"line":23,"column":58,"offset":593},"end":{"line":23,"column":72,"offset":607}}}],"position":{"start":{"line":23,"column":58,"offset":593},"end":{"line":23,"column":72,"offset":607}}},"children":"Text tapped!"}}]," 라는 메시지를 출력합니다. 하지만 경우에 따라, 기본 제스처 인식기만으로는 충분하지 않은 경우가 생길 수 있습니다. 그래서 우리는 커스텀 제스처 인식기를 만드는 방법을 알아봐야 합니다."]}],"\n",["$","h2",null,{"id":"f276b69a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 제스처 인식기의 필요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"애플리케이션이 더 복잡해지면서, 확장된 제스처 인식기가 필요할 때가 있습니다. 예를 들어, 특정한 패턴의 스와이프 또는 멀티 터치를 인식하는 기능이 필요할 수 있습니다. 이러한 경우, 우리는 기본 제스처 인식기를 넘어선 커스텀 제스처 인식기를 구현해야 합니다."}],"\n",["$","h2",null,{"id":"e26706e9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 제스처 인식기 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["커스텀 제스처 인식기를 구현하기 위해서는 우선 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIGestureRecognizer","position":{"start":{"line":31,"column":27,"offset":928},"end":{"line":31,"column":48,"offset":949}}}],"position":{"start":{"line":31,"column":27,"offset":928},"end":{"line":31,"column":48,"offset":949}}},"children":"UIGestureRecognizer"}}],"를 사용해야 합니다. 여기에서는 간단한 예제로, 두 손가락으로 화면을 드래그하는 제스처를 인식하는 커스텀 제스처를 만들어 보겠습니다."]}],"\n",["$","h3",null,{"id":"24be1004","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Step 1: Gesture Recognizer 클래스를 생성하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저, 커스텀 제스처 인식기를 생성할 클래스를 만들어야 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIGestureRecognizer","position":{"start":{"line":35,"column":37,"offset":1103},"end":{"line":35,"column":58,"offset":1124}}}],"position":{"start":{"line":35,"column":37,"offset":1103},"end":{"line":35,"column":58,"offset":1124}}},"children":"UIGestureRecognizer"}}],"를 상속받는 클래스를 생성하고, 원하는 제스처를 정의합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nclass TwoFingerDragGestureRecognizer: UIGestureRecognizer {\n    \n    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent) {\n        super.touchesBegan(touches, with: event)\n        guard touches.count == 2 else {\n            self.state = .failed\n            return\n        }\n    }\n    \n    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent) {\n        super.touchesMoved(touches, with: event)\n        if self.state == .possible {\n            self.state = .began\n        } else {\n            self.state = .changed\n        }\n    }\n    \n    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent) {\n        super.touchesEnded(touches, with: event)\n        if self.state == .changed || self.state == .began {\n            self.state = .ended\n        }\n    }\n}\n"}],"position":{"start":{"line":37,"column":1,"offset":1159},"end":{"line":66,"column":4,"offset":1998}}},"children":"import UIKit\n\nclass TwoFingerDragGestureRecognizer: UIGestureRecognizer {\n    \n    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent) {\n        super.touchesBegan(touches, with: event)\n        guard touches.count == 2 else {\n            self.state = .failed\n            return\n        }\n    }\n    \n    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent) {\n        super.touchesMoved(touches, with: event)\n        if self.state == .possible {\n            self.state = .began\n        } else {\n            self.state = .changed\n        }\n    }\n    \n    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent) {\n        super.touchesEnded(touches, with: event)\n        if self.state == .changed || self.state == .began {\n            self.state = .ended\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 두 손가락으로 드래그 하는 제스처를 인식하는 인식기를 정의합니다. 처음 두 개의 터치를 인식하고, 터치가 움직이면 상태를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"began","position":{"start":{"line":68,"column":75,"offset":2074},"end":{"line":68,"column":82,"offset":2081}}}],"position":{"start":{"line":68,"column":75,"offset":2074},"end":{"line":68,"column":82,"offset":2081}}},"children":"began"}}]," 또는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"changed","position":{"start":{"line":68,"column":86,"offset":2085},"end":{"line":68,"column":95,"offset":2094}}}],"position":{"start":{"line":68,"column":86,"offset":2085},"end":{"line":68,"column":95,"offset":2094}}},"children":"changed"}}],"로 업데이트합니다. 터치가 끝나면 상태를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ended","position":{"start":{"line":68,"column":118,"offset":2117},"end":{"line":68,"column":125,"offset":2124}}}],"position":{"start":{"line":68,"column":118,"offset":2117},"end":{"line":68,"column":125,"offset":2124}}},"children":"ended"}}],"로 설정합니다."]}],"\n",["$","h3",null,{"id":"74e97114","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Step 2: SwiftUI와 연결하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI와 통합하려면, UIKit의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIViewRepresentable","position":{"start":{"line":72,"column":24,"offset":2184},"end":{"line":72,"column":45,"offset":2205}}}],"position":{"start":{"line":72,"column":24,"offset":2184},"end":{"line":72,"column":45,"offset":2205}}},"children":"UIViewRepresentable"}}]," 프로토콜을 사용하여 SwiftUI 뷰에 추가할 수 있는 방법을 찾아야 합니다. 다음은 이를 구현하는 방법입니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct TwoFingerDragView: UIViewRepresentable {\n    \n    class Coordinator: NSObject {\n        \n        @objc func handleGesture(_ gestureRecognizer: TwoFingerDragGestureRecognizer) {\n            // 커스텀 제스처 로직\n            print(\"Two-finger drag recognized\")\n        }\n    }\n    \n    func makeCoordinator() -> Coordinator {\n        return Coordinator()\n    }\n    \n    func makeUIView(context: Context) -> UIView {\n        let view = UIView()\n        let gestureRecognizer = TwoFingerDragGestureRecognizer(target: context.coordinator, action: #selector(Coordinator.handleGesture(_:)))\n        view.addGestureRecognizer(gestureRecognizer)\n        return view\n    }\n    \n    func updateUIView(_ uiView: UIView, context: Context) {}\n}\n"}],"position":{"start":{"line":74,"column":1,"offset":2270},"end":{"line":100,"column":4,"offset":3028}}},"children":"import SwiftUI\n\nstruct TwoFingerDragView: UIViewRepresentable {\n    \n    class Coordinator: NSObject {\n        \n        @objc func handleGesture(_ gestureRecognizer: TwoFingerDragGestureRecognizer) {\n            // 커스텀 제스처 로직\n            print(\"Two-finger drag recognized\")\n        }\n    }\n    \n    func makeCoordinator() -> Coordinator {\n        return Coordinator()\n    }\n    \n    func makeUIView(context: Context) -> UIView {\n        let view = UIView()\n        let gestureRecognizer = TwoFingerDragGestureRecognizer(target: context.coordinator, action: #selector(Coordinator.handleGesture(_:)))\n        view.addGestureRecognizer(gestureRecognizer)\n        return view\n    }\n    \n    func updateUIView(_ uiView: UIView, context: Context) {}\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 SwiftUI ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIViewRepresentable","position":{"start":{"line":102,"column":15,"offset":3044},"end":{"line":102,"column":36,"offset":3065}}}],"position":{"start":{"line":102,"column":15,"offset":3044},"end":{"line":102,"column":36,"offset":3065}}},"children":"UIViewRepresentable"}}]," 프로토콜을 구현하는 커스텀 뷰를 정의합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Coordinator","position":{"start":{"line":102,"column":62,"offset":3091},"end":{"line":102,"column":75,"offset":3104}}}],"position":{"start":{"line":102,"column":62,"offset":3091},"end":{"line":102,"column":75,"offset":3104}}},"children":"Coordinator"}}]," 클래스 내에 제스처 인식 핸들러를 정의하고, UIView에 커스텀 제스처 인식기를 추가합니다."]}],"\n",["$","h3",null,{"id":"a7312a94","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Step 3: SwiftUI ContentView에서 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TwoFingerDragView","position":{"start":{"line":106,"column":4,"offset":3202},"end":{"line":106,"column":23,"offset":3221}}}],"position":{"start":{"line":106,"column":4,"offset":3202},"end":{"line":106,"column":23,"offset":3221}}},"children":"TwoFingerDragView"}}],"를 다른 SwiftUI 뷰에서 사용할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        TwoFingerDragView()\n            .frame(width: 300, height: 300)\n            .background(Color.blue)\n    }\n}\n"}],"position":{"start":{"line":108,"column":1,"offset":3251},"end":{"line":118,"column":4,"offset":3448}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        TwoFingerDragView()\n            .frame(width: 300, height: 300)\n            .background(Color.blue)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TwoFingerDragView","position":{"start":{"line":120,"column":7,"offset":3456},"end":{"line":120,"column":26,"offset":3475}}}],"position":{"start":{"line":120,"column":7,"offset":3456},"end":{"line":120,"column":26,"offset":3475}}},"children":"TwoFingerDragView"}}],"를 ContentView 내에서 사용합니다. 사용자가 두 손가락으로 드래그하면, 제스처 인식기가 이를 인식하고 콘솔에 메시지를 출력합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI에서 커스텀 제스처 인식기를 만드는 것은 쉽지 않지만, 기본 제스처 인식기를 넘어서 복잡한 제스처를 처리하려면 꼭 필요합니다. 이번 글에서는 두 손가락 드래그 인식기를 예제로 사용하여 커스텀 제스처 인식기를 만드는 방법을 알아보았습니다. 이를 통해 더 복잡하고 다양한 사용자 인터페이스를 구현할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"SwiftUI 커스텀 제스처 인식기 구현","toc":[{"tagName":"h1","title":"SwiftUI에서 커스텀 제스처 인식기 구현하기","id":"ccb08a08"},{"tagName":"h2","title":"기본 제스처 이해하기","id":"e2e236be"},{"tagName":"h2","title":"커스텀 제스처 인식기의 필요성","id":"f276b69a"},{"tagName":"h2","title":"커스텀 제스처 인식기 구현하기","id":"e26706e9"},{"tagName":"h3","title":"Step 1: Gesture Recognizer 클래스를 생성하기","id":"24be1004"},{"tagName":"h3","title":"Step 2: SwiftUI와 연결하기","id":"74e97114"},{"tagName":"h3","title":"Step 3: SwiftUI ContentView에서 사용하기","id":"a7312a94"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
