1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EA%B3%A0%EA%B8%89-SwiftUI-Hashable-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%88%A0-4d917967","d"],{"children":["__PAGE__?{\"slug\":\"고급-SwiftUI-Hashable-사용-기술-4d917967\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EA%B3%A0%EA%B8%89-SwiftUI-Hashable-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%88%A0-4d917967","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"고급-SwiftUI-Hashable-사용-기술-4d917967\"}"},"styles":[]}],"segment":["slug","%EA%B3%A0%EA%B8%89-SwiftUI-Hashable-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%88%A0-4d917967","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"고급 SwiftUI Hashable 사용 기술 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 SwiftUI에서 고급 Hashable 사용 기법을 다루고, 이를 통해 성능 최적화와 데이터 관리의 장점을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,Hashable,iOS,Swift"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EA%B3%A0%EA%B8%89-SwiftUI-Hashable-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%88%A0-4d917967"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"고급 SwiftUI Hashable 사용 기술 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"고급 SwiftUI Hashable 사용 기술 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 SwiftUI에서 고급 Hashable 사용 기법을 다루고, 이를 통해 성능 최적화와 데이터 관리의 장점을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EA%B3%A0%EA%B8%89-SwiftUI-Hashable-%EC%82%AC%EC%9A%A9-%EA%B8%B0%EC%88%A0-4d917967"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"고급 SwiftUI Hashable 사용 기술 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 SwiftUI에서 고급 Hashable 사용 기법을 다루고, 이를 통해 성능 최적화와 데이터 관리의 장점을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"고급 SwiftUI Hashable 사용 기술"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"고급 SwiftUI Hashable 사용 기술"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-25"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h3",null,{"id":"4fbf3662","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"서론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI는 선언적 프로그래밍 패러다임을 따르는 강력한 프레임워크로, 이를 통해 iOS, macOS, watchOS, tvOS 앱을 쉽게 개발할 수 있습니다. 하지만 복잡한 데이터 구조를 처리할 때엔 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":115,"offset":123},"end":{"line":4,"column":125,"offset":133}}}],"position":{"start":{"line":4,"column":115,"offset":123},"end":{"line":4,"column":125,"offset":133}}},"children":"Hashable"}}]," 프로토콜을 잘 활용하는 것이 중요합니다. 이 글에서는 SwiftUI에서 고급 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":169,"offset":177},"end":{"line":4,"column":179,"offset":187}}}],"position":{"start":{"line":4,"column":169,"offset":177},"end":{"line":4,"column":179,"offset":187}}},"children":"Hashable"}}]," 사용 기술을 소개하고, 성능 최적화와 데이터 관리의 장점을 설명하겠습니다."]}],"\n",["$","h3",null,{"id":"ce147819","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Hashable의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":8,"offset":259},"end":{"line":8,"column":18,"offset":269}}}],"position":{"start":{"line":8,"column":8,"offset":259},"end":{"line":8,"column":18,"offset":269}}},"children":"Hashable"}}]," 프로토콜은 객체를 해시 함수로 처리할 수 있게 해줍니다. 이는 객체를 딕셔너리의 키로 사용하거나 집합의 멤버로 사용할 때 유용합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":94,"offset":345},"end":{"line":8,"column":104,"offset":355}}}],"position":{"start":{"line":8,"column":94,"offset":345},"end":{"line":8,"column":104,"offset":355}}},"children":"Hashable"}}],"을 구현하려면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":8,"column":112,"offset":363},"end":{"line":8,"column":125,"offset":376}}}],"position":{"start":{"line":8,"column":112,"offset":363},"end":{"line":8,"column":125,"offset":376}}},"children":"hash(into:)"}}]," 메서드와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==","position":{"start":{"line":8,"column":131,"offset":382},"end":{"line":8,"column":135,"offset":386}}}],"position":{"start":{"line":8,"column":131,"offset":382},"end":{"line":8,"column":135,"offset":386}}},"children":"=="}}]," 연산자를 정의해야 합니다. 예를 들어보겠습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Hashable {\n    var id: Int\n    var name: String\n    \n    static func ==(lhs: Person, rhs: Person) -> Bool {\n        return lhs.id == rhs.id\n    }\n    \n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":415},"end":{"line":23,"column":4,"offset":671}}},"children":"struct Person: Hashable {\n    var id: Int\n    var name: String\n    \n    static func ==(lhs: Person, rhs: Person) -> Bool {\n        return lhs.id == rhs.id\n    }\n    \n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":25,"column":5,"offset":677},"end":{"line":25,"column":9,"offset":681}}}],"position":{"start":{"line":25,"column":5,"offset":677},"end":{"line":25,"column":9,"offset":681}}},"children":"id"}}]," 속성만을 해시로 사용하는 이유는 이름이 같은 두 사람이 있을 수 있지만, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":25,"column":51,"offset":723},"end":{"line":25,"column":55,"offset":727}}}],"position":{"start":{"line":25,"column":51,"offset":723},"end":{"line":25,"column":55,"offset":727}}},"children":"id"}}],"는 유일하기 때문에 충돌을 최소화할 수 있습니다."]}],"\n",["$","h3",null,{"id":"51bc7a17","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"SwiftUI에서의 Hashable 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":29,"column":11,"offset":794},"end":{"line":29,"column":21,"offset":804}}}],"position":{"start":{"line":29,"column":11,"offset":794},"end":{"line":29,"column":21,"offset":804}}},"children":"Hashable"}}],"을 사용하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ForEach","position":{"start":{"line":29,"column":28,"offset":811},"end":{"line":29,"column":37,"offset":820}}}],"position":{"start":{"line":29,"column":28,"offset":811},"end":{"line":29,"column":37,"offset":820}}},"children":"ForEach"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":29,"column":39,"offset":822},"end":{"line":29,"column":45,"offset":828}}}],"position":{"start":{"line":29,"column":39,"offset":822},"end":{"line":29,"column":45,"offset":828}}},"children":"List"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Picker","position":{"start":{"line":29,"column":47,"offset":830},"end":{"line":29,"column":55,"offset":838}}}],"position":{"start":{"line":29,"column":47,"offset":830},"end":{"line":29,"column":55,"offset":838}}},"children":"Picker"}}]," 등 여러 상황에서 성능 최적화를 도모할 수 있습니다. 일반적으로 데이터가 고유하다는 것을 보장하기 위해 고유 식별자를 포함한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":29,"column":126,"offset":909},"end":{"line":29,"column":136,"offset":919}}}],"position":{"start":{"line":29,"column":126,"offset":909},"end":{"line":29,"column":136,"offset":919}}},"children":"Hashable"}}]," 구조체를 만들게 됩니다. 예를 들어보겠습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    var people: [Person] = [\n        Person(id: 1, name: \"John\"),\n        Person(id: 2, name: \"Jane\"),\n        Person(id: 3, name: \"Jack\")\n    ]\n    \n    var body: some View {\n        List(people, id: \\ .self) { person in\n            Text(person.name)\n        }\n    }\n}\n"}],"position":{"start":{"line":31,"column":1,"offset":947},"end":{"line":45,"column":4,"offset":1256}}},"children":"struct ContentView: View {\n    var people: [Person] = [\n        Person(id: 1, name: \"John\"),\n        Person(id: 2, name: \"Jane\"),\n        Person(id: 3, name: \"Jack\")\n    ]\n    \n    var body: some View {\n        List(people, id: \\ .self) { person in\n            Text(person.name)\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"people","position":{"start":{"line":47,"column":8,"offset":1265},"end":{"line":47,"column":16,"offset":1273}}}],"position":{"start":{"line":47,"column":8,"offset":1265},"end":{"line":47,"column":16,"offset":1273}}},"children":"people"}}]," 리스트는 고유한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":47,"column":26,"offset":1283},"end":{"line":47,"column":30,"offset":1287}}}],"position":{"start":{"line":47,"column":26,"offset":1283},"end":{"line":47,"column":30,"offset":1287}}},"children":"id"}}],"를 가진 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":47,"column":35,"offset":1292},"end":{"line":47,"column":43,"offset":1300}}}],"position":{"start":{"line":47,"column":35,"offset":1292},"end":{"line":47,"column":43,"offset":1300}}},"children":"Person"}}]," 객체 배열입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":47,"column":54,"offset":1311},"end":{"line":47,"column":60,"offset":1317}}}],"position":{"start":{"line":47,"column":54,"offset":1311},"end":{"line":47,"column":60,"offset":1317}}},"children":"List"}}],"의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":47,"column":62,"offset":1319},"end":{"line":47,"column":66,"offset":1323}}}],"position":{"start":{"line":47,"column":62,"offset":1319},"end":{"line":47,"column":66,"offset":1323}}},"children":"id"}}]," 파라미터로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\\ .self","position":{"start":{"line":47,"column":73,"offset":1330},"end":{"line":47,"column":82,"offset":1339}}}],"position":{"start":{"line":47,"column":73,"offset":1330},"end":{"line":47,"column":82,"offset":1339}}},"children":"\\ .self"}}],"를 전달해 각 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":47,"column":90,"offset":1347},"end":{"line":47,"column":98,"offset":1355}}}],"position":{"start":{"line":47,"column":90,"offset":1347},"end":{"line":47,"column":98,"offset":1355}}},"children":"Person"}}]," 객체가 고유함을 보장합니다. 덕분에 SwiftUI는 각 항목을 효율적으로 렌더링하고 업데이트할 수 있습니다."]}],"\n",["$","h3",null,{"id":"c59205e6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"고급 Hashable 활용 기법"}],"\n",["$","h4","h4-0",{"children":"커스텀 타입의 Hashable 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["복잡한 데이터 구조를 다룰 때, 적절한 속성을 골라 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":53,"column":30,"offset":1496},"end":{"line":53,"column":40,"offset":1506}}}],"position":{"start":{"line":53,"column":30,"offset":1496},"end":{"line":53,"column":40,"offset":1506}}},"children":"Hashable"}}],"을 구현하는 것이 중요합니다. 예를 들어, 다음과 같이 복합 데이터 구조를 가질 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Team: Hashable {\n    var teamId: Int\n    var name: String\n    var members: [Person]\n    \n    static func ==(lhs: Team, rhs: Team) -> Bool {\n        return lhs.teamId == rhs.teamId\n    }\n    \n    func hash(into hasher: inout Hasher) {\n        hasher.combine(teamId)\n    }\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1560},"end":{"line":69,"column":4,"offset":1852}}},"children":"struct Team: Hashable {\n    var teamId: Int\n    var name: String\n    var members: [Person]\n    \n    static func ==(lhs: Team, rhs: Team) -> Bool {\n        return lhs.teamId == rhs.teamId\n    }\n    \n    func hash(into hasher: inout Hasher) {\n        hasher.combine(teamId)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"teamId","position":{"start":{"line":71,"column":8,"offset":1861},"end":{"line":71,"column":16,"offset":1869}}}],"position":{"start":{"line":71,"column":8,"offset":1861},"end":{"line":71,"column":16,"offset":1869}}},"children":"teamId"}}],"를 유일한 값으로 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":71,"column":31,"offset":1884},"end":{"line":71,"column":41,"offset":1894}}}],"position":{"start":{"line":71,"column":31,"offset":1884},"end":{"line":71,"column":41,"offset":1894}}},"children":"Hashable"}}],"을 구현하면, 팀의 이름이나 멤버 수가 바뀌더라도 동일한 팀으로 인식됩니다."]}],"\n",["$","h4","h4-1",{"children":"성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["많은 데이터 세트를 다루는 앱에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":75,"column":20,"offset":1970},"end":{"line":75,"column":30,"offset":1980}}}],"position":{"start":{"line":75,"column":20,"offset":1970},"end":{"line":75,"column":30,"offset":1980}}},"children":"Hashable"}}],"을 적절히 활용하면 퍼포먼스를 크게 향상시킬 수 있습니다. 예를 들어 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"LazyVStack","position":{"start":{"line":75,"column":69,"offset":2019},"end":{"line":75,"column":81,"offset":2031}}}],"position":{"start":{"line":75,"column":69,"offset":2019},"end":{"line":75,"column":81,"offset":2031}}},"children":"LazyVStack"}}],"과 같은 컴포넌트에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":75,"column":93,"offset":2043},"end":{"line":75,"column":103,"offset":2053}}}],"position":{"start":{"line":75,"column":93,"offset":2043},"end":{"line":75,"column":103,"offset":2053}}},"children":"Hashable"}}]," 데이터를 사용하면, 불필요한 렌더링을 피할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var body: some View {\n    ScrollView {\n        LazyVStack {\n            ForEach(people, id: \\ .self) { person in\n                Text(person.name)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":77,"column":1,"offset":2087},"end":{"line":87,"column":4,"offset":2278}}},"children":"var body: some View {\n    ScrollView {\n        LazyVStack {\n            ForEach(people, id: \\ .self) { person in\n                Text(person.name)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이런 방식으로 데이터를 관리하면, SwiftUI는 데이터 변경 사항을 효율적으로 감지하고 변동 사항만 업데이트합니다. 이는 메모리 사용량을 줄이고, 앱의 반응성을 크게 향상시킬 수 있습니다."}],"\n",["$","h3",null,{"id":"457ae697","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"고유성 보장의 중요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":93,"column":1,"offset":2405},"end":{"line":93,"column":11,"offset":2415}}}],"position":{"start":{"line":93,"column":1,"offset":2405},"end":{"line":93,"column":11,"offset":2415}}},"children":"Hashable"}}]," 프로토콜을 사용할 때, 해시 값 충돌을 최소화하는 것이 중요합니다. 충돌이 발생할 경우 성능이 저하될 수 있고, 데이터 무결성에도 문제가 생길 수 있습니다. 이를 방지하기 위해 고유한 속성을 사용하여 해시 값을 생성해야 합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":95,"column":8,"offset":2552},"end":{"line":95,"column":16,"offset":2560}}}],"position":{"start":{"line":95,"column":8,"offset":2552},"end":{"line":95,"column":16,"offset":2560}}},"children":"Person"}}]," 구조체의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":95,"column":22,"offset":2566},"end":{"line":95,"column":26,"offset":2570}}}],"position":{"start":{"line":95,"column":22,"offset":2566},"end":{"line":95,"column":26,"offset":2570}}},"children":"id"}}]," 속성을 사용함으로써 해시 값을 생성할 때, 고유성을 보장할 수 있습니다. 만약 중복이 없어야 하는 데이터가 반복된다면, 애플리케이션 동작에 이상이 발생할 수 있습니다."]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":99,"column":12,"offset":2685},"end":{"line":99,"column":22,"offset":2695}}}],"position":{"start":{"line":99,"column":12,"offset":2685},"end":{"line":99,"column":22,"offset":2695}}},"children":"Hashable"}}]," 프로토콜을 적절하게 활용하는 것이 중요합니다. 이를 통해 성능 최적화뿐만 아니라 데이터의 고유성을 보장하여 안정적이고 효율적인 애플리케이션을 만들 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":99,"column":120,"offset":2793},"end":{"line":99,"column":130,"offset":2803}}}],"position":{"start":{"line":99,"column":120,"offset":2793},"end":{"line":99,"column":130,"offset":2803}}},"children":"Hashable"}}],"의 기본 개념부터 고급 사용 기술까지 다루었습니다. 이를 바탕으로 더 나은 SwiftUI 애플리케이션을 개발하시길 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"고급 SwiftUI Hashable 사용 기술","toc":[{"tagName":"h3","title":"서론","id":"4fbf3662"},{"tagName":"h3","title":"Hashable의 기본 개념","id":"ce147819"},{"tagName":"h3","title":"SwiftUI에서의 Hashable 사용","id":"51bc7a17"},{"tagName":"h3","title":"고급 Hashable 활용 기법","id":"c59205e6"},{"tagName":"h3","title":"고유성 보장의 중요성","id":"457ae697"},{"tagName":"h3","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
