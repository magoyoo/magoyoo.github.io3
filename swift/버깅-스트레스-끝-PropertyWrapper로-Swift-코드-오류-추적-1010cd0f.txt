1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EB%B2%84%EA%B9%85-%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%8A%A4-%EB%81%9D-PropertyWrapper%EB%A1%9C-Swift-%EC%BD%94%EB%93%9C-%EC%98%A4%EB%A5%98-%EC%B6%94%EC%A0%81-1010cd0f","d"],{"children":["__PAGE__?{\"slug\":\"버깅-스트레스-끝-PropertyWrapper로-Swift-코드-오류-추적-1010cd0f\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EB%B2%84%EA%B9%85-%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%8A%A4-%EB%81%9D-PropertyWrapper%EB%A1%9C-Swift-%EC%BD%94%EB%93%9C-%EC%98%A4%EB%A5%98-%EC%B6%94%EC%A0%81-1010cd0f","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"버깅-스트레스-끝-PropertyWrapper로-Swift-코드-오류-추적-1010cd0f\"}"},"styles":[]}],"segment":["slug","%EB%B2%84%EA%B9%85-%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%8A%A4-%EB%81%9D-PropertyWrapper%EB%A1%9C-Swift-%EC%BD%94%EB%93%9C-%EC%98%A4%EB%A5%98-%EC%B6%94%EC%A0%81-1010cd0f","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift의 PropertyWrapper를 통해 코드 오류를 효과적으로 추적할 수 있는 방법을 소개합니다. PropertyWrapper 사용법과 함께, 어떻게 디버깅을 용이하게 할 수 있는지에 대해 심도 있게 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Swift,PropertyWrapper,디버깅,오류 추적"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EB%B2%84%EA%B9%85-%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%8A%A4-%EB%81%9D-PropertyWrapper%EB%A1%9C-Swift-%EC%BD%94%EB%93%9C-%EC%98%A4%EB%A5%98-%EC%B6%94%EC%A0%81-1010cd0f"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift의 PropertyWrapper를 통해 코드 오류를 효과적으로 추적할 수 있는 방법을 소개합니다. PropertyWrapper 사용법과 함께, 어떻게 디버깅을 용이하게 할 수 있는지에 대해 심도 있게 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EB%B2%84%EA%B9%85-%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%8A%A4-%EB%81%9D-PropertyWrapper%EB%A1%9C-Swift-%EC%BD%94%EB%93%9C-%EC%98%A4%EB%A5%98-%EC%B6%94%EC%A0%81-1010cd0f"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift의 PropertyWrapper를 통해 코드 오류를 효과적으로 추적할 수 있는 방법을 소개합니다. PropertyWrapper 사용법과 함께, 어떻게 디버깅을 용이하게 할 수 있는지에 대해 심도 있게 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-13"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"edcb15ca","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 프로그래머들은 종종 코드 오류를 추적할 때 큰 어려움을 겪습니다. 이러한 문제를 해결하기 위해 'PropertyWrapper'라는 기능이 도입되었습니다. PropertyWrapper를 통해 어떻게 코드 오류를 효과적으로 추적하고 디버깅할 수 있는지에 대해 자세히 알아보겠습니다."}],"\n",["$","h2",null,{"id":"a6c43d10","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"PropertyWrapper란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"PropertyWrapper는 Swift 5.1에 도입된 기능으로, 프로퍼티의 접근자 메서드를 감싸는 래퍼를 생성할 수 있습니다. 이를 통해 코드의 중복을 줄이고, 특정 프로퍼티에 대한 추가 기능을 손쉽게 제공할 수 있습니다. 예를 들어, 값을 저장하기 전에 유효성 검사를 하거나, 변화를 감지해 로그를 기록하는 등의 작업이 가능합니다."}],"\n",["$","h3",null,{"id":"dc6b4259","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"PropertyWrapper 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["PropertyWrapper를 사용하기 위해서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@propertyWrapper","position":{"start":{"line":12,"column":28,"offset":476},"end":{"line":12,"column":46,"offset":494}}}],"position":{"start":{"line":12,"column":28,"offset":476},"end":{"line":12,"column":46,"offset":494}}},"children":"@propertyWrapper"}}]," 키워드를 사용해 래퍼 타입을 정의해야 합니다. 예를 들어, 값의 유효성을 검사하는 단순한 래퍼를 만들어 보겠습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@propertyWrapper\nstruct Validated<Value> {\n    private var value: Value?\n    private let validation: (Value) -> Bool\n\n    init(wrappedValue initialValue: Value?, _ validation: @escaping (Value) -> Bool) {\n        self.validation = validation\n        if let initialValue = initialValue, validation(initialValue) {\n            self.value = initialValue\n        } else {\n            self.value = nil\n        }\n    }\n\n    var wrappedValue: Value? {\n        get { return value }\n        set {\n            if let newValue = newValue, validation(newValue) {\n                value = newValue\n            } else {\n                print(\"값이 유효하지 않습니다.\")\n                value = nil\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":561},"end":{"line":41,"column":4,"offset":1277}}},"children":"@propertyWrapper\nstruct Validated<Value> {\n    private var value: Value?\n    private let validation: (Value) -> Bool\n\n    init(wrappedValue initialValue: Value?, _ validation: @escaping (Value) -> Bool) {\n        self.validation = validation\n        if let initialValue = initialValue, validation(initialValue) {\n            self.value = initialValue\n        } else {\n            self.value = nil\n        }\n    }\n\n    var wrappedValue: Value? {\n        get { return value }\n        set {\n            if let newValue = newValue, validation(newValue) {\n                value = newValue\n            } else {\n                print(\"값이 유효하지 않습니다.\")\n                value = nil\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예시에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Validated","position":{"start":{"line":43,"column":8,"offset":1286},"end":{"line":43,"column":19,"offset":1297}}}],"position":{"start":{"line":43,"column":8,"offset":1286},"end":{"line":43,"column":19,"offset":1297}}},"children":"Validated"}}]," 래퍼는 값이 유효한지 검사하고, 유효하지 않은 경우 경고 메시지를 출력합니다. 이를 통해 값을 설정할 때 자동으로 유효성 검사가 이루어지도록 할 수 있습니다."]}],"\n",["$","h3",null,{"id":"b0aef63b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 유효성 검사 래퍼 적용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위에서 만든 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Validated","position":{"start":{"line":47,"column":8,"offset":1417},"end":{"line":47,"column":19,"offset":1428}}}],"position":{"start":{"line":47,"column":8,"offset":1417},"end":{"line":47,"column":19,"offset":1428}}},"children":"Validated"}}]," 래퍼를 실제 코드에 적용해보겠습니다. 간단한 사용자 정보를 다루는 구조체에 적용해 보겠습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct User {\n    @Validated({ $0.count >= 5 })\n    var username: String?\n\n    @Validated({ $0 > 0 && $0 <= 100 })\n    var age: Int?\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1483},"end":{"line":57,"column":4,"offset":1630}}},"children":"struct User {\n    @Validated({ $0.count >= 5 })\n    var username: String?\n\n    @Validated({ $0 > 0 && $0 <= 100 })\n    var age: Int?\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"User","position":{"start":{"line":59,"column":4,"offset":1635},"end":{"line":59,"column":10,"offset":1641}}}],"position":{"start":{"line":59,"column":4,"offset":1635},"end":{"line":59,"column":10,"offset":1641}}},"children":"User"}}]," 구조체의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"username","position":{"start":{"line":59,"column":16,"offset":1647},"end":{"line":59,"column":26,"offset":1657}}}],"position":{"start":{"line":59,"column":16,"offset":1647},"end":{"line":59,"column":26,"offset":1657}}},"children":"username"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age","position":{"start":{"line":59,"column":28,"offset":1659},"end":{"line":59,"column":33,"offset":1664}}}],"position":{"start":{"line":59,"column":28,"offset":1659},"end":{"line":59,"column":33,"offset":1664}}},"children":"age"}}]," 프로퍼티에 유효성 검사를 자동으로 적용할 수 있게 되었습니다. 예를 들면, 사용자가 너무 짧은 이름을 입력하거나, 나이를 음수로 입력하는 실수를 방지할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var user = User()\nuser.username = \"abc\"  // 출력: 값이 유효하지 않습니다.\nuser.username = \"swift_user\"  // 정상적으로 설정됨\n\nuser.age = -1  // 출력: 값이 유효하지 않습니다.\nuser.age = 25  // 정상적으로 설정됨\n"}],"position":{"start":{"line":61,"column":1,"offset":1759},"end":{"line":68,"column":4,"offset":1941}}},"children":"var user = User()\nuser.username = \"abc\"  // 출력: 값이 유효하지 않습니다.\nuser.username = \"swift_user\"  // 정상적으로 설정됨\n\nuser.age = -1  // 출력: 값이 유효하지 않습니다.\nuser.age = 25  // 정상적으로 설정됨\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이처럼 PropertyWrapper를 이용하면 특정 프로퍼티에 일관된 검사를 적용하고, 오류를 추적하기가 쉬워집니다."}],"\n",["$","h2",null,{"id":"f0bbe300","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"디버깅을 위한 PropertyWrapper"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"디버깅을 더 용이하게 하기 위해 Custom Logging PropertyWrapper를 만들어 보겠습니다. 이 래퍼는 값이 변경될 때마다 로그를 기록하여 나중에 디버깅할 때 유용하게 사용할 수 있습니다."}],"\n",["$","h3",null,{"id":"cf74213e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Custom Logging PropertyWrapper 구현"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@propertyWrapper\nstruct Logged<Value> {\n    private var value: Value\n    private let name: String\n\n    init(wrappedValue initialValue: Value, name: String) {\n        self.value = initialValue\n        self.name = name\n        print(\"\n        print(\"\n  (\\(self.name) - 초기값 설정: \\(self.value))\")\n    }\n\n    var wrappedValue: Value {\n        get { return value }\n        set {\n            print(\"\n            print(\"\n  (\\(self.name) - 값 변경: \\(value) -> \\(newValue))\")\n            value = newValue\n        }\n    }\n}\n"}],"position":{"start":{"line":78,"column":1,"offset":2193},"end":{"line":102,"column":4,"offset":2715}}},"children":"@propertyWrapper\nstruct Logged<Value> {\n    private var value: Value\n    private let name: String\n\n    init(wrappedValue initialValue: Value, name: String) {\n        self.value = initialValue\n        self.name = name\n        print(\"\n        print(\"\n  (\\(self.name) - 초기값 설정: \\(self.value))\")\n    }\n\n    var wrappedValue: Value {\n        get { return value }\n        set {\n            print(\"\n            print(\"\n  (\\(self.name) - 값 변경: \\(value) -> \\(newValue))\")\n            value = newValue\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Logged","position":{"start":{"line":104,"column":3,"offset":2719},"end":{"line":104,"column":11,"offset":2727}}}],"position":{"start":{"line":104,"column":3,"offset":2719},"end":{"line":104,"column":11,"offset":2727}}},"children":"Logged"}}]," 래퍼는 초기값 설정 및 값 변경 시마다 로그를 출력합니다. 이를 활용하면 어떤 값이 언제 변경되었는지 추적할 수 있어 디버깅에 큰 도움이 됩니다."]}],"\n",["$","h3",null,{"id":"218111e4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 디버깅을 위한 래퍼 적용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 사용자 정보 구조체에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Logged","position":{"start":{"line":108,"column":17,"offset":2850},"end":{"line":108,"column":25,"offset":2858}}}],"position":{"start":{"line":108,"column":17,"offset":2850},"end":{"line":108,"column":25,"offset":2858}}},"children":"Logged"}}]," 래퍼를 적용한 예입니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct UserWithLogging {\n    @Logged(name: \"Username\")\n    var username: String\n\n    @Logged(name: \"Age\")\n    var age: Int\n}\n\nvar user = UserWithLogging(username: \"initial_user\", age: 20)\nuser.username = \"new_user\"  // 출력: (Username - 값 변경: initial_user -> new_user)\nuser.age = 25  // 출력: (Age - 값 변경: 20 -> 25)\n"}],"position":{"start":{"line":110,"column":1,"offset":2874},"end":{"line":122,"column":4,"offset":3198}}},"children":"struct UserWithLogging {\n    @Logged(name: \"Username\")\n    var username: String\n\n    @Logged(name: \"Age\")\n    var age: Int\n}\n\nvar user = UserWithLogging(username: \"initial_user\", age: 20)\nuser.username = \"new_user\"  // 출력: (Username - 값 변경: initial_user -> new_user)\nuser.age = 25  // 출력: (Age - 값 변경: 20 -> 25)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이처럼 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Logged","position":{"start":{"line":124,"column":5,"offset":3204},"end":{"line":124,"column":13,"offset":3212}}}],"position":{"start":{"line":124,"column":5,"offset":3204},"end":{"line":124,"column":13,"offset":3212}}},"children":"Logged"}}]," 래퍼를 사용하면 프로퍼티 값 변경 시마다 자동으로 로그를 기록하고, 이를 통해 오류를 빠르게 추적할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 PropertyWrapper는 코드 오류를 추적하고 디버깅하기 위한 강력한 도구입니다. 이를 활용하면 프로퍼티의 유효성 검사, 값 변경 로그 기록 등 다양한 기능을 손쉽게 구현할 수 있습니다. 위에서 설명한 방법을 통해 더 효율적이고 유지보수하기 쉬운 코드를 작성할 수 있기를 바랍니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적","toc":[{"tagName":"h1","title":"버깅 스트레스 끝! PropertyWrapper로 Swift 코드 오류 추적","id":"edcb15ca"},{"tagName":"h2","title":"PropertyWrapper란?","id":"a6c43d10"},{"tagName":"h3","title":"PropertyWrapper 사용법","id":"dc6b4259"},{"tagName":"h3","title":"예제: 유효성 검사 래퍼 적용","id":"b0aef63b"},{"tagName":"h2","title":"디버깅을 위한 PropertyWrapper","id":"f0bbe300"},{"tagName":"h3","title":"Custom Logging PropertyWrapper 구현","id":"cf74213e"},{"tagName":"h3","title":"예제: 디버깅을 위한 래퍼 적용","id":"218111e4"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
