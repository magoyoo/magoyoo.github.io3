1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS%EC%97%90%EC%84%9C-ARC%EB%8A%94-%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EC%9D%BC%EA%B9%8C","d"],{"children":["__PAGE__?{\"slug\":\"iOS에서-ARC는-실무에서-어떤-의미일까\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS%EC%97%90%EC%84%9C-ARC%EB%8A%94-%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EC%9D%BC%EA%B9%8C","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS에서-ARC는-실무에서-어떤-의미일까\"}"},"styles":[]}],"segment":["slug","iOS%EC%97%90%EC%84%9C-ARC%EB%8A%94-%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EC%9D%BC%EA%B9%8C","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까? | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"iOS 개발에서 자동 참조 카운팅(ARC)은 메모리 관리를 자동화하여 메모리 누수를 방지하고 코드의 안정성을 높입니다. 이 글에서는 ARC의 개념, 작동 원리, 실무에서의 의미와 활용 방법, 그리고 주의사항을 다룹니다. ARC를 효과적으로 활용하여 안전하고 효율적인 iOS 애플리케이션을 개발하는 방법을 소개합니다."}],["$","meta","3",{"name":"keywords","content":"swift,면접 질문"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS%EC%97%90%EC%84%9C-ARC%EB%8A%94-%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EC%9D%BC%EA%B9%8C"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까? | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까? | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"iOS 개발에서 자동 참조 카운팅(ARC)은 메모리 관리를 자동화하여 메모리 누수를 방지하고 코드의 안정성을 높입니다. 이 글에서는 ARC의 개념, 작동 원리, 실무에서의 의미와 활용 방법, 그리고 주의사항을 다룹니다. ARC를 효과적으로 활용하여 안전하고 효율적인 iOS 애플리케이션을 개발하는 방법을 소개합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS%EC%97%90%EC%84%9C-ARC%EB%8A%94-%EC%8B%A4%EB%AC%B4%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%A4-%EC%9D%98%EB%AF%B8%EC%9D%BC%EA%B9%8C"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까? | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"iOS 개발에서 자동 참조 카운팅(ARC)은 메모리 관리를 자동화하여 메모리 누수를 방지하고 코드의 안정성을 높입니다. 이 글에서는 ARC의 개념, 작동 원리, 실무에서의 의미와 활용 방법, 그리고 주의사항을 다룹니다. ARC를 효과적으로 활용하여 안전하고 효율적인 iOS 애플리케이션을 개발하는 방법을 소개합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까?"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까?"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-31"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"091f31b3","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS에서 ARC는 실무에서 어떤 의미일까?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"자동 참조 카운팅(Automatic Reference Counting, ARC)은 iOS 개발에서 메모리 관리를 자동화하는 중요한 기술입니다. ARC는 애플의 오브젝티브-C와 Swift 언어에서 메모리 누수를 방지하고, 메모리 관리를 단순화하기 위해 도입된 시스템입니다. 이번 글에서는 ARC의 개념, 작동 원리, 실무에서의 의미와 활용 방법, 그리고 개발자가 주의해야 할 사항들을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"d4bc1e97","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. ARC의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 객체의 생명주기를 관리하기 위해 참조 카운트를 자동으로 증가시키고 감소시키는 메모리 관리 시스템입니다. 객체가 더 이상 필요하지 않을 때, 즉 더 이상 참조되지 않을 때 메모리를 자동으로 해제하여 메모리 누수를 방지합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n\n    init(name: String) {\n        self.name = name\n        print(\"\\(name) is being initialized\")\n    }\n\n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nvar person1: Person?\nvar person2: Person?\n\nperson1 = Person(name: \"John\")\nperson2 = person1\n\nperson1 = nil\nperson2 = nil\n"}],"position":{"start":{"line":10,"column":1,"offset":402},"end":{"line":32,"column":4,"offset":745}}},"children":"class Person {\n    let name: String\n\n    init(name: String) {\n        self.name = name\n        print(\"\\(name) is being initialized\")\n    }\n\n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nvar person1: Person?\nvar person2: Person?\n\nperson1 = Person(name: \"John\")\nperson2 = person1\n\nperson1 = nil\nperson2 = nil\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":34,"column":8,"offset":754},"end":{"line":34,"column":16,"offset":762}}}],"position":{"start":{"line":34,"column":8,"offset":754},"end":{"line":34,"column":16,"offset":762}}},"children":"Person"}}]," 객체는 두 개의 참조(",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person1","position":{"start":{"line":34,"column":29,"offset":775},"end":{"line":34,"column":38,"offset":784}}}],"position":{"start":{"line":34,"column":29,"offset":775},"end":{"line":34,"column":38,"offset":784}}},"children":"person1"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person2","position":{"start":{"line":34,"column":40,"offset":786},"end":{"line":34,"column":49,"offset":795}}}],"position":{"start":{"line":34,"column":40,"offset":786},"end":{"line":34,"column":49,"offset":795}}},"children":"person2"}}],")를 가집니다. 두 참조가 모두 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nil","position":{"start":{"line":34,"column":67,"offset":813},"end":{"line":34,"column":72,"offset":818}}}],"position":{"start":{"line":34,"column":67,"offset":813},"end":{"line":34,"column":72,"offset":818}}},"children":"nil"}}],"이 될 때, ARC는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":34,"column":84,"offset":830},"end":{"line":34,"column":92,"offset":838}}}],"position":{"start":{"line":34,"column":84,"offset":830},"end":{"line":34,"column":92,"offset":838}}},"children":"Person"}}]," 객체를 메모리에서 해제합니다."]}],"\n",["$","h2",null,{"id":"f8ac4db2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. ARC의 작동 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 참조 카운트를 기반으로 객체의 생명주기를 관리합니다. 다음과 같은 세 가지 종류의 참조를 통해 작동합니다."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"강한 참조(Strong Reference)"}],": 기본 참조 타입으로, 객체의 참조 카운트를 증가시킵니다. 객체가 강한 참조를 하나라도 가지고 있으면 메모리에서 해제되지 않습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"약한 참조(Weak Reference)"}],": 참조 카운트를 증가시키지 않으며, 객체가 해제될 때 자동으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nil","position":{"start":{"line":41,"column":65,"offset":1110},"end":{"line":41,"column":70,"offset":1115}}}],"position":{"start":{"line":41,"column":65,"offset":1110},"end":{"line":41,"column":70,"offset":1115}}},"children":"nil"}}],"로 설정됩니다. 주로 참조 사이클을 방지하기 위해 사용됩니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"비소유 참조(Unmanaged Reference)"}],": 참조 카운트를 증가시키지 않으며, 객체가 해제되어도 자동으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nil","position":{"start":{"line":42,"column":71,"offset":1220},"end":{"line":42,"column":76,"offset":1225}}}],"position":{"start":{"line":42,"column":71,"offset":1220},"end":{"line":42,"column":76,"offset":1225}}},"children":"nil"}}],"로 설정되지 않습니다. 주로 성능 최적화를 위해 사용되며, 안전하지 않은 경우에만 사용합니다."]}],"\n"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n    var apartment: Apartment?\n\n    init(name: String) {\n        self.name = name\n    }\n\n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    weak var tenant: Person?\n\n    init(unit: String) {\n        self.unit = unit\n    }\n\n    deinit {\n        print(\"Apartment \\(unit) is being deinitialized\")\n    }\n}\n\nvar john: Person?\nvar unit4A: Apartment?\n\njohn = Person(name: \"John\")\nunit4A = Apartment(unit: \"4A\")\n\njohn?.apartment = unit4A\nunit4A?.tenant = john\n\njohn = nil\nunit4A = nil\n"}],"position":{"start":{"line":44,"column":1,"offset":1279},"end":{"line":82,"column":4,"offset":1865}}},"children":"class Person {\n    let name: String\n    var apartment: Apartment?\n\n    init(name: String) {\n        self.name = name\n    }\n\n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    weak var tenant: Person?\n\n    init(unit: String) {\n        self.unit = unit\n    }\n\n    deinit {\n        print(\"Apartment \\(unit) is being deinitialized\")\n    }\n}\n\nvar john: Person?\nvar unit4A: Apartment?\n\njohn = Person(name: \"John\")\nunit4A = Apartment(unit: \"4A\")\n\njohn?.apartment = unit4A\nunit4A?.tenant = john\n\njohn = nil\nunit4A = nil\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":84,"column":8,"offset":1874},"end":{"line":84,"column":16,"offset":1882}}}],"position":{"start":{"line":84,"column":8,"offset":1874},"end":{"line":84,"column":16,"offset":1882}}},"children":"Person"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Apartment","position":{"start":{"line":84,"column":18,"offset":1884},"end":{"line":84,"column":29,"offset":1895}}}],"position":{"start":{"line":84,"column":18,"offset":1884},"end":{"line":84,"column":29,"offset":1895}}},"children":"Apartment"}}]," 객체는 서로 약한 참조를 사용하여 참조 사이클을 방지하고 있습니다. 이로 인해 객체가 필요 없어질 때 자동으로 메모리에서 해제됩니다."]}],"\n",["$","h2",null,{"id":"58525664","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. ARC의 실무에서의 의미"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 메모리 관리의 복잡성을 크게 줄여줍니다. 개발자는 객체의 생명주기를 명시적으로 관리하지 않아도 되므로, 메모리 누수를 방지하고 코드의 안정성을 높일 수 있습니다."}],"\n",["$","h3",null,{"id":"f28fb8e5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.1 메모리 누수 방지"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"메모리 누수는 객체가 더 이상 필요하지 않지만, 메모리에서 해제되지 않아 발생하는 문제입니다. 이는 메모리 부족 문제를 일으키고, 결국 앱의 성능을 저하시킬 수 있습니다. ARC는 이러한 문제를 자동으로 해결해 줍니다."}],"\n",["$","h3",null,{"id":"4aebb4e6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.2 코드의 간결성과 유지보수성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC를 사용하면 개발자가 명시적으로 메모리를 할당하고 해제할 필요가 없으므로, 코드가 더 간결해집니다. 이는 코드의 유지보수성을 높이고, 버그 발생 가능성을 줄여줍니다."}],"\n",["$","h3",null,{"id":"f5db1b36","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.3 성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 컴파일 타임에 참조 카운트를 추가하고 제거하는 코드를 삽입합니다. 이는 런타임 오버헤드를 최소화하고, 성능을 최적화하는 데 도움이 됩니다."}],"\n",["$","h2",null,{"id":"d2029d7f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. 실무에서의 ARC 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC를 실무에서 효과적으로 활용하기 위해서는 다음과 같은 사항을 고려해야 합니다."}],"\n",["$","h3",null,{"id":"b95511e6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4.1 참조 사이클 방지"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"참조 사이클은 두 객체가 서로를 강하게 참조하여, 참조 카운트가 0이 되지 않아 메모리에서 해제되지 않는 문제입니다. 이를 방지하기 위해 약한 참조(weak)와 비소유 참조(unowned)를 사용해야 합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewController: UIViewController {\n    var onButtonTap: (() -> Void)?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        onButtonTap = { [weak self] in\n            self?.doSomething()\n        }\n    }\n\n    func doSomething() {\n        print(\"Button tapped\")\n    }\n}\n"}],"position":{"start":{"line":110,"column":1,"offset":2659},"end":{"line":126,"column":4,"offset":2963}}},"children":"class ViewController: UIViewController {\n    var onButtonTap: (() -> Void)?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        onButtonTap = { [weak self] in\n            self?.doSomething()\n        }\n    }\n\n    func doSomething() {\n        print(\"Button tapped\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 클로저 내에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self","position":{"start":{"line":128,"column":16,"offset":2980},"end":{"line":128,"column":22,"offset":2986}}}],"position":{"start":{"line":128,"column":16,"offset":2980},"end":{"line":128,"column":22,"offset":2986}}},"children":"self"}}],"를 약한 참조로 캡처하여 참조 사이클을 방지하고 있습니다."]}],"\n",["$","h3",null,{"id":"954980f2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4.2 캡처 리스트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클로저는 외부 변수와 상수를 캡처하여 사용할 수 있습니다. 이때, 캡처 리스트를 사용하여 참조 타입을 명시적으로 지정할 수 있습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class MyClass {\n    var value = 10\n\n    func performAction() {\n        let closure = { [unowned self] in\n            print(self.value)\n        }\n        closure()\n    }\n}\n"}],"position":{"start":{"line":134,"column":1,"offset":3112},"end":{"line":145,"column":4,"offset":3295}}},"children":"class MyClass {\n    var value = 10\n\n    func performAction() {\n        let closure = { [unowned self] in\n            print(self.value)\n        }\n        closure()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self","position":{"start":{"line":147,"column":8,"offset":3304},"end":{"line":147,"column":14,"offset":3310}}}],"position":{"start":{"line":147,"column":8,"offset":3304},"end":{"line":147,"column":14,"offset":3310}}},"children":"self"}}],"를 비소유 참조로 캡처하여 참조 사이클을 방지하고 있습니다."]}],"\n",["$","h3",null,{"id":"500bd03d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4.3 객체의 생명주기 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 대부분의 경우 자동으로 메모리를 관리하지만, 개발자는 여전히 객체의 생명주기를 명확히 이해하고 관리해야 합니다. 특히, 다중 스레드 환경에서는 객체의 참조 카운트가 예상치 못하게 변경될 수 있으므로 주의해야 합니다."}],"\n",["$","h2",null,{"id":"f8047afc","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. ARC의 한계와 주의사항"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 강력한 메모리 관리 시스템이지만, 모든 메모리 문제를 자동으로 해결해 주지는 않습니다. 다음과 같은 한계와 주의사항이 있습니다."}],"\n",["$","h3",null,{"id":"acdafa97","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"5.1 비순환 참조 문제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 순환 참조를 자동으로 감지하지 못합니다. 따라서 개발자가 직접 약한 참조나 비소유 참조를 사용하여 순환 참조를 방지해야 합니다."}],"\n",["$","h3",null,{"id":"c5089cb8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"5.2 대규모 객체 그래프"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"대규모 객체 그래프에서는 객체의 참조 카운트를 추적하는 데 시간이 걸릴 수 있습니다. 이는 성능 문제를 일으킬 수 있으며, 이를 최소화하기 위해 객체의 생명주기를 명확히 관리해야 합니다."}],"\n",["$","h3",null,{"id":"c751d09e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"5.3 멀티 스레드 환경"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"멀티 스레드 환경에서는 객체의 참조 카운트가 예기치 않게 변경될 수 있습니다. 이를 방지하기 위해 동기화 메커니즘을 사용하거나, 스레드 안전한 코드 작성이 필요합니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 iOS 개발에서 메모리 관리의 복잡성을 줄여주고, 코드의 안정성과 유지보수성을 높이는 중요한 기술입니다. ARC를 효과적으로 활용하면 메모리 누수를 방지하고, 성능을 최적화할 수 있습니다. 그러나 참조 사이클 방지, 객체 생명주기 관리 등 주의해야 할 점도 많습니다. 실무에서 ARC를 잘 활용하여 더욱 안전하고 효율적인 iOS 애플리케이션을 개발해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"iOS에서 ARC(Automatic Reference Counting)는 실무에서 어떤 의미일까?","toc":[{"tagName":"h1","title":"iOS에서 ARC는 실무에서 어떤 의미일까?","id":"091f31b3"},{"tagName":"h2","title":"1. ARC의 기본 개념","id":"d4bc1e97"},{"tagName":"h2","title":"2. ARC의 작동 원리","id":"f8ac4db2"},{"tagName":"h2","title":"3. ARC의 실무에서의 의미","id":"58525664"},{"tagName":"h3","title":"3.1 메모리 누수 방지","id":"f28fb8e5"},{"tagName":"h3","title":"3.2 코드의 간결성과 유지보수성","id":"4aebb4e6"},{"tagName":"h3","title":"3.3 성능 최적화","id":"f5db1b36"},{"tagName":"h2","title":"4. 실무에서의 ARC 활용","id":"d2029d7f"},{"tagName":"h3","title":"4.1 참조 사이클 방지","id":"b95511e6"},{"tagName":"h3","title":"4.2 캡처 리스트","id":"954980f2"},{"tagName":"h3","title":"4.3 객체의 생명주기 관리","id":"500bd03d"},{"tagName":"h2","title":"5. ARC의 한계와 주의사항","id":"f8047afc"},{"tagName":"h3","title":"5.1 비순환 참조 문제","id":"acdafa97"},{"tagName":"h3","title":"5.2 대규모 객체 그래프","id":"c5089cb8"},{"tagName":"h3","title":"5.3 멀티 스레드 환경","id":"c751d09e"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
