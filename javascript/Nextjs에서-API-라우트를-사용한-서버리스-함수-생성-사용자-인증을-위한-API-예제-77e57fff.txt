1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nextjs%EC%97%90%EC%84%9C-API-%EB%9D%BC%EC%9A%B0%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D%EC%9D%84-%EC%9C%84%ED%95%9C-API-%EC%98%88%EC%A0%9C-77e57fff","d"],{"children":["__PAGE__?{\"slug\":\"Nextjs에서-API-라우트를-사용한-서버리스-함수-생성-사용자-인증을-위한-API-예제-77e57fff\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nextjs%EC%97%90%EC%84%9C-API-%EB%9D%BC%EC%9A%B0%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D%EC%9D%84-%EC%9C%84%ED%95%9C-API-%EC%98%88%EC%A0%9C-77e57fff","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nextjs에서-API-라우트를-사용한-서버리스-함수-생성-사용자-인증을-위한-API-예제-77e57fff\"}"},"styles":[]}],"segment":["slug","Nextjs%EC%97%90%EC%84%9C-API-%EB%9D%BC%EC%9A%B0%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D%EC%9D%84-%EC%9C%84%ED%95%9C-API-%EC%98%88%EC%A0%9C-77e57fff","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Next.js에서 API 라우트를 사용하여 서버리스 함수를 생성하고, 사용자 인증을 위한 API 예제를 구현하는 방법을 설명합니다. Next.js의 강력한 기능을 활용해 백엔드와 프론트엔드를 쉽게 결합할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Next.js,API Routes,Serverless Functions,User Authentication"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nextjs%EC%97%90%EC%84%9C-API-%EB%9D%BC%EC%9A%B0%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D%EC%9D%84-%EC%9C%84%ED%95%9C-API-%EC%98%88%EC%A0%9C-77e57fff"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Next.js에서 API 라우트를 사용하여 서버리스 함수를 생성하고, 사용자 인증을 위한 API 예제를 구현하는 방법을 설명합니다. Next.js의 강력한 기능을 활용해 백엔드와 프론트엔드를 쉽게 결합할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nextjs%EC%97%90%EC%84%9C-API-%EB%9D%BC%EC%9A%B0%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%84%9C%EB%B2%84%EB%A6%AC%EC%8A%A4-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D%EC%9D%84-%EC%9C%84%ED%95%9C-API-%EC%98%88%EC%A0%9C-77e57fff"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Next.js에서 API 라우트를 사용하여 서버리스 함수를 생성하고, 사용자 인증을 위한 API 예제를 구현하는 방법을 설명합니다. Next.js의 강력한 기능을 활용해 백엔드와 프론트엔드를 쉽게 결합할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-06"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"645f540c","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Next.js는 프론트엔드와 백엔드의 경계를 허물어주는 강력한 프레임워크입니다. 이번 글에서는 Next.js의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"API Routes","position":{"start":{"line":4,"column":63,"offset":119},"end":{"line":4,"column":75,"offset":131}}}],"position":{"start":{"line":4,"column":63,"offset":119},"end":{"line":4,"column":75,"offset":131}}},"children":"API Routes"}}],"를 사용하여 서버리스 함수를 생성하고, 사용자 인증을 위한 간단한 API 예제를 구현해보겠습니다."]}],"\n",["$","h2",null,{"id":"74482cc3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"API Routes란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Next.js에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"API Routes","position":{"start":{"line":8,"column":11,"offset":214},"end":{"line":8,"column":23,"offset":226}}}],"position":{"start":{"line":8,"column":11,"offset":214},"end":{"line":8,"column":23,"offset":226}}},"children":"API Routes"}}],"는 파일 기반 라우팅 시스템을 통해 백엔드 로직을 구현할 수 있도록 해줍니다. 이 라우트는 서버리스 함수 형태로 동작하며, 필요에 따라 다양한 HTTP 메서드(GET, POST, PUT, DELETE 등)를 처리할 수 있습니다. 이는 서버리스 프레임워크 특유의 확장성과 성능 덕분에 매우 효율적입니다."]}],"\n",["$","h3",null,{"id":"ba8391f4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"API Routes 생성 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["API Route를 생성하기 위해서는 Next.js 프로젝트의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pages/api","position":{"start":{"line":12,"column":36,"offset":453},"end":{"line":12,"column":47,"offset":464}}}],"position":{"start":{"line":12,"column":36,"offset":453},"end":{"line":12,"column":47,"offset":464}}},"children":"pages/api"}}]," 디렉토리 아래에 파일을 추가하면 됩니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pages/api/login.js","position":{"start":{"line":12,"column":78,"offset":495},"end":{"line":12,"column":98,"offset":515}}}],"position":{"start":{"line":12,"column":78,"offset":495},"end":{"line":12,"column":98,"offset":515}}},"children":"pages/api/login.js"}}]," 파일을 생성해봅시다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// pages/api/login.js\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    const { username, password } = req.body;\n\n    // 여기서는 간단히 하드코딩된 사용자 데이터로 인증을 합니다\n    if (username === 'user' && password === 'pass') {\n      res.status(200).json({ success: true, message: 'Logged in successfully!' });\n    } else {\n      res.status(401).json({ success: false, message: 'Invalid credentials' });\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":529},"end":{"line":33,"column":4,"offset":1170}}},"children":"// pages/api/login.js\nimport { NextApiRequest, NextApiResponse } from 'next';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    const { username, password } = req.body;\n\n    // 여기서는 간단히 하드코딩된 사용자 데이터로 인증을 합니다\n    if (username === 'user' && password === 'pass') {\n      res.status(200).json({ success: true, message: 'Logged in successfully!' });\n    } else {\n      res.status(401).json({ success: false, message: 'Invalid credentials' });\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 단순한 로그인 처리용 API를 구현합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"POST","position":{"start":{"line":35,"column":31,"offset":1202},"end":{"line":35,"column":37,"offset":1208}}}],"position":{"start":{"line":35,"column":31,"offset":1202},"end":{"line":35,"column":37,"offset":1208}}},"children":"POST"}}]," 요청을 받아서 사용자 인증 정보를 확인한 뒤, 인증이 성공하면 성공 메시지를, 실패하면 에러 메시지를 반환합니다."]}],"\n",["$","h2",null,{"id":"944332da","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"사용자 인증 API 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"보다 복잡한 시나리오를 고려해 좀 더 현실적인 사용자 인증 API를 구현해봅시다. 이번에는 JWT(JSON Web Token)를 사용하여 사용자 인증을 구현합니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"jsonwebtoken","position":{"start":{"line":41,"column":4,"offset":1390},"end":{"line":41,"column":18,"offset":1404}}}],"position":{"start":{"line":41,"column":4,"offset":1390},"end":{"line":41,"column":18,"offset":1404}}},"children":"jsonwebtoken"}}]," 패키지를 설치해야 합니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install jsonwebtoken\n"}],"position":{"start":{"line":43,"column":1,"offset":1421},"end":{"line":45,"column":4,"offset":1457}}},"children":"npm install jsonwebtoken\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["그 다음으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pages/api/login.js","position":{"start":{"line":47,"column":8,"offset":1466},"end":{"line":47,"column":28,"offset":1486}}}],"position":{"start":{"line":47,"column":8,"offset":1466},"end":{"line":47,"column":28,"offset":1486}}},"children":"pages/api/login.js"}}]," 파일을 다음과 같이 수정합니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// pages/api/login.js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport jwt from 'jsonwebtoken';\n\nconst SECRET_KEY = 'your-secret-key'; // 실제 의미 있는 비밀 키를 사용하세요\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    const { username, password } = req.body;\n\n    // 하드코딩된 사용자 데이터를 사용한 인증\n    if (username === 'user' && password === 'pass') {\n      const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });\n      res.status(200).json({ success: true, token });\n    } else {\n      res.status(401).json({ success: false, message: 'Invalid credentials' });\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1506},"end":{"line":72,"column":4,"offset":2280}}},"children":"// pages/api/login.js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport jwt from 'jsonwebtoken';\n\nconst SECRET_KEY = 'your-secret-key'; // 실제 의미 있는 비밀 키를 사용하세요\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'POST') {\n    const { username, password } = req.body;\n\n    // 하드코딩된 사용자 데이터를 사용한 인증\n    if (username === 'user' && password === 'pass') {\n      const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: '1h' });\n      res.status(200).json({ success: true, token });\n    } else {\n      res.status(401).json({ success: false, message: 'Invalid credentials' });\n    }\n  } else {\n    res.setHeader('Allow', ['POST']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 코드는 로그인 요청이 성공하면 JWT 토큰을 생성하여 클라이언트에 반환합니다. 이 토큰은 이후의 요청에서 사용자를 인증하는 데 사용될 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["JWT 토큰을 이용한 인증 API를 추가해봅시다. 새로운 파일 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pages/api/authenticate.js","position":{"start":{"line":76,"column":36,"offset":2403},"end":{"line":76,"column":63,"offset":2430}}}],"position":{"start":{"line":76,"column":36,"offset":2403},"end":{"line":76,"column":63,"offset":2430}}},"children":"pages/api/authenticate.js"}}],"를 생성하고 다음과 같이 작성합니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// pages/api/authenticate.js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport jwt from 'jsonwebtoken';\n\nconst SECRET_KEY = 'your-secret-key';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'GET') {\n    const token = req.headers.authorization?.split(' ')[1]; // Bearer 토큰에서 값 추출\n\n    if (!token) {\n      res.status(401).json({ success: false, message: 'Token not provided' });\n      return;\n    }\n\n    try {\n      const decoded = jwt.verify(token, SECRET_KEY);\n      res.status(200).json({ success: true, data: decoded });\n    } catch (error) {\n      res.status(401).json({ success: false, message: 'Invalid token' });\n    }\n  } else {\n    res.setHeader('Allow', ['GET']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"}],"position":{"start":{"line":78,"column":1,"offset":2452},"end":{"line":105,"column":4,"offset":3274}}},"children":"// pages/api/authenticate.js\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport jwt from 'jsonwebtoken';\n\nconst SECRET_KEY = 'your-secret-key';\n\nexport default function handler(req: NextApiRequest, res: NextApiResponse) {\n  if (req.method === 'GET') {\n    const token = req.headers.authorization?.split(' ')[1]; // Bearer 토큰에서 값 추출\n\n    if (!token) {\n      res.status(401).json({ success: false, message: 'Token not provided' });\n      return;\n    }\n\n    try {\n      const decoded = jwt.verify(token, SECRET_KEY);\n      res.status(200).json({ success: true, data: decoded });\n    } catch (error) {\n      res.status(401).json({ success: false, message: 'Invalid token' });\n    }\n  } else {\n    res.setHeader('Allow', ['GET']);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 코드에서는 HTTP 요청의 헤더에서 JWT 토큰을 받아 이를 검증합니다. 토큰이 유효하지 않으면 에러 메시지를 반환하고, 유효하다면 토큰에서 디코딩된 정보를 반환합니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Next.js의 API Routes를 사용하면 프론트엔드와 백엔드의 경계를 뛰어넘어 유연하게 서버리스 애플리케이션을 구축할 수 있습니다. 이번 예제에서는 기본적인 사용자 인증 시스템을 구현해봤습니다. 실제 프로젝트에서는 데이터베이스 연동, 암호화 처리, 세션 관리 등의 추가 기능을 고려해야 합니다. Next.js의 고유한 특성을 잘 활용하여 효과적인 웹 애플리케이션을 개발해보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제.","toc":[{"tagName":"h1","title":"Next.js에서 API 라우트를 사용한 서버리스 함수 생성: 사용자 인증을 위한 API 예제","id":"645f540c"},{"tagName":"h2","title":"API Routes란?","id":"74482cc3"},{"tagName":"h3","title":"API Routes 생성 방법","id":"ba8391f4"},{"tagName":"h2","title":"사용자 인증 API 구현하기","id":"944332da"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
