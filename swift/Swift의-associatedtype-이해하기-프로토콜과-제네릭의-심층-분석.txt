1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%9D%98-associatedtype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D","d"],{"children":["__PAGE__?{\"slug\":\"Swift의-associatedtype-이해하기-프로토콜과-제네릭의-심층-분석\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%9D%98-associatedtype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift의-associatedtype-이해하기-프로토콜과-제네릭의-심층-분석\"}"},"styles":[]}],"segment":["slug","Swift%EC%9D%98-associatedtype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift는 애플의 강력한 프로그래밍 언어로, 우아함, 단순함, 성능으로 잘 알려져 있습니다. 이 언어의 핵심 강점 중 하나는 프로토콜과 제네릭과 같은 고급 타입 시스템에 있습니다."}],["$","meta","3",{"name":"keywords","content":"swift,기본문법"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%9D%98-associatedtype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift는 애플의 강력한 프로그래밍 언어로, 우아함, 단순함, 성능으로 잘 알려져 있습니다. 이 언어의 핵심 강점 중 하나는 프로토콜과 제네릭과 같은 고급 타입 시스템에 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%9D%98-associatedtype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EA%B3%BC-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%98-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift는 애플의 강력한 프로그래밍 언어로, 우아함, 단순함, 성능으로 잘 알려져 있습니다. 이 언어의 핵심 강점 중 하나는 프로토콜과 제네릭과 같은 고급 타입 시스템에 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-03"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"58abbd72","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift는 애플의 강력한 프로그래밍 언어로, 우아함, 단순함, 성능으로 잘 알려져 있습니다. 이 언어의 핵심 강점 중 하나는 프로토콜과 제네릭과 같은 고급 타입 시스템에 있습니다. 이러한 영역 내에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":4,"column":114,"offset":163},"end":{"line":4,"column":130,"offset":179}}}],"position":{"start":{"line":4,"column":114,"offset":163},"end":{"line":4,"column":130,"offset":179}}},"children":"associatedtype"}}]," 키워드는 특히 연관된 타입이 있는 프로토콜을 작업할 때 중요한 역할을 합니다. 이 포괄적인 가이드에서는 Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":4,"column":196,"offset":245},"end":{"line":4,"column":212,"offset":261}}}],"position":{"start":{"line":4,"column":196,"offset":245},"end":{"line":4,"column":212,"offset":261}}},"children":"associatedtype"}}]," 개념을 탐구하고 이를 사용하여 코드의 유연성과 재사용성을 극대화하는 방법을 알아보겠습니다."]}],"\n",["$","h3",null,{"id":"5a93c516","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"associatedtype란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":8,"column":1,"offset":341},"end":{"line":8,"column":17,"offset":357}}}],"position":{"start":{"line":8,"column":1,"offset":341},"end":{"line":8,"column":17,"offset":357}}},"children":"associatedtype"}}],"은 프로토콜에서 사용되는 특별한 키워드로, 프로토콜이 특정 타입과 연관되어야 할 필요가 있을 때 사용됩니다. 이는 프로토콜이 제네릭 프로그래밍의 유연성을 유지하면서도 특정 타입에 대한 요구 사항을 지정할 수 있게 합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["예를 들어, Swift 표준 라이브러리의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"IteratorProtocol","position":{"start":{"line":10,"column":24,"offset":505},"end":{"line":10,"column":42,"offset":523}}}],"position":{"start":{"line":10,"column":24,"offset":505},"end":{"line":10,"column":42,"offset":523}}},"children":"IteratorProtocol"}}],"을 살펴보면, 이 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":10,"column":58,"offset":539},"end":{"line":10,"column":74,"offset":555}}}],"position":{"start":{"line":10,"column":58,"offset":539},"end":{"line":10,"column":74,"offset":555}}},"children":"associatedtype"}}],"을 사용하여 연관된 타입을 정의합니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol IteratorProtocol {\n    associatedtype Element\n    func next() -> Element?\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":578},"end":{"line":17,"column":4,"offset":675}}},"children":"protocol IteratorProtocol {\n    associatedtype Element\n    func next() -> Element?\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":19,"column":5,"offset":681},"end":{"line":19,"column":14,"offset":690}}}],"position":{"start":{"line":19,"column":5,"offset":681},"end":{"line":19,"column":14,"offset":690}}},"children":"Element"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":19,"column":16,"offset":692},"end":{"line":19,"column":32,"offset":708}}}],"position":{"start":{"line":19,"column":16,"offset":692},"end":{"line":19,"column":32,"offset":708}}},"children":"associatedtype"}}],"으로 정의된 연관된 타입입니다. 이 프로토콜을 채택하는 모든 타입은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":19,"column":70,"offset":746},"end":{"line":19,"column":79,"offset":755}}}],"position":{"start":{"line":19,"column":70,"offset":746},"end":{"line":19,"column":79,"offset":755}}},"children":"Element"}}],"에 대한 구체적인 타입을 제공해야 합니다."]}],"\n",["$","h3",null,{"id":"c76e388d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"associatedtype의 기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["프로토콜에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":23,"column":7,"offset":814},"end":{"line":23,"column":23,"offset":830}}}],"position":{"start":{"line":23,"column":7,"offset":814},"end":{"line":23,"column":23,"offset":830}}},"children":"associatedtype"}}],"을 정의하고 이를 준수하는 방법을 간단한 예제로 살펴보겠습니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":23,"column":63,"offset":870},"end":{"line":23,"column":74,"offset":881}}}],"position":{"start":{"line":23,"column":63,"offset":870},"end":{"line":23,"column":74,"offset":881}}},"children":"Container"}}],"라는 프로토콜을 정의한 예제입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Container {\n    associatedtype Item\n    var count: Int { get }\n    func append(_ item: Item)\n    func item(at index: Int) -> Item\n}\n\nstruct IntStack: Container {\n    var items = [Int]()\n\n    var count: Int {\n        return items.count\n    }\n\n    func append(_ item: Int) {\n        items.append(item)\n    }\n\n    func item(at index: Int) -> Int {\n        return items[index]\n    }\n}\n"}],"position":{"start":{"line":25,"column":1,"offset":902},"end":{"line":48,"column":4,"offset":1304}}},"children":"protocol Container {\n    associatedtype Item\n    var count: Int { get }\n    func append(_ item: Item)\n    func item(at index: Int) -> Item\n}\n\nstruct IntStack: Container {\n    var items = [Int]()\n\n    var count: Int {\n        return items.count\n    }\n\n    func append(_ item: Int) {\n        items.append(item)\n    }\n\n    func item(at index: Int) -> Int {\n        return items[index]\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":50,"column":8,"offset":1313},"end":{"line":50,"column":19,"offset":1324}}}],"position":{"start":{"line":50,"column":8,"offset":1313},"end":{"line":50,"column":19,"offset":1324}}},"children":"Container"}}]," 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":50,"column":26,"offset":1331},"end":{"line":50,"column":42,"offset":1347}}}],"position":{"start":{"line":50,"column":26,"offset":1331},"end":{"line":50,"column":42,"offset":1347}}},"children":"associatedtype"}}],"으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":50,"column":45,"offset":1350},"end":{"line":50,"column":51,"offset":1356}}}],"position":{"start":{"line":50,"column":45,"offset":1350},"end":{"line":50,"column":51,"offset":1356}}},"children":"Item"}}],"을 정의합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"IntStack","position":{"start":{"line":50,"column":60,"offset":1365},"end":{"line":50,"column":70,"offset":1375}}}],"position":{"start":{"line":50,"column":60,"offset":1365},"end":{"line":50,"column":70,"offset":1375}}},"children":"IntStack"}}]," 구조체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":50,"column":76,"offset":1381},"end":{"line":50,"column":87,"offset":1392}}}],"position":{"start":{"line":50,"column":76,"offset":1381},"end":{"line":50,"column":87,"offset":1392}}},"children":"Container"}}]," 프로토콜을 채택하고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":50,"column":99,"offset":1404},"end":{"line":50,"column":105,"offset":1410}}}],"position":{"start":{"line":50,"column":99,"offset":1404},"end":{"line":50,"column":105,"offset":1410}}},"children":"Item"}}]," 타입을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Int","position":{"start":{"line":50,"column":110,"offset":1415},"end":{"line":50,"column":115,"offset":1420}}}],"position":{"start":{"line":50,"column":110,"offset":1415},"end":{"line":50,"column":115,"offset":1420}}},"children":"Int"}}],"로 지정하여 요구 사항을 충족합니다."]}],"\n",["$","h3",null,{"id":"0d73649c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"associatedtype의 유연성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":54,"column":1,"offset":1467},"end":{"line":54,"column":17,"offset":1483}}}],"position":{"start":{"line":54,"column":1,"offset":1467},"end":{"line":54,"column":17,"offset":1483}}},"children":"associatedtype"}}],"을 사용하면 프로토콜의 타입 요구 사항을 구체화하지 않고도 다양한 타입과 작업할 수 있습니다. 이는 매우 유연한 코드를 작성할 수 있게 해줍니다. 예를 들어, 제네릭 타입과 함께 사용할 수 있습니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Stack<Element>: Container {\n    var items = [Element]()\n\n    var count: Int {\n        return items.count\n    }\n\n    func append(_ item: Element) {\n        items.append(item)\n    }\n\n    func item(at index: Int) -> Element {\n        return items[index]\n    }\n}\n"}],"position":{"start":{"line":56,"column":1,"offset":1596},"end":{"line":72,"column":4,"offset":1874}}},"children":"struct Stack<Element>: Container {\n    var items = [Element]()\n\n    var count: Int {\n        return items.count\n    }\n\n    func append(_ item: Element) {\n        items.append(item)\n    }\n\n    func item(at index: Int) -> Element {\n        return items[index]\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Stack","position":{"start":{"line":74,"column":8,"offset":1883},"end":{"line":74,"column":15,"offset":1890}}}],"position":{"start":{"line":74,"column":8,"offset":1883},"end":{"line":74,"column":15,"offset":1890}}},"children":"Stack"}}],"은 제네릭 타입 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":74,"column":24,"offset":1899},"end":{"line":74,"column":33,"offset":1908}}}],"position":{"start":{"line":74,"column":24,"offset":1899},"end":{"line":74,"column":33,"offset":1908}}},"children":"Element"}}],"를 사용하고, 이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":74,"column":43,"offset":1918},"end":{"line":74,"column":52,"offset":1927}}}],"position":{"start":{"line":74,"column":43,"offset":1918},"end":{"line":74,"column":52,"offset":1927}}},"children":"Element"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":74,"column":54,"offset":1929},"end":{"line":74,"column":65,"offset":1940}}}],"position":{"start":{"line":74,"column":54,"offset":1929},"end":{"line":74,"column":65,"offset":1940}}},"children":"Container"}}]," 프로토콜의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":74,"column":72,"offset":1947},"end":{"line":74,"column":78,"offset":1953}}}],"position":{"start":{"line":74,"column":72,"offset":1947},"end":{"line":74,"column":78,"offset":1953}}},"children":"Item"}}]," 타입과 연결됩니다. 이를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Stack","position":{"start":{"line":74,"column":96,"offset":1971},"end":{"line":74,"column":103,"offset":1978}}}],"position":{"start":{"line":74,"column":96,"offset":1971},"end":{"line":74,"column":103,"offset":1978}}},"children":"Stack"}}],"은 다양한 타입의 요소를 저장할 수 있습니다."]}],"\n",["$","h3",null,{"id":"f69798cb","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"associatedtype과 타입 제약"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":78,"column":1,"offset":2032},"end":{"line":78,"column":17,"offset":2048}}}],"position":{"start":{"line":78,"column":1,"offset":2032},"end":{"line":78,"column":17,"offset":2048}}},"children":"associatedtype"}}],"을 정의할 때, 해당 타입이 특정 프로토콜을 준수해야 한다는 제약을 추가할 수 있습니다. 이는 프로토콜의 타입 요구 사항을 더 구체적으로 정의하는 데 유용합니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":78,"column":115,"offset":2146},"end":{"line":78,"column":126,"offset":2157}}}],"position":{"start":{"line":78,"column":115,"offset":2146},"end":{"line":78,"column":126,"offset":2157}}},"children":"Equatable"}}]," 프로토콜을 준수해야 하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":78,"column":141,"offset":2172},"end":{"line":78,"column":157,"offset":2188}}}],"position":{"start":{"line":78,"column":141,"offset":2172},"end":{"line":78,"column":157,"offset":2188}}},"children":"associatedtype"}}],"을 정의할 수 있습니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol ComparableContainer {\n    associatedtype Item: Equatable\n    var count: Int { get }\n    func append(_ item: Item)\n    func item(at index: Int) -> Item\n}\n"}],"position":{"start":{"line":80,"column":1,"offset":2203},"end":{"line":87,"column":4,"offset":2377}}},"children":"protocol ComparableContainer {\n    associatedtype Item: Equatable\n    var count: Int { get }\n    func append(_ item: Item)\n    func item(at index: Int) -> Item\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComparableContainer","position":{"start":{"line":89,"column":8,"offset":2386},"end":{"line":89,"column":29,"offset":2407}}}],"position":{"start":{"line":89,"column":8,"offset":2386},"end":{"line":89,"column":29,"offset":2407}}},"children":"ComparableContainer"}}]," 프로토콜을 채택하는 모든 타입은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":89,"column":48,"offset":2426},"end":{"line":89,"column":59,"offset":2437}}}],"position":{"start":{"line":89,"column":48,"offset":2426},"end":{"line":89,"column":59,"offset":2437}}},"children":"Equatable"}}]," 프로토콜을 준수하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":89,"column":71,"offset":2449},"end":{"line":89,"column":77,"offset":2455}}}],"position":{"start":{"line":89,"column":71,"offset":2449},"end":{"line":89,"column":77,"offset":2455}}},"children":"Item"}}]," 타입을 제공해야 합니다."]}],"\n",["$","h3",null,{"id":"a7820967","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"현실 세계의 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["현실 세계에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":93,"column":9,"offset":2494},"end":{"line":93,"column":25,"offset":2510}}}],"position":{"start":{"line":93,"column":9,"offset":2494},"end":{"line":93,"column":25,"offset":2510}}},"children":"associatedtype"}}],"을 사용하는 예제로, 데이터를 필터링하는 기능을 제공하는 프로토콜을 생각해볼 수 있습니다. 예를 들어, 컬렉션의 요소를 특정 조건에 따라 필터링하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Filterable","position":{"start":{"line":93,"column":108,"offset":2593},"end":{"line":93,"column":120,"offset":2605}}}],"position":{"start":{"line":93,"column":108,"offset":2593},"end":{"line":93,"column":120,"offset":2605}}},"children":"Filterable"}}]," 프로토콜을 정의해보겠습니다:"]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Filterable {\n    associatedtype Element\n    func filter(_ isIncluded: (Element) -> Bool) -> [Element]\n}\n\nstruct NumberCollection: Filterable {\n    var numbers: [Int]\n\n    func filter(_ isIncluded: (Int) -> Bool) -> [Int] {\n        return numbers.filter(isIncluded)\n    }\n}\n"}],"position":{"start":{"line":95,"column":1,"offset":2623},"end":{"line":108,"column":4,"offset":2917}}},"children":"protocol Filterable {\n    associatedtype Element\n    func filter(_ isIncluded: (Element) -> Bool) -> [Element]\n}\n\nstruct NumberCollection: Filterable {\n    var numbers: [Int]\n\n    func filter(_ isIncluded: (Int) -> Bool) -> [Int] {\n        return numbers.filter(isIncluded)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Filterable","position":{"start":{"line":110,"column":8,"offset":2926},"end":{"line":110,"column":20,"offset":2938}}}],"position":{"start":{"line":110,"column":8,"offset":2926},"end":{"line":110,"column":20,"offset":2938}}},"children":"Filterable"}}]," 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":110,"column":27,"offset":2945},"end":{"line":110,"column":43,"offset":2961}}}],"position":{"start":{"line":110,"column":27,"offset":2945},"end":{"line":110,"column":43,"offset":2961}}},"children":"associatedtype"}}],"으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":110,"column":46,"offset":2964},"end":{"line":110,"column":55,"offset":2973}}}],"position":{"start":{"line":110,"column":46,"offset":2964},"end":{"line":110,"column":55,"offset":2973}}},"children":"Element"}}],"를 정의하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NumberCollection","position":{"start":{"line":110,"column":63,"offset":2981},"end":{"line":110,"column":81,"offset":2999}}}],"position":{"start":{"line":110,"column":63,"offset":2981},"end":{"line":110,"column":81,"offset":2999}}},"children":"NumberCollection"}}]," 구조체는 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Int","position":{"start":{"line":110,"column":90,"offset":3008},"end":{"line":110,"column":95,"offset":3013}}}],"position":{"start":{"line":110,"column":90,"offset":3008},"end":{"line":110,"column":95,"offset":3013}}},"children":"Int"}}]," 타입으로 구체화하여 필터링 기능을 구현합니다."]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":114,"column":8,"offset":3056},"end":{"line":114,"column":24,"offset":3072}}}],"position":{"start":{"line":114,"column":8,"offset":3056},"end":{"line":114,"column":24,"offset":3072}}},"children":"associatedtype"}}],"은 프로토콜과 제네릭 프로그래밍의 강력한 도구입니다. 이를 통해 코드의 유연성과 재사용성을 극대화할 수 있습니다. 프로토콜의 타입 요구 사항을 추상화하고, 다양한 타입과 함께 작동할 수 있게 하여 더욱 유연하고 강력한 코드를 작성할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":114,"column":162,"offset":3210},"end":{"line":114,"column":178,"offset":3226}}}],"position":{"start":{"line":114,"column":162,"offset":3210},"end":{"line":114,"column":178,"offset":3226}}},"children":"associatedtype"}}],"을 마스터하여 Swift 프로그래밍의 새로운 가능성을 탐구해보세요!"]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석","toc":[{"tagName":"h2","title":"Swift의 associatedtype 이해하기: 프로토콜과 제네릭의 심층 분석","id":"58abbd72"},{"tagName":"h3","title":"associatedtype란 무엇인가?","id":"5a93c516"},{"tagName":"h3","title":"associatedtype의 기본 사용법","id":"c76e388d"},{"tagName":"h3","title":"associatedtype의 유연성","id":"0d73649c"},{"tagName":"h3","title":"associatedtype과 타입 제약","id":"f69798cb"},{"tagName":"h3","title":"현실 세계의 예제","id":"a7820967"},{"tagName":"h3","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
