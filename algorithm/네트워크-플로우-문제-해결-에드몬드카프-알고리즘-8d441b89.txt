1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%94%8C%EB%A1%9C%EC%9A%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%97%90%EB%93%9C%EB%AA%AC%EB%93%9C%EC%B9%B4%ED%94%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8d441b89","d"],{"children":["__PAGE__?{\"slug\":\"네트워크-플로우-문제-해결-에드몬드카프-알고리즘-8d441b89\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%94%8C%EB%A1%9C%EC%9A%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%97%90%EB%93%9C%EB%AA%AC%EB%93%9C%EC%B9%B4%ED%94%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8d441b89","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"네트워크-플로우-문제-해결-에드몬드카프-알고리즘-8d441b89\"}"},"styles":[]}],"segment":["slug","%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%94%8C%EB%A1%9C%EC%9A%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%97%90%EB%93%9C%EB%AA%AC%EB%93%9C%EC%B9%B4%ED%94%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8d441b89","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"에드몬드-카프 알고리즘은 네트워크 플로우 문제를 효율적으로 해결하는 데 사용되는 기본적인 알고리즘입니다. 이 글에서는 에드몬드-카프 알고리즘의 개념, 구현 방법, 그리고 실제 네트워크 문제에서 이를 어떻게 활용할 수 있는지 자세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"네트워크 플로우,알고리즘,에드몬드-카프,최대 유량"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%94%8C%EB%A1%9C%EC%9A%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%97%90%EB%93%9C%EB%AA%AC%EB%93%9C%EC%B9%B4%ED%94%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8d441b89"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"에드몬드-카프 알고리즘은 네트워크 플로우 문제를 효율적으로 해결하는 데 사용되는 기본적인 알고리즘입니다. 이 글에서는 에드몬드-카프 알고리즘의 개념, 구현 방법, 그리고 실제 네트워크 문제에서 이를 어떻게 활용할 수 있는지 자세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%94%8C%EB%A1%9C%EC%9A%B0-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%97%90%EB%93%9C%EB%AA%AC%EB%93%9C%EC%B9%B4%ED%94%84-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-8d441b89"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"에드몬드-카프 알고리즘은 네트워크 플로우 문제를 효율적으로 해결하는 데 사용되는 기본적인 알고리즘입니다. 이 글에서는 에드몬드-카프 알고리즘의 개념, 구현 방법, 그리고 실제 네트워크 문제에서 이를 어떻게 활용할 수 있는지 자세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":63222,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"Image","async":false}
f:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
10:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/defaultBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-17"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"2a8bf846","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘"}],"\n",["$","h2",null,{"id":"476966c5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 플로우 문제는 그래프 이론에서 중요한 문제입니다. 이 문제의 목표는 소스(source) 노드에서 싱크(sink) 노드로 최대 유량(maximum flow)을 찾는 것입니다. 에드몬드-카프 알고리즘은 이러한 문제를 해결하는 데 널리 쓰이는 알고리즘 중 하나로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"폭넓이 우선 탐색(Breadth-First Search, BFS)","position":{"start":{"line":6,"column":151,"offset":190},"end":{"line":6,"column":189,"offset":228}}}],"position":{"start":{"line":6,"column":151,"offset":190},"end":{"line":6,"column":189,"offset":228}}},"children":"폭넓이 우선 탐색(Breadth-First Search, BFS)"}}],"를 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"잔여 용량(residual capacity)","position":{"start":{"line":6,"column":196,"offset":235},"end":{"line":6,"column":222,"offset":261}}}],"position":{"start":{"line":6,"column":196,"offset":235},"end":{"line":6,"column":222,"offset":261}}},"children":"잔여 용량(residual capacity)"}}],"을 찾고 증강 경로를 통해 유량을 최대화합니다."]}],"\n",["$","h2",null,{"id":"4498e210","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"에드몬드-카프 알고리즘 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["에드몬드-카프 알고리즘은 기본적으로 포드-풀커슨 알고리즘의 특수한 형태로 볼 수 있습니다. 포드-풀커슨 방법론은 가능한 경로를 통해 최대 유량을 찾는 전략인데, 에드몬드-카프는 이 경로 탐색을 BFS를 사용하여 수행합니다. BFS를 사용함으로써, 이 알고리즘은 시간 복잡도를 크게 줄일 수 있습니다. 해당 알고리즘의 시간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(Eu^2)","position":{"start":{"line":10,"column":186,"offset":494},"end":{"line":10,"column":195,"offset":503}}}],"position":{"start":{"line":10,"column":186,"offset":494},"end":{"line":10,"column":195,"offset":503}}},"children":"O(Eu^2)"}}],", 여기서 E는 간선의 수, u는 네트워크의 최대 유량을 나타냅니다."]}],"\n",["$","$Le",null,{"className":"w-full h-auto md:my-[40px] my-[30px] rounded-[10px]","width":200,"height":200,"src":"link_to_diagram","alt":"에드몬드-카프 알고리즘의 동작"}],"\n",["$","h2",null,{"id":"afdade94","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"구현 단계"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"에드몬드-카프 알고리즘을 구현하기 위한 주요 단계는 다음과 같습니다."}],"\n",["$","h3",null,{"id":"824573b9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"그래프 초기화"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"각 간선에 대한 유량을 0으로 초기화합니다."}],"\n",["$","li","li-1",{"children":"잔여 용량 그래프를 원본 그래프와 동일하게 설정합니다."}],"\n"]}],"\n",["$","h3",null,{"id":"4a77abd7","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"증강 경로 탐색"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"BFS를 사용하여 소스에서 싱크로가는 증강 경로를 찾습니다. 이때, 잔여 용량이 0보다 큰 간선만 탐색합니다. BFS는 다음과 같은 방식으로 동작합니다."}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":"초기 상태에서 소스를 큐에 넣습니다."}],"\n",["$","li","li-1",{"children":"큐에서 노드를 하나 꺼내어 인접한 노드를 검사합니다. 인접한 노드의 잔여 용량이 0보다 크다면, 해당 노드를 큐에 넣고 경로를 기록합니다."}],"\n",["$","li","li-2",{"children":"싱크를 찾을 때까지 이 과정을 반복합니다."}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"from collections import deque\n\ndef bfs(residual_capacity, source, sink, parent):\n    visited = [False] * len(residual_capacity)\n    queue = deque([source])\n    visited[source] = True\n    \n    while queue:\n        u = queue.popleft()\n\n        for ind, val in enumerate(residual_capacity[u]):\n            if visited[ind] == False and val > 0:\n                queue.append(ind)\n                visited[ind] = True\n                parent[ind] = u\n\n                if ind == sink:\n                    return True\n    return False\n"}],"position":{"start":{"line":31,"column":1,"offset":941},"end":{"line":51,"column":4,"offset":1479}}},"children":"from collections import deque\n\ndef bfs(residual_capacity, source, sink, parent):\n    visited = [False] * len(residual_capacity)\n    queue = deque([source])\n    visited[source] = True\n    \n    while queue:\n        u = queue.popleft()\n\n        for ind, val in enumerate(residual_capacity[u]):\n            if visited[ind] == False and val > 0:\n                queue.append(ind)\n                visited[ind] = True\n                parent[ind] = u\n\n                if ind == sink:\n                    return True\n    return False\n"}}]}],"\n",["$","h3",null,{"id":"d2eabad8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"유량 갱신"}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":"BFS를 통하여 증강 경로를 찾으면 해당 경로의 최소 잔여 용량을 찾습니다."}],"\n",["$","li","li-1",{"children":"찾은 최소 잔여 용량을 사용하여 경로 상의 모든 간선의 유량을 갱신합니다."}],"\n",["$","li","li-2",{"children":"유량을 갱신한 후, 거꾸로 흐르는 역경로를 통해 잔여 용량을 업데이트합니다."}],"\n"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def edmonds_karp(capacity, source, sink):\n    parent = [-1] * len(capacity)\n    max_flow = 0\n    residual_capacity = [list(row) for row in capacity]\n\n    while bfs(residual_capacity, source, sink, parent):\n        path_flow = float('Inf')\n        s = sink\n\n        while s != source:\n            path_flow = min(path_flow, residual_capacity[parent[s]][s])\n            s = parent[s]\n\n        v = sink\n        while v != source:\n            u = parent[v]\n            residual_capacity[u][v] -= path_flow\n            residual_capacity[v][u] += path_flow\n            v = parent[v]\n\n        max_flow += path_flow\n\n    return max_flow\n"}],"position":{"start":{"line":59,"column":1,"offset":1630},"end":{"line":83,"column":4,"offset":2272}}},"children":"def edmonds_karp(capacity, source, sink):\n    parent = [-1] * len(capacity)\n    max_flow = 0\n    residual_capacity = [list(row) for row in capacity]\n\n    while bfs(residual_capacity, source, sink, parent):\n        path_flow = float('Inf')\n        s = sink\n\n        while s != source:\n            path_flow = min(path_flow, residual_capacity[parent[s]][s])\n            s = parent[s]\n\n        v = sink\n        while v != source:\n            u = parent[v]\n            residual_capacity[u][v] -= path_flow\n            residual_capacity[v][u] += path_flow\n            v = parent[v]\n\n        max_flow += path_flow\n\n    return max_flow\n"}}]}],"\n",["$","h2",null,{"id":"027ffd08","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실제 적용 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"에드몬드-카프 알고리즘은 실제 네트워크 플로우 문제에서 광범위하게 응용됩니다. 예를 들어, 전형적인 응용 사례는 다음과 같습니다."}],"\n",["$","h3",null,{"id":"b23650d1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"교통 흐름 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"도시의 도로 네트워크에서 차량의 흐름을 최적화하기 위해 에드몬드-카프 알고리즘을 사용할 수 있습니다. 각 도로의 용량을 설정하고 실제 최대 교통량을 계산하는 방식입니다."}],"\n",["$","h3",null,{"id":"fd3768a0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"네트워크 용량 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"컴퓨터 네트워크에서 데이터 흐름을 최적화할 때도 유용합니다. 네트워크 노드와 링크를 그래프로 모델링하고 데이터를 전송할 최대 용량을 계산합니다."}],"\n",["$","h3",null,{"id":"f60e4dd3","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"최대 매칭 문제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"여러 개의 작업과 여러 개의 작업자를 연결하는 최대 매칭 문제에서 에드몬드-카프 알고리즘을 사용할 수 있습니다. 각 작업과 작업자를 그래프의 노드로, 작업과 작업자 간의 가능성을 간선으로 설정하여 문제를 해결할 수 있습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"에드몬드-카프 알고리즘은 네트워크 플로우 문제를 효율적으로 해결할 수 있는 강력한 도구입니다. BFS를 사용하여 증강 경로를 탐색하고 이를 통해 최대 유량을 계산하는 방식은 다양한 실무 응용 사례에 적합합니다. 이 알고리즘을 이해하고 구현하는 것은 네트워크 플로우 문제를 해결하는 데 큰 도움이 될 것입니다."}]]}]}],["$","$Lf",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L10",null,{"articleTitle":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘","toc":[{"tagName":"h1","title":"네트워크 플로우 문제 해결: 에드몬드-카프 알고리즘","id":"2a8bf846"},{"tagName":"h2","title":"개요","id":"476966c5"},{"tagName":"h2","title":"에드몬드-카프 알고리즘 개념","id":"4498e210"},{"tagName":"h2","title":"구현 단계","id":"afdade94"},{"tagName":"h3","title":"그래프 초기화","id":"824573b9"},{"tagName":"h3","title":"증강 경로 탐색","id":"4a77abd7"},{"tagName":"h3","title":"유량 갱신","id":"d2eabad8"},{"tagName":"h2","title":"실제 적용 사례","id":"027ffd08"},{"tagName":"h3","title":"교통 흐름 최적화","id":"b23650d1"},{"tagName":"h3","title":"네트워크 용량 관리","id":"fd3768a0"},{"tagName":"h3","title":"최대 매칭 문제","id":"f60e4dd3"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
