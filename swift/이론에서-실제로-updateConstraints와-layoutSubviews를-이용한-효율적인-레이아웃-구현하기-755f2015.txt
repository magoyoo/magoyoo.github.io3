1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EC%9D%B4%EB%A1%A0%EC%97%90%EC%84%9C-%EC%8B%A4%EC%A0%9C%EB%A1%9C-updateConstraints%EC%99%80-layoutSubviews%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-755f2015","d"],{"children":["__PAGE__?{\"slug\":\"이론에서-실제로-updateConstraints와-layoutSubviews를-이용한-효율적인-레이아웃-구현하기-755f2015\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EC%9D%B4%EB%A1%A0%EC%97%90%EC%84%9C-%EC%8B%A4%EC%A0%9C%EB%A1%9C-updateConstraints%EC%99%80-layoutSubviews%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-755f2015","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"이론에서-실제로-updateConstraints와-layoutSubviews를-이용한-효율적인-레이아웃-구현하기-755f2015\"}"},"styles":[]}],"segment":["slug","%EC%9D%B4%EB%A1%A0%EC%97%90%EC%84%9C-%EC%8B%A4%EC%A0%9C%EB%A1%9C-updateConstraints%EC%99%80-layoutSubviews%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-755f2015","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift 언어로 동적 레이아웃을 구현할 때 흔히 사용되는 두 가지 메소드인 `updateConstraints`와 `layoutSubviews`를 소개하고, 이 메소드들을 효율적으로 사용하는 방법에 대해 자세히 논합니다. 이를 통해 개발자는 성능이 최적화된 애플리케이션을 만들 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,iOS 개발,레이아웃,최적화"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EC%9D%B4%EB%A1%A0%EC%97%90%EC%84%9C-%EC%8B%A4%EC%A0%9C%EB%A1%9C-updateConstraints%EC%99%80-layoutSubviews%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-755f2015"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift 언어로 동적 레이아웃을 구현할 때 흔히 사용되는 두 가지 메소드인 `updateConstraints`와 `layoutSubviews`를 소개하고, 이 메소드들을 효율적으로 사용하는 방법에 대해 자세히 논합니다. 이를 통해 개발자는 성능이 최적화된 애플리케이션을 만들 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EC%9D%B4%EB%A1%A0%EC%97%90%EC%84%9C-%EC%8B%A4%EC%A0%9C%EB%A1%9C-updateConstraints%EC%99%80-layoutSubviews%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-755f2015"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift 언어로 동적 레이아웃을 구현할 때 흔히 사용되는 두 가지 메소드인 `updateConstraints`와 `layoutSubviews`를 소개하고, 이 메소드들을 효율적으로 사용하는 방법에 대해 자세히 논합니다. 이를 통해 개발자는 성능이 최적화된 애플리케이션을 만들 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"02e50512","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 개발에서 레이아웃 관리는 중요한 요소입니다. 특히 복잡한 유저 인터페이스를 효율적으로 관리한다면 앱 성능에 큰 영향을 미칠 수 있습니다. 이렇게 중요한 레이아웃 작업을 관리하기 위해 Apple은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":4,"column":114,"offset":181},"end":{"line":4,"column":133,"offset":200}}}],"position":{"start":{"line":4,"column":114,"offset":181},"end":{"line":4,"column":133,"offset":200}}},"children":"updateConstraints"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":4,"column":135,"offset":202},"end":{"line":4,"column":151,"offset":218}}}],"position":{"start":{"line":4,"column":135,"offset":202},"end":{"line":4,"column":151,"offset":218}}},"children":"layoutSubviews"}}]," 메소드를 제공합니다. 이 글에서는 이 두 메소드의 기본 개념을 이해하고, 실무에서 효율적으로 활용하는 방법에 대해 설명합니다."]}],"\n",["$","h2",null,{"id":"fee8de76","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"updateConstraints 메소드란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":8,"column":1,"offset":319},"end":{"line":8,"column":20,"offset":338}}}],"position":{"start":{"line":8,"column":1,"offset":319},"end":{"line":8,"column":20,"offset":338}}},"children":"updateConstraints"}}]," 메소드는 뷰가 새로운 제약 조건을 필요로 할 때 호출됩니다. 이 메소드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":8,"column":62,"offset":380},"end":{"line":8,"column":70,"offset":388}}}],"position":{"start":{"line":8,"column":62,"offset":380},"end":{"line":8,"column":70,"offset":388}}},"children":"UIView"}}]," 클래스에서 상속받은 메소드로서, 오토레이아웃을 사용하는 경우 사용됩니다. 주로 뷰의 레이아웃이 변경될 때 호출되어야 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":8,"column":141,"offset":459},"end":{"line":8,"column":160,"offset":478}}}],"position":{"start":{"line":8,"column":141,"offset":459},"end":{"line":8,"column":160,"offset":478}}},"children":"updateConstraints"}}],"는 다음과 같은 상황에서 자주 사용됩니다:"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"뷰의 크기나 위치가 동적으로 변경될 때."}],"\n",["$","li","li-1",{"children":"상태에 따라 제약 조건을 변경해야 할 때."}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 메소드는 다음과 같은 구조로 사용됩니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func updateConstraints() {\n    // 새로운 제약 조건을 추가하거나 기존 제약 조건을 업데이트\n    super.updateConstraints()\n}\n"}],"position":{"start":{"line":15,"column":1,"offset":581},"end":{"line":20,"column":4,"offset":700}}},"children":"override func updateConstraints() {\n    // 새로운 제약 조건을 추가하거나 기존 제약 조건을 업데이트\n    super.updateConstraints()\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 중요한 점은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super.updateConstraints()","position":{"start":{"line":22,"column":12,"offset":713},"end":{"line":22,"column":39,"offset":740}}}],"position":{"start":{"line":22,"column":12,"offset":713},"end":{"line":22,"column":39,"offset":740}}},"children":"super.updateConstraints()"}}],"를 호출하여 부모 클래스의 동작을 유지하는 것입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":22,"column":69,"offset":770},"end":{"line":22,"column":88,"offset":789}}}],"position":{"start":{"line":22,"column":69,"offset":770},"end":{"line":22,"column":88,"offset":789}}},"children":"updateConstraints"}}]," 메소드는 성능 최적화를 위해 한 번만 호출되기 때문에, 필요한 모든 제약 조건 변경을 이 메소드 안에서 처리해야 합니다."]}],"\n",["$","h3",null,{"id":"3c21fd93","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"updateConstraints 사용 예시"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":26,"column":5,"offset":892},"end":{"line":26,"column":24,"offset":911}}}],"position":{"start":{"line":26,"column":5,"offset":892},"end":{"line":26,"column":24,"offset":911}}},"children":"updateConstraints"}}],"를 이용해 버튼의 제약 조건을 동적으로 변경하는 간단한 예시입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class CustomView: UIView {\n    private let button = UIButton()\n    private var isButtonExpanded = false\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        addSubview(button)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        updateConstraints() // 초기 제약 조건 설정\n    }\n\n    private func toggleButtonState() {\n        isButtonExpanded.toggle()\n        setNeedsUpdateConstraints() // 제약 조건 업데이트 요청\n    }\n\n    override func updateConstraints() {\n        if isButtonExpanded {\n            button.widthAnchor.constraint(equalToConstant: 200).isActive = true\n        } else {\n            button.widthAnchor.constraint(equalToConstant: 100).isActive = true\n        }\n        super.updateConstraints()\n    }\n}\n"}],"position":{"start":{"line":28,"column":1,"offset":950},"end":{"line":63,"column":4,"offset":1870}}},"children":"class CustomView: UIView {\n    private let button = UIButton()\n    private var isButtonExpanded = false\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        addSubview(button)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        updateConstraints() // 초기 제약 조건 설정\n    }\n\n    private func toggleButtonState() {\n        isButtonExpanded.toggle()\n        setNeedsUpdateConstraints() // 제약 조건 업데이트 요청\n    }\n\n    override func updateConstraints() {\n        if isButtonExpanded {\n            button.widthAnchor.constraint(equalToConstant: 200).isActive = true\n        } else {\n            button.widthAnchor.constraint(equalToConstant: 100).isActive = true\n        }\n        super.updateConstraints()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setNeedsUpdateConstraints()","position":{"start":{"line":65,"column":5,"offset":1876},"end":{"line":65,"column":34,"offset":1905}}}],"position":{"start":{"line":65,"column":5,"offset":1876},"end":{"line":65,"column":34,"offset":1905}}},"children":"setNeedsUpdateConstraints()"}}]," 메소드를 호출하면, 시스템은 곧 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":65,"column":53,"offset":1924},"end":{"line":65,"column":72,"offset":1943}}}],"position":{"start":{"line":65,"column":53,"offset":1924},"end":{"line":65,"column":72,"offset":1943}}},"children":"updateConstraints"}}]," 메소드를 호출하여 제약 조건을 업데이트합니다. 이렇게 하면 버튼의 상태에 따라 동적으로 레이아웃을 변경할 수 있습니다."]}],"\n",["$","h2",null,{"id":"80c30168","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews 메소드란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":69,"column":1,"offset":2037},"end":{"line":69,"column":17,"offset":2053}}}],"position":{"start":{"line":69,"column":1,"offset":2037},"end":{"line":69,"column":17,"offset":2053}}},"children":"layoutSubviews"}}]," 메소드는 뷰의 서브뷰들이 올바르게 배치되도록 하기 위해 호출됩니다. 이 메소드는 레이아웃 작업을 최적화하기 위해 주로 사용되며, 뷰의 크기와 위치가 변경될 때 호출됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":69,"column":114,"offset":2150},"end":{"line":69,"column":130,"offset":2166}}}],"position":{"start":{"line":69,"column":114,"offset":2150},"end":{"line":69,"column":130,"offset":2166}}},"children":"layoutSubviews"}}],"는 성능을 최적화하기 위해 한 번만 호출됩니다. 이는 뷰 계층 구조를 업데이트하는 데 매우 유용합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":71,"column":1,"offset":2225},"end":{"line":71,"column":17,"offset":2241}}}],"position":{"start":{"line":71,"column":1,"offset":2225},"end":{"line":71,"column":17,"offset":2241}}},"children":"layoutSubviews"}}],"는 다음과 같은 구조로 사용됩니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func layoutSubviews() {\n    super.layoutSubviews()\n    // 서브뷰의 레이아웃을 업데이트\n}\n"}],"position":{"start":{"line":73,"column":1,"offset":2262},"end":{"line":78,"column":4,"offset":2359}}},"children":"override func layoutSubviews() {\n    super.layoutSubviews()\n    // 서브뷰의 레이아웃을 업데이트\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["마찬가지로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super.layoutSubviews()","position":{"start":{"line":80,"column":8,"offset":2368},"end":{"line":80,"column":32,"offset":2392}}}],"position":{"start":{"line":80,"column":8,"offset":2368},"end":{"line":80,"column":32,"offset":2392}}},"children":"super.layoutSubviews()"}}],"를 호출하여 부모 클래스의 동작을 유지해야 합니다."]}],"\n",["$","h3",null,{"id":"e525e25f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"layoutSubviews 사용 예시"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":84,"column":5,"offset":2452},"end":{"line":84,"column":21,"offset":2468}}}],"position":{"start":{"line":84,"column":5,"offset":2452},"end":{"line":84,"column":21,"offset":2468}}},"children":"layoutSubviews"}}],"를 이용해 서브뷰의 위치를 동적으로 변경하는 간단한 예시입니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class CustomView: UIView {\n    private let subview = UIView()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubview()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubview()\n    }\n\n    private func setupSubview() {\n        addSubview(subview)\n        subview.backgroundColor = .red\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        subview.frame = CGRect(x: bounds.width / 4, y: bounds.height / 4, width: bounds.width / 2, height: bounds.height / 2)\n    }\n}\n"}],"position":{"start":{"line":86,"column":1,"offset":2505},"end":{"line":110,"column":4,"offset":3088}}},"children":"class CustomView: UIView {\n    private let subview = UIView()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubview()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubview()\n    }\n\n    private func setupSubview() {\n        addSubview(subview)\n        subview.backgroundColor = .red\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        subview.frame = CGRect(x: bounds.width / 4, y: bounds.height / 4, width: bounds.width / 2, height: bounds.height / 2)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"여기서는 상위 뷰의 크기가 변경됨에 따라 서브뷰의 위치와 크기를 재설정합니다. 이렇게 하면 동적으로 레이아웃을 변경할 수 있습니다."}],"\n",["$","h2",null,{"id":"2a795b9d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"updateConstraints와 layoutSubviews의 차이점과 사용 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 두 메소드는 비슷해 보일 수 있지만, 중요한 차이점이 있습니다:"}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":118,"column":3,"offset":3256},"end":{"line":118,"column":22,"offset":3275}}}],"position":{"start":{"line":118,"column":3,"offset":3256},"end":{"line":118,"column":22,"offset":3275}}},"children":"updateConstraints"}}],": 제약 조건을 업데이트하는 데 사용되며, 주로 오토레이아웃을 사용하는 경우에 활용됩니다."]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":119,"column":3,"offset":3328},"end":{"line":119,"column":19,"offset":3344}}}],"position":{"start":{"line":119,"column":3,"offset":3328},"end":{"line":119,"column":19,"offset":3344}}},"children":"layoutSubviews"}}],": 서브뷰의 프레임을 직접 설정하거나 뷰 계층 구조를 업데이트하는 데 사용됩니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["사용 사례로 보면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":121,"column":12,"offset":3402},"end":{"line":121,"column":31,"offset":3421}}}],"position":{"start":{"line":121,"column":12,"offset":3402},"end":{"line":121,"column":31,"offset":3421}}},"children":"updateConstraints"}}],"는 뷰의 상태에 따라 제약 조건을 동적으로 변경해야 할 때 유용합니다. 반면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":121,"column":74,"offset":3464},"end":{"line":121,"column":90,"offset":3480}}}],"position":{"start":{"line":121,"column":74,"offset":3464},"end":{"line":121,"column":90,"offset":3480}}},"children":"layoutSubviews"}}],"는 서브뷰의 프레임을 직접 설정해야 할 때 더 적합합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"updateConstraints","position":{"start":{"line":125,"column":9,"offset":3529},"end":{"line":125,"column":28,"offset":3548}}}],"position":{"start":{"line":125,"column":9,"offset":3529},"end":{"line":125,"column":28,"offset":3548}}},"children":"updateConstraints"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":125,"column":30,"offset":3550},"end":{"line":125,"column":46,"offset":3566}}}],"position":{"start":{"line":125,"column":30,"offset":3550},"end":{"line":125,"column":46,"offset":3566}}},"children":"layoutSubviews"}}]," 메소드를 잘 활용하면, 성능이 최적화된 동적 레이아웃을 구현할 수 있습니다. 이 두 메소드를 이해하고, 적절한 상황에서 사용하는 것이 중요합니다. 이를 통해 개발자는 효율적이고 반응성이 높은 애플리케이션을 만들 수 있습니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기","toc":[{"tagName":"h1","title":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기","id":"02e50512"},{"tagName":"h2","title":"updateConstraints 메소드란?","id":"fee8de76"},{"tagName":"h3","title":"updateConstraints 사용 예시","id":"3c21fd93"},{"tagName":"h2","title":"layoutSubviews 메소드란?","id":"80c30168"},{"tagName":"h3","title":"layoutSubviews 사용 예시","id":"e525e25f"},{"tagName":"h2","title":"updateConstraints와 layoutSubviews의 차이점과 사용 사례","id":"2a795b9d"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
