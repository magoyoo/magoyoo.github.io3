1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-Async-Await-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%98%81%EC%8B%A0","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-Async-Await-사용법-비동기-프로그래밍의-혁신\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-Async-Await-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%98%81%EC%8B%A0","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-Async-Await-사용법-비동기-프로그래밍의-혁신\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-Async-Await-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%98%81%EC%8B%A0","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift의 async/await 기능을 사용하여 비동기 작업을 간편하게 처리하는 방법을 설명합니다. 네트워킹, 데이터베이스 접근 등 다양한 예제와 함께 비동기 프로그래밍의 장점을 소개합니다."}],["$","meta","3",{"name":"keywords","content":"swift,기본문법"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Async-Await-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%98%81%EC%8B%A0"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift의 async/await 기능을 사용하여 비동기 작업을 간편하게 처리하는 방법을 설명합니다. 네트워킹, 데이터베이스 접근 등 다양한 예제와 함께 비동기 프로그래밍의 장점을 소개합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Async-Await-%EC%82%AC%EC%9A%A9%EB%B2%95-%EB%B9%84%EB%8F%99%EA%B8%B0-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EC%9D%98-%ED%98%81%EC%8B%A0"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift의 async/await 기능을 사용하여 비동기 작업을 간편하게 처리하는 방법을 설명합니다. 네트워킹, 데이터베이스 접근 등 다양한 예제와 함께 비동기 프로그래밍의 장점을 소개합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:T1551,
## Swift에서 Async/Await 사용법: 비동기 프로그래밍의 혁신

Swift 5.5에서는 비동기 작업을 처리하는 새로운 방식인 `async`/`await`를 도입했습니다. 이 기능은 비동기 코드 작성을 더욱 직관적이고 가독성 있게 만들어줍니다. 이 글에서는 `async`/`await`의 기본 개념부터 실용적인 예제까지, Swift에서 비동기 프로그래밍을 효율적으로 처리하는 방법을 자세히 설명합니다.

## 1. Async/Await의 기본 개념

`async`/`await`는 비동기 코드를 작성하는 새로운 방법으로, 기존의 콜백 기반 접근 방식보다 더 명확하고 유지 보수하기 쉬운 코드를 작성할 수 있게 해줍니다. 비동기 함수는 `async` 키워드를 사용하여 정의되며, 비동기 호출은 `await` 키워드를 사용하여 수행됩니다.

### Async 함수 정의

비동기 함수는 `async` 키워드를 사용하여 정의됩니다. 예를 들어, 데이터를 비동기적으로 가져오는 함수를 다음과 같이 정의할 수 있습니다.

```swift
import Foundation

func fetchData(from url: String) async throws -> Data {
    guard let url = URL(string: url) else {
        throw URLError(.badURL)
    }

    let (data, _) = try await URLSession.shared.data(from: url)
    return data
}
```

위 함수는 URL에서 데이터를 비동기적으로 가져오며, `await` 키워드를 사용하여 URLSession의 `data(from:)` 메서드를 호출합니다.

### Await를 사용한 비동기 함수 호출

비동기 함수는 `await` 키워드를 사용하여 호출됩니다. 예를 들어, `fetchData` 함수를 호출하는 코드는 다음과 같습니다.

```swift
Task {
    do {
        let data = try await fetchData(from: "https://example.com")
        print("Data received: \(data)")
    } catch {
        print("Failed to fetch data: \(error)")
    }
}
```

`Task`는 비동기 코드를 실행하는 컨텍스트를 제공합니다.

## 2. Async/Await의 장점

`async`/`await`는 여러 가지 장점을 제공합니다.

- **가독성 향상**: 코드가 동기 코드와 유사하게 보이기 때문에 가독성이 향상됩니다.
- **에러 처리 간소화**: `do`/`try`/`catch`를 사용하여 비동기 함수의 에러를 쉽게 처리할 수 있습니다.
- **콜백 지옥 방지**: 중첩된 콜백 대신 직관적인 방식으로 비동기 작업을 체인화할 수 있습니다.

## 3. 실용적인 예제

### 네트워킹 예제

`async`/`await`를 사용하여 API 호출을 처리하는 예제를 살펴보겠습니다.

```swift
import Foundation

struct Post: Decodable {
    let id: Int
    let title: String
    let body: String
}

func fetchPosts() async throws -> [Post] {
    let url = URL(string: "https://jsonplaceholder.typicode.com/posts")!
    let (data, _) = try await URLSession.shared.data(from: url)
    let posts = try JSONDecoder().decode([Post].self, from: data)
    return posts
}

Task {
    do {
        let posts = try await fetchPosts()
        for post in posts {
            print("Title: \(post.title)")
        }
    } catch {
        print("Failed to fetch posts: \(error)")
    }
}
```

위 코드는 JSONPlaceholder API에서 게시물을 가져와 디코딩한 후, 제목을 출력합니다.

### 데이터베이스 접근 예제

비동기 작업은 데이터베이스 접근에서도 유용합니다.

```swift
import CoreData

func fetchUsers() async throws -> [User] {
    let fetchRequest: NSFetchRequest<User> = User.fetchRequest()
    return try await withCheckedThrowingContinuation { continuation in
        do {
            let users = try context.fetch(fetchRequest)
            continuation.resume(returning: users)
        } catch {
            continuation.resume(throwing: error)
        }
    }
}

Task {
    do {
        let users = try await fetchUsers()
        for user in users {
            print("User: \(user.name)")
        }
    } catch {
        print("Failed to fetch users: \(error)")
    }
}
```

위 코드는 Core Data를 사용하여 비동기적으로 사용자 데이터를 가져옵니다.

## 4. Async/Await와 Combine 사용

Combine 프레임워크와 `async`/`await`를 결합하여 비동기 작업을 처리할 수도 있습니다.

```swift
import Combine

func fetchDataPublisher(from url: String) -> AnyPublisher<Data, URLError> {
    guard let url = URL(string: url) else {
        return Fail(error: URLError(.badURL)).eraseToAnyPublisher()
    }

    return URLSession.shared.dataTaskPublisher(for: url)
        .map(\.data)
        .eraseToAnyPublisher()
}

Task {
    do {
        let data = try await fetchDataPublisher(from: "https://example.com")
            .async()
        print("Data received: \(data)")
    } catch {
        print("Failed to fetch data: \(error)")
    }
}
```

위 코드는 Combine 퍼블리셔를 `async`/`await`와 함께 사용하여 데이터를 비동기적으로 가져옵니다.

## 결론

Swift의 `async`/`await`는 비동기 코드를 더 직관적이고 관리하기 쉽게 만듭니다. 네트워킹, 데이터베이스 접근, Combine과의 통합 등 다양한 시나리오에서 유용하게 사용될 수 있습니다. 이를 통해 더욱 효율적이고 가독성 높은 코드를 작성할 수 있습니다.

더 많은 정보는 [Apple Developer Documentation](https://developer.apple.com/documentation/swift/concurrency)에서 확인할 수 있습니다.
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"45424b71","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 Async/Await 사용법: 비동기 프로그래밍의 혁신"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift 5.5에서는 비동기 작업을 처리하는 새로운 방식인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":4,"column":35,"offset":78},"end":{"line":4,"column":42,"offset":85}}}],"position":{"start":{"line":4,"column":35,"offset":78},"end":{"line":4,"column":42,"offset":85}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":4,"column":43,"offset":86},"end":{"line":4,"column":50,"offset":93}}}],"position":{"start":{"line":4,"column":43,"offset":86},"end":{"line":4,"column":50,"offset":93}}},"children":"await"}}],"를 도입했습니다. 이 기능은 비동기 코드 작성을 더욱 직관적이고 가독성 있게 만들어줍니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":4,"column":108,"offset":151},"end":{"line":4,"column":115,"offset":158}}}],"position":{"start":{"line":4,"column":108,"offset":151},"end":{"line":4,"column":115,"offset":158}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":4,"column":116,"offset":159},"end":{"line":4,"column":123,"offset":166}}}],"position":{"start":{"line":4,"column":116,"offset":159},"end":{"line":4,"column":123,"offset":166}}},"children":"await"}}],"의 기본 개념부터 실용적인 예제까지, Swift에서 비동기 프로그래밍을 효율적으로 처리하는 방법을 자세히 설명합니다."]}],"\n",["$","h2",null,{"id":"91d2d5c1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. Async/Await의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":8,"column":1,"offset":259},"end":{"line":8,"column":8,"offset":266}}}],"position":{"start":{"line":8,"column":1,"offset":259},"end":{"line":8,"column":8,"offset":266}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":8,"column":9,"offset":267},"end":{"line":8,"column":16,"offset":274}}}],"position":{"start":{"line":8,"column":9,"offset":267},"end":{"line":8,"column":16,"offset":274}}},"children":"await"}}],"는 비동기 코드를 작성하는 새로운 방법으로, 기존의 콜백 기반 접근 방식보다 더 명확하고 유지 보수하기 쉬운 코드를 작성할 수 있게 해줍니다. 비동기 함수는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":8,"column":104,"offset":362},"end":{"line":8,"column":111,"offset":369}}}],"position":{"start":{"line":8,"column":104,"offset":362},"end":{"line":8,"column":111,"offset":369}}},"children":"async"}}]," 키워드를 사용하여 정의되며, 비동기 호출은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":8,"column":136,"offset":394},"end":{"line":8,"column":143,"offset":401}}}],"position":{"start":{"line":8,"column":136,"offset":394},"end":{"line":8,"column":143,"offset":401}}},"children":"await"}}]," 키워드를 사용하여 수행됩니다."]}],"\n",["$","h3",null,{"id":"0d0a7d4b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Async 함수 정의"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["비동기 함수는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":12,"column":9,"offset":445},"end":{"line":12,"column":16,"offset":452}}}],"position":{"start":{"line":12,"column":9,"offset":445},"end":{"line":12,"column":16,"offset":452}}},"children":"async"}}]," 키워드를 사용하여 정의됩니다. 예를 들어, 데이터를 비동기적으로 가져오는 함수를 다음과 같이 정의할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nfunc fetchData(from url: String) async throws -> Data {\n    guard let url = URL(string: url) else {\n        throw URLError(.badURL)\n    }\n\n    let (data, _) = try await URLSession.shared.data(from: url)\n    return data\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":518},"end":{"line":25,"column":4,"offset":770}}},"children":"import Foundation\n\nfunc fetchData(from url: String) async throws -> Data {\n    guard let url = URL(string: url) else {\n        throw URLError(.badURL)\n    }\n\n    let (data, _) = try await URLSession.shared.data(from: url)\n    return data\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 함수는 URL에서 데이터를 비동기적으로 가져오며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":27,"column":31,"offset":802},"end":{"line":27,"column":38,"offset":809}}}],"position":{"start":{"line":27,"column":31,"offset":802},"end":{"line":27,"column":38,"offset":809}}},"children":"await"}}]," 키워드를 사용하여 URLSession의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"data(from:)","position":{"start":{"line":27,"column":61,"offset":832},"end":{"line":27,"column":74,"offset":845}}}],"position":{"start":{"line":27,"column":61,"offset":832},"end":{"line":27,"column":74,"offset":845}}},"children":"data(from:)"}}]," 메서드를 호출합니다."]}],"\n",["$","h3",null,{"id":"6167eeb4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Await를 사용한 비동기 함수 호출"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["비동기 함수는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":31,"column":9,"offset":893},"end":{"line":31,"column":16,"offset":900}}}],"position":{"start":{"line":31,"column":9,"offset":893},"end":{"line":31,"column":16,"offset":900}}},"children":"await"}}]," 키워드를 사용하여 호출됩니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":31,"column":41,"offset":925},"end":{"line":31,"column":52,"offset":936}}}],"position":{"start":{"line":31,"column":41,"offset":925},"end":{"line":31,"column":52,"offset":936}}},"children":"fetchData"}}]," 함수를 호출하는 코드는 다음과 같습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"Task {\n    do {\n        let data = try await fetchData(from: \"https://example.com\")\n        print(\"Data received: \\(data)\")\n    } catch {\n        print(\"Failed to fetch data: \\(error)\")\n    }\n}\n"}],"position":{"start":{"line":33,"column":1,"offset":961},"end":{"line":42,"column":4,"offset":1167}}},"children":"Task {\n    do {\n        let data = try await fetchData(from: \"https://example.com\")\n        print(\"Data received: \\(data)\")\n    } catch {\n        print(\"Failed to fetch data: \\(error)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Task","position":{"start":{"line":44,"column":1,"offset":1169},"end":{"line":44,"column":7,"offset":1175}}}],"position":{"start":{"line":44,"column":1,"offset":1169},"end":{"line":44,"column":7,"offset":1175}}},"children":"Task"}}],"는 비동기 코드를 실행하는 컨텍스트를 제공합니다."]}],"\n",["$","h2",null,{"id":"2b12ee02","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. Async/Await의 장점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":48,"column":1,"offset":1227},"end":{"line":48,"column":8,"offset":1234}}}],"position":{"start":{"line":48,"column":1,"offset":1227},"end":{"line":48,"column":8,"offset":1234}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":48,"column":9,"offset":1235},"end":{"line":48,"column":16,"offset":1242}}}],"position":{"start":{"line":48,"column":9,"offset":1235},"end":{"line":48,"column":16,"offset":1242}}},"children":"await"}}],"는 여러 가지 장점을 제공합니다."]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"가독성 향상"}],": 코드가 동기 코드와 유사하게 보이기 때문에 가독성이 향상됩니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"에러 처리 간소화"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"do","position":{"start":{"line":51,"column":18,"offset":1329},"end":{"line":51,"column":22,"offset":1333}}}],"position":{"start":{"line":51,"column":18,"offset":1329},"end":{"line":51,"column":22,"offset":1333}}},"children":"do"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try","position":{"start":{"line":51,"column":23,"offset":1334},"end":{"line":51,"column":28,"offset":1339}}}],"position":{"start":{"line":51,"column":23,"offset":1334},"end":{"line":51,"column":28,"offset":1339}}},"children":"try"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch","position":{"start":{"line":51,"column":29,"offset":1340},"end":{"line":51,"column":36,"offset":1347}}}],"position":{"start":{"line":51,"column":29,"offset":1340},"end":{"line":51,"column":36,"offset":1347}}},"children":"catch"}}],"를 사용하여 비동기 함수의 에러를 쉽게 처리할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"콜백 지옥 방지"}],": 중첩된 콜백 대신 직관적인 방식으로 비동기 작업을 체인화할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"512bf975","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. 실용적인 예제"}],"\n",["$","h3",null,{"id":"d1f65587","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"네트워킹 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":58,"column":1,"offset":1467},"end":{"line":58,"column":8,"offset":1474}}}],"position":{"start":{"line":58,"column":1,"offset":1467},"end":{"line":58,"column":8,"offset":1474}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":58,"column":9,"offset":1475},"end":{"line":58,"column":16,"offset":1482}}}],"position":{"start":{"line":58,"column":9,"offset":1475},"end":{"line":58,"column":16,"offset":1482}}},"children":"await"}}],"를 사용하여 API 호출을 처리하는 예제를 살펴보겠습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nstruct Post: Decodable {\n    let id: Int\n    let title: String\n    let body: String\n}\n\nfunc fetchPosts() async throws -> [Post] {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\")!\n    let (data, _) = try await URLSession.shared.data(from: url)\n    let posts = try JSONDecoder().decode([Post].self, from: data)\n    return posts\n}\n\nTask {\n    do {\n        let posts = try await fetchPosts()\n        for post in posts {\n            print(\"Title: \\(post.title)\")\n        }\n    } catch {\n        print(\"Failed to fetch posts: \\(error)\")\n    }\n}\n"}],"position":{"start":{"line":60,"column":1,"offset":1516},"end":{"line":86,"column":4,"offset":2110}}},"children":"import Foundation\n\nstruct Post: Decodable {\n    let id: Int\n    let title: String\n    let body: String\n}\n\nfunc fetchPosts() async throws -> [Post] {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\")!\n    let (data, _) = try await URLSession.shared.data(from: url)\n    let posts = try JSONDecoder().decode([Post].self, from: data)\n    return posts\n}\n\nTask {\n    do {\n        let posts = try await fetchPosts()\n        for post in posts {\n            print(\"Title: \\(post.title)\")\n        }\n    } catch {\n        print(\"Failed to fetch posts: \\(error)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드는 JSONPlaceholder API에서 게시물을 가져와 디코딩한 후, 제목을 출력합니다."}],"\n",["$","h3",null,{"id":"095edd76","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터베이스 접근 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"비동기 작업은 데이터베이스 접근에서도 유용합니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import CoreData\n\nfunc fetchUsers() async throws -> [User] {\n    let fetchRequest: NSFetchRequest<User> = User.fetchRequest()\n    return try await withCheckedThrowingContinuation { continuation in\n        do {\n            let users = try context.fetch(fetchRequest)\n            continuation.resume(returning: users)\n        } catch {\n            continuation.resume(throwing: error)\n        }\n    }\n}\n\nTask {\n    do {\n        let users = try await fetchUsers()\n        for user in users {\n            print(\"User: \\(user.name)\")\n        }\n    } catch {\n        print(\"Failed to fetch users: \\(error)\")\n    }\n}\n"}],"position":{"start":{"line":94,"column":1,"offset":2216},"end":{"line":119,"column":4,"offset":2837}}},"children":"import CoreData\n\nfunc fetchUsers() async throws -> [User] {\n    let fetchRequest: NSFetchRequest<User> = User.fetchRequest()\n    return try await withCheckedThrowingContinuation { continuation in\n        do {\n            let users = try context.fetch(fetchRequest)\n            continuation.resume(returning: users)\n        } catch {\n            continuation.resume(throwing: error)\n        }\n    }\n}\n\nTask {\n    do {\n        let users = try await fetchUsers()\n        for user in users {\n            print(\"User: \\(user.name)\")\n        }\n    } catch {\n        print(\"Failed to fetch users: \\(error)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드는 Core Data를 사용하여 비동기적으로 사용자 데이터를 가져옵니다."}],"\n",["$","h2",null,{"id":"6f52a5a8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. Async/Await와 Combine 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Combine 프레임워크와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":125,"column":16,"offset":2931},"end":{"line":125,"column":23,"offset":2938}}}],"position":{"start":{"line":125,"column":16,"offset":2931},"end":{"line":125,"column":23,"offset":2938}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":125,"column":24,"offset":2939},"end":{"line":125,"column":31,"offset":2946}}}],"position":{"start":{"line":125,"column":24,"offset":2939},"end":{"line":125,"column":31,"offset":2946}}},"children":"await"}}],"를 결합하여 비동기 작업을 처리할 수도 있습니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\n\nfunc fetchDataPublisher(from url: String) -> AnyPublisher<Data, URLError> {\n    guard let url = URL(string: url) else {\n        return Fail(error: URLError(.badURL)).eraseToAnyPublisher()\n    }\n\n    return URLSession.shared.dataTaskPublisher(for: url)\n        .map(\\.data)\n        .eraseToAnyPublisher()\n}\n\nTask {\n    do {\n        let data = try await fetchDataPublisher(from: \"https://example.com\")\n            .async()\n        print(\"Data received: \\(data)\")\n    } catch {\n        print(\"Failed to fetch data: \\(error)\")\n    }\n}\n"}],"position":{"start":{"line":127,"column":1,"offset":2975},"end":{"line":149,"column":4,"offset":3534}}},"children":"import Combine\n\nfunc fetchDataPublisher(from url: String) -> AnyPublisher<Data, URLError> {\n    guard let url = URL(string: url) else {\n        return Fail(error: URLError(.badURL)).eraseToAnyPublisher()\n    }\n\n    return URLSession.shared.dataTaskPublisher(for: url)\n        .map(\\.data)\n        .eraseToAnyPublisher()\n}\n\nTask {\n    do {\n        let data = try await fetchDataPublisher(from: \"https://example.com\")\n            .async()\n        print(\"Data received: \\(data)\")\n    } catch {\n        print(\"Failed to fetch data: \\(error)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 Combine 퍼블리셔를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":151,"column":21,"offset":3556},"end":{"line":151,"column":28,"offset":3563}}}],"position":{"start":{"line":151,"column":21,"offset":3556},"end":{"line":151,"column":28,"offset":3563}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":151,"column":29,"offset":3564},"end":{"line":151,"column":36,"offset":3571}}}],"position":{"start":{"line":151,"column":29,"offset":3564},"end":{"line":151,"column":36,"offset":3571}}},"children":"await"}}],"와 함께 사용하여 데이터를 비동기적으로 가져옵니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":155,"column":8,"offset":3615},"end":{"line":155,"column":15,"offset":3622}}}],"position":{"start":{"line":155,"column":8,"offset":3615},"end":{"line":155,"column":15,"offset":3622}}},"children":"async"}}],"/",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":155,"column":16,"offset":3623},"end":{"line":155,"column":23,"offset":3630}}}],"position":{"start":{"line":155,"column":16,"offset":3623},"end":{"line":155,"column":23,"offset":3630}}},"children":"await"}}],"는 비동기 코드를 더 직관적이고 관리하기 쉽게 만듭니다. 네트워킹, 데이터베이스 접근, Combine과의 통합 등 다양한 시나리오에서 유용하게 사용될 수 있습니다. 이를 통해 더욱 효율적이고 가독성 높은 코드를 작성할 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["더 많은 정보는 ",["$","$Le",null,{"props":{"href":"https://developer.apple.com/documentation/swift/concurrency","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swift/concurrency"},"children":[{"type":"text","value":"Apple Developer Documentation","position":{"start":{"line":157,"column":11,"offset":3771},"end":{"line":157,"column":40,"offset":3800}}}],"position":{"start":{"line":157,"column":10,"offset":3770},"end":{"line":157,"column":102,"offset":3862}}},"children":"Apple Developer Documentation"},"post":{"title":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!","description":"Swift의 async/await 기능을 사용하여 비동기 작업을 간편하게 처리하는 방법을 설명합니다. 네트워킹, 데이터베이스 접근 등 다양한 예제와 함께 비동기 프로그래밍의 장점을 소개합니다.","date":"2024-05-29T11:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"기본문법","path":"/tags/기본문법","id":"기본문법"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"","readMin":"5.4","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"Swift에서-Async-Await-사용법-비동기-프로그래밍의-혁신","content":"$f","category":"swift"},"language":"kr"}],"에서 확인할 수 있습니다."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!","toc":[{"tagName":"h2","title":"Swift에서 Async/Await 사용법: 비동기 프로그래밍의 혁신","id":"45424b71"},{"tagName":"h2","title":"1. Async/Await의 기본 개념","id":"91d2d5c1"},{"tagName":"h3","title":"Async 함수 정의","id":"0d0a7d4b"},{"tagName":"h3","title":"Await를 사용한 비동기 함수 호출","id":"6167eeb4"},{"tagName":"h2","title":"2. Async/Await의 장점","id":"2b12ee02"},{"tagName":"h2","title":"3. 실용적인 예제","id":"512bf975"},{"tagName":"h3","title":"네트워킹 예제","id":"d1f65587"},{"tagName":"h3","title":"데이터베이스 접근 예제","id":"095edd76"},{"tagName":"h2","title":"4. Async/Await와 Combine 사용","id":"6f52a5a8"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
