1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%82%B4-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EA%B5%AC%ED%98%84-ba9a9b19","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서의-의존성-주입-프로젝트-내-의존성을-효과적으로-관리하기-위한-의존성-주입-구현-ba9a9b19\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%82%B4-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EA%B5%AC%ED%98%84-ba9a9b19","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서의-의존성-주입-프로젝트-내-의존성을-효과적으로-관리하기-위한-의존성-주입-구현-ba9a9b19\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%82%B4-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EA%B5%AC%ED%98%84-ba9a9b19","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift에서 의존성 주입(Dependency Injection)을 구현하는 방법에 대해 설명합니다. 의존성 주입은 소프트웨어 설계에서 필수적인 테크닉으로, 이를 통해 코드의 유연성과 재사용성을 크게 향상시킬 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,의존성 주입,소프트웨어 설계,디자인 패턴"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%82%B4-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EA%B5%AC%ED%98%84-ba9a9b19"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift에서 의존성 주입(Dependency Injection)을 구현하는 방법에 대해 설명합니다. 의존성 주입은 소프트웨어 설계에서 필수적인 테크닉으로, 이를 통해 코드의 유연성과 재사용성을 크게 향상시킬 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%82%B4-%EC%9D%98%EC%A1%B4%EC%84%B1%EC%9D%84-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85-%EA%B5%AC%ED%98%84-ba9a9b19"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift에서 의존성 주입(Dependency Injection)을 구현하는 방법에 대해 설명합니다. 의존성 주입은 소프트웨어 설계에서 필수적인 테크닉으로, 이를 통해 코드의 유연성과 재사용성을 크게 향상시킬 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-25"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5f3f2b3c","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"의존성 주입(Dependency Injection, DI)은 소프트웨어 설계에서 중요한 패턴 중 하나로, 객체 지향 프로그래밍에서 객체 간의 의존 관계를 효과적으로 관리할 수 있게 해줍니다. Swift에서는 의존성 주입을 활용하여 코드의 유연성과 테스트 가능성을 높일 수 있습니다. 이 글에서는 Swift에서 의존성 주입을 구현하는 방법과 그 이점을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"15f25b9b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"의존성 주입이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"의존성 주입은 객체가 자신의 의존성을 내부적으로 생성하지 않고 외부에서 제공받는 방식입니다. 이를 통해 객체는 더 유연해지고 테스트가 용이해집니다. 다음은 의존성 주입의 주요 이점입니다."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"유연성 증가"}],": 클래스가 자신의 의존성을 직접 생성하지 않으므로, 사용되는 의존성을 쉽게 교체할 수 있습니다."]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"테스트 용이성"}],": 외부에서 의존성을 주입받기 때문에, 테스트 환경에서 쉽게 모의 객체(Mock Object)로 대체할 수 있습니다."]}],"\n"]}],"\n",["$","li","li-2",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"코드의 명확성"}],": 의존성을 명시적으로 표현하면 코드의 의도가 더 명확해집니다."]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"id":"a0cd1ac0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 의존성 주입의 종류"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 의존성 주입을 구현하는 방법에는 여러 가지가 있습니다. 가장 많이 사용되는 세 가지 방법은 다음과 같습니다."}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":"생성자 주입(Constructor Injection)"}],"\n",["$","li","li-1",{"children":"프로퍼티 주입(Property Injection)"}],"\n",["$","li","li-2",{"children":"메소드 주입(Method Injection)"}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"각 방법의 장단점과 구현 방법을 자세히 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"25ba12f2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"생성자 주입 (Constructor Injection)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"생성자 주입은 객체가 생성될 때 필요한 의존성을 생성자를 통해 주입받는 방법입니다. 이는 가장 일반적이고 권장되는 의존성 주입 방식입니다. 생성자 주입은 객체 생성 시 모든 의존성이 필요하기 때문에 객체가 완전한 상태로 초기화됩니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class NetworkService {\n    func fetchData() {\n        // 네트워크 요청 로직\n    }\n}\n\nclass ViewModel {\n    private let networkService: NetworkService\n\n    init(networkService: NetworkService) {\n        self.networkService = networkService\n    }\n\n    func loadData() {\n        networkService.fetchData()\n    }\n}\n"}],"position":{"start":{"line":30,"column":1,"offset":970},"end":{"line":48,"column":4,"offset":1285}}},"children":"class NetworkService {\n    func fetchData() {\n        // 네트워크 요청 로직\n    }\n}\n\nclass ViewModel {\n    private let networkService: NetworkService\n\n    init(networkService: NetworkService) {\n        self.networkService = networkService\n    }\n\n    func loadData() {\n        networkService.fetchData()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewModel","position":{"start":{"line":50,"column":5,"offset":1291},"end":{"line":50,"column":16,"offset":1302}}}],"position":{"start":{"line":50,"column":5,"offset":1291},"end":{"line":50,"column":16,"offset":1302}}},"children":"ViewModel"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkService","position":{"start":{"line":50,"column":22,"offset":1308},"end":{"line":50,"column":38,"offset":1324}}}],"position":{"start":{"line":50,"column":22,"offset":1308},"end":{"line":50,"column":38,"offset":1324}}},"children":"NetworkService"}}],"를 생성자로 주입받아 사용합니다. 이로 인해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkService","position":{"start":{"line":50,"column":63,"offset":1349},"end":{"line":50,"column":79,"offset":1365}}}],"position":{"start":{"line":50,"column":63,"offset":1349},"end":{"line":50,"column":79,"offset":1365}}},"children":"NetworkService"}}],"를 Mock 객체로 쉽게 대체할 수 있습니다."]}],"\n",["$","h3",null,{"id":"2055f200","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로퍼티 주입 (Property Injection)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로퍼티 주입은 객체가 생성된 후에 필요한 의존성을 프로퍼티를 통해 주입받는 방법입니다. 이는 선택적인 의존성을 주입할 때 유용하지만, 객체가 완전한 상태로 초기화되지 않을 수 있다는 단점이 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewModel {\n    var networkService: NetworkService?\n\n    func loadData() {\n        networkService?.fetchData()\n    }\n}\n\nlet viewModel = ViewModel()\nviewModel.networkService = NetworkService()\nviewModel.loadData()\n"}],"position":{"start":{"line":56,"column":1,"offset":1540},"end":{"line":68,"column":4,"offset":1771}}},"children":"class ViewModel {\n    var networkService: NetworkService?\n\n    func loadData() {\n        networkService?.fetchData()\n    }\n}\n\nlet viewModel = ViewModel()\nviewModel.networkService = NetworkService()\nviewModel.loadData()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"networkService","position":{"start":{"line":70,"column":5,"offset":1777},"end":{"line":70,"column":21,"offset":1793}}}],"position":{"start":{"line":70,"column":5,"offset":1777},"end":{"line":70,"column":21,"offset":1793}}},"children":"networkService"}}],"가 선택적인 의존성으로 관리되며, 이는 객체 생성 후 주입됩니다."]}],"\n",["$","h3",null,{"id":"bf74f1f6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"메소드 주입 (Method Injection)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"메소드 주입은 객체 내의 특정 메소드를 호출할 때 필요한 의존성을 주입받는 방법입니다. 이는 메소드 호출 시점에 필요한 의존성만을 주입받아 사용할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewModel {\n    func loadData(networkService: NetworkService) {\n        networkService.fetchData()\n    }\n}\n\nlet networkService = NetworkService()\nlet viewModel = ViewModel()\nviewModel.loadData(networkService: networkService)\n"}],"position":{"start":{"line":76,"column":1,"offset":1953},"end":{"line":86,"column":4,"offset":2196}}},"children":"class ViewModel {\n    func loadData(networkService: NetworkService) {\n        networkService.fetchData()\n    }\n}\n\nlet networkService = NetworkService()\nlet viewModel = ViewModel()\nviewModel.loadData(networkService: networkService)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"loadData","position":{"start":{"line":88,"column":6,"offset":2203},"end":{"line":88,"column":16,"offset":2213}}}],"position":{"start":{"line":88,"column":6,"offset":2203},"end":{"line":88,"column":16,"offset":2213}}},"children":"loadData"}}]," 메소드가 호출될 때 필요한 의존성을 주입받습니다. 이는 특정 메소드에 국한된 의존성을 전달하기에 적합합니다."]}],"\n",["$","h2",null,{"id":"631f3009","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"의존성 주입 프레임워크"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["의존성 주입을 쉽게 구현하기 위해 Swift에서는 다양한 프레임워크를 활용할 수 있습니다. 가장 많이 사용되는 프레임워크는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Swinject","position":{"start":{"line":92,"column":70,"offset":2362},"end":{"line":92,"column":80,"offset":2372}}}],"position":{"start":{"line":92,"column":70,"offset":2362},"end":{"line":92,"column":80,"offset":2372}}},"children":"Swinject"}}],"입니다."]}],"\n",["$","h3",null,{"id":"29cad5be","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Swinject 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Swinject","position":{"start":{"line":96,"column":1,"offset":2395},"end":{"line":96,"column":11,"offset":2405}}}],"position":{"start":{"line":96,"column":1,"offset":2395},"end":{"line":96,"column":11,"offset":2405}}},"children":"Swinject"}}],"는 의존성 주입을 간편하게 관리할 수 있도록 도와주는 프레임워크입니다. 이를 통해 DI 컨테이너를 설정할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Swinject\n\nlet container = Container()\ncontainer.register(NetworkService.self) { _ in NetworkService() }\ncontainer.register(ViewModel.self) { r in\n    ViewModel(networkService: r.resolve(NetworkService.self)!)\n}\n\nlet viewModel = container.resolve(ViewModel.self)!\nviewModel.loadData()\n"}],"position":{"start":{"line":98,"column":1,"offset":2473},"end":{"line":109,"column":4,"offset":2776}}},"children":"import Swinject\n\nlet container = Container()\ncontainer.register(NetworkService.self) { _ in NetworkService() }\ncontainer.register(ViewModel.self) { r in\n    ViewModel(networkService: r.resolve(NetworkService.self)!)\n}\n\nlet viewModel = container.resolve(ViewModel.self)!\nviewModel.loadData()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Swinject","position":{"start":{"line":111,"column":8,"offset":2785},"end":{"line":111,"column":18,"offset":2795}}}],"position":{"start":{"line":111,"column":8,"offset":2785},"end":{"line":111,"column":18,"offset":2795}}},"children":"Swinject"}}]," 컨테이너를 사용하여 의존성을 관리할 수 있습니다. 이는 대규모 프로젝트에서 의존성 관리를 효율적으로 할 수 있게 해줍니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 의존성 주입은 코드의 유연성, 재사용성, 테스트 용이성을 높이는 데 중요한 역할을 합니다. 생성자 주입, 프로퍼티 주입, 메소드 주입과 같은 다양한 방법으로 의존성을 주입할 수 있으며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Swinject","position":{"start":{"line":115,"column":113,"offset":2985},"end":{"line":115,"column":123,"offset":2995}}}],"position":{"start":{"line":115,"column":113,"offset":2985},"end":{"line":115,"column":123,"offset":2995}}},"children":"Swinject"}}],"와 같은 프레임워크를 활용하면 더 효율적으로 관리할 수 있습니다. 이를 통해 구조적이고 유지보수하기 쉬운 코드를 작성할 수 있습니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현.","toc":[{"tagName":"h1","title":"Swift에서의 의존성 주입: 프로젝트 내 의존성을 효과적으로 관리하기 위한 의존성 주입 구현","id":"5f3f2b3c"},{"tagName":"h2","title":"의존성 주입이란?","id":"15f25b9b"},{"tagName":"h2","title":"Swift에서 의존성 주입의 종류","id":"a0cd1ac0"},{"tagName":"h3","title":"생성자 주입 (Constructor Injection)","id":"25ba12f2"},{"tagName":"h3","title":"프로퍼티 주입 (Property Injection)","id":"2055f200"},{"tagName":"h3","title":"메소드 주입 (Method Injection)","id":"bf74f1f6"},{"tagName":"h2","title":"의존성 주입 프레임워크","id":"631f3009"},{"tagName":"h3","title":"Swinject 예제","id":"29cad5be"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
