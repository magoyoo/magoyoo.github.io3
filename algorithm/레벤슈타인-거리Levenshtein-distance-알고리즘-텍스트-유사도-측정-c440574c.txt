1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%EB%A0%88%EB%B2%A4%EC%8A%88%ED%83%80%EC%9D%B8-%EA%B1%B0%EB%A6%ACLevenshtein-distance-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%9C%A0%EC%82%AC%EB%8F%84-%EC%B8%A1%EC%A0%95-c440574c","d"],{"children":["__PAGE__?{\"slug\":\"레벤슈타인-거리Levenshtein-distance-알고리즘-텍스트-유사도-측정-c440574c\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%EB%A0%88%EB%B2%A4%EC%8A%88%ED%83%80%EC%9D%B8-%EA%B1%B0%EB%A6%ACLevenshtein-distance-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%9C%A0%EC%82%AC%EB%8F%84-%EC%B8%A1%EC%A0%95-c440574c","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"레벤슈타인-거리Levenshtein-distance-알고리즘-텍스트-유사도-측정-c440574c\"}"},"styles":[]}],"segment":["slug","%EB%A0%88%EB%B2%A4%EC%8A%88%ED%83%80%EC%9D%B8-%EA%B1%B0%EB%A6%ACLevenshtein-distance-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%9C%A0%EC%82%AC%EB%8F%84-%EC%B8%A1%EC%A0%95-c440574c","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"레벤슈타인 거리 알고리즘은 두 문자열 사이의 편집 거리를 측정하여 텍스트 유사도를 계산하는 알고리즘입니다. 이 글에서는 레벤슈타인 거리의 원리, 적용 사례, 구현 방법 등을 마크다운 문법을 통해 상세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"레벤슈타인 거리,알고리즘,텍스트 유사도,편집 거리"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%EB%A0%88%EB%B2%A4%EC%8A%88%ED%83%80%EC%9D%B8-%EA%B1%B0%EB%A6%ACLevenshtein-distance-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%9C%A0%EC%82%AC%EB%8F%84-%EC%B8%A1%EC%A0%95-c440574c"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"레벤슈타인 거리 알고리즘은 두 문자열 사이의 편집 거리를 측정하여 텍스트 유사도를 계산하는 알고리즘입니다. 이 글에서는 레벤슈타인 거리의 원리, 적용 사례, 구현 방법 등을 마크다운 문법을 통해 상세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%EB%A0%88%EB%B2%A4%EC%8A%88%ED%83%80%EC%9D%B8-%EA%B1%B0%EB%A6%ACLevenshtein-distance-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%9C%A0%EC%82%AC%EB%8F%84-%EC%B8%A1%EC%A0%95-c440574c"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"레벤슈타인 거리 알고리즘은 두 문자열 사이의 편집 거리를 측정하여 텍스트 유사도를 계산하는 알고리즘입니다. 이 글에서는 레벤슈타인 거리의 원리, 적용 사례, 구현 방법 등을 마크다운 문법을 통해 상세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/algorithmImg.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-05"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"6ffcd1f3","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"레벤슈타인 거리 알고리즘은 두 문자열 사이의 편집 거리를 측정해 문자열 간의 유사도를 계산하는 비트윈 스캔 방법입니다. 주로 텍스트 편집기, 자동 완성 기능, 검색 엔진 등에서 널리 사용됩니다. 이 글에서는 레벤슈타인 거리 알고리즘의 원리와 이를 활용하는 방법, 그리고 파이썬을 이용한 구현 방법을 알아보겠습니다."}],"\n",["$","h2",null,{"id":"079202d9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"레벤슈타인 거리의 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["레벤슈타인 거리란 두 문자열 사이에서 하나의 문자열을 다른 문자열로 변환하기 위해 필요한 최소한의 편집 작업 수를 말합니다. 여기서 편집 작업은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"삽입","position":{"start":{"line":8,"column":82,"offset":327},"end":{"line":8,"column":86,"offset":331}}}],"position":{"start":{"line":8,"column":82,"offset":327},"end":{"line":8,"column":86,"offset":331}}},"children":"삽입"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"삭제","position":{"start":{"line":8,"column":88,"offset":333},"end":{"line":8,"column":92,"offset":337}}}],"position":{"start":{"line":8,"column":88,"offset":333},"end":{"line":8,"column":92,"offset":337}}},"children":"삭제"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"교체","position":{"start":{"line":8,"column":94,"offset":339},"end":{"line":8,"column":98,"offset":343}}}],"position":{"start":{"line":8,"column":94,"offset":339},"end":{"line":8,"column":98,"offset":343}}},"children":"교체"}}]," 세 가지로 정의됩니다. 예를 들어 문자열 \"kitten\"을 \"sitting\"으로 변환하려면 다음과 같은 작업이 필요합니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"\"kitten\"에서 \"sitten\"으로 (k를 s로 교체)"}],"\n",["$","li","li-1",{"children":"\"sitten\"에서 \"sittin\"으로 (e를 i로 교체)"}],"\n",["$","li","li-2",{"children":"\"sittin\"에서 \"sitting\"으로 (n을 추가)"}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"따라서 이 경우 레벤슈타인 거리는 3입니다."}],"\n",["$","h2",null,{"id":"016205cf","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"레벤슈타인 거리의 계산 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["레벤슈타인 거리를 계산하기 위해 동적 프로그래밍(Dynamic Programming) 기법을 사용합니다. 이를 위해 2차원 배열을 활용하며, 각 셀 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[i][j]","position":{"start":{"line":18,"column":84,"offset":650},"end":{"line":18,"column":92,"offset":658}}}],"position":{"start":{"line":18,"column":84,"offset":650},"end":{"line":18,"column":92,"offset":658}}},"children":"[i][j]"}}],"는 첫 번째 문자열의 처음 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":18,"column":107,"offset":673},"end":{"line":18,"column":110,"offset":676}}}],"position":{"start":{"line":18,"column":107,"offset":673},"end":{"line":18,"column":110,"offset":676}}},"children":"i"}}]," 문자와 두 번째 문자열의 처음 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j","position":{"start":{"line":18,"column":128,"offset":694},"end":{"line":18,"column":131,"offset":697}}}],"position":{"start":{"line":18,"column":128,"offset":694},"end":{"line":18,"column":131,"offset":697}}},"children":"j"}}]," 문자 사이의 편집 거리를 나타냅니다. 배열은 다음과 같은 방식으로 채워집니다:"]}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":["첫 번째 행과 첫 번째 열은 인덱스를 따라 채워집니다. 즉, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"distance[i][0] = i","position":{"start":{"line":20,"column":38,"offset":780},"end":{"line":20,"column":58,"offset":800}}}],"position":{"start":{"line":20,"column":38,"offset":780},"end":{"line":20,"column":58,"offset":800}}},"children":"distance[i][0] = i"}}]," 그리고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"distance[0][j] = j","position":{"start":{"line":20,"column":63,"offset":805},"end":{"line":20,"column":83,"offset":825}}}],"position":{"start":{"line":20,"column":63,"offset":805},"end":{"line":20,"column":83,"offset":825}}},"children":"distance[0][j] = j"}}],"입니다."]}],"\n",["$","li","li-1",{"children":["나머지 셀 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[i][j]","position":{"start":{"line":21,"column":10,"offset":839},"end":{"line":21,"column":18,"offset":847}}}],"position":{"start":{"line":21,"column":10,"offset":839},"end":{"line":21,"column":18,"offset":847}}},"children":"[i][j]"}}],"는 다음 중 가장 작은 값으로 채워집니다:\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"distance[i-1][j] + 1","position":{"start":{"line":22,"column":6,"offset":876},"end":{"line":22,"column":28,"offset":898}}}],"position":{"start":{"line":22,"column":6,"offset":876},"end":{"line":22,"column":28,"offset":898}}},"children":"distance[i-1][j] + 1"}}]," (삭제 연산)"]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"distance[i][j-1] + 1","position":{"start":{"line":23,"column":6,"offset":912},"end":{"line":23,"column":28,"offset":934}}}],"position":{"start":{"line":23,"column":6,"offset":912},"end":{"line":23,"column":28,"offset":934}}},"children":"distance[i][j-1] + 1"}}]," (삽입 연산)"]}],"\n",["$","li","li-2",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"distance[i-1][j-1] + cost","position":{"start":{"line":24,"column":6,"offset":948},"end":{"line":24,"column":33,"offset":975}}}],"position":{"start":{"line":24,"column":6,"offset":948},"end":{"line":24,"column":33,"offset":975}}},"children":"distance[i-1][j-1] + cost"}}],", 여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cost","position":{"start":{"line":24,"column":39,"offset":981},"end":{"line":24,"column":45,"offset":987}}}],"position":{"start":{"line":24,"column":39,"offset":981},"end":{"line":24,"column":45,"offset":987}}},"children":"cost"}}],"는 문자가 같으면 0, 다르면 1입니다 (교체 연산)."]}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"id":"f463cfa2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"파이썬을 이용한 구현 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"레벤슈타인 거리를 파이썬으로 구현하는 예제를 살펴보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def levenshtein_distance(str1, str2):\n    n, m = len(str1), len(str2)\n    if n == 0: return m\n    if m == 0: return n\n\n    # Create a matrix to store the distances\n    dist = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Initialize the matrix\n    for i in range(n + 1):\n        dist[i][0] = i\n    for j in range(m + 1):\n        dist[0][j] = j\n\n    # Calculate distances\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n\n            dist[i][j] = min(dist[i - 1][j] + 1,    # Deletion\n                             dist[i][j - 1] + 1,    # Insertion\n                             dist[i - 1][j - 1] + cost) # Substitution\n\n    return dist[n][m]\n\n# Test the function\nstr1 = \"kitten\"\nstr2 = \"sitting\"\nprint(f\"Levenshtein distance between '{str1}' and '{str2}' is {levenshtein_distance(str1, str2)}\")\n"}],"position":{"start":{"line":30,"column":1,"offset":1073},"end":{"line":63,"column":4,"offset":2017}}},"children":"def levenshtein_distance(str1, str2):\n    n, m = len(str1), len(str2)\n    if n == 0: return m\n    if m == 0: return n\n\n    # Create a matrix to store the distances\n    dist = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    # Initialize the matrix\n    for i in range(n + 1):\n        dist[i][0] = i\n    for j in range(m + 1):\n        dist[0][j] = j\n\n    # Calculate distances\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                cost = 0\n            else:\n                cost = 1\n\n            dist[i][j] = min(dist[i - 1][j] + 1,    # Deletion\n                             dist[i][j - 1] + 1,    # Insertion\n                             dist[i - 1][j - 1] + cost) # Substitution\n\n    return dist[n][m]\n\n# Test the function\nstr1 = \"kitten\"\nstr2 = \"sitting\"\nprint(f\"Levenshtein distance between '{str1}' and '{str2}' is {levenshtein_distance(str1, str2)}\")\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"levenshtein_distance","position":{"start":{"line":65,"column":8,"offset":2026},"end":{"line":65,"column":30,"offset":2048}}}],"position":{"start":{"line":65,"column":8,"offset":2026},"end":{"line":65,"column":30,"offset":2048}}},"children":"levenshtein_distance"}}]," 함수는 두 문자열을 입력으로 받아 최소 편집 거리를 반환합니다. 동적 프로그래밍을 통해 각 위치까지의 거리를 계산하고, 최종적으로 가장 오른쪽 아래 셀의 값을 반환합니다."]}],"\n",["$","h2",null,{"id":"448dd4d6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"레벤슈타인 거리의 적용 사례"}],"\n",["$","h3",null,{"id":"e6987325","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"텍스트 편집기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"텍스트 편집기에서는 철자 검사, 자동 완성 기능, 텍스트 비교 등을 위해 레벤슈타인 거리를 활용할 수 있습니다. 예를 들어, 사용자가 잘못된 철자를 입력했을 때 가장 유사한 대안을 제시할 수 있습니다."}],"\n",["$","h3",null,{"id":"b69dde4c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"검색 엔진"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"검색 엔진은 사용자가 입력한 검색 쿼리와 데이터베이스의 저장된 문서 간의 유사도를 측정하는 데 레벤슈타인 거리를 사용할 수 있습니다. 이를 통해 사용자가 오타를 입력했을 때에도 관련된 검색 결과를 반환할 수 있습니다."}],"\n",["$","h3",null,{"id":"2193a11d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"생물정보학"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"서열 분석에 활용됩니다. DNA, RNA, 단백질 서열 간의 차이를 분석하여 생물학적 유사성을 평가하는 데 레벤슈타인 거리 알고리즘이 사용됩니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"레벤슈타인 거리 알고리즘은 텍스트 유사도 계산에 있어 매우 유용한 도구입니다. 삽입, 삭제, 교체와 같은 편집 작업을 통해 두 문자열 간의 유사도를 정량적으로 평가할 수 있으며, 이를 근거로 다양한 응용 분야에서 활용할 수 있습니다. 동적 프로그래밍을 기반으로 한 알고리즘 구현 방법도 비교적 간단하므로, 다양한 프로그래밍 언어에서 쉽게 적용할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정","toc":[{"tagName":"h1","title":"레벤슈타인 거리(Levenshtein distance) 알고리즘: 텍스트 유사도 측정","id":"6ffcd1f3"},{"tagName":"h2","title":"레벤슈타인 거리의 원리","id":"079202d9"},{"tagName":"h2","title":"레벤슈타인 거리의 계산 방법","id":"016205cf"},{"tagName":"h2","title":"파이썬을 이용한 구현 사례","id":"f463cfa2"},{"tagName":"h2","title":"레벤슈타인 거리의 적용 사례","id":"448dd4d6"},{"tagName":"h3","title":"텍스트 편집기","id":"e6987325"},{"tagName":"h3","title":"검색 엔진","id":"b69dde4c"},{"tagName":"h3","title":"생물정보학","id":"2193a11d"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
