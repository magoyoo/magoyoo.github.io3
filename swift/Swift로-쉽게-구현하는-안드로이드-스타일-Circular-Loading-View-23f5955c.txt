1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EB%A1%9C-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-Circular-Loading-View-23f5955c","d"],{"children":["__PAGE__?{\"slug\":\"Swift로-쉽게-구현하는-안드로이드-스타일-Circular-Loading-View-23f5955c\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EB%A1%9C-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-Circular-Loading-View-23f5955c","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift로-쉽게-구현하는-안드로이드-스타일-Circular-Loading-View-23f5955c\"}"},"styles":[]}],"segment":["slug","Swift%EB%A1%9C-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-Circular-Loading-View-23f5955c","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift를 사용하여 안드로이드 스타일의 Circular Loading View를 구현하는 방법을 자세히 설명합니다. iOS 애플리케이션에서도 매끄러운 사용자 경험을 제공하기 위해 종종 사용되는 이 로딩 뷰를 손쉽게 구현해보세요."}],["$","meta","3",{"name":"keywords","content":"Swift,iOS,Circular Loading,UI Component"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EB%A1%9C-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-Circular-Loading-View-23f5955c"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift를 사용하여 안드로이드 스타일의 Circular Loading View를 구현하는 방법을 자세히 설명합니다. iOS 애플리케이션에서도 매끄러운 사용자 경험을 제공하기 위해 종종 사용되는 이 로딩 뷰를 손쉽게 구현해보세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EB%A1%9C-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-Circular-Loading-View-23f5955c"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift를 사용하여 안드로이드 스타일의 Circular Loading View를 구현하는 방법을 자세히 설명합니다. iOS 애플리케이션에서도 매끄러운 사용자 경험을 제공하기 위해 종종 사용되는 이 로딩 뷰를 손쉽게 구현해보세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T5a6,// CircularLoadingView.swift
import UIKit

class CircularLoadingView: UIView {

    private let shapeLayer = CAShapeLayer()
    private let trackLayer = CAShapeLayer()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayers()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    private func setupLayers() {
        let circularPath = UIBezierPath(arcCenter: center, radius: 50, startAngle: -CGFloat.pi / 2, endAngle: 2 * CGFloat.pi, clockwise: true)
        trackLayer.path = circularPath.cgPath
        trackLayer.strokeColor = UIColor.lightGray.cgColor
        trackLayer.lineWidth = 10
        trackLayer.fillColor = UIColor.clear.cgColor
        trackLayer.lineCap = .round
        layer.addSublayer(trackLayer)

        shapeLayer.path = circularPath.cgPath
        shapeLayer.strokeColor = UIColor.blue.cgColor
        shapeLayer.lineWidth = 10
        shapeLayer.fillColor = UIColor.clear.cgColor
        shapeLayer.lineCap = .round
        shapeLayer.strokeEnd = 0
        layer.addSublayer(shapeLayer)
    }

    func animate() {
        let basicAnimation = CABasicAnimation(keyPath: "strokeEnd")
        basicAnimation.toValue = 1
        basicAnimation.duration = 2
        basicAnimation.fillMode = .forwards
        basicAnimation.isRemovedOnCompletion = false
        shapeLayer.add(basicAnimation, forKey: "loadingAnimation")
    }
}
f:T5a6,// CircularLoadingView.swift
import UIKit

class CircularLoadingView: UIView {

    private let shapeLayer = CAShapeLayer()
    private let trackLayer = CAShapeLayer()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayers()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    private func setupLayers() {
        let circularPath = UIBezierPath(arcCenter: center, radius: 50, startAngle: -CGFloat.pi / 2, endAngle: 2 * CGFloat.pi, clockwise: true)
        trackLayer.path = circularPath.cgPath
        trackLayer.strokeColor = UIColor.lightGray.cgColor
        trackLayer.lineWidth = 10
        trackLayer.fillColor = UIColor.clear.cgColor
        trackLayer.lineCap = .round
        layer.addSublayer(trackLayer)

        shapeLayer.path = circularPath.cgPath
        shapeLayer.strokeColor = UIColor.blue.cgColor
        shapeLayer.lineWidth = 10
        shapeLayer.fillColor = UIColor.clear.cgColor
        shapeLayer.lineCap = .round
        shapeLayer.strokeEnd = 0
        layer.addSublayer(shapeLayer)
    }

    func animate() {
        let basicAnimation = CABasicAnimation(keyPath: "strokeEnd")
        basicAnimation.toValue = 1
        basicAnimation.duration = 2
        basicAnimation.fillMode = .forwards
        basicAnimation.isRemovedOnCompletion = false
        shapeLayer.add(basicAnimation, forKey: "loadingAnimation")
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"4355d551","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["안드로이드 애플리케이션에서는 자주 볼 수 있는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Circular Loading View","position":{"start":{"line":4,"column":27,"offset":77},"end":{"line":4,"column":50,"offset":100}}}],"position":{"start":{"line":4,"column":27,"offset":77},"end":{"line":4,"column":50,"offset":100}}},"children":"Circular Loading View"}}],"는 사용자에게 현재 로딩 중임을 시각적으로 알리는 중요한 UI 요소입니다. 이번 글에서는 Swift를 사용하여 iOS 애플리케이션에서도 동일한 스타일의 Circular Loading View를 구현하는 방법을 단계별로 설명하겠습니다."]}],"\n",["$","h2",null,{"id":"35ce895d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로젝트 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Circular Loading View를 구현하기 위해 새로운 Xcode 프로젝트를 만듭니다. 아래 단계를 따라주세요."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"Xcode를 열고 새로운 프로젝트를 만듭니다."}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"App"}]," 템플릿을 선택하고 다음 화면에서 프로젝트 이름을 지정합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"Storyboard"}],"를 사용하지 않도록 설정합니다. 이를 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SceneDelegate","position":{"start":{"line":12,"column":42,"offset":427},"end":{"line":12,"column":57,"offset":442}}}],"position":{"start":{"line":12,"column":42,"offset":427},"end":{"line":12,"column":57,"offset":442}}},"children":"SceneDelegate"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AppDelegate","position":{"start":{"line":12,"column":59,"offset":444},"end":{"line":12,"column":72,"offset":457}}}],"position":{"start":{"line":12,"column":59,"offset":444},"end":{"line":12,"column":72,"offset":457}}},"children":"AppDelegate"}}]," 파일을 수정합니다."]}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"// AppDelegate.swift\nimport UIKit\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        window = UIWindow(frame: UIScreen.main.bounds)\n        window?.rootViewController = ViewController()\n        window?.makeKeyAndVisible()\n        return true\n    }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":470},"end":{"line":30,"column":4,"offset":926}}},"children":"// AppDelegate.swift\nimport UIKit\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        window = UIWindow(frame: UIScreen.main.bounds)\n        window?.rootViewController = ViewController()\n        window?.makeKeyAndVisible()\n        return true\n    }\n}\n"}}]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"// SceneDelegate.swift\nimport UIKit\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    var window: UIWindow?\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        guard let windowScene = (scene as? UIWindowScene) else { return }\n        window = UIWindow(windowScene: windowScene)\n        window?.rootViewController = ViewController()\n        window?.makeKeyAndVisible()\n    }\n}\n"}],"position":{"start":{"line":32,"column":1,"offset":928},"end":{"line":47,"column":4,"offset":1415}}},"children":"// SceneDelegate.swift\nimport UIKit\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    var window: UIWindow?\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        guard let windowScene = (scene as? UIWindowScene) else { return }\n        window = UIWindow(windowScene: windowScene)\n        window?.rootViewController = ViewController()\n        window?.makeKeyAndVisible()\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"beaedf0b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Circular Loading View 작성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"코어 애니메이션을 사용하여 Circular Loading View를 작성합니다. 사용자 정의 UIView 클래스를 만들어 볼까요?"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":53,"column":1,"offset":1520},"end":{"line":98,"column":4,"offset":2978}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CircularLoadingView","position":{"start":{"line":100,"column":1,"offset":2980},"end":{"line":100,"column":22,"offset":3001}}}],"position":{"start":{"line":100,"column":1,"offset":2980},"end":{"line":100,"column":22,"offset":3001}}},"children":"CircularLoadingView"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIBezierPath","position":{"start":{"line":100,"column":24,"offset":3003},"end":{"line":100,"column":38,"offset":3017}}}],"position":{"start":{"line":100,"column":24,"offset":3003},"end":{"line":100,"column":38,"offset":3017}}},"children":"UIBezierPath"}}],"를 사용하여 원형 경로를 정의하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CAShapeLayer","position":{"start":{"line":100,"column":58,"offset":3037},"end":{"line":100,"column":72,"offset":3051}}}],"position":{"start":{"line":100,"column":58,"offset":3037},"end":{"line":100,"column":72,"offset":3051}}},"children":"CAShapeLayer"}}],"를 이용해 경로를 따라 원을 그리는 방법입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"trackLayer","position":{"start":{"line":100,"column":99,"offset":3078},"end":{"line":100,"column":111,"offset":3090}}}],"position":{"start":{"line":100,"column":99,"offset":3078},"end":{"line":100,"column":111,"offset":3090}}},"children":"trackLayer"}}],"는 회색의 고정된 경로를 나타내며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"shapeLayer","position":{"start":{"line":100,"column":131,"offset":3110},"end":{"line":100,"column":143,"offset":3122}}}],"position":{"start":{"line":100,"column":131,"offset":3110},"end":{"line":100,"column":143,"offset":3122}}},"children":"shapeLayer"}}],"는 애니메이션을 통해 업데이트되는 경로입니다."]}],"\n",["$","h2",null,{"id":"400e91aa","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ViewController에 Circular Loading View 추가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":104,"column":1,"offset":3194},"end":{"line":104,"column":17,"offset":3210}}}],"position":{"start":{"line":104,"column":1,"offset":3194},"end":{"line":104,"column":17,"offset":3210}}},"children":"ViewController"}}],"에 Circular Loading View를 추가하고 이를 실행하도록 설정합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"// ViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    private let loadingView = CircularLoadingView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        setupLoadingView()\n    }\n\n    private func setupLoadingView() {\n        loadingView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(loadingView)\n\n        NSLayoutConstraint.activate([\n            loadingView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            loadingView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            loadingView.widthAnchor.constraint(equalToConstant: 100),\n            loadingView.heightAnchor.constraint(equalToConstant: 100)\n        ])\n        loadingView.animate()\n    }\n}\n"}],"position":{"start":{"line":106,"column":1,"offset":3257},"end":{"line":133,"column":4,"offset":4067}}},"children":"// ViewController.swift\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    private let loadingView = CircularLoadingView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        setupLoadingView()\n    }\n\n    private func setupLoadingView() {\n        loadingView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(loadingView)\n\n        NSLayoutConstraint.activate([\n            loadingView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            loadingView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            loadingView.widthAnchor.constraint(equalToConstant: 100),\n            loadingView.heightAnchor.constraint(equalToConstant: 100)\n        ])\n        loadingView.animate()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":135,"column":1,"offset":4069},"end":{"line":135,"column":17,"offset":4085}}}],"position":{"start":{"line":135,"column":1,"offset":4069},"end":{"line":135,"column":17,"offset":4085}}},"children":"ViewController"}}],"에서 Circular Loading View를 중앙에 배치하고, 애니메이션을 시작하도록 설정합니다. 위 코드에서는 Auto Layout을 사용하여 중앙에 배치되도록 하고, 로딩 뷰가 첫 화면에 나타날 때 애니메이션이 시작됩니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 Swift를 사용하여 안드로이드 스타일의 Circular Loading View를 iOS 애플리케이션에서 구현하는 방법을 알아보았습니다. UIView, CAShapeLayer 및 코어 애니메이션을 사용하여 간단하지만 강력한 로딩 뷰를 만들 수 있었습니다. 이 글이 사용자 경험 향상을 목적으로 한 다양한 로딩 UI 요소를 구현하는 데 도움이 되기를 바랍니다. 다음에도 유용한 Swift와 iOS 관련 내용을 계속해서 다뤄보겠습니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View","toc":[{"tagName":"h1","title":"Swift로 쉽게 구현하는 안드로이드 스타일 Circular Loading View","id":"4355d551"},{"tagName":"h2","title":"프로젝트 설정","id":"35ce895d"},{"tagName":"h2","title":"Circular Loading View 작성","id":"beaedf0b"},{"tagName":"h2","title":"ViewController에 Circular Loading View 추가","id":"400e91aa"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
