1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85%EC%8A%A4Custom-Hooks-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EA%B7%B9%EB%8C%80%ED%99%94-5cc5c5a3","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-커스텀-훅스Custom-Hooks-만들기-코드-재사용성-극대화-5cc5c5a3\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85%EC%8A%A4Custom-Hooks-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EA%B7%B9%EB%8C%80%ED%99%94-5cc5c5a3","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-커스텀-훅스Custom-Hooks-만들기-코드-재사용성-극대화-5cc5c5a3\"}"},"styles":[]}],"segment":["slug","Reactjs-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85%EC%8A%A4Custom-Hooks-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EA%B7%B9%EB%8C%80%ED%99%94-5cc5c5a3","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"React.js에서 커스텀 훅스를 만드는 방법과 이를 통해 코드의 재사용성을 극대화하는 방법을 다룹니다. 커스텀 훅스의 개념, 작성 방법, 그리고 다양한 예제와 실전 팁을 제공합니다."}],["$","meta","3",{"name":"keywords","content":"React.js,커스텀 훅스,코드 재사용성,프론트엔드"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85%EC%8A%A4Custom-Hooks-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EA%B7%B9%EB%8C%80%ED%99%94-5cc5c5a3"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"React.js에서 커스텀 훅스를 만드는 방법과 이를 통해 코드의 재사용성을 극대화하는 방법을 다룹니다. 커스텀 훅스의 개념, 작성 방법, 그리고 다양한 예제와 실전 팁을 제공합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-%EC%BB%A4%EC%8A%A4%ED%85%80-%ED%9B%85%EC%8A%A4Custom-Hooks-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%BD%94%EB%93%9C-%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1-%EA%B7%B9%EB%8C%80%ED%99%94-5cc5c5a3"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"React.js에서 커스텀 훅스를 만드는 방법과 이를 통해 코드의 재사용성을 극대화하는 방법을 다룹니다. 커스텀 훅스의 개념, 작성 방법, 그리고 다양한 예제와 실전 팁을 제공합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-10"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"2cda5bd4","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React.js는 컴포넌트 기반의 구조 덕분에 재사용 가능한 UI 요소를 쉽게 만들 수 있는 장점이 있습니다. 하지만 컴포넌트가 복잡해질수록 상태 관리와 로직의 재사용이 어려워질 수 있습니다. 이러한 문제를 해결하기 위해, React에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"커스텀 훅스(Custom Hooks)","position":{"start":{"line":4,"column":135,"offset":185},"end":{"line":4,"column":157,"offset":207}}}],"position":{"start":{"line":4,"column":135,"offset":185},"end":{"line":4,"column":157,"offset":207}}},"children":"커스텀 훅스(Custom Hooks)"}}],"라는 개념을 도입했습니다. 커스텀 훅스를 사용하면 컴포넌트 간의 로직을 간단하고 효율적으로 공유할 수 있습니다. 이번 글에서는 커스텀 훅스의 개념, 작성 방법, 그리고 실전 예제를 통해 그 유용성을 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"8a0e7f9d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 훅스의 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["기본적으로 훅은 React 함수형 컴포넌트에서 상태와 생명주기 기능을 가능하게 하는 특수한 함수입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":8,"column":59,"offset":401},"end":{"line":8,"column":69,"offset":411}}}],"position":{"start":{"line":8,"column":59,"offset":401},"end":{"line":8,"column":69,"offset":411}}},"children":"useState"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":8,"column":71,"offset":413},"end":{"line":8,"column":82,"offset":424}}}],"position":{"start":{"line":8,"column":71,"offset":413},"end":{"line":8,"column":82,"offset":424}}},"children":"useEffect"}}]," 같은 내장 훅은 이미 익숙하실 텐데요, 커스텀 훅은 이러한 내장 훅들을 조합해 나만의 훅을 만드는 것입니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["커스텀 훅은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"use","position":{"start":{"line":10,"column":8,"offset":494},"end":{"line":10,"column":13,"offset":499}}}],"position":{"start":{"line":10,"column":8,"offset":494},"end":{"line":10,"column":13,"offset":499}}},"children":"use"}}],"로 시작하는 이름을 가지고, 다른 훅처럼 상태와 생명주기 관리를 할 수 있습니다. 이를 통해 복잡한 로직을 재사용 가능하게 만들고, 코드를 더 깨끗하고 유지보수 가능하게 합니다."]}],"\n",["$","h3",null,{"id":"6b4c81b0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예시: 기본 커스텀 훅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 사용자의 현재 시간을 관리하는 커스텀 훅을 만들어보겠습니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import { useState, useEffect } from 'react';\n\nfunction useCurrentTime() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return currentTime;\n}\n\nexport default useCurrentTime;\n"}],"position":{"start":{"line":16,"column":1,"offset":660},"end":{"line":33,"column":4,"offset":1029}}},"children":"import { useState, useEffect } from 'react';\n\nfunction useCurrentTime() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return currentTime;\n}\n\nexport default useCurrentTime;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCurrentTime","position":{"start":{"line":35,"column":9,"offset":1039},"end":{"line":35,"column":25,"offset":1055}}}],"position":{"start":{"line":35,"column":9,"offset":1039},"end":{"line":35,"column":25,"offset":1055}}},"children":"useCurrentTime"}}],"이라는 커스텀 훅을 만들어, 현재 시간을 초 단위로 갱신하도록 했습니다. 이제 이 훅을 필요한 컴포넌트에서 가져와 사용할 수 있습니다."]}],"\n",["$","h2",null,{"id":"c4e56900","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 훅 작성 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커스텀 훅을 작성할 때는 몇 가지 기본 원칙을 준수해야 합니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"use","position":{"start":{"line":41,"column":6,"offset":1190},"end":{"line":41,"column":11,"offset":1195}}}],"position":{"start":{"line":41,"column":6,"offset":1190},"end":{"line":41,"column":11,"offset":1195}}},"children":"use"}}],"로 시작하는 이름"]}],": 모든 훅은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"use","position":{"start":{"line":41,"column":30,"offset":1214},"end":{"line":41,"column":35,"offset":1219}}}],"position":{"start":{"line":41,"column":30,"offset":1214},"end":{"line":41,"column":35,"offset":1219}}},"children":"use"}}],"로 시작해야 React가 이것이 훅임을 알 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"다른 훅을 호출"}],": 커스텀 훅 안에서는 기존의 훅(",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":42,"column":35,"offset":1285},"end":{"line":42,"column":45,"offset":1295}}}],"position":{"start":{"line":42,"column":35,"offset":1285},"end":{"line":42,"column":45,"offset":1295}}},"children":"useState"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":42,"column":47,"offset":1297},"end":{"line":42,"column":58,"offset":1308}}}],"position":{"start":{"line":42,"column":47,"offset":1297},"end":{"line":42,"column":58,"offset":1308}}},"children":"useEffect"}}]," 등)을 호출할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"함수형 컴포넌트에서만 호출"}],": 커스텀 훅은 함수형 컴포넌트 또는 다른 커스텀 훅에서만 호출될 수 있습니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"530f840b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예시: API 데이터 페칭 커스텀 훅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"HTTP 요청을 통해 데이터를 가져오는 일반적인 작업을 커스텀 훅으로 만들어보겠습니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return { data, loading, error };\n}\n\nexport default useFetch;\n"}],"position":{"start":{"line":49,"column":1,"offset":1468},"end":{"line":80,"column":4,"offset":2148}}},"children":"import { useState, useEffect } from 'react';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(url)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        setData(data);\n        setLoading(false);\n      })\n      .catch(error => {\n        setError(error);\n        setLoading(false);\n      });\n  }, [url]);\n\n  return { data, loading, error };\n}\n\nexport default useFetch;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useFetch","position":{"start":{"line":82,"column":6,"offset":2155},"end":{"line":82,"column":16,"offset":2165}}}],"position":{"start":{"line":82,"column":6,"offset":2155},"end":{"line":82,"column":16,"offset":2165}}},"children":"useFetch"}}]," 훅을 사용하면 다양한 컴포넌트에서 데이터 페칭 로직을 공유할 수 있습니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react';\nimport useFetch from './useFetch';\n\nfunction DataComponent({ url }) {\n  const { data, loading, error } = useFetch(url);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <div>\n      <h1>Fetched Data:</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default DataComponent;\n"}],"position":{"start":{"line":84,"column":1,"offset":2209},"end":{"line":103,"column":4,"offset":2608}}},"children":"import React from 'react';\nimport useFetch from './useFetch';\n\nfunction DataComponent({ url }) {\n  const { data, loading, error } = useFetch(url);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <div>\n      <h1>Fetched Data:</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n\nexport default DataComponent;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이와 같은 방식으로, 훅을 활용하여 코드의 중복을 줄이고, 필요한 곳에서 동일한 로직을 간편하게 재사용할 수 있습니다."}],"\n",["$","h2",null,{"id":"e6a272c7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실전 팁"}],"\n",["$","h3",null,{"id":"5561b3b9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"훅의 컴포넌트화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커스텀 훅을 작성할 때 컴포넌트의 특정 로직을 가능한 한 많이 분리하여, 훅의 독립성을 유지하려고 노력해야 합니다. 이렇게 하면 훅을 다양한 컴포넌트에서 재사용하기 쉬워집니다."}],"\n",["$","h3",null,{"id":"b6eb335d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"테스트와 디버깅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["커스텀 훅도 다른 함수처럼 테스트가 필요합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Jest","position":{"start":{"line":115,"column":28,"offset":2842},"end":{"line":115,"column":34,"offset":2848}}}],"position":{"start":{"line":115,"column":28,"offset":2842},"end":{"line":115,"column":34,"offset":2848}}},"children":"Jest"}}],"와 같은 테스트 프레임워크를 사용해서 훅의 동작을 검증하세요. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Testing Library","position":{"start":{"line":115,"column":76,"offset":2890},"end":{"line":115,"column":99,"offset":2913}}}],"position":{"start":{"line":115,"column":76,"offset":2890},"end":{"line":115,"column":99,"offset":2913}}},"children":"React Testing Library"}}],"를 사용해 커스텀 훅을 테스트할 수 있습니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import { renderHook } from '@testing-library/react-hooks';\nimport useFetch from './useFetch';\n\nit('should fetch data', async () => {\n  const { result, waitForNextUpdate } = renderHook(() => useFetch('https://api.example.com/data'));\n\n  await waitForNextUpdate();\n\n  expect(result.current.data).not.toBeNull();\n  expect(result.current.loading).toBe(false);\n  expect(result.current.error).toBeNull();\n});\n"}],"position":{"start":{"line":117,"column":1,"offset":2940},"end":{"line":130,"column":4,"offset":3353}}},"children":"import { renderHook } from '@testing-library/react-hooks';\nimport useFetch from './useFetch';\n\nit('should fetch data', async () => {\n  const { result, waitForNextUpdate } = renderHook(() => useFetch('https://api.example.com/data'));\n\n  await waitForNextUpdate();\n\n  expect(result.current.data).not.toBeNull();\n  expect(result.current.loading).toBe(false);\n  expect(result.current.error).toBeNull();\n});\n"}}]}],"\n",["$","h3",null,{"id":"4c796296","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"로직의 일반화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["커스텀 훅을 만들 때는 최대한 일반화된 로직으로 작성하여 다양한 상황에서 재사용할 수 있도록 해야 합니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useInput","position":{"start":{"line":134,"column":68,"offset":3435},"end":{"line":134,"column":78,"offset":3445}}}],"position":{"start":{"line":134,"column":68,"offset":3435},"end":{"line":134,"column":78,"offset":3445}}},"children":"useInput"}}]," 훅을 만들어 다양한 형태의 입력 컨트롤을 관리할 수 있습니다:"]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import { useState } from 'react';\n\nfunction useInput(initialValue) {\n  const [value, setValue] = useState(initialValue);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  return {\n    value,\n    onChange: handleChange,\n  };\n}\n\nexport default useInput;\n"}],"position":{"start":{"line":136,"column":1,"offset":3482},"end":{"line":153,"column":4,"offset":3761}}},"children":"import { useState } from 'react';\n\nfunction useInput(initialValue) {\n  const [value, setValue] = useState(initialValue);\n\n  function handleChange(e) {\n    setValue(e.target.value);\n  }\n\n  return {\n    value,\n    onChange: handleChange,\n  };\n}\n\nexport default useInput;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<input>","position":{"start":{"line":155,"column":4,"offset":3766},"end":{"line":155,"column":13,"offset":3775}}}],"position":{"start":{"line":155,"column":4,"offset":3766},"end":{"line":155,"column":13,"offset":3775}}},"children":"<input>"}}]," 컴포넌트와 함께 사용할 수 있습니다:"]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react';\nimport useInput from './useInput';\n\nfunction InputComponent() {\n  const nameInput = useInput('');\n\n  return (\n    <div>\n      <label>\n        Name:\n        <input type=\n"}],"position":{"start":{"line":157,"column":1,"offset":3798},"end":{"line":169,"column":1,"offset":4001}}},"children":"import React from 'react';\nimport useInput from './useInput';\n\nfunction InputComponent() {\n  const nameInput = useInput('');\n\n  return (\n    <div>\n      <label>\n        Name:\n        <input type=\n"}}]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화","toc":[{"tagName":"h1","title":"React.js 커스텀 훅스(Custom Hooks) 만들기: 코드 재사용성 극대화","id":"2cda5bd4"},{"tagName":"h2","title":"커스텀 훅스의 개념","id":"8a0e7f9d"},{"tagName":"h3","title":"예시: 기본 커스텀 훅","id":"6b4c81b0"},{"tagName":"h2","title":"커스텀 훅 작성 방법","id":"c4e56900"},{"tagName":"h3","title":"예시: API 데이터 페칭 커스텀 훅","id":"530f840b"},{"tagName":"h2","title":"실전 팁","id":"e6a272c7"},{"tagName":"h3","title":"훅의 컴포넌트화","id":"5561b3b9"},{"tagName":"h3","title":"테스트와 디버깅","id":"b6eb335d"},{"tagName":"h3","title":"로직의 일반화","id":"4c796296"}],"language":"kr"}]}]]}]]
8:null
