1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-GCD%EC%99%80-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B0%A9%EB%B2%95-86d85114","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-GCD와-오퍼레이션-큐를-이용한-멀티스레딩-동시성을-관리하는-효율적인-방법-86d85114\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-GCD%EC%99%80-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B0%A9%EB%B2%95-86d85114","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-GCD와-오퍼레이션-큐를-이용한-멀티스레딩-동시성을-관리하는-효율적인-방법-86d85114\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-GCD%EC%99%80-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B0%A9%EB%B2%95-86d85114","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩을 통해 동시성을 효과적으로 관리하는 방법을 다룹니다. 이 글은 GCD와 오퍼레이션 큐의 개념, 사용 사례 및 구현 방법을 상세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,GCD,멀티스레딩,동시성 관리"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-GCD%EC%99%80-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B0%A9%EB%B2%95-86d85114"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩을 통해 동시성을 효과적으로 관리하는 방법을 다룹니다. 이 글은 GCD와 오퍼레이션 큐의 개념, 사용 사례 및 구현 방법을 상세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-GCD%EC%99%80-%EC%98%A4%ED%8D%BC%EB%A0%88%EC%9D%B4%EC%85%98-%ED%81%90%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%84-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%B0%A9%EB%B2%95-86d85114"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩을 통해 동시성을 효과적으로 관리하는 방법을 다룹니다. 이 글은 GCD와 오퍼레이션 큐의 개념, 사용 사례 및 구현 방법을 상세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-04"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"09ad555d","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift 프로그래밍 언어는 멀티스레딩과 동시성 처리를 효율적으로 관리할 수 있는 강력한 도구를 제공합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Grand Central Dispatch (GCD)","position":{"start":{"line":4,"column":69,"offset":123},"end":{"line":4,"column":99,"offset":153}}}],"position":{"start":{"line":4,"column":69,"offset":123},"end":{"line":4,"column":99,"offset":153}}},"children":"Grand Central Dispatch (GCD)"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"오퍼레이션 큐 (Operation Queue)","position":{"start":{"line":4,"column":101,"offset":155},"end":{"line":4,"column":128,"offset":182}}}],"position":{"start":{"line":4,"column":101,"offset":155},"end":{"line":4,"column":128,"offset":182}}},"children":"오퍼레이션 큐 (Operation Queue)"}}],"를 이용한 멀티스레딩과 동시성 관리 방법에 대해 상세히 설명합니다."]}],"\n",["$","h2",null,{"id":"4f4083a6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Grand Central Dispatch (GCD)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GCD는 Apple이 개발한 멀티스레딩 라이브러리로, 작업을 시스템에서 관리하는 여러 큐에 비동기적으로 제출하여 성능을 최적화합니다. GCD는 병렬 처리의 복잡성을 줄이고, 개발자가 동시적인 작업을 훨씬 간단하게 수행할 수 있도록 도와줍니다."}],"\n",["$","h3",null,{"id":"c58fd188","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"GCD의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GCD는 **디스패치 큐 (dispatch queue)**를 사용해 작업을 관리합니다. 디스패치 큐는 직렬 큐와 동시 큐로 나뉘며, 각각의 큐는 서로 다른 방식으로 작업을 실행합니다."}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"직렬 큐 (Serial Queue)"}],": 작업을 한 번에 하나씩 순서대로 실행합니다. 직렬 큐는 동기화 문제를 피할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"동시 큐 (Concurrent Queue)"}],": 여러 작업을 동시에 실행합니다. 동시 큐는 CPU 효율성을 극대화하지만, 동기화 문제를 직접 관리해야 합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"8eabec14","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"GCD 사용 예시"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"가장 기본적인 GCD 사용 예시는 다음과 같습니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"// 전역 동시 큐 얻기\nlet globalQueue = DispatchQueue.global()\n\n// 작업 비동기 실행\nglobalQueue.async {\n    print(\"This is executed asynchronously on a global queue\")\n}\n\n// 메인 큐 얻기\nlet mainQueue = DispatchQueue.main\n\n// 작업 동기 실행\nmainQueue.sync {\n    print(\"This is executed synchronously on the main queue\")\n}\n"}],"position":{"start":{"line":21,"column":1,"offset":727},"end":{"line":37,"column":4,"offset":1034}}},"children":"// 전역 동시 큐 얻기\nlet globalQueue = DispatchQueue.global()\n\n// 작업 비동기 실행\nglobalQueue.async {\n    print(\"This is executed asynchronously on a global queue\")\n}\n\n// 메인 큐 얻기\nlet mainQueue = DispatchQueue.main\n\n// 작업 동기 실행\nmainQueue.sync {\n    print(\"This is executed synchronously on the main queue\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 전역 큐를 사용하여 작업을 비동기로 수행하고, 메인 큐를 사용하여 작업을 동기로 수행합니다."}],"\n",["$","h2",null,{"id":"829d8444","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"오퍼레이션 큐 (Operation Queue)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["오퍼레이션 큐는 GCD의 고급 추상화 계층으로, 보다 복잡한 작업 관리와 종속성 설정을 제공하는 클래스를 포함합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Operation","position":{"start":{"line":43,"column":67,"offset":1193},"end":{"line":43,"column":78,"offset":1204}}}],"position":{"start":{"line":43,"column":67,"offset":1193},"end":{"line":43,"column":78,"offset":1204}}},"children":"Operation"}}]," 클래스를 사용하여 작업을 정의하고 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OperationQueue","position":{"start":{"line":43,"column":101,"offset":1227},"end":{"line":43,"column":117,"offset":1243}}}],"position":{"start":{"line":43,"column":101,"offset":1227},"end":{"line":43,"column":117,"offset":1243}}},"children":"OperationQueue"}}],"에 추가합니다."]}],"\n",["$","h3",null,{"id":"b0ca78ef","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"오퍼레이션 큐의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["오퍼레이션 큐는 작업을 객체로 관리하며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Operation","position":{"start":{"line":47,"column":24,"offset":1296},"end":{"line":47,"column":35,"offset":1307}}}],"position":{"start":{"line":47,"column":24,"offset":1296},"end":{"line":47,"column":35,"offset":1307}}},"children":"Operation"}}]," 클래스의 하위 클래스로 작업을 정의합니다. 이렇게 하면 작업 간의 종속성과 우선 순위를 설정할 수 있습니다."]}],"\n",["$","h3",null,{"id":"9a8e8aca","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"오퍼레이션 클래스를 사용한 예시"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Operation","position":{"start":{"line":51,"column":5,"offset":1397},"end":{"line":51,"column":16,"offset":1408}}}],"position":{"start":{"line":51,"column":5,"offset":1397},"end":{"line":51,"column":16,"offset":1408}}},"children":"Operation"}}]," 클래스를 사용한 기본적인 예시입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"// 커스텀 오퍼레이션 클래스 정의\nclass CustomOperation: Operation {\n    override func main() {\n        if isCancelled { return }\n        print(\"Custom operation is executing\")\n    }\n}\n\n// 오퍼레이션 큐 생성\nlet operationQueue = OperationQueue()\n\n// 커스텀 오퍼레이션 추가\nlet customOperation = CustomOperation()\noperationQueue.addOperation(customOperation)\n"}],"position":{"start":{"line":53,"column":1,"offset":1431},"end":{"line":68,"column":4,"offset":1769}}},"children":"// 커스텀 오퍼레이션 클래스 정의\nclass CustomOperation: Operation {\n    override func main() {\n        if isCancelled { return }\n        print(\"Custom operation is executing\")\n    }\n}\n\n// 오퍼레이션 큐 생성\nlet operationQueue = OperationQueue()\n\n// 커스텀 오퍼레이션 추가\nlet customOperation = CustomOperation()\noperationQueue.addOperation(customOperation)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CustomOperation","position":{"start":{"line":70,"column":9,"offset":1779},"end":{"line":70,"column":26,"offset":1796}}}],"position":{"start":{"line":70,"column":9,"offset":1779},"end":{"line":70,"column":26,"offset":1796}}},"children":"CustomOperation"}}]," 클래스를 정의하고 이를 오퍼레이션 큐에 추가하여 실행합니다."]}],"\n",["$","h3",null,{"id":"450e47c0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"종속성 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"오퍼레이션 큐는 작업 간의 종속성을 설정할 수 있는 기능을 제공합니다. 이는 특정 작업이 다른 작업이 완료된 후에 실행되도록 보장합니다. 종속성 설정의 예시는 다음과 같습니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let operation1 = BlockOperation { print(\"Operation 1\") }\nlet operation2 = BlockOperation { print(\"Operation 2\") }\n\noperation2.addDependency(operation1)\n\noperationQueue.addOperations([operation1, operation2], waitUntilFinished: false)\n"}],"position":{"start":{"line":76,"column":1,"offset":1944},"end":{"line":83,"column":4,"offset":2190}}},"children":"let operation1 = BlockOperation { print(\"Operation 1\") }\nlet operation2 = BlockOperation { print(\"Operation 2\") }\n\noperation2.addDependency(operation1)\n\noperationQueue.addOperations([operation1, operation2], waitUntilFinished: false)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"operation1","position":{"start":{"line":85,"column":9,"offset":2200},"end":{"line":85,"column":21,"offset":2212}}}],"position":{"start":{"line":85,"column":9,"offset":2200},"end":{"line":85,"column":21,"offset":2212}}},"children":"operation1"}}],"이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"operation2","position":{"start":{"line":85,"column":23,"offset":2214},"end":{"line":85,"column":35,"offset":2226}}}],"position":{"start":{"line":85,"column":23,"offset":2214},"end":{"line":85,"column":35,"offset":2226}}},"children":"operation2"}}],"보다 먼저 실행되도록 종속성을 설정하였습니다."]}],"\n",["$","h2",null,{"id":"a234e9a0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"GCD와 오퍼레이션 큐의 선택 기준"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GCD와 오퍼레이션 큐는 각각의 장단점이 있습니다. 상황에 따라 적절한 도구를 선택하는 것이 중요합니다."}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"GCD를 사용할 때"}],": 간단한 비동기 작업을 빠르고 효율적으로 처리해야 할 때 사용합니다. GCD는 경량화되어 있으며, 코드 양이 적고 간결합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"오퍼레이션 큐를 사용할 때"}],": 작업 간의 종속성이나 우선 순위가 중요하고, 복잡한 작업 흐름을 관리해야 할 때 사용합니다. 오퍼레이션 큐는 코드의 구조화와 유지 보수를 쉽게 할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5718d89a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실습 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GCD와 오퍼레이션 큐를 결합한 실습 예제를 살펴보겠습니다. 이 예제에서는 이미지 다운로드와 처리를 비동기적으로 수행합니다."}],"\n",["$","h3",null,{"id":"8064cfda","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"GCD를 이용한 이미지 다운로드"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저 GCD를 사용하여 이미지를 다운로드하는 코드를 작성합니다:"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func downloadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n    DispatchQueue.global().async {\n        guard let data = try? Data(contentsOf: url), let image = UIImage(data: data) else {\n            DispatchQueue.main.async { completion(nil) }\n            return\n        }\n        DispatchQueue.main.async { completion(image) }\n    }\n}\n"}],"position":{"start":{"line":102,"column":1,"offset":2679},"end":{"line":112,"column":4,"offset":3040}}},"children":"func downloadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n    DispatchQueue.global().async {\n        guard let data = try? Data(contentsOf: url), let image = UIImage(data: data) else {\n            DispatchQueue.main.async { completion(nil) }\n            return\n        }\n        DispatchQueue.main.async { completion(image) }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 함수는 글로벌 큐를 사용하여 이미지를 다운로드하고, 결과를 메인 큐에서 처리합니다."}],"\n",["$","h3",null,{"id":"62c86852","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"오퍼레이션 큐를 이용한 이미지 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"그 다음, 오퍼레이션 큐를 사용하여 다운받은 이미지를 처리합니다:"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ImageProcessingOperation: Operation {\n    private let image: UIImage\n    var processedImage: UIImage?\n\n    init(image: UIImage) {\n        self.image = image\n    }\n\n    override func main() {\n        if isCancelled { return }\n        // 이미지 처리 로직 (예: 필터 적용)\n        processedImage = applyFilter(to: image)\n    }\n\n    private func applyFilter(to image: UIImage) -> UIImage? {\n        // 필터 적용 코드\n        return image\n    }\n}\n\nlet processingQueue = OperationQueue()\n\nfunc processImage(_ image: UIImage) {\n    let operation = ImageProcessingOperation(image: image)\n    processingQueue.addOperation(operation)\n}\n"}],"position":{"start":{"line":120,"column":1,"offset":3155},"end":{"line":147,"column":4,"offset":3780}}},"children":"class ImageProcessingOperation: Operation {\n    private let image: UIImage\n    var processedImage: UIImage?\n\n    init(image: UIImage) {\n        self.image = image\n    }\n\n    override func main() {\n        if isCancelled { return }\n        // 이미지 처리 로직 (예: 필터 적용)\n        processedImage = applyFilter(to: image)\n    }\n\n    private func applyFilter(to image: UIImage) -> UIImage? {\n        // 필터 적용 코드\n        return image\n    }\n}\n\nlet processingQueue = OperationQueue()\n\nfunc processImage(_ image: UIImage) {\n    let operation = ImageProcessingOperation(image: image)\n    processingQueue.addOperation(operation)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ImageProcessingOperation","position":{"start":{"line":149,"column":7,"offset":3788},"end":{"line":149,"column":33,"offset":3814}}}],"position":{"start":{"line":149,"column":7,"offset":3788},"end":{"line":149,"column":33,"offset":3814}}},"children":"ImageProcessingOperation"}}]," 클래스를 정의하여 이미지를 처리하고, 오퍼레이션 큐에 추가하여 실행합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩 및 동시성 관리 방법은 다양한 시나리오에서 매우 유용합니다. GCD는 간단한 비동기 작업에 적합하며, 오퍼레이션 큐는 복잡한 작업 흐름을 관리하는 데 유리합니다. 이 글에서 다룬 내용을 바탕으로, 자신의 프로젝트에 가장 적합한 동시성 관리 방법을 선택해 효과적으로 활용해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법.","toc":[{"tagName":"h1","title":"Swift에서 GCD와 오퍼레이션 큐를 이용한 멀티스레딩: 동시성을 관리하는 효율적인 방법","id":"09ad555d"},{"tagName":"h2","title":"Grand Central Dispatch (GCD)","id":"4f4083a6"},{"tagName":"h3","title":"GCD의 기본 개념","id":"c58fd188"},{"tagName":"h3","title":"GCD 사용 예시","id":"8eabec14"},{"tagName":"h2","title":"오퍼레이션 큐 (Operation Queue)","id":"829d8444"},{"tagName":"h3","title":"오퍼레이션 큐의 기본 개념","id":"b0ca78ef"},{"tagName":"h3","title":"오퍼레이션 클래스를 사용한 예시","id":"9a8e8aca"},{"tagName":"h3","title":"종속성 설정","id":"450e47c0"},{"tagName":"h2","title":"GCD와 오퍼레이션 큐의 선택 기준","id":"a234e9a0"},{"tagName":"h2","title":"실습 예제","id":"5718d89a"},{"tagName":"h3","title":"GCD를 이용한 이미지 다운로드","id":"8064cfda"},{"tagName":"h3","title":"오퍼레이션 큐를 이용한 이미지 처리","id":"62c86852"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
