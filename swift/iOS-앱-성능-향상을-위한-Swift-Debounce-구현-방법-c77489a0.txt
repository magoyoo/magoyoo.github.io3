1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS-%EC%95%B1-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-Swift-Debounce-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-c77489a0","d"],{"children":["__PAGE__?{\"slug\":\"iOS-앱-성능-향상을-위한-Swift-Debounce-구현-방법-c77489a0\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS-%EC%95%B1-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-Swift-Debounce-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-c77489a0","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS-앱-성능-향상을-위한-Swift-Debounce-구현-방법-c77489a0\"}"},"styles":[]}],"segment":["slug","iOS-%EC%95%B1-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-Swift-Debounce-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-c77489a0","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 iOS 앱 성능을 향상시키기 위한 Swift에서의 Debounce 구현 방법에 대해 설명합니다. Debounce를 사용하면 사용자의 여러 차례 입력을 효율적으로 처리하여 성능을 개선할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,iOS,Debounce,성능 향상"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS-%EC%95%B1-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-Swift-Debounce-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-c77489a0"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 iOS 앱 성능을 향상시키기 위한 Swift에서의 Debounce 구현 방법에 대해 설명합니다. Debounce를 사용하면 사용자의 여러 차례 입력을 효율적으로 처리하여 성능을 개선할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS-%EC%95%B1-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%9D%84-%EC%9C%84%ED%95%9C-Swift-Debounce-%EA%B5%AC%ED%98%84-%EB%B0%A9%EB%B2%95-c77489a0"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 iOS 앱 성능을 향상시키기 위한 Swift에서의 Debounce 구현 방법에 대해 설명합니다. Debounce를 사용하면 사용자의 여러 차례 입력을 효율적으로 처리하여 성능을 개선할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-16"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"09e849ac","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법"}],"\n",["$","h2",null,{"id":"476966c5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 애플리케이션에서 사용자 인터페이스(UI)를 다룰 때 성능 문제를 겪는 경우가 종종 있습니다. 특히 사용자가 연달아 발생시키는 이벤트(예: 버튼 클릭, 텍스트 입력 등)에 대한 처리를 효율적으로 하지 않으면 응답성이 떨어지고, 이는 사용자 경험에 부정적인 영향을 미칠 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Debounce","position":{"start":{"line":6,"column":162,"offset":209},"end":{"line":6,"column":172,"offset":219}}}],"position":{"start":{"line":6,"column":162,"offset":209},"end":{"line":6,"column":172,"offset":219}}},"children":"Debounce"}}],"라는 테크닉은 이러한 문제를 해결하는데 매우 유용합니다. 이 글에서는 Debounce의 개념과 Swift에서 이를 구현하는 방법에 대해 자세히 설명하겠습니다."]}],"\n",["$","h2",null,{"id":"86ffb876","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Debounce란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Debounce는 짧은 시간 내에 연속적으로 발생하는 이벤트를 하나의 이벤트로 묶어 처리하는 기법입니다. 이를 통해 불필요한 연산을 줄이고, 시스템의 자원을 절약할 수 있습니다. 예를 들어, 사용자가 검색 바에 텍스트를 입력할 때마다 즉시 검색 요청을 보내는 대신 일정 시간 동안 입력이 멈춘 후에 한 번만 요청을 보내는 것이 Debounce의 전형적인 사용 사례입니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Debounce의 주요 목적은 다음과 같습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"자원의 효율적인 사용"}],"\n",["$","li","li-1",{"children":"불필요한 작업 감소"}],"\n",["$","li","li-2",{"children":"성능 최적화"}],"\n",["$","li","li-3",{"children":"사용자 경험 향상"}],"\n"]}],"\n",["$","h2",null,{"id":"32d329b6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 Debounce 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Debounce를 구현하는 과정은 기본적으로 두 단계로 나누어집니다: 이벤트가 발생하면 타이머를 시작하고, 타이머가 만료되기 전 추가 이벤트가 발생하면 타이머를 초기화합니다. 마지막으로 타이머가 만료되었을 때 실제 작업을 실행합니다."}],"\n",["$","h3",null,{"id":"32ed842a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 구현 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 Swift에서 Debounce를 구현하는 기본적인 예제입니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass Debouncer {\n    private var timer: Timer?\n    private let delay: TimeInterval\n    private let queue: DispatchQueue\n\n    init(delay: TimeInterval, queue: DispatchQueue = .main) {\n        self.delay = delay\n        self.queue = queue\n    }\n\n    func call(action: @escaping () -> Void) {\n        timer?.invalidate()\n        timer = Timer.scheduledTimer(withTimeInterval: delay, repeats: false) { [weak self] _ in\n            self?.queue.async {\n                action()\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":27,"column":1,"offset":826},"end":{"line":49,"column":4,"offset":1362}}},"children":"import Foundation\n\nclass Debouncer {\n    private var timer: Timer?\n    private let delay: TimeInterval\n    private let queue: DispatchQueue\n\n    init(delay: TimeInterval, queue: DispatchQueue = .main) {\n        self.delay = delay\n        self.queue = queue\n    }\n\n    func call(action: @escaping () -> Void) {\n        timer?.invalidate()\n        timer = Timer.scheduledTimer(withTimeInterval: delay, repeats: false) { [weak self] _ in\n            self?.queue.async {\n                action()\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드를 사용하면 일정 시간 동안 입력이 멈출 때까지 실제로 작업을 실행하지 않습니다. 주어진 단일 타이머를 설정하고, 입력 발생 시마다 이를 초기화하여 연속된 입력을 한 번에 처리할 수 있게 합니다."}],"\n",["$","h3",null,{"id":"bedb64ba","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UITextField와 함께 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Debouncer를 사용하여 UITextField에서 사용자 입력을 처리하는 예제를 제공합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nclass ViewController: UIViewController, UITextFieldDelegate {\n    private let debouncer = Debouncer(delay: 0.5)\n    \n    @IBOutlet weak var textField: UITextField!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField.delegate = self\n    }\n\n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        debouncer.call { [weak self] in\n            self?.performSearch(with: textField.text ?? \"\")\n        }\n        return true\n    }\n\n    private func performSearch(with query: String) {\n        // 여기에 네트워크 요청이나 검색 알고리즘을 추가하세요.\n        print(\"검색 실행: \\(query)\")\n    }\n}\n"}],"position":{"start":{"line":57,"column":1,"offset":1560},"end":{"line":82,"column":4,"offset":2256}}},"children":"import UIKit\n\nclass ViewController: UIViewController, UITextFieldDelegate {\n    private let debouncer = Debouncer(delay: 0.5)\n    \n    @IBOutlet weak var textField: UITextField!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField.delegate = self\n    }\n\n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        debouncer.call { [weak self] in\n            self?.performSearch(with: textField.text ?? \"\")\n        }\n        return true\n    }\n\n    private func performSearch(with query: String) {\n        // 여기에 네트워크 요청이나 검색 알고리즘을 추가하세요.\n        print(\"검색 실행: \\(query)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UITextFieldDelegate","position":{"start":{"line":84,"column":9,"offset":2266},"end":{"line":84,"column":30,"offset":2287}}}],"position":{"start":{"line":84,"column":9,"offset":2266},"end":{"line":84,"column":30,"offset":2287}}},"children":"UITextFieldDelegate"}}],"를 사용하여 텍스트 필드의 입력 변화를 감지하고, Debouncer를 사용하여 입력이 멈췄을 때만 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"performSearch","position":{"start":{"line":84,"column":85,"offset":2342},"end":{"line":84,"column":100,"offset":2357}}}],"position":{"start":{"line":84,"column":85,"offset":2342},"end":{"line":84,"column":100,"offset":2357}}},"children":"performSearch"}}]," 메서드를 호출합니다."]}],"\n",["$","h2",null,{"id":"759ff510","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Debounce와 Throttle의 차이점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Debounce와 유사한 개념으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Throttle","position":{"start":{"line":88,"column":20,"offset":2418},"end":{"line":88,"column":30,"offset":2428}}}],"position":{"start":{"line":88,"column":20,"offset":2418},"end":{"line":88,"column":30,"offset":2428}}},"children":"Throttle"}}],"이 있습니다. Debounce는 일정 시간 동안 추가 이벤트가 발생하지 않을 경우 한 번만 작업을 실행하는 반면, Throttle은 일정 시간 간격으로 작업을 제한하여 실행합니다. Throttle을 사용하면 예를 들어 사용자가 1초마다 발생하는 이벤트를 5초마다 한 번만 처리하도록 할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Debounce는 iOS 앱에서 사용자 인터페이스 성능을 향상시키기 위한 강력한 도구입니다. 이 글에서는 Debounce의 개념과 Swift에서 이를 구현하는 방법에 대해 살펴보았습니다. Debounce를 효과적으로 사용하면 애플리케이션의 응답성을 개선하고, 시스템 자원을 효율적으로 사용할 수 있습니다. 이러한 기술을 활용하여 보다 나은 사용자 경험을 제공할 수 있기를 바랍니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법","toc":[{"tagName":"h1","title":"iOS 앱 성능 향상을 위한 Swift Debounce 구현 방법","id":"09e849ac"},{"tagName":"h2","title":"개요","id":"476966c5"},{"tagName":"h2","title":"Debounce란?","id":"86ffb876"},{"tagName":"h2","title":"Swift에서 Debounce 구현하기","id":"32d329b6"},{"tagName":"h3","title":"기본 구현 예제","id":"32ed842a"},{"tagName":"h3","title":"UITextField와 함께 사용하기","id":"bedb64ba"},{"tagName":"h2","title":"Debounce와 Throttle의 차이점","id":"759ff510"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
