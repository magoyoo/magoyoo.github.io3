1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-React-Hook-Form%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%B0%A9%EB%B2%95-1fe8ea33","d"],{"children":["__PAGE__?{\"slug\":\"폼-처리와-유효성-검사-구현하기-React-Hook-Form을-사용한-폼-처리와-간단한-유효성-검사-방법-1fe8ea33\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-React-Hook-Form%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%B0%A9%EB%B2%95-1fe8ea33","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"폼-처리와-유효성-검사-구현하기-React-Hook-Form을-사용한-폼-처리와-간단한-유효성-검사-방법-1fe8ea33\"}"},"styles":[]}],"segment":["slug","%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-React-Hook-Form%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%B0%A9%EB%B2%95-1fe8ea33","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 React 어플리케이션에서 `React Hook Form`을 사용하여 폼을 처리하고 기본적인 유효성 검사를 구현하는 방법을 다룹니다. 간단한 예제를 통해 폼의 상태 관리와 유효성 검사의 중요성을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"React,JavaScript,Form,Validation"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-React-Hook-Form%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%B0%A9%EB%B2%95-1fe8ea33"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 React 어플리케이션에서 `React Hook Form`을 사용하여 폼을 처리하고 기본적인 유효성 검사를 구현하는 방법을 다룹니다. 간단한 예제를 통해 폼의 상태 관리와 유효성 검사의 중요성을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-React-Hook-Form%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%8F%BC-%EC%B2%98%EB%A6%AC%EC%99%80-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9C%A0%ED%9A%A8%EC%84%B1-%EA%B2%80%EC%82%AC-%EB%B0%A9%EB%B2%95-1fe8ea33"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 React 어플리케이션에서 `React Hook Form`을 사용하여 폼을 처리하고 기본적인 유효성 검사를 구현하는 방법을 다룹니다. 간단한 예제를 통해 폼의 상태 관리와 유효성 검사의 중요성을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-20"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"477a297b","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법"}],"\n",["$","h2",null,{"id":"fa255f0c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"소개"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["사용자 입력을 처리하는 폼은 웹 애플리케이션의 필수 요소입니다. 폼의 상태를 효율적으로 관리하고 유효성 검사(validation)를 통해 사용자 경험을 개선하는 것은 매우 중요합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Hook Form","position":{"start":{"line":6,"column":104,"offset":176},"end":{"line":6,"column":121,"offset":193}}}],"position":{"start":{"line":6,"column":104,"offset":176},"end":{"line":6,"column":121,"offset":193}}},"children":"React Hook Form"}}],"은 React에서 폼을 간편하게 처리하고 유효성 검사를 쉽게 구현할 수 있도록 도와주는 라이브러리입니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Hook Form","position":{"start":{"line":6,"column":187,"offset":259},"end":{"line":6,"column":204,"offset":276}}}],"position":{"start":{"line":6,"column":187,"offset":259},"end":{"line":6,"column":204,"offset":276}}},"children":"React Hook Form"}}],"을 사용하여 폼을 처리하고 간단한 유효성 검사를 구현하는 방법을 설명합니다."]}],"\n",["$","h2",null,{"id":"0425c58c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"React Hook Form 설치"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Hook Form","position":{"start":{"line":10,"column":5,"offset":348},"end":{"line":10,"column":22,"offset":365}}}],"position":{"start":{"line":10,"column":5,"offset":348},"end":{"line":10,"column":22,"offset":365}}},"children":"React Hook Form"}}],"을 프로젝트에 설치해야 합니다. 이를 위해 npm이나 yarn을 사용할 수 있습니다. 다음 명령어를 실행하여 설치하세요:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install react-hook-form \n"}],"position":{"start":{"line":12,"column":1,"offset":434},"end":{"line":14,"column":5,"offset":476}}},"children":"npm install react-hook-form \n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"또는"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"yarn add react-hook-form \n"}],"position":{"start":{"line":17,"column":1,"offset":481},"end":{"line":19,"column":4,"offset":519}}},"children":"yarn add react-hook-form \n"}}]}],"\n",["$","h2",null,{"id":"9fe3241a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본적인 폼 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Hook Form","position":{"start":{"line":23,"column":4,"offset":539},"end":{"line":23,"column":21,"offset":556}}}],"position":{"start":{"line":23,"column":4,"offset":539},"end":{"line":23,"column":21,"offset":556}}},"children":"React Hook Form"}}],"을 사용하여 기본적인 폼을 구현해보겠습니다. 다음은 이름과 이메일을 입력받는 간단한 폼 예제입니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react'; \nimport { useForm } from 'react-hook-form'; \n\nfunction App() { \n const { register, handleSubmit, formState: { errors } } = useForm(); \n const onSubmit = data => console.log(data); \n\n return ( \n <form onSubmit={handleSubmit(onSubmit)}> \n <div> \n <label>Name</label>\n <input {...register(\"name\", { required: true })} /> \n {errors.name && <p>Name is required</p>} \n </div> \n <div> \n <label>Email</label> \n <input {...register(\"email\", { required: true })} /> \n {errors.email && <p>Email is required</p>} \n </div> \n <input type=\"submit\" /> \n </form> \n ); \n} \n\nexport default App; \n"}],"position":{"start":{"line":25,"column":1,"offset":613},"end":{"line":51,"column":5,"offset":1229}}},"children":"import React from 'react'; \nimport { useForm } from 'react-hook-form'; \n\nfunction App() { \n const { register, handleSubmit, formState: { errors } } = useForm(); \n const onSubmit = data => console.log(data); \n\n return ( \n <form onSubmit={handleSubmit(onSubmit)}> \n <div> \n <label>Name</label>\n <input {...register(\"name\", { required: true })} /> \n {errors.name && <p>Name is required</p>} \n </div> \n <div> \n <label>Email</label> \n <input {...register(\"email\", { required: true })} /> \n {errors.email && <p>Email is required</p>} \n </div> \n <input type=\"submit\" /> \n </form> \n ); \n} \n\nexport default App; \n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드는 기본적인 폼을 구현한 예제입니다. 여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useForm","position":{"start":{"line":53,"column":31,"offset":1261},"end":{"line":53,"column":40,"offset":1270}}}],"position":{"start":{"line":53,"column":31,"offset":1261},"end":{"line":53,"column":40,"offset":1270}}},"children":"useForm"}}]," 훅을 사용하여 폼의 상태를 관리하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"register","position":{"start":{"line":53,"column":62,"offset":1292},"end":{"line":53,"column":72,"offset":1302}}}],"position":{"start":{"line":53,"column":62,"offset":1292},"end":{"line":53,"column":72,"offset":1302}}},"children":"register"}}]," 함수를 통해 각 입력 필드를 폼에 등록합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"handleSubmit","position":{"start":{"line":53,"column":99,"offset":1329},"end":{"line":53,"column":113,"offset":1343}}}],"position":{"start":{"line":53,"column":99,"offset":1329},"end":{"line":53,"column":113,"offset":1343}}},"children":"handleSubmit"}}]," 함수는 폼 제출 시 실행되는 콜백 함수를 지정합니다. 또한, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"formState","position":{"start":{"line":53,"column":148,"offset":1378},"end":{"line":53,"column":159,"offset":1389}}}],"position":{"start":{"line":53,"column":148,"offset":1378},"end":{"line":53,"column":159,"offset":1389}}},"children":"formState"}}]," 객체를 사용하여 각 입력 필드의 유효성 검사 결과를 확인합니다."]}],"\n",["$","h2",null,{"id":"326e2264","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"폼 유효성 검사"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 예제에서는 간단한 유효성 검사로 필수 입력 필드 여부만을 확인했습니다. 이제 더 복잡한 유효성 검사를 추가해보겠습니다. 이메일 형식을 검사하는 예제를 보겠습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react'; \nimport { useForm } from 'react-hook-form'; \n\nfunction App() { \n const { register, handleSubmit, formState: { errors } } = useForm(); \n const onSubmit = data => console.log(data); \n\n return ( \n <form onSubmit={handleSubmit(onSubmit)}> \n <div> \n <label>Name</label> \n <input {...register(\"name\", { required: true })} /> \n {errors.name && <p>Name is required</p>} \n </div> \n <div> \n <label>Email</label> \n <input {...register(\"email\", { \n required: \"Email is required\", \n pattern: { \n value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i, \n message: \"Invalid email address\" \n } \n })} /> \n {errors.email && <p>{errors.email.message}</p>} \n </div> \n <input type=\"submit\" /> \n </form> \n ); \n} \n\nexport default App; \n"}],"position":{"start":{"line":59,"column":1,"offset":1535},"end":{"line":91,"column":5,"offset":2282}}},"children":"import React from 'react'; \nimport { useForm } from 'react-hook-form'; \n\nfunction App() { \n const { register, handleSubmit, formState: { errors } } = useForm(); \n const onSubmit = data => console.log(data); \n\n return ( \n <form onSubmit={handleSubmit(onSubmit)}> \n <div> \n <label>Name</label> \n <input {...register(\"name\", { required: true })} /> \n {errors.name && <p>Name is required</p>} \n </div> \n <div> \n <label>Email</label> \n <input {...register(\"email\", { \n required: \"Email is required\", \n pattern: { \n value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i, \n message: \"Invalid email address\" \n } \n })} /> \n {errors.email && <p>{errors.email.message}</p>} \n </div> \n <input type=\"submit\" /> \n </form> \n ); \n} \n\nexport default App; \n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pattern","position":{"start":{"line":93,"column":7,"offset":2290},"end":{"line":93,"column":16,"offset":2299}}}],"position":{"start":{"line":93,"column":7,"offset":2290},"end":{"line":93,"column":16,"offset":2299}}},"children":"pattern"}}]," 옵션을 추가하여 이메일 형식을 확인하는 유효성 검사를 추가했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pattern","position":{"start":{"line":93,"column":55,"offset":2338},"end":{"line":93,"column":64,"offset":2347}}}],"position":{"start":{"line":93,"column":55,"offset":2338},"end":{"line":93,"column":64,"offset":2347}}},"children":"pattern"}}]," 속성은 정규 표현식을 받아서 입력 값이 주어진 형식과 일치하는지 검사합니다. 일치하지 않는 경우에 보여줄 오류 메시지도 함께 설정할 수 있습니다."]}],"\n",["$","h2",null,{"id":"c9b55a9c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"사용자 정의 유효성 검사"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"때로는 기본적인 유효성 검사 규칙으로는 충분하지 않은 경우가 있습니다. 이럴 때는 사용자 정의 유효성 검사를 추가할 수 있습니다. 다음 예제에서는 비밀번호와 비밀번호 확인 필드를 검사하는 예제를 보여줍니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react'; \nimport { useForm } from 'react-hook-form'; \n\nfunction App() { \n const { register, handleSubmit, watch, formState: { errors } } = useForm(); \n const onSubmit = data => console.log(data); \n const password = watch('password'); \n\n return ( \n <form onSubmit={handleSubmit(onSubmit)}> \n <div> \n <label>Password</label> \n <input type=\"password\" {...register(\"password\", { required: true })} /> \n {errors.password && <p>Password is required</p>} \n </div> \n <div> \n <label>Confirm Password</label> \n <input \n type=\"password\" \n {...register(\"confirmPassword\", { \n validate: value => value === password || \"Passwords do not match\" \n })} \n /> \n {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>} \n </div> \n <input type=\"submit\" /> \n </form> \n ); \n} \n\nexport default App; \n"}],"position":{"start":{"line":99,"column":1,"offset":2567},"end":{"line":131,"column":5,"offset":3384}}},"children":"import React from 'react'; \nimport { useForm } from 'react-hook-form'; \n\nfunction App() { \n const { register, handleSubmit, watch, formState: { errors } } = useForm(); \n const onSubmit = data => console.log(data); \n const password = watch('password'); \n\n return ( \n <form onSubmit={handleSubmit(onSubmit)}> \n <div> \n <label>Password</label> \n <input type=\"password\" {...register(\"password\", { required: true })} /> \n {errors.password && <p>Password is required</p>} \n </div> \n <div> \n <label>Confirm Password</label> \n <input \n type=\"password\" \n {...register(\"confirmPassword\", { \n validate: value => value === password || \"Passwords do not match\" \n })} \n /> \n {errors.confirmPassword && <p>{errors.confirmPassword.message}</p>} \n </div> \n <input type=\"submit\" /> \n </form> \n ); \n} \n\nexport default App; \n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"validate","position":{"start":{"line":133,"column":6,"offset":3391},"end":{"line":133,"column":16,"offset":3401}}}],"position":{"start":{"line":133,"column":6,"offset":3391},"end":{"line":133,"column":16,"offset":3401}}},"children":"validate"}}]," 옵션을 사용하여 사용자 정의 유효성 검사를 추가했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"validate","position":{"start":{"line":133,"column":49,"offset":3434},"end":{"line":133,"column":59,"offset":3444}}}],"position":{"start":{"line":133,"column":49,"offset":3434},"end":{"line":133,"column":59,"offset":3444}}},"children":"validate"}}],"는 함수를 받아서 입력 값이 유효한지 검사할 수 있습니다. 이 예제에서는 비밀번호와 비밀번호 확인 필드의 값이 일치하는지 확인하고, 일치하지 않을 경우 오류 메시지를 표시합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Hook Form","position":{"start":{"line":137,"column":1,"offset":3553},"end":{"line":137,"column":18,"offset":3570}}}],"position":{"start":{"line":137,"column":1,"offset":3553},"end":{"line":137,"column":18,"offset":3570}}},"children":"React Hook Form"}}],"은 최소한의 코드로 폼의 상태를 관리하고 유효성 검사를 쉽게 구현할 수 있도록 도와줍니다. 다양한 유효성 검사 옵션과 사용자 정의 유효성 검사를 활용하여 사용자 경험을 개선할 수 있습니다. 위의 예제들을 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React Hook Form","position":{"start":{"line":137,"column":135,"offset":3687},"end":{"line":137,"column":152,"offset":3704}}}],"position":{"start":{"line":137,"column":135,"offset":3687},"end":{"line":137,"column":152,"offset":3704}}},"children":"React Hook Form"}}],"을 활용한 폼 처리와 유효성 검사 구현에 대해 잘 이해하게 되었기를 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법.","toc":[{"tagName":"h1","title":"폼 처리와 유효성 검사 구현하기: React Hook Form을 사용한 폼 처리와 간단한 유효성 검사 방법","id":"477a297b"},{"tagName":"h2","title":"소개","id":"fa255f0c"},{"tagName":"h2","title":"React Hook Form 설치","id":"0425c58c"},{"tagName":"h2","title":"기본적인 폼 구현","id":"9fe3241a"},{"tagName":"h2","title":"폼 유효성 검사","id":"326e2264"},{"tagName":"h2","title":"사용자 정의 유효성 검사","id":"c9b55a9c"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
