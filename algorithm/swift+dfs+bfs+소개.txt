1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","swift%2Bdfs%2Bbfs%2B%EC%86%8C%EA%B0%9C","d"],{"children":["__PAGE__?{\"slug\":\"swift+dfs+bfs+소개\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","swift%2Bdfs%2Bbfs%2B%EC%86%8C%EA%B0%9C","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"swift+dfs+bfs+소개\"}"},"styles":[]}],"segment":["slug","swift%2Bdfs%2Bbfs%2B%EC%86%8C%EA%B0%9C","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"DFS와 BFS를 SWIFT코드로 작성해보고 예제를 통해 어떤 문제에 어떤 알고리즘이 적합한지 알아봅니다."}],["$","meta","3",{"name":"keywords","content":"coding test,알고리즘,코딩테스트,algorithm"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/swift+dfs+bfs+%EC%86%8C%EA%B0%9C"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"DFS와 BFS를 SWIFT코드로 작성해보고 예제를 통해 어떤 문제에 어떤 알고리즘이 적합한지 알아봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/swift+dfs+bfs+%EC%86%8C%EA%B0%9C"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"DFS와 BFS를 SWIFT코드로 작성해보고 예제를 통해 어떤 문제에 어떤 알고리즘이 적합한지 알아봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:T17ea,
# DFS/BFS란 ?

---

DFS(Depth-First Search)와 BFS(Breadth-First Search)는 그래프 탐색 알고리즘입니다. 이 알고리즘들은 그래프에서 노드 간의 경로를 찾거나, 연결된 구성 요소를 찾는 등 다양한 그래프 문제를 해결하는 데 사용됩니다.

DFS는 깊이 우선 탐색 알고리즘이며, 스택이나 재귀 함수를 사용하여 구현됩니다. 이 알고리즘은 한 경로를 따라 끝까지 탐색한 후, 다음 경로를 찾습니다. 즉, 한 노드에서 출발하여 가능한 한 멀리까지 탐색한 후, 다시 돌아와 다음 경로를 탐색합니다. DFS는 그래프의 구성 요소, 사이클, 위상 정렬 등을 찾는 데 유용합니다.

BFS는 너비 우선 탐색 알고리즘이며, 큐를 사용하여 구현됩니다. 이 알고리즘은 한 노드에서 시작하여 인접한 노드를 모두 방문한 후, 이어지는 모든 노드를 탐색합니다. 즉, BFS는 노드의 깊이가 낮은 것부터 탐색하며, 최단 경로 문제를 해결하는 데 사용됩니다.

DFS와 BFS는 둘 다 그래프 탐색에 사용되지만, DFS는 한 경로를 따라 탐색하며, BFS는 모든 인접한 노드를 탐색합니다. 이러한 차이점은 DFS와 BFS를 사용할 때 해결하려는 문제에 따라 선택해야 합니다.

# Swift 코드로 DFS 구현

---

```swift
func dfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){
    visited[startNode] = true
    print(startNode, terminator: " ")

    for nextNode in graph[startNode] {
        if !visited[nextNode] {
            dfs(graph, nextNode, &visited)
        }
    }
}
```

위 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, DFS를 수행하고 방문한 노드를 출력합니다. 방문한 노드를 출력하는 부분을 수정하여 원하는 출력 형태로 변경할 수 있습니다. 위의 코드를 보면 popLast를 사용하여 stack 구조를 구현한 것을 확인할 수 있습니다. 일반적으로 실 사용시 위 코드를 아래와 같이 재귀적으로 호출하여 문제를 해결합니다.

```swift
let graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

var visited = [Bool](repeating: false, count: graph.count)

dfs(graph, 1, &visited)
```

# Swift 코드로 BFS 구현

---

아래 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, BFS를 수행하고 방문한 노드를 출력합니다.

```swift
func bfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){
    var visited = [Bool](repeating: false, count: graph.count)
    var queue = [Int]()
    queue.append(startNode)

    while !queue.isEmpty {
        let node = queue.removeFirst()
        if !visited[node] {
            print(node, terminator: " ")
            visited[node] = true
            for neighbor in graph[node] {
                queue.append(neighbor)
            }
        }
    }
}

let graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

var visited = [Bool](repeating: false, count: graph.count)

dfs(graph, 1, &visited)
```

# DFS 대표 문제

---

1. 사이클 찾기: DFS는 그래프에서 사이클을 찾는 데 사용됩니다. 한 노드에서 출발하여 다음 노드로 이동할 때마다 방문 여부를 검사하고, 이미 방문한 노드를 만나면 사이클이 존재한다는 것을 알 수 있습니다.
2. 미로 찾기: DFS는 미로 찾기 문제를 해결하는 데 사용됩니다. 미로를 그래프로 모델링하고, 시작점에서 출발하여 목적지에 도달할 때까지 DFS를 반복하여 경로를 찾습니다.
3. 위상 정렬: DFS는 방향 그래프에서 위상 정렬을 수행하는 데 사용됩니다. DFS를 수행하면서 더 이상 방문할 수 없는 노드부터 역순으로 정렬하여 위상 정렬을 수행할 수 있습니다.
4. 연결 요소 찾기: DFS는 그래프에서 연결 요소를 찾는 데 사용됩니다. DFS를 수행하면서 방문한 노드들을 하나의 연결 요소로 묶을 수 있습니다.

# BFS 대표 문제

---

1. 네트워크 통신: BFS는 컴퓨터 네트워크에서 노드 간의 통신을 모델링하는 데 사용됩니다. 노드 간의 연결을 그래프로 모델링하고, BFS를 수행하여 각 노드가 통신할 수 있는 노드를 찾을 수 있습니다.
2. 최단거리 찾기 문제: 미로 탐색 문제는 DFS로도 해결할 수 있습니다. 하지만, BFS와는 다르게 깊이 우선 탐색이기에 BFS에 배해 비효율적이고 시험에서 시간 초과가 발생할 수 있습니다. 따라서 BFS를 이용하여 문제를 해결하는게 최선입니다.
3. 퍼즐 해결: BFS는 퍼즐을 해결하는 데 사용됩니다. 예를 들어, 8-퍼즐과 같은 퍼즐은 그래프로 모델링할 수 있으며, BFS를 사용하여 퍼즐을 해결할 수 있습니다.
4. 상태 공간 탐색: BFS는 상태 공간 탐색에 사용됩니다. 상태 공간은 가능한 상태의 모음을 말하며, 각 상태는 그래프의 노드로 모델링됩니다. BFS를 사용하여 시작 상태에서 목적 상태로 이동할 수 있는 모든 경로를 찾을 수 있습니다.
5. 컴파일러 최적화: BFS는 컴파일러에서 코드 최적화를 수행하는 데 사용됩니다. 컴파일러는 소스 코드를 그래프로 모델링하고, BFS를 사용하여 코드 최적화를 수행합니다.

# 참고 자료

---

저작권 등 문제가 되는 부분이 있다면 삭제하겠습니다.

- ["프로그래머스"](https://programmers.co.kr/)
- ["백준"](https://www.acmicpc.net/)
- ["이것이 취업을 위한 코딩테스트다"](https://product.kyobobook.co.kr/detail/S000001810273?utm_source=google&utm_medium=cpc&utm_campaign=googleSearch&gt_network=g&gt_keyword=&gt_target_id=aud-901091942354:dsa-608444978378&gt_campaign_id=9979905549&gt_adgroup_id=132556570510&gclid=Cj0KCQjw_r6hBhDdARIsAMIDhV_FejwwhSFue2tP0WVJ6aA7CXKkT4IIop9fQy8idOEPW6wszz4vjYMaApsxEALw_wcB)
10:T17ea,
# DFS/BFS란 ?

---

DFS(Depth-First Search)와 BFS(Breadth-First Search)는 그래프 탐색 알고리즘입니다. 이 알고리즘들은 그래프에서 노드 간의 경로를 찾거나, 연결된 구성 요소를 찾는 등 다양한 그래프 문제를 해결하는 데 사용됩니다.

DFS는 깊이 우선 탐색 알고리즘이며, 스택이나 재귀 함수를 사용하여 구현됩니다. 이 알고리즘은 한 경로를 따라 끝까지 탐색한 후, 다음 경로를 찾습니다. 즉, 한 노드에서 출발하여 가능한 한 멀리까지 탐색한 후, 다시 돌아와 다음 경로를 탐색합니다. DFS는 그래프의 구성 요소, 사이클, 위상 정렬 등을 찾는 데 유용합니다.

BFS는 너비 우선 탐색 알고리즘이며, 큐를 사용하여 구현됩니다. 이 알고리즘은 한 노드에서 시작하여 인접한 노드를 모두 방문한 후, 이어지는 모든 노드를 탐색합니다. 즉, BFS는 노드의 깊이가 낮은 것부터 탐색하며, 최단 경로 문제를 해결하는 데 사용됩니다.

DFS와 BFS는 둘 다 그래프 탐색에 사용되지만, DFS는 한 경로를 따라 탐색하며, BFS는 모든 인접한 노드를 탐색합니다. 이러한 차이점은 DFS와 BFS를 사용할 때 해결하려는 문제에 따라 선택해야 합니다.

# Swift 코드로 DFS 구현

---

```swift
func dfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){
    visited[startNode] = true
    print(startNode, terminator: " ")

    for nextNode in graph[startNode] {
        if !visited[nextNode] {
            dfs(graph, nextNode, &visited)
        }
    }
}
```

위 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, DFS를 수행하고 방문한 노드를 출력합니다. 방문한 노드를 출력하는 부분을 수정하여 원하는 출력 형태로 변경할 수 있습니다. 위의 코드를 보면 popLast를 사용하여 stack 구조를 구현한 것을 확인할 수 있습니다. 일반적으로 실 사용시 위 코드를 아래와 같이 재귀적으로 호출하여 문제를 해결합니다.

```swift
let graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

var visited = [Bool](repeating: false, count: graph.count)

dfs(graph, 1, &visited)
```

# Swift 코드로 BFS 구현

---

아래 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, BFS를 수행하고 방문한 노드를 출력합니다.

```swift
func bfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){
    var visited = [Bool](repeating: false, count: graph.count)
    var queue = [Int]()
    queue.append(startNode)

    while !queue.isEmpty {
        let node = queue.removeFirst()
        if !visited[node] {
            print(node, terminator: " ")
            visited[node] = true
            for neighbor in graph[node] {
                queue.append(neighbor)
            }
        }
    }
}

let graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

var visited = [Bool](repeating: false, count: graph.count)

dfs(graph, 1, &visited)
```

# DFS 대표 문제

---

1. 사이클 찾기: DFS는 그래프에서 사이클을 찾는 데 사용됩니다. 한 노드에서 출발하여 다음 노드로 이동할 때마다 방문 여부를 검사하고, 이미 방문한 노드를 만나면 사이클이 존재한다는 것을 알 수 있습니다.
2. 미로 찾기: DFS는 미로 찾기 문제를 해결하는 데 사용됩니다. 미로를 그래프로 모델링하고, 시작점에서 출발하여 목적지에 도달할 때까지 DFS를 반복하여 경로를 찾습니다.
3. 위상 정렬: DFS는 방향 그래프에서 위상 정렬을 수행하는 데 사용됩니다. DFS를 수행하면서 더 이상 방문할 수 없는 노드부터 역순으로 정렬하여 위상 정렬을 수행할 수 있습니다.
4. 연결 요소 찾기: DFS는 그래프에서 연결 요소를 찾는 데 사용됩니다. DFS를 수행하면서 방문한 노드들을 하나의 연결 요소로 묶을 수 있습니다.

# BFS 대표 문제

---

1. 네트워크 통신: BFS는 컴퓨터 네트워크에서 노드 간의 통신을 모델링하는 데 사용됩니다. 노드 간의 연결을 그래프로 모델링하고, BFS를 수행하여 각 노드가 통신할 수 있는 노드를 찾을 수 있습니다.
2. 최단거리 찾기 문제: 미로 탐색 문제는 DFS로도 해결할 수 있습니다. 하지만, BFS와는 다르게 깊이 우선 탐색이기에 BFS에 배해 비효율적이고 시험에서 시간 초과가 발생할 수 있습니다. 따라서 BFS를 이용하여 문제를 해결하는게 최선입니다.
3. 퍼즐 해결: BFS는 퍼즐을 해결하는 데 사용됩니다. 예를 들어, 8-퍼즐과 같은 퍼즐은 그래프로 모델링할 수 있으며, BFS를 사용하여 퍼즐을 해결할 수 있습니다.
4. 상태 공간 탐색: BFS는 상태 공간 탐색에 사용됩니다. 상태 공간은 가능한 상태의 모음을 말하며, 각 상태는 그래프의 노드로 모델링됩니다. BFS를 사용하여 시작 상태에서 목적 상태로 이동할 수 있는 모든 경로를 찾을 수 있습니다.
5. 컴파일러 최적화: BFS는 컴파일러에서 코드 최적화를 수행하는 데 사용됩니다. 컴파일러는 소스 코드를 그래프로 모델링하고, BFS를 사용하여 코드 최적화를 수행합니다.

# 참고 자료

---

저작권 등 문제가 되는 부분이 있다면 삭제하겠습니다.

- ["프로그래머스"](https://programmers.co.kr/)
- ["백준"](https://www.acmicpc.net/)
- ["이것이 취업을 위한 코딩테스트다"](https://product.kyobobook.co.kr/detail/S000001810273?utm_source=google&utm_medium=cpc&utm_campaign=googleSearch&gt_network=g&gt_keyword=&gt_target_id=aud-901091942354:dsa-608444978378&gt_campaign_id=9979905549&gt_adgroup_id=132556570510&gclid=Cj0KCQjw_r6hBhDdARIsAMIDhV_FejwwhSFue2tP0WVJ6aA7CXKkT4IIop9fQy8idOEPW6wszz4vjYMaApsxEALw_wcB)
11:T17ea,
# DFS/BFS란 ?

---

DFS(Depth-First Search)와 BFS(Breadth-First Search)는 그래프 탐색 알고리즘입니다. 이 알고리즘들은 그래프에서 노드 간의 경로를 찾거나, 연결된 구성 요소를 찾는 등 다양한 그래프 문제를 해결하는 데 사용됩니다.

DFS는 깊이 우선 탐색 알고리즘이며, 스택이나 재귀 함수를 사용하여 구현됩니다. 이 알고리즘은 한 경로를 따라 끝까지 탐색한 후, 다음 경로를 찾습니다. 즉, 한 노드에서 출발하여 가능한 한 멀리까지 탐색한 후, 다시 돌아와 다음 경로를 탐색합니다. DFS는 그래프의 구성 요소, 사이클, 위상 정렬 등을 찾는 데 유용합니다.

BFS는 너비 우선 탐색 알고리즘이며, 큐를 사용하여 구현됩니다. 이 알고리즘은 한 노드에서 시작하여 인접한 노드를 모두 방문한 후, 이어지는 모든 노드를 탐색합니다. 즉, BFS는 노드의 깊이가 낮은 것부터 탐색하며, 최단 경로 문제를 해결하는 데 사용됩니다.

DFS와 BFS는 둘 다 그래프 탐색에 사용되지만, DFS는 한 경로를 따라 탐색하며, BFS는 모든 인접한 노드를 탐색합니다. 이러한 차이점은 DFS와 BFS를 사용할 때 해결하려는 문제에 따라 선택해야 합니다.

# Swift 코드로 DFS 구현

---

```swift
func dfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){
    visited[startNode] = true
    print(startNode, terminator: " ")

    for nextNode in graph[startNode] {
        if !visited[nextNode] {
            dfs(graph, nextNode, &visited)
        }
    }
}
```

위 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, DFS를 수행하고 방문한 노드를 출력합니다. 방문한 노드를 출력하는 부분을 수정하여 원하는 출력 형태로 변경할 수 있습니다. 위의 코드를 보면 popLast를 사용하여 stack 구조를 구현한 것을 확인할 수 있습니다. 일반적으로 실 사용시 위 코드를 아래와 같이 재귀적으로 호출하여 문제를 해결합니다.

```swift
let graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

var visited = [Bool](repeating: false, count: graph.count)

dfs(graph, 1, &visited)
```

# Swift 코드로 BFS 구현

---

아래 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, BFS를 수행하고 방문한 노드를 출력합니다.

```swift
func bfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){
    var visited = [Bool](repeating: false, count: graph.count)
    var queue = [Int]()
    queue.append(startNode)

    while !queue.isEmpty {
        let node = queue.removeFirst()
        if !visited[node] {
            print(node, terminator: " ")
            visited[node] = true
            for neighbor in graph[node] {
                queue.append(neighbor)
            }
        }
    }
}

let graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

var visited = [Bool](repeating: false, count: graph.count)

dfs(graph, 1, &visited)
```

# DFS 대표 문제

---

1. 사이클 찾기: DFS는 그래프에서 사이클을 찾는 데 사용됩니다. 한 노드에서 출발하여 다음 노드로 이동할 때마다 방문 여부를 검사하고, 이미 방문한 노드를 만나면 사이클이 존재한다는 것을 알 수 있습니다.
2. 미로 찾기: DFS는 미로 찾기 문제를 해결하는 데 사용됩니다. 미로를 그래프로 모델링하고, 시작점에서 출발하여 목적지에 도달할 때까지 DFS를 반복하여 경로를 찾습니다.
3. 위상 정렬: DFS는 방향 그래프에서 위상 정렬을 수행하는 데 사용됩니다. DFS를 수행하면서 더 이상 방문할 수 없는 노드부터 역순으로 정렬하여 위상 정렬을 수행할 수 있습니다.
4. 연결 요소 찾기: DFS는 그래프에서 연결 요소를 찾는 데 사용됩니다. DFS를 수행하면서 방문한 노드들을 하나의 연결 요소로 묶을 수 있습니다.

# BFS 대표 문제

---

1. 네트워크 통신: BFS는 컴퓨터 네트워크에서 노드 간의 통신을 모델링하는 데 사용됩니다. 노드 간의 연결을 그래프로 모델링하고, BFS를 수행하여 각 노드가 통신할 수 있는 노드를 찾을 수 있습니다.
2. 최단거리 찾기 문제: 미로 탐색 문제는 DFS로도 해결할 수 있습니다. 하지만, BFS와는 다르게 깊이 우선 탐색이기에 BFS에 배해 비효율적이고 시험에서 시간 초과가 발생할 수 있습니다. 따라서 BFS를 이용하여 문제를 해결하는게 최선입니다.
3. 퍼즐 해결: BFS는 퍼즐을 해결하는 데 사용됩니다. 예를 들어, 8-퍼즐과 같은 퍼즐은 그래프로 모델링할 수 있으며, BFS를 사용하여 퍼즐을 해결할 수 있습니다.
4. 상태 공간 탐색: BFS는 상태 공간 탐색에 사용됩니다. 상태 공간은 가능한 상태의 모음을 말하며, 각 상태는 그래프의 노드로 모델링됩니다. BFS를 사용하여 시작 상태에서 목적 상태로 이동할 수 있는 모든 경로를 찾을 수 있습니다.
5. 컴파일러 최적화: BFS는 컴파일러에서 코드 최적화를 수행하는 데 사용됩니다. 컴파일러는 소스 코드를 그래프로 모델링하고, BFS를 사용하여 코드 최적화를 수행합니다.

# 참고 자료

---

저작권 등 문제가 되는 부분이 있다면 삭제하겠습니다.

- ["프로그래머스"](https://programmers.co.kr/)
- ["백준"](https://www.acmicpc.net/)
- ["이것이 취업을 위한 코딩테스트다"](https://product.kyobobook.co.kr/detail/S000001810273?utm_source=google&utm_medium=cpc&utm_campaign=googleSearch&gt_network=g&gt_keyword=&gt_target_id=aud-901091942354:dsa-608444978378&gt_campaign_id=9979905549&gt_adgroup_id=132556570510&gclid=Cj0KCQjw_r6hBhDdARIsAMIDhV_FejwwhSFue2tP0WVJ6aA7CXKkT4IIop9fQy8idOEPW6wszz4vjYMaApsxEALw_wcB)
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/algorithmImg.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2023-04-06"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"4c8ad016","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"DFS/BFS란 ?"}],"\n",["$","hr","hr-0",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"DFS(Depth-First Search)와 BFS(Breadth-First Search)는 그래프 탐색 알고리즘입니다. 이 알고리즘들은 그래프에서 노드 간의 경로를 찾거나, 연결된 구성 요소를 찾는 등 다양한 그래프 문제를 해결하는 데 사용됩니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"DFS는 깊이 우선 탐색 알고리즘이며, 스택이나 재귀 함수를 사용하여 구현됩니다. 이 알고리즘은 한 경로를 따라 끝까지 탐색한 후, 다음 경로를 찾습니다. 즉, 한 노드에서 출발하여 가능한 한 멀리까지 탐색한 후, 다시 돌아와 다음 경로를 탐색합니다. DFS는 그래프의 구성 요소, 사이클, 위상 정렬 등을 찾는 데 유용합니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"BFS는 너비 우선 탐색 알고리즘이며, 큐를 사용하여 구현됩니다. 이 알고리즘은 한 노드에서 시작하여 인접한 노드를 모두 방문한 후, 이어지는 모든 노드를 탐색합니다. 즉, BFS는 노드의 깊이가 낮은 것부터 탐색하며, 최단 경로 문제를 해결하는 데 사용됩니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"DFS와 BFS는 둘 다 그래프 탐색에 사용되지만, DFS는 한 경로를 따라 탐색하며, BFS는 모든 인접한 노드를 탐색합니다. 이러한 차이점은 DFS와 BFS를 사용할 때 해결하려는 문제에 따라 선택해야 합니다."}],"\n",["$","h1",null,{"id":"cda4823b","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 코드로 DFS 구현"}],"\n",["$","hr","hr-1",{}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func dfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){\n    visited[startNode] = true\n    print(startNode, terminator: \" \")\n\n    for nextNode in graph[startNode] {\n        if !visited[nextNode] {\n            dfs(graph, nextNode, &visited)\n        }\n    }\n}\n"}],"position":{"start":{"line":18,"column":1,"offset":640},"end":{"line":29,"column":4,"offset":924}}},"children":"func dfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){\n    visited[startNode] = true\n    print(startNode, terminator: \" \")\n\n    for nextNode in graph[startNode] {\n        if !visited[nextNode] {\n            dfs(graph, nextNode, &visited)\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, DFS를 수행하고 방문한 노드를 출력합니다. 방문한 노드를 출력하는 부분을 수정하여 원하는 출력 형태로 변경할 수 있습니다. 위의 코드를 보면 popLast를 사용하여 stack 구조를 구현한 것을 확인할 수 있습니다. 일반적으로 실 사용시 위 코드를 아래와 같이 재귀적으로 호출하여 문제를 해결합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let graph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7]\n]\n\nvar visited = [Bool](repeating: false, count: graph.count)\n\ndfs(graph, 1, &visited)\n"}],"position":{"start":{"line":33,"column":1,"offset":1131},"end":{"line":49,"column":4,"offset":1353}}},"children":"let graph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7]\n]\n\nvar visited = [Bool](repeating: false, count: graph.count)\n\ndfs(graph, 1, &visited)\n"}}]}],"\n",["$","h1",null,{"id":"13b817a7","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 코드로 BFS 구현"}],"\n",["$","hr","hr-2",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"아래 함수는 그래프의 인접 리스트와 시작 노드를 인자로 받아, BFS를 수행하고 방문한 노드를 출력합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func bfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){\n    var visited = [Bool](repeating: false, count: graph.count)\n    var queue = [Int]()\n    queue.append(startNode)\n\n    while !queue.isEmpty {\n        let node = queue.removeFirst()\n        if !visited[node] {\n            print(node, terminator: \" \")\n            visited[node] = true\n            for neighbor in graph[node] {\n                queue.append(neighbor)\n            }\n        }\n    }\n}\n\nlet graph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7]\n]\n\nvar visited = [Bool](repeating: false, count: graph.count)\n\ndfs(graph, 1, &visited)\n"}],"position":{"start":{"line":57,"column":1,"offset":1441},"end":{"line":90,"column":4,"offset":2132}}},"children":"func bfs(_ graph: [[Int]], _ startNode: Int, _ visited: inout [Bool]){\n    var visited = [Bool](repeating: false, count: graph.count)\n    var queue = [Int]()\n    queue.append(startNode)\n\n    while !queue.isEmpty {\n        let node = queue.removeFirst()\n        if !visited[node] {\n            print(node, terminator: \" \")\n            visited[node] = true\n            for neighbor in graph[node] {\n                queue.append(neighbor)\n            }\n        }\n    }\n}\n\nlet graph = [\n    [],\n    [2, 3, 8],\n    [1, 7],\n    [1, 4, 5],\n    [3, 5],\n    [3, 4],\n    [7],\n    [2, 6, 8],\n    [1, 7]\n]\n\nvar visited = [Bool](repeating: false, count: graph.count)\n\ndfs(graph, 1, &visited)\n"}}]}],"\n",["$","h1",null,{"id":"a6075caf","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"DFS 대표 문제"}],"\n",["$","hr","hr-3",{}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"사이클 찾기: DFS는 그래프에서 사이클을 찾는 데 사용됩니다. 한 노드에서 출발하여 다음 노드로 이동할 때마다 방문 여부를 검사하고, 이미 방문한 노드를 만나면 사이클이 존재한다는 것을 알 수 있습니다."}],"\n",["$","li","li-1",{"children":"미로 찾기: DFS는 미로 찾기 문제를 해결하는 데 사용됩니다. 미로를 그래프로 모델링하고, 시작점에서 출발하여 목적지에 도달할 때까지 DFS를 반복하여 경로를 찾습니다."}],"\n",["$","li","li-2",{"children":"위상 정렬: DFS는 방향 그래프에서 위상 정렬을 수행하는 데 사용됩니다. DFS를 수행하면서 더 이상 방문할 수 없는 노드부터 역순으로 정렬하여 위상 정렬을 수행할 수 있습니다."}],"\n",["$","li","li-3",{"children":"연결 요소 찾기: DFS는 그래프에서 연결 요소를 찾는 데 사용됩니다. DFS를 수행하면서 방문한 노드들을 하나의 연결 요소로 묶을 수 있습니다."}],"\n"]}],"\n",["$","h1",null,{"id":"4a4f5323","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"BFS 대표 문제"}],"\n",["$","hr","hr-4",{}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":"네트워크 통신: BFS는 컴퓨터 네트워크에서 노드 간의 통신을 모델링하는 데 사용됩니다. 노드 간의 연결을 그래프로 모델링하고, BFS를 수행하여 각 노드가 통신할 수 있는 노드를 찾을 수 있습니다."}],"\n",["$","li","li-1",{"children":"최단거리 찾기 문제: 미로 탐색 문제는 DFS로도 해결할 수 있습니다. 하지만, BFS와는 다르게 깊이 우선 탐색이기에 BFS에 배해 비효율적이고 시험에서 시간 초과가 발생할 수 있습니다. 따라서 BFS를 이용하여 문제를 해결하는게 최선입니다."}],"\n",["$","li","li-2",{"children":"퍼즐 해결: BFS는 퍼즐을 해결하는 데 사용됩니다. 예를 들어, 8-퍼즐과 같은 퍼즐은 그래프로 모델링할 수 있으며, BFS를 사용하여 퍼즐을 해결할 수 있습니다."}],"\n",["$","li","li-3",{"children":"상태 공간 탐색: BFS는 상태 공간 탐색에 사용됩니다. 상태 공간은 가능한 상태의 모음을 말하며, 각 상태는 그래프의 노드로 모델링됩니다. BFS를 사용하여 시작 상태에서 목적 상태로 이동할 수 있는 모든 경로를 찾을 수 있습니다."}],"\n",["$","li","li-4",{"children":"컴파일러 최적화: BFS는 컴파일러에서 코드 최적화를 수행하는 데 사용됩니다. 컴파일러는 소스 코드를 그래프로 모델링하고, BFS를 사용하여 코드 최적화를 수행합니다."}],"\n"]}],"\n",["$","h1",null,{"id":"7cf40973","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"참고 자료"}],"\n",["$","hr","hr-5",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"저작권 등 문제가 되는 부분이 있다면 삭제하겠습니다."}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["$","$Le",null,{"props":{"href":"https://programmers.co.kr/","node":{"type":"element","tagName":"a","properties":{"href":"https://programmers.co.kr/"},"children":[{"type":"text","value":"\"프로그래머스\"","position":{"start":{"line":117,"column":4,"offset":3208},"end":{"line":117,"column":12,"offset":3216}}}],"position":{"start":{"line":117,"column":3,"offset":3207},"end":{"line":117,"column":41,"offset":3245}}},"children":"\"프로그래머스\""},"post":{"title":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현","description":"DFS와 BFS를 SWIFT코드로 작성해보고 예제를 통해 어떤 문제에 어떤 알고리즘이 적합한지 알아봅니다.","date":"2023-04-06T21:30:07.322Z","tags":[{"name":"coding test","path":"/tags/coding-test","id":"coding-test"},{"name":"알고리즘","path":"/tags/알고리즘","id":"알고리즘"},{"name":"코딩테스트","path":"/tags/코딩테스트","id":"코딩테스트"},{"name":"algorithm","path":"/tags/algorithm","id":"algorithm"}],"author":"마고유","banner":"/images/algorithmImg.jpg","project":"coding test","readMin":"6.0","totalCnt":-1,"monthlyCnt":0,"weeklyCnt":0,"slug":"swift+dfs+bfs+소개","content":"$f","category":"algorithm"},"language":"kr"}]}],"\n",["$","li","li-1",{"children":["$","$Le",null,{"props":{"href":"https://www.acmicpc.net/","node":{"type":"element","tagName":"a","properties":{"href":"https://www.acmicpc.net/"},"children":[{"type":"text","value":"\"백준\"","position":{"start":{"line":118,"column":4,"offset":3249},"end":{"line":118,"column":8,"offset":3253}}}],"position":{"start":{"line":118,"column":3,"offset":3248},"end":{"line":118,"column":35,"offset":3280}}},"children":"\"백준\""},"post":{"title":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현","description":"DFS와 BFS를 SWIFT코드로 작성해보고 예제를 통해 어떤 문제에 어떤 알고리즘이 적합한지 알아봅니다.","date":"2023-04-06T21:30:07.322Z","tags":[{"name":"coding test","path":"/tags/coding-test","id":"coding-test"},{"name":"알고리즘","path":"/tags/알고리즘","id":"알고리즘"},{"name":"코딩테스트","path":"/tags/코딩테스트","id":"코딩테스트"},{"name":"algorithm","path":"/tags/algorithm","id":"algorithm"}],"author":"마고유","banner":"/images/algorithmImg.jpg","project":"coding test","readMin":"6.0","totalCnt":-1,"monthlyCnt":0,"weeklyCnt":0,"slug":"swift+dfs+bfs+소개","content":"$10","category":"algorithm"},"language":"kr"}]}],"\n",["$","li","li-2",{"children":["$","$Le",null,{"props":{"href":"https://product.kyobobook.co.kr/detail/S000001810273?utm_source=google&utm_medium=cpc&utm_campaign=googleSearch&gt_network=g&gt_keyword=&gt_target_id=aud-901091942354:dsa-608444978378&gt_campaign_id=9979905549&gt_adgroup_id=132556570510&gclid=Cj0KCQjw_r6hBhDdARIsAMIDhV_FejwwhSFue2tP0WVJ6aA7CXKkT4IIop9fQy8idOEPW6wszz4vjYMaApsxEALw_wcB","node":{"type":"element","tagName":"a","properties":{"href":"https://product.kyobobook.co.kr/detail/S000001810273?utm_source=google&utm_medium=cpc&utm_campaign=googleSearch&gt_network=g&gt_keyword=&gt_target_id=aud-901091942354:dsa-608444978378&gt_campaign_id=9979905549&gt_adgroup_id=132556570510&gclid=Cj0KCQjw_r6hBhDdARIsAMIDhV_FejwwhSFue2tP0WVJ6aA7CXKkT4IIop9fQy8idOEPW6wszz4vjYMaApsxEALw_wcB"},"children":[{"type":"text","value":"\"이것이 취업을 위한 코딩테스트다\"","position":{"start":{"line":119,"column":4,"offset":3284},"end":{"line":119,"column":23,"offset":3303}}}],"position":{"start":{"line":119,"column":3,"offset":3283},"end":{"line":119,"column":361,"offset":3641}}},"children":"\"이것이 취업을 위한 코딩테스트다\""},"post":{"title":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현","description":"DFS와 BFS를 SWIFT코드로 작성해보고 예제를 통해 어떤 문제에 어떤 알고리즘이 적합한지 알아봅니다.","date":"2023-04-06T21:30:07.322Z","tags":[{"name":"coding test","path":"/tags/coding-test","id":"coding-test"},{"name":"알고리즘","path":"/tags/알고리즘","id":"알고리즘"},{"name":"코딩테스트","path":"/tags/코딩테스트","id":"코딩테스트"},{"name":"algorithm","path":"/tags/algorithm","id":"algorithm"}],"author":"마고유","banner":"/images/algorithmImg.jpg","project":"coding test","readMin":"6.0","totalCnt":-1,"monthlyCnt":0,"weeklyCnt":0,"slug":"swift+dfs+bfs+소개","content":"$11","category":"algorithm"},"language":"kr"}]}],"\n"]}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"[Swift] DFS/BFS란 무엇인가? - 깊이우선탐색과 너비우선탐색 구현","toc":[{"tagName":"h1","title":"DFS/BFS란 ?","id":"4c8ad016"},{"tagName":"h1","title":"Swift 코드로 DFS 구현","id":"cda4823b"},{"tagName":"h1","title":"Swift 코드로 BFS 구현","id":"13b817a7"},{"tagName":"h1","title":"DFS 대표 문제","id":"a6075caf"},{"tagName":"h1","title":"BFS 대표 문제","id":"4a4f5323"},{"tagName":"h1","title":"참고 자료","id":"7cf40973"}],"language":"kr"}]}]]}]]
8:null
