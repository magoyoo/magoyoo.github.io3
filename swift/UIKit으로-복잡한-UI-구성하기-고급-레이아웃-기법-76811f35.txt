1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","UIKit%EC%9C%BC%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EA%B3%A0%EA%B8%89-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B8%B0%EB%B2%95-76811f35","d"],{"children":["__PAGE__?{\"slug\":\"UIKit으로-복잡한-UI-구성하기-고급-레이아웃-기법-76811f35\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","UIKit%EC%9C%BC%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EA%B3%A0%EA%B8%89-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B8%B0%EB%B2%95-76811f35","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"UIKit으로-복잡한-UI-구성하기-고급-레이아웃-기법-76811f35\"}"},"styles":[]}],"segment":["slug","UIKit%EC%9C%BC%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EA%B3%A0%EA%B8%89-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B8%B0%EB%B2%95-76811f35","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift의 UIKit을 사용하여 복잡한 UI를 구성하는 고급 레이아웃 기법에 대해 설명합니다. 다양한 레이아웃 기법과 그 사용법을 통해 개발자는 더욱 직관적이고 효율적으로 앱의 UI를 구성할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,UIKit,UI,레이아웃"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/UIKit%EC%9C%BC%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EA%B3%A0%EA%B8%89-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B8%B0%EB%B2%95-76811f35"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift의 UIKit을 사용하여 복잡한 UI를 구성하는 고급 레이아웃 기법에 대해 설명합니다. 다양한 레이아웃 기법과 그 사용법을 통해 개발자는 더욱 직관적이고 효율적으로 앱의 UI를 구성할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/UIKit%EC%9C%BC%EB%A1%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0-%EA%B3%A0%EA%B8%89-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EA%B8%B0%EB%B2%95-76811f35"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift의 UIKit을 사용하여 복잡한 UI를 구성하는 고급 레이아웃 기법에 대해 설명합니다. 다양한 레이아웃 기법과 그 사용법을 통해 개발자는 더욱 직관적이고 효율적으로 앱의 UI를 구성할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-31"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"b4d715fb","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 UIKit을 사용하여 앱의 UI를 구성하는 것은 필수적입니다. 기본적인 UI 요소들만으로도 간단한 화면을 구성할 수 있지만, 복잡한 인터페이스를 만들어야 할 때는 고급 레이아웃 기법이 필요합니다. 이 글에서는 다양한 고급 레이아웃 기법들을 소개하고 각 기법을 활용하여 실질적인 예제를 보여드리겠습니다."}],"\n",["$","h2",null,{"id":"80644f16","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Auto Layout"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Auto Layout은 iOS 개발에 있어 필수적인 도구입니다. 자동으로 레이아웃을 조정하여 다양한 화면 크기와 방향에 대해 유연하게 대응할 수 있습니다. Auto Layout은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLayoutConstraint","position":{"start":{"line":9,"column":101,"offset":330},"end":{"line":9,"column":121,"offset":350}}}],"position":{"start":{"line":9,"column":101,"offset":330},"end":{"line":9,"column":121,"offset":350}}},"children":"NSLayoutConstraint"}}]," 클래스를 사용하여 뷰 간의 상대적인 위치를 정의합니다. 코드로 Auto Layout을 설정하는 방법은 다음과 같습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let button = UIButton(type: .system)\nbutton.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(button)\n\nNSLayoutConstraint.activate([\n    button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    button.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n    button.widthAnchor.constraint(equalToConstant: 100),\n    button.heightAnchor.constraint(equalToConstant: 50)\n])\n"}],"position":{"start":{"line":11,"column":1,"offset":419},"end":{"line":22,"column":4,"offset":828}}},"children":"let button = UIButton(type: .system)\nbutton.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(button)\n\nNSLayoutConstraint.activate([\n    button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    button.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n    button.widthAnchor.constraint(equalToConstant: 100),\n    button.heightAnchor.constraint(equalToConstant: 50)\n])\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 버튼을 화면의 중앙에 배치하고 너비와 높이를 설정했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"translatesAutoresizingMaskIntoConstraints","position":{"start":{"line":24,"column":42,"offset":871},"end":{"line":24,"column":85,"offset":914}}}],"position":{"start":{"line":24,"column":42,"offset":871},"end":{"line":24,"column":85,"offset":914}}},"children":"translatesAutoresizingMaskIntoConstraints"}}]," 속성을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false","position":{"start":{"line":24,"column":90,"offset":919},"end":{"line":24,"column":97,"offset":926}}}],"position":{"start":{"line":24,"column":90,"offset":919},"end":{"line":24,"column":97,"offset":926}}},"children":"false"}}],"로 설정하여 Auto Layout이 제대로 작동하게 합니다."]}],"\n",["$","h2",null,{"id":"eba23304","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Stack Views"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIStackView","position":{"start":{"line":28,"column":1,"offset":977},"end":{"line":28,"column":14,"offset":990}}}],"position":{"start":{"line":28,"column":1,"offset":977},"end":{"line":28,"column":14,"offset":990}}},"children":"UIStackView"}}],"는 여러 뷰를 수평 또는 수직으로 정렬할 때 유용한 도구입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIStackView","position":{"start":{"line":28,"column":50,"offset":1026},"end":{"line":28,"column":63,"offset":1039}}}],"position":{"start":{"line":28,"column":50,"offset":1026},"end":{"line":28,"column":63,"offset":1039}}},"children":"UIStackView"}}],"를 사용하면 코드의 간결함과 유지보수성을 높일 수 있습니다. 예를 들어, 여러 개의 레이블을 수직으로 정렬하려면 다음과 같이 할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let stackView = UIStackView()\nstackView.axis = .vertical\nstackView.distribution = .fillEqually\nstackView.spacing = 10\nstackView.translatesAutoresizingMaskIntoConstraints = false\n\nlet label1 = UILabel()\nlabel1.text = \"Label 1\"\nlet label2 = UILabel()\nlabel2.text = \"Label 2\"\nlet label3 = UILabel()\nlabel3.text = \"Label 3\"\n\nstackView.addArrangedSubview(label1)\nstackView.addArrangedSubview(label2)\nstackView.addArrangedSubview(label3)\n\nview.addSubview(stackView)\n\nNSLayoutConstraint.activate([\n    stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n    stackView.widthAnchor.constraint(equalTo: view.widthAnchor, constant: -40),\n    stackView.heightAnchor.constraint(equalToConstant: 200)\n])\n"}],"position":{"start":{"line":30,"column":1,"offset":1120},"end":{"line":56,"column":4,"offset":1904}}},"children":"let stackView = UIStackView()\nstackView.axis = .vertical\nstackView.distribution = .fillEqually\nstackView.spacing = 10\nstackView.translatesAutoresizingMaskIntoConstraints = false\n\nlet label1 = UILabel()\nlabel1.text = \"Label 1\"\nlet label2 = UILabel()\nlabel2.text = \"Label 2\"\nlet label3 = UILabel()\nlabel3.text = \"Label 3\"\n\nstackView.addArrangedSubview(label1)\nstackView.addArrangedSubview(label2)\nstackView.addArrangedSubview(label3)\n\nview.addSubview(stackView)\n\nNSLayoutConstraint.activate([\n    stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n    stackView.widthAnchor.constraint(equalTo: view.widthAnchor, constant: -40),\n    stackView.heightAnchor.constraint(equalToConstant: 200)\n])\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIStackView","position":{"start":{"line":58,"column":1,"offset":1906},"end":{"line":58,"column":14,"offset":1919}}}],"position":{"start":{"line":58,"column":1,"offset":1906},"end":{"line":58,"column":14,"offset":1919}}},"children":"UIStackView"}}],"를 사용하면 여러 뷰를 한 번에 관리할 수 있어 매우 유용합니다."]}],"\n",["$","h2",null,{"id":"f0ee7d1b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Constraints Priority"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["제약 조건의 우선순위를 설정하여 서로 충돌하는 레이아웃을 해결할 수도 있습니다. 우선순위는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UILayoutPriority","position":{"start":{"line":62,"column":52,"offset":2033},"end":{"line":62,"column":70,"offset":2051}}}],"position":{"start":{"line":62,"column":52,"offset":2033},"end":{"line":62,"column":70,"offset":2051}}},"children":"UILayoutPriority"}}]," 타입으로 지정하며, 기본 우선순위는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UILayoutPriority.required","position":{"start":{"line":62,"column":91,"offset":2072},"end":{"line":62,"column":118,"offset":2099}}}],"position":{"start":{"line":62,"column":91,"offset":2072},"end":{"line":62,"column":118,"offset":2099}}},"children":"UILayoutPriority.required"}}],"입니다. 예시로, 두 뷰의 우선순위를 설정하여 레이아웃을 조정하는 방법을 보겠습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let highPriorityConstraint = button1.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8)\nhighPriorityConstraint.priority = UILayoutPriority(999) // 높은 우선순위\n\nlet lowPriorityConstraint = button2.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8)\nlowPriorityConstraint.priority = UILayoutPriority(250) // 낮은 우선순위\n\nNSLayoutConstraint.activate([highPriorityConstraint, lowPriorityConstraint])\n"}],"position":{"start":{"line":64,"column":1,"offset":2148},"end":{"line":72,"column":4,"offset":2579}}},"children":"let highPriorityConstraint = button1.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8)\nhighPriorityConstraint.priority = UILayoutPriority(999) // 높은 우선순위\n\nlet lowPriorityConstraint = button2.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8)\nlowPriorityConstraint.priority = UILayoutPriority(250) // 낮은 우선순위\n\nNSLayoutConstraint.activate([highPriorityConstraint, lowPriorityConstraint])\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 두 버튼의 너비를 설정하고 첫 번째 버튼의 제약 조건을 두 번째 버튼보다 높은 우선순위로 설정했습니다."}],"\n",["$","h2",null,{"id":"0f021026","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Safe Area 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS의 최신 디바이스들은 화면 상단과 하단에 노치가 있는 경우가 많습니다. 이러한 요소들을 고려하여 레이아웃을 구성할 때는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"safeAreaLayoutGuide","position":{"start":{"line":78,"column":71,"offset":2735},"end":{"line":78,"column":92,"offset":2756}}}],"position":{"start":{"line":78,"column":71,"offset":2735},"end":{"line":78,"column":92,"offset":2756}}},"children":"safeAreaLayoutGuide"}}],"를 사용하는 것이 좋습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"safeAreaLayoutGuide","position":{"start":{"line":78,"column":108,"offset":2772},"end":{"line":78,"column":129,"offset":2793}}}],"position":{"start":{"line":78,"column":108,"offset":2772},"end":{"line":78,"column":129,"offset":2793}}},"children":"safeAreaLayoutGuide"}}],"를 사용하면 자동으로 노치와 같은 영역을 제외하고 레이아웃을 설정할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let label = UILabel()\nlabel.text = \"Safe Area Label\"\nlabel.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(label)\n\nNSLayoutConstraint.activate([\n    label.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),\n    label.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20)\n])\n"}],"position":{"start":{"line":80,"column":1,"offset":2840},"end":{"line":90,"column":4,"offset":3207}}},"children":"let label = UILabel()\nlabel.text = \"Safe Area Label\"\nlabel.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(label)\n\nNSLayoutConstraint.activate([\n    label.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),\n    label.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20)\n])\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label","position":{"start":{"line":92,"column":8,"offset":3216},"end":{"line":92,"column":15,"offset":3223}}}],"position":{"start":{"line":92,"column":8,"offset":3216},"end":{"line":92,"column":15,"offset":3223}}},"children":"label"}}],"은 안전 영역을 기준으로 상단과 좌측에 일정 간격을 두고 배치됩니다."]}],"\n",["$","h2",null,{"id":"ba5c85a0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Anchors 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["앵커를 사용하여 뷰의 상대적 위치를 간단하게 설정할 수 있습니다. 각 앵커는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLayoutAnchor","position":{"start":{"line":96,"column":44,"offset":3321},"end":{"line":96,"column":60,"offset":3337}}}],"position":{"start":{"line":96,"column":44,"offset":3321},"end":{"line":96,"column":60,"offset":3337}}},"children":"NSLayoutAnchor"}}]," 클래스의 인스턴스로, 뷰의 위치와 크기를 정의하는데 사용됩니다. 예를 들어, 여러 뷰를 앵커를 사용하여 정렬하는 방법을 보겠습니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let redView = UIView()\nlet blueView = UIView()\nredView.backgroundColor = .red\nblueView.backgroundColor = .blue\n\nredView.translatesAutoresizingMaskIntoConstraints = false\nblueView.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(redView)\nview.addSubview(blueView)\n\nNSLayoutConstraint.activate([\n    redView.topAnchor.constraint(equalTo: view.topAnchor, constant: 20),\n    redView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\n    redView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),\n    redView.heightAnchor.constraint(equalToConstant: 100),\n\n    blueView.topAnchor.constraint(equalTo: redView.bottomAnchor, constant: 20),\n    blueView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\n    blueView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),\n    blueView.heightAnchor.constraint(equalToConstant: 100)\n])\n"}],"position":{"start":{"line":98,"column":1,"offset":3413},"end":{"line":120,"column":4,"offset":4343}}},"children":"let redView = UIView()\nlet blueView = UIView()\nredView.backgroundColor = .red\nblueView.backgroundColor = .blue\n\nredView.translatesAutoresizingMaskIntoConstraints = false\nblueView.translatesAutoresizingMaskIntoConstraints = false\nview.addSubview(redView)\nview.addSubview(blueView)\n\nNSLayoutConstraint.activate([\n    redView.topAnchor.constraint(equalTo: view.topAnchor, constant: 20),\n    redView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\n    redView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),\n    redView.heightAnchor.constraint(equalToConstant: 100),\n\n    blueView.topAnchor.constraint(equalTo: redView.bottomAnchor, constant: 20),\n    blueView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20),\n    blueView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20),\n    blueView.heightAnchor.constraint(equalToConstant: 100)\n])\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 두 개의 뷰를 화면 상단에 각각 배치하고, 첫 번째 뷰의 하단과 두 번째 뷰의 상단을 맞추어 정렬했습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 Swift의 UIKit을 활용하여 복잡한 UI를 구성하는 여러 고급 레이아웃 기법을 다뤘습니다. Auto Layout, UIStackView, Constraints Priority, Safe Area, 그리고 Anchors를 통해 효과적으로 UI를 설계하는 방법을 배웠습니다. 이러한 기법들은 복잡한 레이아웃을 구성할 때 큰 도움이 되며, 사용자 경험을 최적화하는 데 중요한 역할을 합니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법","toc":[{"tagName":"h1","title":"UIKit으로 복잡한 UI 구성하기: 고급 레이아웃 기법","id":"b4d715fb"},{"tagName":"h2","title":"Auto Layout","id":"80644f16"},{"tagName":"h2","title":"Stack Views","id":"eba23304"},{"tagName":"h2","title":"Constraints Priority","id":"f0ee7d1b"},{"tagName":"h2","title":"Safe Area 사용","id":"0f021026"},{"tagName":"h2","title":"Anchors 사용","id":"ba5c85a0"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
