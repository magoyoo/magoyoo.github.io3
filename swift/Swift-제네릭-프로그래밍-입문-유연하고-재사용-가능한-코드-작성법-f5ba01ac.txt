1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EB%B2%95-f5ba01ac","d"],{"children":["__PAGE__?{\"slug\":\"Swift-제네릭-프로그래밍-입문-유연하고-재사용-가능한-코드-작성법-f5ba01ac\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EB%B2%95-f5ba01ac","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-제네릭-프로그래밍-입문-유연하고-재사용-가능한-코드-작성법-f5ba01ac\"}"},"styles":[]}],"segment":["slug","Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EB%B2%95-f5ba01ac","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift 프로그래밍 언어에서 제네릭을 어떻게 활용하는지 소개합니다. 제네릭을 사용하면 더 유연하고 재사용 가능한 코드 작성이 가능합니다. 실제 코드 예제를 통해 Swift 제네릭의 기본 개념과 응용 방법을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,제네릭,프로그래밍,코드 재사용성"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EB%B2%95-f5ba01ac"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift 프로그래밍 언어에서 제네릭을 어떻게 활용하는지 소개합니다. 제네릭을 사용하면 더 유연하고 재사용 가능한 코드 작성이 가능합니다. 실제 코드 예제를 통해 Swift 제네릭의 기본 개념과 응용 방법을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9E%85%EB%AC%B8-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EB%B2%95-f5ba01ac"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift 프로그래밍 언어에서 제네릭을 어떻게 활용하는지 소개합니다. 제네릭을 사용하면 더 유연하고 재사용 가능한 코드 작성이 가능합니다. 실제 코드 예제를 통해 Swift 제네릭의 기본 개념과 응용 방법을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-19"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"55885714","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 강력하고 유연한 언어로, 다양한 프로그래밍 패러다임을 지원합니다. 특히 Swift의 제네릭(Generic)은 타입에 구애받지 않는 유연하고 재사용 가능한 코드를 작성할 수 있게 해줍니다. 이 글에서는 Swift 제네릭에 대해 설명하고 실제 코드 예제를 통해 제네릭을 어떻게 활용할 수 있는지 알아보겠습니다."}],"\n",["$","h2",null,{"id":"c49aa43c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"제네릭이란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"제네릭은 하나의 함수나 타입이 여러 다른 타입을 지원할 수 있게 만드는 기능입니다. 예를 들어, 배열(Array)은 특정 타입의 요소들을 담을 수 있지만, 이 타입이 무엇인지는 배열을 정의할 때 결정됩니다. 제네릭을 사용하면 배열과 같은 타입을 정의할 때 타입에 구애받지 않으며, 어떤 타입이든 지원할 수 있는 코드를 작성할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 제네릭을 사용하지 않고 Int 배열의 모든 요소들의 합을 구하는 함수입니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func sum(of numbers: [Int]) -> Int {\n    var total = 0\n    for number in numbers {\n        total += number\n    }\n    return total\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":479},"end":{"line":20,"column":4,"offset":623}}},"children":"func sum(of numbers: [Int]) -> Int {\n    var total = 0\n    for number in numbers {\n        total += number\n    }\n    return total\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드는 Int 타입에 대해서만 동작합니다. 만약 Double 타입에 대해서도 동작하는 함수를 작성하려면 어떻게 해야 할까요?"}],"\n",["$","h2",null,{"id":"d316ae0e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"제네릭 함수 작성하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["제네릭을 사용하면 동일한 작업을 여러 타입에 대해 수행할 수 있는 함수를 작성할 수 있습니다. 제네릭 함수는 타입 매개변수를 사용하여 정의됩니다. 다음은 제네릭을 사용하여 여러 타입에 대해 동작하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sum","position":{"start":{"line":26,"column":112,"offset":825},"end":{"line":26,"column":117,"offset":830}}}],"position":{"start":{"line":26,"column":112,"offset":825},"end":{"line":26,"column":117,"offset":830}}},"children":"sum"}}]," 함수를 정의하는 방법입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func sum<T: Numeric>(of numbers: [T]) -> T {\n    var total: T = 0\n    for number in numbers {\n        total += number\n    }\n    return total\n}\n"}],"position":{"start":{"line":28,"column":1,"offset":848},"end":{"line":36,"column":4,"offset":1003}}},"children":"func sum<T: Numeric>(of numbers: [T]) -> T {\n    var total: T = 0\n    for number in numbers {\n        total += number\n    }\n    return total\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":38,"column":8,"offset":1012},"end":{"line":38,"column":11,"offset":1015}}}],"position":{"start":{"line":38,"column":8,"offset":1012},"end":{"line":38,"column":11,"offset":1015}}},"children":"T"}}],"는 타입 매개변수로, 함수가 호출될 때 결정됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":38,"column":40,"offset":1044},"end":{"line":38,"column":43,"offset":1047}}}],"position":{"start":{"line":38,"column":40,"offset":1044},"end":{"line":38,"column":43,"offset":1047}}},"children":"T"}}],"는 제네릭 매개변수의 일종이며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T: Numeric","position":{"start":{"line":38,"column":61,"offset":1065},"end":{"line":38,"column":73,"offset":1077}}}],"position":{"start":{"line":38,"column":61,"offset":1065},"end":{"line":38,"column":73,"offset":1077}}},"children":"T: Numeric"}}]," 부분은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":38,"column":78,"offset":1082},"end":{"line":38,"column":81,"offset":1085}}}],"position":{"start":{"line":38,"column":78,"offset":1082},"end":{"line":38,"column":81,"offset":1085}}},"children":"T"}}],"가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Numeric","position":{"start":{"line":38,"column":83,"offset":1087},"end":{"line":38,"column":92,"offset":1096}}}],"position":{"start":{"line":38,"column":83,"offset":1087},"end":{"line":38,"column":92,"offset":1096}}},"children":"Numeric"}}]," 프로토콜을 준수해야 한다는 것을 의미합니다. 따라서, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sum","position":{"start":{"line":38,"column":123,"offset":1127},"end":{"line":38,"column":128,"offset":1132}}}],"position":{"start":{"line":38,"column":123,"offset":1127},"end":{"line":38,"column":128,"offset":1132}}},"children":"sum"}}]," 함수는 Int 뿐만 아니라 Double, Float 등의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Numeric","position":{"start":{"line":38,"column":161,"offset":1165},"end":{"line":38,"column":170,"offset":1174}}}],"position":{"start":{"line":38,"column":161,"offset":1165},"end":{"line":38,"column":170,"offset":1174}}},"children":"Numeric"}}]," 프로토콜을 준수하는 타입에 대해서도 동작할 수 있습니다."]}],"\n",["$","h2",null,{"id":"2555a7cf","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"제네릭 타입 작성하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"함수뿐만 아니라 클래스, 구조체, 열거형에서도 제네릭을 사용할 수 있습니다. 다음은 제네릭을 사용하여 스택(Stack) 자료 구조를 작성하는 예제입니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Stack<Element> {\n    private var elements: [Element] = []\n    \n    mutating func push(_ element: Element) {\n        elements.append(element)\n    }\n    \n    mutating func pop() -> Element? {\n        return elements.popLast()\n    }\n    \n    func peek() -> Element? {\n        return elements.last\n    }\n}\n"}],"position":{"start":{"line":44,"column":1,"offset":1311},"end":{"line":60,"column":4,"offset":1632}}},"children":"struct Stack<Element> {\n    private var elements: [Element] = []\n    \n    mutating func push(_ element: Element) {\n        elements.append(element)\n    }\n    \n    mutating func pop() -> Element? {\n        return elements.popLast()\n    }\n    \n    func peek() -> Element? {\n        return elements.last\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Stack","position":{"start":{"line":62,"column":5,"offset":1638},"end":{"line":62,"column":12,"offset":1645}}}],"position":{"start":{"line":62,"column":5,"offset":1638},"end":{"line":62,"column":12,"offset":1645}}},"children":"Stack"}}],"은 제네릭 구조체로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":62,"column":24,"offset":1657},"end":{"line":62,"column":33,"offset":1666}}}],"position":{"start":{"line":62,"column":24,"offset":1657},"end":{"line":62,"column":33,"offset":1666}}},"children":"Element"}}],"라는 타입 매개변수를 가집니다. 이 구조체의 메서드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":62,"column":63,"offset":1696},"end":{"line":62,"column":72,"offset":1705}}}],"position":{"start":{"line":62,"column":63,"offset":1696},"end":{"line":62,"column":72,"offset":1705}}},"children":"Element"}}]," 타입의 요소들을 처리하는 메서드입니다. 따라서, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Stack","position":{"start":{"line":62,"column":100,"offset":1733},"end":{"line":62,"column":107,"offset":1740}}}],"position":{"start":{"line":62,"column":100,"offset":1733},"end":{"line":62,"column":107,"offset":1740}}},"children":"Stack"}}],"은 Int, String 등 다양한 타입의 요소들을 지원할 수 있습니다."]}],"\n",["$","h3",null,{"id":"acea8eb9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"제네릭 타입 사용 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["제네릭 타입인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Stack","position":{"start":{"line":66,"column":9,"offset":1808},"end":{"line":66,"column":16,"offset":1815}}}],"position":{"start":{"line":66,"column":9,"offset":1808},"end":{"line":66,"column":16,"offset":1815}}},"children":"Stack"}}],"을 사용하는 예를 보겠습니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var intStack = Stack<Int>()\nintStack.push(1)\nintStack.push(2)\nprint(intStack.pop() ?? 0) // 2\n\nvar stringStack = Stack<String>()\nstringStack.push(\n"}],"position":{"start":{"line":68,"column":1,"offset":1833},"end":{"line":76,"column":1,"offset":1989}}},"children":"var intStack = Stack<Int>()\nintStack.push(1)\nintStack.push(2)\nprint(intStack.pop() ?? 0) // 2\n\nvar stringStack = Stack<String>()\nstringStack.push(\n"}}]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법","toc":[{"tagName":"h1","title":"Swift 제네릭 프로그래밍 입문: 유연하고 재사용 가능한 코드 작성법","id":"55885714"},{"tagName":"h2","title":"제네릭이란 무엇인가?","id":"c49aa43c"},{"tagName":"h2","title":"제네릭 함수 작성하기","id":"d316ae0e"},{"tagName":"h2","title":"제네릭 타입 작성하기","id":"2555a7cf"},{"tagName":"h3","title":"제네릭 타입 사용 예제","id":"acea8eb9"}],"language":"kr"}]}]]}]]
8:null
