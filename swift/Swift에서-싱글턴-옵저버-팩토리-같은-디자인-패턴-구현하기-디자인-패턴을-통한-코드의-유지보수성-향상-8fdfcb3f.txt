1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B0%99%EC%9D%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%ED%96%A5%EC%83%81-8fdfcb3f","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-싱글턴-옵저버-팩토리-같은-디자인-패턴-구현하기-디자인-패턴을-통한-코드의-유지보수성-향상-8fdfcb3f\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B0%99%EC%9D%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%ED%96%A5%EC%83%81-8fdfcb3f","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-싱글턴-옵저버-팩토리-같은-디자인-패턴-구현하기-디자인-패턴을-통한-코드의-유지보수성-향상-8fdfcb3f\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B0%99%EC%9D%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%ED%96%A5%EC%83%81-8fdfcb3f","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift 언어에서 싱글턴, 옵저버, 팩토리와 같은 디자인 패턴을 구현하는 방법을 다룹니다. 디자인 패턴을 통해 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둡니다."}],["$","meta","3",{"name":"keywords","content":"Swift,디자인패턴,유지보수,재사용성"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B0%99%EC%9D%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%ED%96%A5%EC%83%81-8fdfcb3f"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift 언어에서 싱글턴, 옵저버, 팩토리와 같은 디자인 패턴을 구현하는 방법을 다룹니다. 디자인 패턴을 통해 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둡니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%EA%B0%99%EC%9D%80-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4%EC%9D%84-%ED%86%B5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%9D%98-%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EC%84%B1-%ED%96%A5%EC%83%81-8fdfcb3f"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift 언어에서 싱글턴, 옵저버, 팩토리와 같은 디자인 패턴을 구현하는 방법을 다룹니다. 디자인 패턴을 통해 코드의 유지보수성과 재사용성을 향상시키는 데 중점을 둡니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-07"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"6238dc41","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 디자인 패턴 구현하기"}],"\n",["$","h2",null,{"id":"e1c2d287","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"싱글턴 패턴"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["싱글턴 패턴은 클래스의 인스턴스가 하나만 생성되도록 보장하는 디자인 패턴입니다. 이 패턴은 보통 애플리케이션 전역에서 공유되어야 하는 로직에 유용합니다. Swift에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"static","position":{"start":{"line":6,"column":96,"offset":130},"end":{"line":6,"column":104,"offset":138}}}],"position":{"start":{"line":6,"column":96,"offset":130},"end":{"line":6,"column":104,"offset":138}}},"children":"static"}}]," 키워드를 사용하여 싱글턴 패턴을 쉽게 구현할 수 있습니다."]}],"\n",["$","h3",null,{"id":"8a30b120","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Swift에서의 싱글턴 구현 예제"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Singleton {\n    static let shared = Singleton()\n    private init() {}\n\n    func doSomething() {\n        print(\"싱글턴 패턴을 사용한 메서드 호출\")\n    }\n}\n\n// 사용 예시\nSingleton.shared.doSomething()\n"}],"position":{"start":{"line":10,"column":1,"offset":197},"end":{"line":22,"column":4,"offset":396}}},"children":"class Singleton {\n    static let shared = Singleton()\n    private init() {}\n\n    func doSomething() {\n        print(\"싱글턴 패턴을 사용한 메서드 호출\")\n    }\n}\n\n// 사용 예시\nSingleton.shared.doSomething()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Singleton","position":{"start":{"line":24,"column":9,"offset":406},"end":{"line":24,"column":20,"offset":417}}}],"position":{"start":{"line":24,"column":9,"offset":406},"end":{"line":24,"column":20,"offset":417}}},"children":"Singleton"}}]," 클래스의 인스턴스가 오직 하나만 생성됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"static let shared","position":{"start":{"line":24,"column":46,"offset":443},"end":{"line":24,"column":65,"offset":462}}}],"position":{"start":{"line":24,"column":46,"offset":443},"end":{"line":24,"column":65,"offset":462}}},"children":"static let shared"}}],"는 싱글턴 인스턴스를 생성하는 데 사용되며, 한 번 생성된 후에는 어플리케이션의 전역에서 동일한 인스턴스를 사용할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"private init()","position":{"start":{"line":24,"column":137,"offset":534},"end":{"line":24,"column":153,"offset":550}}}],"position":{"start":{"line":24,"column":137,"offset":534},"end":{"line":24,"column":153,"offset":550}}},"children":"private init()"}}],"은 외부에서 추가 인스턴스 생성을 막아줍니다."]}],"\n",["$","h2",null,{"id":"a927e298","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"옵저버 패턴"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"옵저버 패턴은 객체의 상태 변화가 다른 객체에 의해 자동으로 통지되도록 하는 패턴입니다. 이 패턴은 예를 들어 UI 업데이트나 데이터 동기화와 같은 상황에서 유용하게 쓰일 수 있습니다."}],"\n",["$","h3",null,{"id":"d68d401a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Swift에서의 옵저버 패턴 구현 예제"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Observer: AnyObject {\n    func update(subject: Subject)\n}\n\nclass Subject {\n    private lazy var observers = [Observer]()\n\n    func addObserver(_ observer: Observer) {\n        observers.append(observer)\n    }\n\n    func removeObserver(_ observer: Observer) {\n        observers = observers.filter { $0 !== observer }\n    }\n\n    func notifyObservers() {\n        for observer in observers {\n            observer.update(subject: self)\n        }\n    }\n\n    var state: Int = { didSet { notifyObservers() } }\n}\n\nclass ConcreteObserver: Observer {\n    func update(subject: Subject) {\n        print(\"옵저버가 업데이트 되었음: \\(subject.state)\")\n    }\n}\n\n// 사용 예시\nlet subject = Subject()\nlet observer = ConcreteObserver()\nsubject.addObserver(observer)\nsubject.state = 1  // 옵저버에게 알림이 전달됩니다\n"}],"position":{"start":{"line":32,"column":1,"offset":720},"end":{"line":68,"column":4,"offset":1508}}},"children":"protocol Observer: AnyObject {\n    func update(subject: Subject)\n}\n\nclass Subject {\n    private lazy var observers = [Observer]()\n\n    func addObserver(_ observer: Observer) {\n        observers.append(observer)\n    }\n\n    func removeObserver(_ observer: Observer) {\n        observers = observers.filter { $0 !== observer }\n    }\n\n    func notifyObservers() {\n        for observer in observers {\n            observer.update(subject: self)\n        }\n    }\n\n    var state: Int = { didSet { notifyObservers() } }\n}\n\nclass ConcreteObserver: Observer {\n    func update(subject: Subject) {\n        print(\"옵저버가 업데이트 되었음: \\(subject.state)\")\n    }\n}\n\n// 사용 예시\nlet subject = Subject()\nlet observer = ConcreteObserver()\nsubject.addObserver(observer)\nsubject.state = 1  // 옵저버에게 알림이 전달됩니다\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Subject","position":{"start":{"line":70,"column":9,"offset":1518},"end":{"line":70,"column":18,"offset":1527}}}],"position":{"start":{"line":70,"column":9,"offset":1518},"end":{"line":70,"column":18,"offset":1527}}},"children":"Subject"}}]," 클래스가 상태를 가지고 있으며, 이 상태가 변경될 때마다 모든 옵저버들에게 알림을 전달합니다. 옵저버들은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"update(subject:)","position":{"start":{"line":70,"column":78,"offset":1587},"end":{"line":70,"column":96,"offset":1605}}}],"position":{"start":{"line":70,"column":78,"offset":1587},"end":{"line":70,"column":96,"offset":1605}}},"children":"update(subject:)"}}]," 메서드를 통해 상태 변화를 반영할 수 있습니다."]}],"\n",["$","h2",null,{"id":"afb1e168","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"팩토리 패턴"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"팩토리 패턴은 객체 생성 로직을 별도의 팩토리 클래스로 분리하는 패턴입니다. 이 패턴은 객체 생성 로직을 통제하고, 코드의 가독성을 높이며, 나중에 생성 로직을 변경하기 쉽게 해줍니다."}],"\n",["$","h3",null,{"id":"a37ecb71","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Swift에서의 팩토리 패턴 구현 예제"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Product {\n    func doSomething()\n}\n\nclass ConcreteProductA: Product {\n    func doSomething() {\n        print(\"ConcreteProductA 작업 수행\")\n    }\n}\n\nclass ConcreteProductB: Product {\n    func doSomething() {\n        print(\"ConcreteProductB 작업 수행\")\n    }\n}\n\nclass Factory {\n    enum ProductType {\n        case typeA\n        case typeB\n    }\n\n    static func createProduct(type: ProductType) -> Product {\n        switch type {\n        case .typeA:\n            return ConcreteProductA()\n        case .typeB:\n            return ConcreteProductB()\n        }\n    }\n}\n\n// 사용 예시\nlet productA = Factory.createProduct(type: .typeA)\nproductA.doSomething()\nlet productB = Factory.createProduct(type: .typeB)\nproductB.doSomething()\n"}],"position":{"start":{"line":78,"column":1,"offset":1777},"end":{"line":116,"column":4,"offset":2512}}},"children":"protocol Product {\n    func doSomething()\n}\n\nclass ConcreteProductA: Product {\n    func doSomething() {\n        print(\"ConcreteProductA 작업 수행\")\n    }\n}\n\nclass ConcreteProductB: Product {\n    func doSomething() {\n        print(\"ConcreteProductB 작업 수행\")\n    }\n}\n\nclass Factory {\n    enum ProductType {\n        case typeA\n        case typeB\n    }\n\n    static func createProduct(type: ProductType) -> Product {\n        switch type {\n        case .typeA:\n            return ConcreteProductA()\n        case .typeB:\n            return ConcreteProductB()\n        }\n    }\n}\n\n// 사용 예시\nlet productA = Factory.createProduct(type: .typeA)\nproductA.doSomething()\nlet productB = Factory.createProduct(type: .typeB)\nproductB.doSomething()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Factory","position":{"start":{"line":118,"column":6,"offset":2519},"end":{"line":118,"column":15,"offset":2528}}}],"position":{"start":{"line":118,"column":6,"offset":2519},"end":{"line":118,"column":15,"offset":2528}}},"children":"Factory"}}]," 클래스가 제품 객체의 생성 책임을 맡습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"createProduct(type:)","position":{"start":{"line":118,"column":41,"offset":2554},"end":{"line":118,"column":63,"offset":2576}}}],"position":{"start":{"line":118,"column":41,"offset":2554},"end":{"line":118,"column":63,"offset":2576}}},"children":"createProduct(type:)"}}]," 메서드를 사용하여, 구체적으로 어떤 제품을 생성할지 결정할 수 있으며, 새롭게 생성 로직이 필요할 때는 팩토리 클래스만 수정하면 됩니다."]}],"\n",["$","h1",null,{"id":"5b12bcf2","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"싱글턴, 옵저버, 팩토리와 같은 디자인 패턴은 코드의 유지보수성과 재사용성을 크게 향상시킵니다. Swift에서도 이러한 패턴을 효과적으로 구현할 수 있으며, 이를 통해 코드의 품질을 높이고 유지보수를 더욱 쉽게 만들 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서 싱글턴, 옵저버, 팩토리 같은 디자인 패턴 구현하기: 디자인 패턴을 통한 코드의 유지보수성 향상.","toc":[{"tagName":"h1","title":"Swift에서 디자인 패턴 구현하기","id":"6238dc41"},{"tagName":"h2","title":"싱글턴 패턴","id":"e1c2d287"},{"tagName":"h3","title":"Swift에서의 싱글턴 구현 예제","id":"8a30b120"},{"tagName":"h2","title":"옵저버 패턴","id":"a927e298"},{"tagName":"h3","title":"Swift에서의 옵저버 패턴 구현 예제","id":"d68d401a"},{"tagName":"h2","title":"팩토리 패턴","id":"afb1e168"},{"tagName":"h3","title":"Swift에서의 팩토리 패턴 구현 예제","id":"a37ecb71"},{"tagName":"h1","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
