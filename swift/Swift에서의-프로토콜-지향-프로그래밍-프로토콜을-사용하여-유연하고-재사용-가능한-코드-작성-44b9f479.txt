1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-44b9f479","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서의-프로토콜-지향-프로그래밍-프로토콜을-사용하여-유연하고-재사용-가능한-코드-작성-44b9f479\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-44b9f479","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서의-프로토콜-지향-프로그래밍-프로토콜을-사용하여-유연하고-재사용-가능한-코드-작성-44b9f479\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-44b9f479","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 프로토콜 지향 프로그래밍은 유연하고 재사용 가능한 코드를 작성하는 강력한 방법론입니다. 이 글에서는 프로토콜의 개념, 사용 방법, 그리고 실제 예제를 통해 어떻게 코드를 개선할 수 있는지 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Swift,프로토콜,프로그래밍,재사용성"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-44b9f479"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 프로토콜 지향 프로그래밍은 유연하고 재사용 가능한 코드를 작성하는 강력한 방법론입니다. 이 글에서는 프로토콜의 개념, 사용 방법, 그리고 실제 예제를 통해 어떻게 코드를 개선할 수 있는지 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-44b9f479"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 프로토콜 지향 프로그래밍은 유연하고 재사용 가능한 코드를 작성하는 강력한 방법론입니다. 이 글에서는 프로토콜의 개념, 사용 방법, 그리고 실제 예제를 통해 어떻게 코드를 개선할 수 있는지 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-03"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"cbaa0e76","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서의 프로토콜 지향 프로그래밍"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 프로토콜 지향 프로그래밍(POP, Protocol-Oriented Programming)은 클래스 기반의 객체 지향 프로그래밍(OOP, Object-Oriented Programming)을 보완하거나 대체할 수 있는 방법론으로 주목받고 있습니다. 이 글에서는 POP의 기본 개념부터, 유용한 사용 사례, 그리고 실제 코드를 통해 프로토콜을 어떻게 활용할 수 있는지 자세히 설명합니다."}],"\n",["$","h2",null,{"id":"f3ec2925","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜은 특정 기능을 수행하기 위한 메서드, 프로퍼티, 기타 요구사항의 집합입니다. 클래스, 구조체, 열거형 등이 하나 이상의 프로토콜을 채택(adopt)하여 그 요구사항을 구현해야 합니다. 이는 Java나 C#의 인터페이스와 유사한 개념입니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 프로토콜은 다음과 같이 정의될 수 있습니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Drivable {\n    var maximumSpeed: Int { get }\n    func drive()\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":440},"end":{"line":17,"column":4,"offset":525}}},"children":"protocol Drivable {\n    var maximumSpeed: Int { get }\n    func drive()\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":19,"column":4,"offset":530},"end":{"line":19,"column":14,"offset":540}}}],"position":{"start":{"line":19,"column":4,"offset":530},"end":{"line":19,"column":14,"offset":540}}},"children":"Drivable"}}]," 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maximumSpeed","position":{"start":{"line":19,"column":21,"offset":547},"end":{"line":19,"column":35,"offset":561}}}],"position":{"start":{"line":19,"column":21,"offset":547},"end":{"line":19,"column":35,"offset":561}}},"children":"maximumSpeed"}}],"라는 읽기 전용 프로퍼티와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"drive","position":{"start":{"line":19,"column":50,"offset":576},"end":{"line":19,"column":57,"offset":583}}}],"position":{"start":{"line":19,"column":50,"offset":576},"end":{"line":19,"column":57,"offset":583}}},"children":"drive"}}],"라는 메서드를 요구합니다. 다음과 같이 이 프로토콜을 사용할 수 있습니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Car: Drivable {\n    var maximumSpeed: Int\n    func drive() {\n        print(\"Driving at \\(maximumSpeed) km/h\")\n    }\n}\n"}],"position":{"start":{"line":21,"column":1,"offset":626},"end":{"line":28,"column":4,"offset":763}}},"children":"struct Car: Drivable {\n    var maximumSpeed: Int\n    func drive() {\n        print(\"Driving at \\(maximumSpeed) km/h\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Car","position":{"start":{"line":30,"column":5,"offset":769},"end":{"line":30,"column":10,"offset":774}}}],"position":{"start":{"line":30,"column":5,"offset":769},"end":{"line":30,"column":10,"offset":774}}},"children":"Car"}}]," 구조체가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":30,"column":16,"offset":780},"end":{"line":30,"column":26,"offset":790}}}],"position":{"start":{"line":30,"column":16,"offset":780},"end":{"line":30,"column":26,"offset":790}}},"children":"Drivable"}}]," 프로토콜을 채택하여 요구사항을 구현하면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Car","position":{"start":{"line":30,"column":50,"offset":814},"end":{"line":30,"column":55,"offset":819}}}],"position":{"start":{"line":30,"column":50,"offset":814},"end":{"line":30,"column":55,"offset":819}}},"children":"Car"}}]," 인스턴스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"drive()","position":{"start":{"line":30,"column":62,"offset":826},"end":{"line":30,"column":71,"offset":835}}}],"position":{"start":{"line":30,"column":62,"offset":826},"end":{"line":30,"column":71,"offset":835}}},"children":"drive()"}}]," 메서드를 호출할 수 있습니다."]}],"\n",["$","h2",null,{"id":"13f74b89","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜의 장점"}],"\n",["$","h3",null,{"id":"3333debd","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"유연성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프토토콜은 클래스 상속과 달리 다중 상속을 지원합니다. 이는 하나의 타입이 여러 개의 프로토콜을 채택할 수 있음을 의미합니다. 이렇게 다중 상속의 문제를 해결하면서도, 코드의 유연성을 높일 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Flyable {\n    var maximumAltitude: Int { get }\n    func fly()\n}\n\nstruct FlyingCar: Drivable, Flyable {\n    var maximumSpeed: Int\n    var maximumAltitude: Int\n    func drive() {\n        print(\"Driving at \\(maximumSpeed) km/h\")\n    }\n    func fly() {\n        print(\"Flying at \\(maximumAltitude) meters\")\n    }\n}\n"}],"position":{"start":{"line":38,"column":1,"offset":991},"end":{"line":54,"column":4,"offset":1322}}},"children":"protocol Flyable {\n    var maximumAltitude: Int { get }\n    func fly()\n}\n\nstruct FlyingCar: Drivable, Flyable {\n    var maximumSpeed: Int\n    var maximumAltitude: Int\n    func drive() {\n        print(\"Driving at \\(maximumSpeed) km/h\")\n    }\n    func fly() {\n        print(\"Flying at \\(maximumAltitude) meters\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"FlyingCar","position":{"start":{"line":56,"column":9,"offset":1332},"end":{"line":56,"column":20,"offset":1343}}}],"position":{"start":{"line":56,"column":9,"offset":1332},"end":{"line":56,"column":20,"offset":1343}}},"children":"FlyingCar"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":56,"column":22,"offset":1345},"end":{"line":56,"column":32,"offset":1355}}}],"position":{"start":{"line":56,"column":22,"offset":1345},"end":{"line":56,"column":32,"offset":1355}}},"children":"Drivable"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Flyable","position":{"start":{"line":56,"column":34,"offset":1357},"end":{"line":56,"column":43,"offset":1366}}}],"position":{"start":{"line":56,"column":34,"offset":1357},"end":{"line":56,"column":43,"offset":1366}}},"children":"Flyable"}}]," 두 개의 프로토콜을 채택하여 두 가지의 기능을 모두 구현합니다."]}],"\n",["$","h3",null,{"id":"dfd80b66","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"재사용성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜 지향 프로그래밍은 코드 재사용성을 높이는 데 매우 유리합니다. 공통 기능을 프로토콜로 정의하고 여러 타입에서 이를 구현함으로써, 코드 중복을 줄이고 유지보수를 용이하게 합니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Workable {\n    func doWork()\n}\n\nextension Workable {\n    func doWork() {\n        print(\"Work in progress\")\n    }\n}\n\nstruct Robot: Workable {}\nstruct Employee: Workable {}\n\nlet robot = Robot()\nrobot.doWork() // Work in progress\n\nlet employee = Employee()\nemployee.doWork() // Work in progress\n"}],"position":{"start":{"line":62,"column":1,"offset":1519},"end":{"line":81,"column":4,"offset":1832}}},"children":"protocol Workable {\n    func doWork()\n}\n\nextension Workable {\n    func doWork() {\n        print(\"Work in progress\")\n    }\n}\n\nstruct Robot: Workable {}\nstruct Employee: Workable {}\n\nlet robot = Robot()\nrobot.doWork() // Work in progress\n\nlet employee = Employee()\nemployee.doWork() // Work in progress\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Workable","position":{"start":{"line":83,"column":9,"offset":1842},"end":{"line":83,"column":19,"offset":1852}}}],"position":{"start":{"line":83,"column":9,"offset":1842},"end":{"line":83,"column":19,"offset":1852}}},"children":"Workable"}}]," 프로토콜에 기본 구현을 제공하여, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Robot","position":{"start":{"line":83,"column":39,"offset":1872},"end":{"line":83,"column":46,"offset":1879}}}],"position":{"start":{"line":83,"column":39,"offset":1872},"end":{"line":83,"column":46,"offset":1879}}},"children":"Robot"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Employee","position":{"start":{"line":83,"column":48,"offset":1881},"end":{"line":83,"column":58,"offset":1891}}}],"position":{"start":{"line":83,"column":48,"offset":1881},"end":{"line":83,"column":58,"offset":1891}}},"children":"Employee"}}],"가 중복된 코드를 작성하지 않도록 합니다. 대신, 필요시 각 타입에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"doWork()","position":{"start":{"line":83,"column":97,"offset":1930},"end":{"line":83,"column":107,"offset":1940}}}],"position":{"start":{"line":83,"column":97,"offset":1930},"end":{"line":83,"column":107,"offset":1940}}},"children":"doWork()"}}],"를 재정의할 수 있습니다."]}],"\n",["$","h3",null,{"id":"51806ff6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"동일한 인터페이스 제공"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["애플리케이션에서 다양한 타입이 하나의 일관된 인터페이스를 사용하도록 할 수 있습니다. 이는 특히 콜렉션 타입에서 유용합니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":87,"column":78,"offset":2051},"end":{"line":87,"column":89,"offset":2062}}}],"position":{"start":{"line":87,"column":78,"offset":2051},"end":{"line":87,"column":89,"offset":2062}}},"children":"Equatable"}}]," 프로토콜을 사용하면 타입 간 비교 기능을 일관되게 제공합니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Equatable {\n    static func == (lhs: Self, rhs: Self) -> Bool\n}\n\nstruct Person: Equatable {\n    var name: String\n    var age: Int\n\n    static func == (lhs: Person, rhs: Person) -> Bool {\n        return lhs.name == rhs.name && lhs.age == rhs.age\n    }\n}\n\nlet person1 = Person(name: \"John\", age: 30)\nlet person2 = Person(name: \"John\", age: 30)\n\nif person1 == person2 {\n    print(\"They are the same person.\")\n}\n"}],"position":{"start":{"line":89,"column":1,"offset":2099},"end":{"line":109,"column":4,"offset":2528}}},"children":"protocol Equatable {\n    static func == (lhs: Self, rhs: Self) -> Bool\n}\n\nstruct Person: Equatable {\n    var name: String\n    var age: Int\n\n    static func == (lhs: Person, rhs: Person) -> Bool {\n        return lhs.name == rhs.name && lhs.age == rhs.age\n    }\n}\n\nlet person1 = Person(name: \"John\", age: 30)\nlet person2 = Person(name: \"John\", age: 30)\n\nif person1 == person2 {\n    print(\"They are the same person.\")\n}\n"}}]}],"\n",["$","h2",null,{"id":"9bd0316e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실제 사용 사례"}],"\n",["$","h3",null,{"id":"b6dfcd84","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 소스와 델리게이트 패턴"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 개발에서 프로토콜은 주로 데이터 소스(data sources)와 델리게이트(delegate) 패턴에 많이 사용됩니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UITableViewDataSource","position":{"start":{"line":115,"column":78,"offset":2642},"end":{"line":115,"column":101,"offset":2665}}}],"position":{"start":{"line":115,"column":78,"offset":2642},"end":{"line":115,"column":101,"offset":2665}}},"children":"UITableViewDataSource"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UITableViewDelegate","position":{"start":{"line":115,"column":103,"offset":2667},"end":{"line":115,"column":124,"offset":2688}}}],"position":{"start":{"line":115,"column":103,"offset":2667},"end":{"line":115,"column":124,"offset":2688}}},"children":"UITableViewDelegate"}}]," 프로토콜은 테이블뷰의 데이터 공급 및 이벤트 처리를 담당합니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol UITableViewDataSource {\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int\n}\n\nprotocol UITableViewDelegate {\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)\n}\n"}],"position":{"start":{"line":117,"column":1,"offset":2726},"end":{"line":126,"column":4,"offset":3076}}},"children":"protocol UITableViewDataSource {\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int\n}\n\nprotocol UITableViewDelegate {\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"개발자는 이를 채택하여 원하는 동작을 구현할 수 있습니다. 이렇게 하면 테이블뷰 행동을 유연하게 조정할 수 있습니다."}],"\n",["$","h3",null,{"id":"bb3bc73c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"네트워킹"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"네트워크 요청을 처리할 때도 프로토콜을 사용할 수 있습니다. 네트워크 레이어를 보다 추상화하고, 모킹(mocking)과 같은 테스트 작업을 용이하게 합니다."}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol NetworkRequest {\n    func fetchData(completion: @escaping (Data?, Error?) -> Void)\n}\n\nclass APIClient: NetworkRequest {\n    func fetchData(completion: @escaping (Data?, Error?) -> Void) {\n        // 네트워크 요청 작업...\n    }\n}\n"}],"position":{"start":{"line":134,"column":1,"offset":3244},"end":{"line":144,"column":4,"offset":3486}}},"children":"protocol NetworkRequest {\n    func fetchData(completion: @escaping (Data?, Error?) -> Void)\n}\n\nclass APIClient: NetworkRequest {\n    func fetchData(completion: @escaping (Data?, Error?) -> Void) {\n        // 네트워크 요청 작업...\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"APIClient","position":{"start":{"line":146,"column":1,"offset":3488},"end":{"line":146,"column":12,"offset":3499}}}],"position":{"start":{"line":146,"column":1,"offset":3488},"end":{"line":146,"column":12,"offset":3499}}},"children":"APIClient"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkRequest","position":{"start":{"line":146,"column":18,"offset":3505},"end":{"line":146,"column":34,"offset":3521}}}],"position":{"start":{"line":146,"column":18,"offset":3505},"end":{"line":146,"column":34,"offset":3521}}},"children":"NetworkRequest"}}]," 프로토콜을 구현하여 네트워크를 통해 데이터를 가져오며, 이는 테스트 시 모킹을 통해 실제 네트워크 요청 없이도 동작을 검증할 수 있는 유연한 구조를 제공합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 프로토콜 지향 프로그래밍은 코드의 유연성, 재사용성, 일관성을 크게 향상시킵니다. 프로토콜을 통해 다양한 기능을 추상화하고, 코드 중복을 줄이며, 타입을 일관된 방식으로 처리할 수 있습니다. 프로토콜을 적절히 활용하면 더 깨끗하고, 유지보수하기 쉬운 코드를 작성할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서의 프로토콜 지향 프로그래밍: 프로토콜을 사용하여 유연하고 재사용 가능한 코드 작성.","toc":[{"tagName":"h1","title":"Swift에서의 프로토콜 지향 프로그래밍","id":"cbaa0e76"},{"tagName":"h2","title":"프로토콜의 기본 개념","id":"f3ec2925"},{"tagName":"h2","title":"프로토콜의 장점","id":"13f74b89"},{"tagName":"h3","title":"유연성","id":"3333debd"},{"tagName":"h3","title":"재사용성","id":"dfd80b66"},{"tagName":"h3","title":"동일한 인터페이스 제공","id":"51806ff6"},{"tagName":"h2","title":"실제 사용 사례","id":"9bd0316e"},{"tagName":"h3","title":"데이터 소스와 델리게이트 패턴","id":"b6dfcd84"},{"tagName":"h3","title":"네트워킹","id":"bb3bc73c"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
