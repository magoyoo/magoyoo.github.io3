1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["tags",{"children":[["slug","ios-%EA%B0%9C%EB%B0%9C","d"],{"children":["__PAGE__?{\"slug\":\"ios-개발\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
9:I{"id":1247,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","396:static/chunks/396-5bd701a67a6189e9.js","355:static/chunks/app/tags/[slug]/page-4363d8d5fe95e0a7.js"],"name":"","async":false}
a:I{"id":41465,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","396:static/chunks/396-5bd701a67a6189e9.js","355:static/chunks/app/tags/[slug]/page-4363d8d5fe95e0a7.js"],"name":"","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","tags","children",["slug","ios-%EA%B0%9C%EB%B0%9C","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8",["$","div",null,{"className":"pt-[80px]","children":[["$","$L9",null,{"language":"app","screenType":"TAGS"}],["$","main",null,{"className":"flex w-full justify-center","children":["$","div",null,{"className":"flex flex-row justify-start xl:w-[800px] w-full px-[20px] py-[40px] md:px-[40px] md:pb-[80px] md:pt-[60px] gap-[80px]","children":["$","section",null,{"className":"flex flex-1 flex-col gap-[80px]","children":[["$","h2",null,{"className":"md:flex hidden text-gray-900 font-semibold text-[22px]","children":"iOS 개발 관련글"}],["$","ul",null,{"className":"flex flex-1 flex-col gap-[80px]","children":[["$","li","Swift로 데이터 전송 시 UniformTypeIdentifiers 사용하기0",{"children":["$","$La",null,{"postMeta":{"id":"e10d8d81-1774-464d-982a-e8326acaf2fb","path":"/swift/Swift로-데이터-전송-시-UniformTypeIdentifiers-사용하기-e10d8d81","title":"Swift로 데이터 전송 시 UniformTypeIdentifiers 사용하기","description":"이 글은 Swift 언어에서 데이터를 전송할 때 `UniformTypeIdentifiers`를 사용하는 방법에 대해 설명합니다. `UniformTypeIdentifiers`는 데이터 타입을 식별하고 처리하는 데 중요한 역할을 합니다. 다양한 실용적인 예시를 통해 이를 활용하는 방법을 배울 수 있습니다.","date":"2024-08-07T06:02:34.164Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UniformTypeIdentifiers","path":"/tags/uniformtypeidentifiers","id":"uniformtypeidentifiers"},{"name":"데이터 전송","path":"/tags/데이터-전송","id":"데이터-전송"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.5","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":0,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 스택을 활용한 레이아웃 구성 비법1",{"children":["$","$La",null,{"postMeta":{"id":"c0fb6361-19b3-4221-9cf3-5aa5b010302a","path":"/swift/SwiftUI-스택을-활용한-레이아웃-구성-비법-c0fb6361","title":"SwiftUI 스택을 활용한 레이아웃 구성 비법","description":"SwiftUI의 스택을 활용하여 레이아웃을 효율적으로 구성하는 방법과 주요 비법에 대해 알아봅니다. 다양한 스택의 종류와 그 활용 방안을 깊이 있게 다룹니다.","date":"2024-08-06T06:03:20.198Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"스택","path":"/tags/스택","id":"스택"},{"name":"레이아웃","path":"/tags/레이아웃","id":"레이아웃"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"5.4","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":1,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI에서 이미지 편집 기능 구현하기2",{"children":["$","$La",null,{"postMeta":{"id":"f4f585bb-ac63-428e-92d0-ba70c81a55bd","path":"/swift/SwiftUI에서-이미지-편집-기능-구현하기-f4f585bb","title":"SwiftUI에서 이미지 편집 기능 구현하기","description":"이 글에서는 SwiftUI를 사용하여 간단한 이미지 편집 기능을 구현하는 방법에 대해 자세히 설명합니다. 이미지 필터 적용, 크기 조정, 자르기 등의 기본적인 편집 기능을 다룹니다.","date":"2024-08-06T06:00:32.625Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"이미지 편집","path":"/tags/이미지-편집","id":"이미지-편집"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"Swift","path":"/tags/swift","id":"swift"}],"readMin":"6.4","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":2,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI에서 네트워크 통신 처리: URLSession 활용3",{"children":["$","$La",null,{"postMeta":{"id":"325a3a58-878e-45aa-9f3d-01a5390ea4a7","path":"/swift/SwiftUI에서-네트워크-통신-처리-URLSession-활용-325a3a58","title":"SwiftUI에서 네트워크 통신 처리: URLSession 활용","description":"SwiftUI에서 네트워크 통신을 처리하는 방법을 다룹니다. 특히 URLSession을 사용하여 데이터를 로드하고 SwiftUI 뷰에 반영하는 방법을 단계별로 설명합니다.","date":"2024-08-05T06:02:13.867Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"URLSession","path":"/tags/urlsession","id":"urlsession"},{"name":"네트워크 통신","path":"/tags/네트워크-통신","id":"네트워크-통신"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"5.8","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":3,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 사용자 인터랙션 디자인: UX 향상 팁4",{"children":["$","$La",null,{"postMeta":{"id":"f7948288-31e8-4bfb-98fa-607e9c9e8ecf","path":"/swift/SwiftUI-사용자-인터랙션-디자인-UX-향상-팁-f7948288","title":"SwiftUI 사용자 인터랙션 디자인: UX 향상 팁","description":"SwiftUI를 사용하여 사용자 인터페이스를 디자인할 때 고려해야 할 UX 향상 팁들을 소개합니다. 더 나은 사용자 경험을 제공하고 앱의 타겟 사용자를 만족시키는 방법을 알아봅니다.","date":"2024-08-04T06:00:14.612Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"UX 디자인","path":"/tags/ux-디자인","id":"ux-디자인"},{"name":"사용자 인터페이스","path":"/tags/사용자-인터페이스","id":"사용자-인터페이스"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.6","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":4,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI에서 비디오 플레이어 사용하기: AVKit 연동5",{"children":["$","$La",null,{"postMeta":{"id":"8888ddc7-494a-4cfe-8915-3cceca55f927","path":"/swift/SwiftUI에서-비디오-플레이어-사용하기-AVKit-연동-8888ddc7","title":"SwiftUI에서 비디오 플레이어 사용하기: AVKit 연동","description":"이 글은 SwiftUI에서 비디오 플레이어를 사용하기 위해 `AVKit`을 연동하는 방법에 대해 설명합니다. 비디오 플레이어를 추가하고, 제어 요소를 활용하는 방법을 자세히 다루어 SwiftUI 개발자들에게 실질적인 도움을 제공합니다.","date":"2024-08-02T06:01:52.800Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"AVKit","path":"/tags/avkit","id":"avkit"},{"name":"비디오 플레이어","path":"/tags/비디오-플레이어","id":"비디오-플레이어"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.5","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":5,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift에서 Custom View 구현 시 Protocol 사용 방법6",{"children":["$","$La",null,{"postMeta":{"id":"c288ae2f-ddca-4bf0-bc90-f36539451140","path":"/swift/Swift에서-Custom-View-구현-시-Protocol-사용-방법-c288ae2f","title":"Swift에서 Custom View 구현 시 Protocol 사용 방법","description":"Swift에서 커스텀 뷰를 구현할 때 프로토콜을 사용하는 방법을 다룹니다. 이 글에서는 프로토콜의 장점, 구현 방법, 그리고 실제 예제를 통해 프로토콜이 커스텀 뷰 설계에 어떻게 도움을 줄 수 있는지 설명합니다.","date":"2024-08-01T06:03:46.647Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"Custom View","path":"/tags/custom-view","id":"custom-view"},{"name":"Protocol","path":"/tags/protocol","id":"protocol"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.4","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":6,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 다크 모드 지원: 사용자 설정에 따른 테마 변경7",{"children":["$","$La",null,{"postMeta":{"id":"89f64136-da64-41c6-9376-8c27bfeb087c","path":"/swift/SwiftUI-다크-모드-지원-사용자-설정에-따른-테마-변경-89f64136","title":"SwiftUI 다크 모드 지원: 사용자 설정에 따른 테마 변경","description":"SwiftUI를 이용해 다크 모드를 지원하는 애플리케이션을 만드는 방법에 대해 다룹니다. 이 글에서는 사용자의 설정에 따라 테마를 자동으로 변경하는 방법과 코드를 안내합니다.","date":"2024-08-01T06:02:28.096Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"다크 모드","path":"/tags/다크-모드","id":"다크-모드"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"테마 변경","path":"/tags/테마-변경","id":"테마-변경"}],"readMin":"4.4","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":7,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIKit의 Dynamic Type 지원: 반응형 텍스트 크기 적용8",{"children":["$","$La",null,{"postMeta":{"id":"d7fdeec9-47be-4706-818e-144080da76cf","path":"/swift/UIKit의-Dynamic-Type-지원-반응형-텍스트-크기-적용-d7fdeec9","title":"UIKit의 Dynamic Type 지원: 반응형 텍스트 크기 적용","description":"이 글에서는 iOS 앱 개발에 필수적인 UIKit의 Dynamic Type 지원을 통해 반응형 텍스트 크기를 적용하는 방법을 다룹니다. Dynamic Type은 사용자가 원하는 텍스트 크기 설정에 맞추어 앱의 텍스트 요소들이 자동으로 조정되도록 합니다.","date":"2024-08-01T06:01:08.418Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"Dynamic Type","path":"/tags/dynamic-type","id":"dynamic-type"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.6","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":8,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI의 NavigationView 사용법: 네비게이션 구현하기9",{"children":["$","$La",null,{"postMeta":{"id":"42d80d4d-3432-4a52-b366-0bfb28e18c48","path":"/swift/SwiftUI의-NavigationView-사용법-네비게이션-구현하기-42d80d4d","title":"SwiftUI의 NavigationView 사용법: 네비게이션 구현하기","description":"SwiftUI에서 네비게이션을 구현하기 위해 `NavigationView`를 사용하는 방법을 다룹니다. 이 글에서는 `NavigationView`의 기본 사용법부터 고급 기능까지 다양한 사례를 통해 상세히 설명합니다.","date":"2024-07-31T06:03:35.437Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"NavigationView","path":"/tags/navigationview","id":"navigationview"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"Swift","path":"/tags/swift","id":"swift"}],"readMin":"5.1","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":9,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIAlertController 사용법: 경고 및 알림 메시지 만들기10",{"children":["$","$La",null,{"postMeta":{"id":"a35cc165-5ab0-4ffe-9dee-09079389fcf1","path":"/swift/UIAlertController-사용법-경고-및-알림-메시지-만들기-a35cc165","title":"UIAlertController 사용법: 경고 및 알림 메시지 만들기","description":"이 글에서는 Swift에서 기본적인 UI 요소인 UIAlertController를 사용하여 경고 및 알림 메시지를 만드는 방법을 설명합니다. UIAlertController는 사용자에게 중요한 정보를 전달하거나 선택을 유도하는 데 유용합니다. 다양한 스타일과 동작을 통해 사용자 경험을 향상시킬 수 있습니다.","date":"2024-07-30T06:04:15.493Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIAlertController","path":"/tags/uialertcontroller","id":"uialertcontroller"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"경고 메시지","path":"/tags/경고-메시지","id":"경고-메시지"}],"readMin":"4.7","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":10,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 프리뷰 기능 활용: 실시간 UI 미리보기11",{"children":["$","$La",null,{"postMeta":{"id":"7285c8cb-fa8a-4e36-a0f6-4e638707d1f8","path":"/swift/SwiftUI-프리뷰-기능-활용-실시간-UI-미리보기-7285c8cb","title":"SwiftUI 프리뷰 기능 활용: 실시간 UI 미리보기","description":"SwiftUI의 프리뷰 기능을 이용해 실시간으로 UI를 미리보는 방법에 대해 알아보겠습니다. 이 기능을 활용하면 앱 개발 중 즉각적인 피드백을 받을 수 있어 개발 효율성을 크게 높일 수 있습니다.","date":"2024-07-30T06:03:22.749Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"프리뷰","path":"/tags/프리뷰","id":"프리뷰"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"실시간 미리보기","path":"/tags/실시간-미리보기","id":"실시간-미리보기"}],"readMin":"5.2","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":11,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI의 버튼과 액션 처리 방법12",{"children":["$","$La",null,{"postMeta":{"id":"968fee2d-b985-422c-a401-3ff8eb4433d9","path":"/swift/SwiftUI의-버튼과-액션-처리-방법-968fee2d","title":"SwiftUI의 버튼과 액션 처리 방법","description":"이 글에서는 SwiftUI를 사용하여 버튼을 생성하고, 해당 버튼에 액션을 연결하는 방법에 대해 다룹니다. SwiftUI는 UI 구성과 상태 관리를 간편하게 하여 개발자의 생산성을 높여주는데, 특히 버튼과 액션 관련 부분은 중요한 요소입니다.","date":"2024-07-29T06:02:28.859Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"버튼","path":"/tags/버튼","id":"버튼"},{"name":"액션","path":"/tags/액션","id":"액션"}],"readMin":"1.0","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":12,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UISegmentedControl 사용하기: 간단한 선택 메뉴 만들기13",{"children":["$","$La",null,{"postMeta":{"id":"69a5340f-f304-4750-aba0-01465f141ac7","path":"/swift/UISegmentedControl-사용하기-간단한-선택-메뉴-만들기-69a5340f","title":"UISegmentedControl 사용하기: 간단한 선택 메뉴 만들기","description":"Swift 언어에서 UISegmentedControl을 사용하여 간단한 선택 메뉴를 만드는 방법에 대해 설명합니다. UISegmentedControl은 여러 가지 옵션 중 하나를 선택할 수 있게 해주는 UI 요소로, 실용적이고 간단하게 구현할 수 있습니다.","date":"2024-07-28T06:03:03.887Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UISegmentedControl","path":"/tags/uisegmentedcontrol","id":"uisegmentedcontrol"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"UI 요소","path":"/tags/ui-요소","id":"ui-요소"}],"readMin":"1.3","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":13,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIView 애니메이션 심화: 고급 애니메이션 효과 적용14",{"children":["$","$La",null,{"postMeta":{"id":"39afc9f7-856b-4ff9-8920-a8a0f68acbbd","path":"/swift/UIView-애니메이션-심화-고급-애니메이션-효과-적용-39afc9f7","title":"UIView 애니메이션 심화: 고급 애니메이션 효과 적용","description":"이 글은 Swift를 사용하여 UIView 애니메이션의 고급 기법에 대해 다룹니다. 기본적인 애니메이션부터 복잡한 애니메이션 시퀀스, 키프레임 애니메이션, 스프링 애니메이션까지 다양한 기법을 설명합니다.","date":"2024-07-27T06:02:17.590Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIView","path":"/tags/uiview","id":"uiview"},{"name":"애니메이션","path":"/tags/애니메이션","id":"애니메이션"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.5","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":14,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift로 Autolayout과 translatesAutoresizingMaskIntoConstraints 이해하기15",{"children":["$","$La",null,{"postMeta":{"id":"e0c88905-8862-4f35-bbd1-24d568d64f47","path":"/swift/Swift로-Autolayout과-translatesAutoresizingMaskIntoConstraints-이해하기-e0c88905","title":"Swift로 Autolayout과 translatesAutoresizingMaskIntoConstraints 이해하기","description":"이 글에서는 Swift에서 Autolayout과 translatesAutoresizingMaskIntoConstraints를 이해하고 사용하는 방법을 다룹니다. 다양한 코드 예제와 함께 UI 요소를 유연하게 제어하는 방법을 학습해보세요.","date":"2024-07-26T06:03:31.168Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"Autolayout","path":"/tags/autolayout","id":"autolayout"},{"name":"translatesAutoresizingMaskIntoConstraints","path":"/tags/translatesautoresizingmaskintoconstraints","id":"translatesautoresizingmaskintoconstraints"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"3.8","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":15,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI에서 지도 뷰 사용하기: 위치 기반 서비스 구현16",{"children":["$","$La",null,{"postMeta":{"id":"d8acff51-c796-49c3-859e-4401d164aad1","path":"/swift/SwiftUI에서-지도-뷰-사용하기-위치-기반-서비스-구현-d8acff51","title":"SwiftUI에서 지도 뷰 사용하기: 위치 기반 서비스 구현","description":"SwiftUI에서 지도 뷰를 사용해 위치 기반 서비스를 구현하는 방법을 다룹니다. 이 글에서는 기본적인 지도 뷰 추가, 사용자 위치 요청 및 방향 기능 등을 단계별로 설명합니다.","date":"2024-07-26T06:00:31.751Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"지도 뷰","path":"/tags/지도-뷰","id":"지도-뷰"},{"name":"위치 기반 서비스","path":"/tags/위치-기반-서비스","id":"위치-기반-서비스"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"5.2","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":16,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 프로그레스 바 구현: 진행 상태 표시17",{"children":["$","$La",null,{"postMeta":{"id":"126d0a35-f3f4-43b8-8cd9-7373c04fe572","path":"/swift/SwiftUI-프로그레스-바-구현-진행-상태-표시-126d0a35","title":"SwiftUI 프로그레스 바 구현: 진행 상태 표시","description":"SwiftUI를 사용하여 프로그레스 바를 구현하는 방법과 이를 통해 앱의 진행 상태를 사용자에게 보여주는 기술적인 내용을 다룹니다.","date":"2024-07-25T06:03:04.673Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"프로그레스 바","path":"/tags/프로그레스-바","id":"프로그레스-바"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"UI 컴포넌트","path":"/tags/ui-컴포넌트","id":"ui-컴포넌트"}],"readMin":"4.1","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":17,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIView 크기 설정 시 Swift에서 꼭 알아야 할 Scale Factor18",{"children":["$","$La",null,{"postMeta":{"id":"8d3be940-b59f-4e0b-88ed-8af8a3abb345","path":"/swift/UIView-크기-설정-시-Swift에서-꼭-알아야-할-Scale-Factor-8d3be940","title":"UIView 크기 설정 시 Swift에서 꼭 알아야 할 Scale Factor","description":"Swift를 사용해 iOS 애플리케이션 개발 시 `UIView`의 크기를 제대로 설정하는 것은 필수적입니다. 특히 다양한 디바이스의 화면 크기 및 해상도에 대응하는 애플리케이션을 위해 `Scale Factor`의 개념을 정확히 이해하는 것이 중요합니다.","date":"2024-07-25T06:01:14.274Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIView","path":"/tags/uiview","id":"uiview"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"Scale Factor","path":"/tags/scale-factor","id":"scale-factor"}],"readMin":"3.7","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":18,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 리스트와 데이터 바인딩 간단하게 하기19",{"children":["$","$La",null,{"postMeta":{"id":"8076180b-a76e-4c08-aee7-7a3227d1725a","path":"/swift/SwiftUI-리스트와-데이터-바인딩-간단하게-하기-8076180b","title":"SwiftUI 리스트와 데이터 바인딩 간단하게 하기","description":"이 글에서는 SwiftUI를 사용하여 리스트와 데이터 바인딩을 간단하게 구현하는 방법을 다룹니다. SwiftUI의 기본 개념, 리스트의 생성과 관리, 데이터 바인딩의 사용 방법을 소개하고, 예제 코드를 통해 실습할 수 있습니다.","date":"2024-07-25T06:00:30.207Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"리스트","path":"/tags/리스트","id":"리스트"},{"name":"데이터 바인딩","path":"/tags/데이터-바인딩","id":"데이터-바인딩"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.2","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":19,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift에서 UIView를 Equtable로 만드는 방법과 활용 사례20",{"children":["$","$La",null,{"postMeta":{"id":"349d029c-46ef-4671-958b-74df110eb31e","path":"/swift/Swift에서-UIView를-Equtable로-만드는-방법과-활용-사례-349d029c","title":"Swift에서 UIView를 Equtable로 만드는 방법과 활용 사례","description":"Swift에서 `UIView`를 `Equatable`로 만드는 방법과 이를 활용하는 사례에 대해 다룹니다. `UIView`의 특정 속성을 비교하는 커스텀 메서드를 작성하고 이를 실제 프로젝트에 적용하는 방법을 설명합니다.","date":"2024-07-23T06:04:39.854Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIView","path":"/tags/uiview","id":"uiview"},{"name":"Equatable","path":"/tags/equatable","id":"equatable"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.4","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":20,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIKit의 Advanced Auto Layout: 복잡한 레이아웃 제어21",{"children":["$","$La",null,{"postMeta":{"id":"4163e2fc-8b6c-4bf0-9342-a5ed5560932e","path":"/swift/UIKit의-Advanced-Auto-Layout-복잡한-레이아웃-제어-4163e2fc","title":"UIKit의 Advanced Auto Layout: 복잡한 레이아웃 제어","description":"이 글에서는 iOS 개발을 위한 UIKit의 고급 자동 레이아웃 기능을 다룹니다. 복잡한 사용자 인터페이스를 효과적으로 구성하고 제어하는 방법을 설명합니다.","date":"2024-07-22T06:02:35.552Z","tags":[{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"Auto Layout","path":"/tags/auto-layout","id":"auto-layout"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"고급","path":"/tags/고급","id":"고급"}],"readMin":"5.1","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":21,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIKit의 Custom Transition: 맞춤형 화면 전환 효과22",{"children":["$","$La",null,{"postMeta":{"id":"e473e007-c88d-4c78-934d-e9a3afdb56e5","path":"/swift/UIKit의-Custom-Transition-맞춤형-화면-전환-효과-e473e007","title":"UIKit의 Custom Transition: 맞춤형 화면 전환 효과","description":"이 글은 Swift의 UIKit을 이용해 커스텀 화면 전환 효과를 구현하는 방법에 대해 설명합니다. 기본적인 개념, 필요한 클래스 및 프로토콜, 예제 코드 등을 포함하여 깊이 있게 다룰 것입니다.","date":"2024-07-21T06:00:33.475Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"커스텀 트랜지션","path":"/tags/커스텀-트랜지션","id":"커스텀-트랜지션"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.7","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":22,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리23",{"children":["$","$La",null,{"postMeta":{"id":"e4390a34-dc86-49b1-87b7-ddc4b8f1c9ce","path":"/swift/iOS-개발자를-위한-Swift-메모리-기초-개념-완벽-정리-e4390a34","title":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리","description":"성능 최적화와 안정적인 iOS 앱 개발을 위해 중요한 Swift 메모리 관리를 다룹니다. 이 글은 Swift 메모리 모델의 기초 개념을 설명하고, ARC, 강한 참조, 약한 참조 등의 주제를 포함합니다.","date":"2024-07-19T06:03:39.969Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"메모리 관리","path":"/tags/메모리-관리","id":"메모리-관리"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"ARC","path":"/tags/arc","id":"arc"}],"readMin":"6.6","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":23,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Core Motion과 UIKit 연동: 센서 데이터 처리24",{"children":["$","$La",null,{"postMeta":{"id":"83652fa5-f8bc-4f38-b307-10cab8702a9f","path":"/swift/Core-Motion과-UIKit-연동-센서-데이터-처리-83652fa5","title":"Core Motion과 UIKit 연동: 센서 데이터 처리","description":"이 글은 Apple의 `Core Motion` 프레임워크와 `UIKit`을 연동하여 센서 데이터를 처리하는 방법에 대해 설명합니다. 자세한 구현 방법과 예제 코드를 포함하여 `Core Motion`의 기능을 최대한 활용하는 방법을 다룹니다.","date":"2024-07-18T06:05:31.966Z","tags":[{"name":"Core Motion","path":"/tags/core-motion","id":"core-motion"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"센서 데이터","path":"/tags/센서-데이터","id":"센서-데이터"}],"readMin":"5.2","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":24,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 버튼 스타일링 기법: 커스텀 버튼 만들기25",{"children":["$","$La",null,{"postMeta":{"id":"d272d96d-de43-4f3f-9a2a-dd36e9452966","path":"/swift/SwiftUI-버튼-스타일링-기법-커스텀-버튼-만들기-d272d96d","title":"SwiftUI 버튼 스타일링 기법: 커스텀 버튼 만들기","description":"이 글에서는 SwiftUI에서 버튼을 스타일링하고 커스텀 버튼을 만들어서 사용자 인터페이스를 개선하는 방법에 대해 설명합니다. 버튼 스타일링을 통해 더욱 직관적이고 매력적인 앱을 디자인할 수 있습니다.","date":"2024-07-18T06:01:03.070Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"버튼 스타일링","path":"/tags/버튼-스타일링","id":"버튼-스타일링"},{"name":"커스텀 버튼","path":"/tags/커스텀-버튼","id":"커스텀-버튼"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.2","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":25,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Auto Layout 기초: 반응형 레이아웃 쉽게 만들기26",{"children":["$","$La",null,{"postMeta":{"id":"501956e5-a4ee-4407-a2fd-84b18e9f2077","path":"/swift/Auto-Layout-기초-반응형-레이아웃-쉽게-만들기-501956e5","title":"Auto Layout 기초: 반응형 레이아웃 쉽게 만들기","description":"이 글은 Swift에서 Auto Layout의 기초 개념과 이를 이용한 반응형 레이아웃을 쉽게 만드는 방법에 대해 설명합니다. Auto Layout은 다양한 디바이스와 화면 크기에 맞춰 사용자 인터페이스를 유동적으로 조정할 수 있도록 도와줍니다.","date":"2024-07-17T06:02:54.687Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"Auto Layout","path":"/tags/auto-layout","id":"auto-layout"},{"name":"반응형 레이아웃","path":"/tags/반응형-레이아웃","id":"반응형-레이아웃"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"5.2","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":26,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 고급 레이아웃 기법: 그리드와 커스텀 레이아웃27",{"children":["$","$La",null,{"postMeta":{"id":"0cf09e3b-4d04-4fc4-b33e-6e5153399bcd","path":"/swift/SwiftUI-고급-레이아웃-기법-그리드와-커스텀-레이아웃-0cf09e3b","title":"SwiftUI 고급 레이아웃 기법: 그리드와 커스텀 레이아웃","description":"이 문서는 Swift 프로그래밍 언어의 SwiftUI를 사용하여 고급 레이아웃 기법을 다룹니다. 특히 그리드와 커스텀 레이아웃을 활용하여 유연하고 효율적인 사용자 인터페이스를 구현하는 방법에 대해 설명합니다.","date":"2024-07-15T06:01:57.109Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"그리드 레이아웃","path":"/tags/그리드-레이아웃","id":"그리드-레이아웃"},{"name":"커스텀 레이아웃","path":"/tags/커스텀-레이아웃","id":"커스텀-레이아웃"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.4","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":27,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI의 색상과 그라디언트 적용법28",{"children":["$","$La",null,{"postMeta":{"id":"8038c3f4-95e2-4db3-934d-85574da5b608","path":"/swift/SwiftUI의-색상과-그라디언트-적용법-8038c3f4","title":"SwiftUI의 색상과 그라디언트 적용법","description":"SwiftUI에서 색상과 그라디언트를 사용하는 방법을 설명합니다. SwiftUI는 애플의 최신 사용자 인터페이스 프레임워크로, 색상과 그라디언트를 통해 앱의 시각적 요소를 쉽게 커스터마이징할 수 있습니다.","date":"2024-07-14T06:02:36.508Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"색상","path":"/tags/색상","id":"색상"},{"name":"그라디언트","path":"/tags/그라디언트","id":"그라디언트"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"1.5","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":28,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 사용자 프로필 화면 구성: 사용자 정보 관리29",{"children":["$","$La",null,{"postMeta":{"id":"5af6f1c0-0860-4f89-86e8-1ba41d9038ef","path":"/swift/SwiftUI-사용자-프로필-화면-구성-사용자-정보-관리-5af6f1c0","title":"SwiftUI 사용자 프로필 화면 구성: 사용자 정보 관리","description":"SwiftUI를 사용하여 사용자 프로필 화면을 구성하고 사용자 정보를 관리하는 방법에 대해 다룹니다. SwiftUI의 강력한 기능을 활용해 사용자 프로필 화면을 쉽게 생성하고, 사용자 정보를 효과적으로 관리하는 노하우를 제공합니다.","date":"2024-07-13T06:03:24.577Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"사용자 프로필","path":"/tags/사용자-프로필","id":"사용자-프로필"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"Swift","path":"/tags/swift","id":"swift"}],"readMin":"6.8","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":29,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIKit으로 게임 만들기: 인터랙티브 앱 개발30",{"children":["$","$La",null,{"postMeta":{"id":"cfe3f683-eafc-4734-bc25-393503b23f5e","path":"/swift/UIKit으로-게임-만들기-인터랙티브-앱-개발-cfe3f683","title":"UIKit으로 게임 만들기: 인터랙티브 앱 개발","description":"이 글은 Swift와 UIKit을 사용하여 간단한 인터랙티브 게임 앱을 만드는 방법을 설명합니다. 단계별 튜토리얼을 통해 뼈대를 구성하고, 사용자 인터랙션을 처리하고, 게임의 논리를 구현합니다.","date":"2024-07-13T06:02:18.819Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"게임 개발","path":"/tags/게임-개발","id":"게임-개발"}],"readMin":"4.8","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":30,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","복잡한 UICollectionView 레이아웃 구현: 고급 그리드 구성31",{"children":["$","$La",null,{"postMeta":{"id":"d696c08d-0ab3-4e6f-985a-038af551204c","path":"/swift/복잡한-UICollectionView-레이아웃-구현-고급-그리드-구성-d696c08d","title":"복잡한 UICollectionView 레이아웃 구현: 고급 그리드 구성","description":"이 글에서는 Swift를 사용하여 복잡한 UICollectionView 레이아웃을 구현하는 방법을 다룹니다. 특히 고급 그리드 구성을 중점적으로 설명하며, 코드 예시와 함께 다양한 레이아웃 기법을 소개합니다.","date":"2024-07-13T06:02:02.225Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UICollectionView","path":"/tags/uicollectionview","id":"uicollectionview"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"그리드 레이아웃","path":"/tags/그리드-레이아웃","id":"그리드-레이아웃"}],"readMin":"5.0","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":31,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","AVFoundation과 UIKit: 오디오 및 비디오 통합32",{"children":["$","$La",null,{"postMeta":{"id":"1a3a73e2-38e1-4a37-b625-566c8e946425","path":"/swift/AVFoundation과-UIKit-오디오-및-비디오-통합-1a3a73e2","title":"AVFoundation과 UIKit: 오디오 및 비디오 통합","description":"AVFoundation와 UIKit은 iOS 애플리케이션에서 오디오 및 비디오 콘텐츠를 처리하고 통합하는 강력한 도구들입니다. 이 글은 AVFoundation과 UIKit을 사용하여 오디오 및 비디오 통합을 구현하는 방법에 대해 자세히 설명합니다.","date":"2024-07-13T06:01:30.336Z","tags":[{"name":"AVFoundation","path":"/tags/avfoundation","id":"avfoundation"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"오디오 비디오","path":"/tags/오디오-비디오","id":"오디오-비디오"}],"readMin":"4.8","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":32,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI로 첫 번째 앱 만들기: 단계별 튜토리얼33",{"children":["$","$La",null,{"postMeta":{"id":"c5066d42-aabb-46af-b000-0ec728377f91","path":"/swift/SwiftUI로-첫-번째-앱-만들기-단계별-튜토리얼-c5066d42","title":"SwiftUI로 첫 번째 앱 만들기: 단계별 튜토리얼","description":"SwiftUI를 사용하여 첫 번째 iOS 앱을 만드는 방법에 대한 단계별 튜토리얼입니다. 이 튜토리얼에서는 SwiftUI의 기본 개념부터 시작하여 간단한 애플리케이션을 개발하기까지의 과정을 다룹니다.","date":"2024-07-12T06:01:12.577Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"튜토리얼","path":"/tags/튜토리얼","id":"튜토리얼"},{"name":"모바일 앱","path":"/tags/모바일-앱","id":"모바일-앱"}],"readMin":"5.6","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":33,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI에서 Picker 사용하기: 사용자 선택 기능 추가34",{"children":["$","$La",null,{"postMeta":{"id":"8c406f62-c890-47b5-ae2a-784ab022c37b","path":"/swift/SwiftUI에서-Picker-사용하기-사용자-선택-기능-추가-8c406f62","title":"SwiftUI에서 Picker 사용하기: 사용자 선택 기능 추가","description":"SwiftUI에서 Picker를 사용하여 사용자 선택 기능을 추가하는 방법에 대해 설명합니다. Picker의 기본 사용법부터 다양한 형식의 구성 요소, 활용 방법, 그리고 예제 코드를 통해 실습을 진행합니다.","date":"2024-07-11T06:00:41.663Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"Picker","path":"/tags/picker","id":"picker"},{"name":"사용자 선택","path":"/tags/사용자-선택","id":"사용자-선택"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"6.9","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":34,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","UIKit의 제스처 인식기 사용법: 다양한 제스처 처리35",{"children":["$","$La",null,{"postMeta":{"id":"e76745f3-cdb5-4725-a692-8d84dc2f5bb4","path":"/swift/UIKit의-제스처-인식기-사용법-다양한-제스처-처리-e76745f3","title":"UIKit의 제스처 인식기 사용법: 다양한 제스처 처리","description":"이 글은 Swift에서 UIKit의 제스처 인식기를 사용하여 다양한 제스처를 처리하는 방법에 대해 다룹니다. 여러 제스처의 등록과 사용 예제를 포함하여 개발자가 다채로운 사용자 경험을 구현하는데 필요한 필수 정보를 제공합니다.","date":"2024-07-10T06:00:48.512Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"제스처 인식기","path":"/tags/제스처-인식기","id":"제스처-인식기"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.7","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":35,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI 커스텀 제스처 인식기 구현36",{"children":["$","$La",null,{"postMeta":{"id":"9225faac-2aa5-4ed9-99b6-b1b381cafb5c","path":"/swift/SwiftUI-커스텀-제스처-인식기-구현-9225faac","title":"SwiftUI 커스텀 제스처 인식기 구현","description":"SwiftUI에서 커스텀 제스처 인식기를 구현하는 방법에 대해 다루는 글입니다. SwiftUI의 기본 제스처 외에 직접 제스처를 커스터마이징하여 앱에 통합하는 법을 배웁니다. 기본 단계부터 고급 사용법까지 포괄합니다.","date":"2024-07-09T06:00:30.090Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"커스텀 제스처","path":"/tags/커스텀-제스처","id":"커스텀-제스처"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"Swift","path":"/tags/swift","id":"swift"}],"readMin":"5.3","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":36,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법.37",{"children":["$","$La",null,{"postMeta":{"id":"6ef6a6eb-2116-448a-bdc3-e41cec8cfa87","path":"/swift/Swift-리플렉션을-사용한-프로그램의-동적-조작-실행-시간에-객체를-검사하고-수정하는-방법-6ef6a6eb","title":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법.","description":"이 글에서는 Swift의 리플렉션(reflection) 기능을 사용하여 실행 시간에 객체를 검사하고 수정하는 방법에 대해 다룹니다. 리플렉션은 코드의 동작을 동적으로 파악하고 변경할 수 있게 해주는 강력한 도구입니다.","date":"2024-07-08T06:01:51.839Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"리플렉션","path":"/tags/리플렉션","id":"리플렉션"},{"name":"동적 프로그래밍","path":"/tags/동적-프로그래밍","id":"동적-프로그래밍"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"5.6","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":37,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI를 사용한 첫 UI 개발하기: 간단한 사용자 인터페이스 구성38",{"children":["$","$La",null,{"postMeta":{"id":"044a89d3-f372-43c2-8807-2be690b25f68","path":"/swift/SwiftUI를-사용한-첫-UI-개발하기-간단한-사용자-인터페이스-구성-044a89d3","title":"SwiftUI를 사용한 첫 UI 개발하기: 간단한 사용자 인터페이스 구성","description":"SwiftUI를 사용해 간단한 사용자 인터페이스를 구성하는 방법을 소개합니다. 이 글에서는 SwiftUI의 기본 개념과 함께 버튼, 텍스트, 이미지 등의 컴포넌트를 사용하는 방법을 다룹니다.","date":"2024-07-07T06:02:02.561Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"UI 구축","path":"/tags/ui-구축","id":"ui-구축"},{"name":"Apple","path":"/tags/apple","id":"apple"}],"readMin":"3.3","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":38,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift 스위즐링 소개: 스위즐링이 무엇인지와 왜 사용되는지에 대한 기본 개념 설명.39",{"children":["$","$La",null,{"postMeta":{"id":"f383f518-bb5a-4794-a84e-b703bac073b0","path":"/swift/Swift-스위즐링-소개-스위즐링이-무엇인지와-왜-사용되는지에-대한-기본-개념-설명-f383f518","title":"Swift 스위즐링 소개: 스위즐링이 무엇인지와 왜 사용되는지에 대한 기본 개념 설명.","description":"이 글은 Swift에서 스위즐링이 무엇인지, 왜 사용되는지와 관련된 기본 개념을 소개합니다. 또한 이를 통해 애플리케이션 개발에서 스위즐링이 어떻게 활용되는지에 대해 설명합니다.","date":"2024-06-30T06:00:52.491Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"Swizzling","path":"/tags/swizzling","id":"swizzling"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"메서드 교환","path":"/tags/메서드-교환","id":"메서드-교환"}],"readMin":"4.8","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":39,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기40",{"children":["$","$La",null,{"postMeta":{"id":"755f2015-546d-4c3c-bc73-bc4ef3ac86dd","path":"/swift/이론에서-실제로-updateConstraints와-layoutSubviews를-이용한-효율적인-레이아웃-구현하기-755f2015","title":"이론에서 실제로: updateConstraints와 layoutSubviews를 이용한 효율적인 레이아웃 구현하기","description":"이 글에서는 Swift 언어로 동적 레이아웃을 구현할 때 흔히 사용되는 두 가지 메소드인 `updateConstraints`와 `layoutSubviews`를 소개하고, 이 메소드들을 효율적으로 사용하는 방법에 대해 자세히 논합니다. 이를 통해 개발자는 성능이 최적화된 애플리케이션을 만들 수 있습니다.","date":"2024-06-29T06:01:57.873Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"레이아웃","path":"/tags/레이아웃","id":"레이아웃"},{"name":"최적화","path":"/tags/최적화","id":"최적화"}],"readMin":"5.2","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":40,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","[Swift] ReactorKit을 활용한 효율적인 데이터 바인딩 기술41",{"children":["$","$La",null,{"postMeta":{"id":"08c2ad0e-2d0c-49f1-a213-92fba9622238","path":"/swift/Swift-ReactorKit을-활용한-효율적인-데이터-바인딩-기술-08c2ad0e","title":"[Swift] ReactorKit을 활용한 효율적인 데이터 바인딩 기술","description":"이 글에서는 'Swift' 언어에서 ReactorKit을 활용하여 효율적인 데이터 바인딩 기술에 대해 다룹니다. ReactorKit의 기본 개념부터 데이터 바인딩의 구체적인 방법과 응용까지 깊이 있게 설명합니다.","date":"2024-06-29T06:00:40.534Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"ReactorKit","path":"/tags/reactorkit","id":"reactorkit"},{"name":"데이터 바인딩","path":"/tags/데이터-바인딩","id":"데이터-바인딩"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.3","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":41,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption.42",{"children":["$","$La",null,{"postMeta":{"id":"d1df6ef9-5efa-4056-af78-ce1f39eeaa90","path":"/swift/기존-UIKit-앱에-SwiftUI-통합하기-기존-코드베이스에-SwiftUI-gradual-adoption-d1df6ef9","title":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption.","description":"SwiftUI는 Apple이 제시한 새로운 사용자 인터페이스 프레임워크로, 기존 UIKit 앱에 점진적으로 통합할 수 있습니다. 이 글은 SwiftUI와 UIKit을 함께 사용하여 기존 코드베이스에 SwiftUI을 천천히 도입하는 방법을 설명합니다.","date":"2024-06-28T06:02:43.175Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"코드 통합","path":"/tags/코드-통합","id":"코드-통합"}],"readMin":"6.0","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":42,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점43",{"children":["$","$La",null,{"postMeta":{"id":"c8a438d1-f8ee-4924-9351-97aef56afc6b","path":"/swift/SwiftUI와-UIKit-비교-분석-각-프레임워크의-장단점-c8a438d1","title":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점","description":"SwiftUI와 UIKit은 iOS 개발에서 자주 사용되는 두 가지 주요 프레임워크입니다. 이 글에서는 이 두 프레임워크의 기본 개념과 함께 각각의 장단점을 비교 분석하여 어떤 상황에서 어떤 프레임워크를 선택하는 것이 적합한지 알아보겠습니다.","date":"2024-06-28T06:02:02.036Z","tags":[{"name":"SwiftUI","path":"/tags/swiftui","id":"swiftui"},{"name":"UIKit","path":"/tags/uikit","id":"uikit"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"프레임워크 비교","path":"/tags/프레임워크-비교","id":"프레임워크-비교"}],"readMin":"6.1","category":"swift","banner":"/images/swiftBanner3.jpg"},"index":43,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","복잡한 커스텀 레이아웃 설계를 위한 UICollectionViewCompositionalLayout의 고급 기능 탐구44",{"children":["$","$La",null,{"postMeta":{"id":"6c97e252-8923-4e25-a263-6ebf45081ab2","path":"/swift/복잡한-커스텀-레이아웃-설계를-위한-UICollectionViewCompositionalLayout의-고급-기능-탐구-6c97e252","title":"복잡한 커스텀 레이아웃 설계를 위한 UICollectionViewCompositionalLayout의 고급 기능 탐구","description":"이 글에서는 복잡한 커스텀 레이아웃 설계를 위해 Swift의 UICollectionViewCompositionalLayout을 사용하는 고급 기능들을 탐구합니다. Compositional Layout의 다양한 옵션과 설정을 통해 어떻게 효율적이고 아름다운 레이아웃을 구현할 수 있는지에 대해 배울 수 있습니다.","date":"2024-06-25T06:01:54.821Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UICollectionView","path":"/tags/uicollectionview","id":"uicollectionview"},{"name":"Compositional Layout","path":"/tags/compositional-layout","id":"compositional-layout"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.5","category":"swift","banner":"/images/swiftBanner5.jpg"},"index":44,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","다양한 기기에서의 contentInsetAdjustmentBehavior 적용 사례: iPhone과 iPad에서 contentInsetAdjustmentBehavior를 다르게 적용하는 사례 연구.45",{"children":["$","$La",null,{"postMeta":{"id":"2db22f12-9473-497c-873d-642022ca132f","path":"/swift/다양한-기기에서의-contentInsetAdjustmentBehavior-적용-사례-iPhone과-iPad에서-contentInsetAdjustmentBehavior를-다르게-적용하는-사례-연구-2db22f12","title":"다양한 기기에서의 contentInsetAdjustmentBehavior 적용 사례: iPhone과 iPad에서 contentInsetAdjustmentBehavior를 다르게 적용하는 사례 연구.","description":"이 글에서는 iPhone과 iPad에서 contentInsetAdjustmentBehavior를 다르게 적용하는 다양한 사례를 살펴봅니다. Swift 언어를 사용하여 여러 기기에 적합한 사용자 경험을 구현하는 방법을 제시합니다.","date":"2024-06-24T06:01:47.073Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"},{"name":"콘텐츠 조정","path":"/tags/콘텐츠-조정","id":"콘텐츠-조정"},{"name":"UX","path":"/tags/ux","id":"ux"}],"readMin":"4.5","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":45,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift 함수 기초부터 심화까지: 정의, 호출, 매개변수 및 반환 값 다루기46",{"children":["$","$La",null,{"postMeta":{"id":"f237685a-d0c0-479c-8cbf-3f596cfed523","path":"/swift/Swift-함수-기초부터-심화까지-정의-호출-매개변수-및-반환-값-다루기-f237685a","title":"Swift 함수 기초부터 심화까지: 정의, 호출, 매개변수 및 반환 값 다루기","description":"이 글에서는 Swift 함수에 대해 기초부터 심화까지 다룹니다. 함수의 정의, 호출 방법, 다양한 매개변수 다루기 그리고 반환 값의 처리 방법 등을 상세하게 설명합니다.","date":"2024-06-22T06:04:19.114Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"프로그래밍","path":"/tags/프로그래밍","id":"프로그래밍"},{"name":"함수","path":"/tags/함수","id":"함수"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"6.1","category":"swift","banner":"/images/swiftBanner1.jpg"},"index":46,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift 클로저 입문: 문법 이해 및 실용적 예제47",{"children":["$","$La",null,{"postMeta":{"id":"7e9bf495-818f-4c2b-bea7-ca14b31e7390","path":"/swift/Swift-클로저-입문-문법-이해-및-실용적-예제-7e9bf495","title":"Swift 클로저 입문: 문법 이해 및 실용적 예제","description":"Swift 클로저는 코드 내에서 일급 함수로서 활용되며, 이를 활용하면 더욱 효율적이고 간결한 코드를 작성할 수 있습니다. 본 글에서는 Swift 클로저의 기본 문법과 실용적 예제를 통해 클로저의 강력한 기능을 이해해보겠습니다.","date":"2024-06-18T06:00:44.950Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"클로저","path":"/tags/클로저","id":"클로저"},{"name":"프로그래밍","path":"/tags/프로그래밍","id":"프로그래밍"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"1.1","category":"swift","banner":"/images/swiftBanner4.jpg"},"index":47,"articleType":"최신글","screenType":"TAGS","language":"app"}]}],["$","li","Swift에서 UIButton Image Size 동적으로 변경하기48",{"children":["$","$La",null,{"postMeta":{"id":"8a955918-44cd-4439-9a07-3c02f312d34b","path":"/swift/Swift에서-UIButton-Image-Size-동적으로-변경하기-8a955918","title":"Swift에서 UIButton Image Size 동적으로 변경하기","description":"Swift에서 UIButton의 이미지 크기를 동적으로 변경하는 방법에 대해 설명합니다. 이를 통해 사용자 인터페이스를 더욱 유연하고 사용자 친화적으로 만들 수 있습니다.","date":"2024-06-14T12:58:02.312Z","tags":[{"name":"Swift","path":"/tags/swift","id":"swift"},{"name":"UIButton","path":"/tags/uibutton","id":"uibutton"},{"name":"동적 이미지 크기","path":"/tags/동적-이미지-크기","id":"동적-이미지-크기"},{"name":"iOS 개발","path":"/tags/ios-개발","id":"ios-개발"}],"readMin":"4.7","category":"swift","banner":"/images/swiftBanner2.jpg"},"index":48,"articleType":"최신글","screenType":"TAGS","language":"app"}]}]]}]]}]}]}]]}],null],"segment":"__PAGE__?{\"slug\":\"ios-개발\"}"},"styles":[]}],"segment":["slug","ios-%EA%B0%9C%EB%B0%9C","d"]},"styles":[]}],"segment":"tags"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 개발 관련글 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"안녕하세요. 저는 마고자비로 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","3",{"name":"keywords","content":"마고자비 블로그 블로그,Swift,Javascript,최적화,앱개발,1인 개발,개발자,개발,Developer"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com//tags/ios-%EA%B0%9C%EB%B0%9C"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 개발 관련글 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 개발 관련글 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"안녕하세요. 저는 마고자비로 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com//tags/ios-%EA%B0%9C%EB%B0%9C"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/magomercy.png"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 개발 관련글 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"안녕하세요. 저는 마고자비로 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/magomercy.png"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
8:null
