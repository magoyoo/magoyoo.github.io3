1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EB%A1%9C-Nested-Protocol-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-5d4dd055","d"],{"children":["__PAGE__?{\"slug\":\"Swift로-Nested-Protocol-쉽게-구현하기-5d4dd055\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EB%A1%9C-Nested-Protocol-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-5d4dd055","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift로-Nested-Protocol-쉽게-구현하기-5d4dd055\"}"},"styles":[]}],"segment":["slug","Swift%EB%A1%9C-Nested-Protocol-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-5d4dd055","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift로 Nested Protocol 쉽게 구현하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift 언어를 사용하여 중첩 프로토콜(Nested Protocol)을 쉽게 구현하는 방법을 설명합니다. 중첩 프로토콜의 기본 개념, 활용 사례 그리고 실전 구현 방안을 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Protocol,Nested Protocol,iOS Development"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EB%A1%9C-Nested-Protocol-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-5d4dd055"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift로 Nested Protocol 쉽게 구현하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift로 Nested Protocol 쉽게 구현하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift 언어를 사용하여 중첩 프로토콜(Nested Protocol)을 쉽게 구현하는 방법을 설명합니다. 중첩 프로토콜의 기본 개념, 활용 사례 그리고 실전 구현 방안을 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EB%A1%9C-Nested-Protocol-%EC%89%BD%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-5d4dd055"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift로 Nested Protocol 쉽게 구현하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift 언어를 사용하여 중첩 프로토콜(Nested Protocol)을 쉽게 구현하는 방법을 설명합니다. 중첩 프로토콜의 기본 개념, 활용 사례 그리고 실전 구현 방안을 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift로 Nested Protocol 쉽게 구현하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift로 Nested Protocol 쉽게 구현하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"1eb74082","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift로 Nested Protocol 쉽게 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift는 현대적인 프로그래밍 언어로, 다양한 기능을 제공하여 상속과 프로토콜 지향 프로그래밍을 쉽게 구현할 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Swift","position":{"start":{"line":4,"column":78,"offset":112},"end":{"line":4,"column":85,"offset":119}}}],"position":{"start":{"line":4,"column":78,"offset":112},"end":{"line":4,"column":85,"offset":119}}},"children":"Swift"}}],"에서 중첩 프로토콜(Nested Protocol)을 구현하는 방법과 그 활용 사례를 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"ca338e09","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"중첩 프로토콜(Nested Protocol)이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"중첩 프로토콜은 단어 그대로 프로토콜 안에 또 다른 프로토콜이 정의된 형태를 말합니다. 중첩 프로토콜은 복잡한 타입 정의에서 유용하게 사용될 수 있습니다. 예를 들어, 어떤 프로토콜이 특정 기능을 수행한다고 가정할 때, 이 기능을 더 세분화하여 고유한 역할을 지정할 수 있습니다. 이러한 구체적인 기능과 역할을 구체화하기 위해 중첩 프로토콜을 사용할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"중첩 프로토콜의 가장 큰 장점은 네임스페이스 관리가 용이하다는 점입니다. 또한, 여러 프로토콜을 하나의 형태로 묶어 관리함으로써 코드의 가독성을 높이고 유지보수를 용이하게 합니다."}],"\n",["$","h2",null,{"id":"7428b07a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"중첩 프로토콜은 일반 프로토콜과 사용하는 방법이 크게 다르지 않습니다. 단지 다른 프로토콜 내부에 선언된다는 차이점만 있을 뿐입니다. 다음은 중첩 프로토콜의 기본적인 예제입니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol OuterProtocol {\n    var outerProperty: String { get }\n\n    protocol InnerProtocol {\n        var innerProperty: Int { get }\n    }\n}\n"}],"position":{"start":{"line":16,"column":1,"offset":628},"end":{"line":24,"column":4,"offset":780}}},"children":"protocol OuterProtocol {\n    var outerProperty: String { get }\n\n    protocol InnerProtocol {\n        var innerProperty: Int { get }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":26,"column":8,"offset":789},"end":{"line":26,"column":23,"offset":804}}}],"position":{"start":{"line":26,"column":8,"offset":789},"end":{"line":26,"column":23,"offset":804}}},"children":"OuterProtocol"}}],"이라는 프로토콜 안에 또 다른 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerProtocol","position":{"start":{"line":26,"column":40,"offset":821},"end":{"line":26,"column":55,"offset":836}}}],"position":{"start":{"line":26,"column":40,"offset":821},"end":{"line":26,"column":55,"offset":836}}},"children":"InnerProtocol"}}],"이라는 프로토콜이 중첩되어 있는 구조입니다. 이러한 형태를 사용하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":26,"column":93,"offset":874},"end":{"line":26,"column":108,"offset":889}}}],"position":{"start":{"line":26,"column":93,"offset":874},"end":{"line":26,"column":108,"offset":889}}},"children":"OuterProtocol"}}],"을 채택하는 타입은 내부적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerProtocol","position":{"start":{"line":26,"column":125,"offset":906},"end":{"line":26,"column":140,"offset":921}}}],"position":{"start":{"line":26,"column":125,"offset":906},"end":{"line":26,"column":140,"offset":921}}},"children":"InnerProtocol"}}],"을 정의하거나 사용할 수 있습니다."]}],"\n",["$","h2",null,{"id":"ab053b1a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"활용 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"중첩 프로토콜의 실제 활용 예제를 살펴보겠습니다. 예를 들어, 온라인 쇼핑몰 앱을 개발한다고 가정해보겠습니다. 해당 앱에서 다양한 아이템을 판매하지만 모든 아이템은 공통적인 속성과 메서드를 가집니다. 이를 위해 프로토콜을 정의하되 각 아이템 타입 별로 더 구체화된 프로토콜을 정의할 수 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Item {\n    var id: String { get }\n    var name: String { get }\n    var price: Double { get }\n\n    protocol ElectronicItem {\n        var warrantyPeriod: Int { get }\n    }\n\n    protocol ClothingItem {\n        var size: String { get }\n        var material: String { get }\n    }\n}\n"}],"position":{"start":{"line":32,"column":1,"offset":1119},"end":{"line":47,"column":4,"offset":1417}}},"children":"protocol Item {\n    var id: String { get }\n    var name: String { get }\n    var price: Double { get }\n\n    protocol ElectronicItem {\n        var warrantyPeriod: Int { get }\n    }\n\n    protocol ClothingItem {\n        var size: String { get }\n        var material: String { get }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":49,"column":7,"offset":1425},"end":{"line":49,"column":13,"offset":1431}}}],"position":{"start":{"line":49,"column":7,"offset":1425},"end":{"line":49,"column":13,"offset":1431}}},"children":"Item"}}],"이라는 프로토콜이 있고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ElectronicItem","position":{"start":{"line":49,"column":27,"offset":1445},"end":{"line":49,"column":43,"offset":1461}}}],"position":{"start":{"line":49,"column":27,"offset":1445},"end":{"line":49,"column":43,"offset":1461}}},"children":"ElectronicItem"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ClothingItem","position":{"start":{"line":49,"column":45,"offset":1463},"end":{"line":49,"column":59,"offset":1477}}}],"position":{"start":{"line":49,"column":45,"offset":1463},"end":{"line":49,"column":59,"offset":1477}}},"children":"ClothingItem"}}],"이라는 중첩 프로토콜이 있습니다. 이를 통해 각각의 아이템이 공통의 속성과 메서드를 가지면서도 아이템 고유의 속성을 쉽게 확장할 수 있습니다."]}],"\n",["$","h2",null,{"id":"d75f0123","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실전 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이번에는 위에서 정의한 중첩 프로토콜을 실제로 구현하려면 어떻게 해야 하는지 알아보겠습니다. 일단 각각의 프로토콜을 채택하는 타입들을 정의해보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Phone: Item, Item.ElectronicItem {\n    var id: String\n    var name: String\n    var price: Double\n    var warrantyPeriod: Int\n}\n\nstruct TShirt: Item, Item.ClothingItem {\n    var id: String\n    var name: String\n    var price: Double\n    var size: String\n    var material: String\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1654},"end":{"line":70,"column":4,"offset":1952}}},"children":"struct Phone: Item, Item.ElectronicItem {\n    var id: String\n    var name: String\n    var price: Double\n    var warrantyPeriod: Int\n}\n\nstruct TShirt: Item, Item.ClothingItem {\n    var id: String\n    var name: String\n    var price: Double\n    var size: String\n    var material: String\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Phone","position":{"start":{"line":72,"column":9,"offset":1962},"end":{"line":72,"column":16,"offset":1969}}}],"position":{"start":{"line":72,"column":9,"offset":1962},"end":{"line":72,"column":16,"offset":1969}}},"children":"Phone"}}]," 타입은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":72,"column":21,"offset":1974},"end":{"line":72,"column":27,"offset":1980}}}],"position":{"start":{"line":72,"column":21,"offset":1974},"end":{"line":72,"column":27,"offset":1980}}},"children":"Item"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item.ElectronicItem","position":{"start":{"line":72,"column":29,"offset":1982},"end":{"line":72,"column":50,"offset":2003}}}],"position":{"start":{"line":72,"column":29,"offset":1982},"end":{"line":72,"column":50,"offset":2003}}},"children":"Item.ElectronicItem"}}]," 프로토콜을 채택하고 있으며 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TShirt","position":{"start":{"line":72,"column":66,"offset":2019},"end":{"line":72,"column":74,"offset":2027}}}],"position":{"start":{"line":72,"column":66,"offset":2019},"end":{"line":72,"column":74,"offset":2027}}},"children":"TShirt"}}]," 타입은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":72,"column":79,"offset":2032},"end":{"line":72,"column":85,"offset":2038}}}],"position":{"start":{"line":72,"column":79,"offset":2032},"end":{"line":72,"column":85,"offset":2038}}},"children":"Item"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item.ClothingItem","position":{"start":{"line":72,"column":87,"offset":2040},"end":{"line":72,"column":106,"offset":2059}}}],"position":{"start":{"line":72,"column":87,"offset":2040},"end":{"line":72,"column":106,"offset":2059}}},"children":"Item.ClothingItem"}}]," 프로토콜을 채택하고 있습니다. 이렇게 하면, 아이템 별로 고유한 속성 인증과 검증을 프로토콜을 통해 쉽게 처리할 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이뿐만 아니라 네임스페이스 충돌을 방지하고, 코드의 가독성을 높일 수 있습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이번 글에서는 Swift에서 중첩 프로토콜을 구현하는 방법과 그 활용 예제를 살펴보았습니다. 중첩 프로토콜은 복잡한 타입 정의를 더 구조화하고, 네임스페이스 관리에 큰 이점을 제공합니다. 주어진 예제와 함께 특히 큰 프로젝트나 다양한 요소를 체계적으로 관리해야 하는 경우에 매우 유용하게 사용할 수 있습니다. Swift로 더 효율적이고 깔끔한 코드 작성을 위해 중첩 프로토콜을 활용해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift로 Nested Protocol 쉽게 구현하기","toc":[{"tagName":"h1","title":"Swift로 Nested Protocol 쉽게 구현하기","id":"1eb74082"},{"tagName":"h2","title":"중첩 프로토콜(Nested Protocol)이란?","id":"ca338e09"},{"tagName":"h2","title":"기본 사용법","id":"7428b07a"},{"tagName":"h2","title":"활용 예제","id":"ab053b1a"},{"tagName":"h2","title":"실전 구현","id":"d75f0123"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
