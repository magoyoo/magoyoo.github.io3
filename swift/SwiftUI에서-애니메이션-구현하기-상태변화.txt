1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI에서-애니메이션-구현하기-상태변화\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI에서-애니메이션-구현하기-상태변화\"}"},"styles":[]}],"segment":["slug","SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 SwiftUI에서 상태 변화 애니메이션을 적용하는 방법과 이를 통해 동적인 UI를 구현하는 방법에 대해 설명합니다. 상태 변화에 따른 애니메이션의 기본 개념부터 색상, 위치, 투명도 변화 애니메이션, 그리고 복합 애니메이션 예제까지 다양한 사례를 통해 애니메이션을 효과적으로 사용하는 방법을 다룹니다. SwiftUI의 애니메이션 기능을 활용하여 자연스럽고 매력적인 사용자 인터페이스를 구현하는 방법을 배워보세요."}],["$","meta","3",{"name":"keywords","content":"swift,swiftUI,animation"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 SwiftUI에서 상태 변화 애니메이션을 적용하는 방법과 이를 통해 동적인 UI를 구현하는 방법에 대해 설명합니다. 상태 변화에 따른 애니메이션의 기본 개념부터 색상, 위치, 투명도 변화 애니메이션, 그리고 복합 애니메이션 예제까지 다양한 사례를 통해 애니메이션을 효과적으로 사용하는 방법을 다룹니다. SwiftUI의 애니메이션 기능을 활용하여 자연스럽고 매력적인 사용자 인터페이스를 구현하는 방법을 배워보세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%83%81%ED%83%9C%EB%B3%80%ED%99%94"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 SwiftUI에서 상태 변화 애니메이션을 적용하는 방법과 이를 통해 동적인 UI를 구현하는 방법에 대해 설명합니다. 상태 변화에 따른 애니메이션의 기본 개념부터 색상, 위치, 투명도 변화 애니메이션, 그리고 복합 애니메이션 예제까지 다양한 사례를 통해 애니메이션을 효과적으로 사용하는 방법을 다룹니다. SwiftUI의 애니메이션 기능을 활용하여 자연스럽고 매력적인 사용자 인터페이스를 구현하는 방법을 배워보세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-27"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"9ed320ec","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태 변화 애니메이션: 상태 변화(state change)에 따라 애니메이션을 적용하는 방법과 이를 통해 동적인 UI를 구현하는 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 선언형 문법을 사용하여 간결하고 직관적으로 사용자 인터페이스를 구축할 수 있는 애플의 최신 UI 프레임워크입니다. SwiftUI의 가장 큰 장점 중 하나는 상태 변화에 따른 애니메이션을 쉽게 적용할 수 있다는 점입니다. 상태 변화 애니메이션을 통해 동적인 UI를 구현하면, 사용자 경험이 크게 향상됩니다. 이번 글에서는 상태 변화에 따라 애니메이션을 적용하는 방법과 이를 통해 동적인 UI를 구현하는 방법에 대해 자세히 알아보겠습니다."}],"\n",["$","h2",null,{"id":"24dec6a1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태 변화와 애니메이션의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI에서는 상태 변화(state change)가 UI에 자동으로 반영됩니다. 상태 변화를 애니메이션으로 시각화하면, 사용자는 인터페이스의 변화를 더욱 자연스럽게 인식할 수 있습니다. 상태 변화에 애니메이션을 적용하기 위해서는 SwiftUI의 상태 변수(State variable)와 애니메이션 modifier를 사용합니다."}],"\n",["$","h3",null,{"id":"beea2734","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 버튼 클릭 시 크기 변화 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 버튼을 클릭할 때 사각형의 크기가 변하는 간단한 예제입니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":613},"end":{"line":43,"column":4,"offset":1305}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 @State로 선언된 isExpanded 변수가 상태 변수입니다. 버튼을 클릭할 때마다 isExpanded의 값이 변경되며, 이 상태 변화에 따라 사각형의 크기도 변경됩니다. .animation(.easeInOut(duration: 0.5)) modifier를 사용하여 상태 변화가 애니메이션으로 시각화됩니다."}],"\n",["$","h2",null,{"id":"8871f014","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태 변화 애니메이션의 다양한 적용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"상태 변화 애니메이션은 다양한 UI 요소에 적용할 수 있습니다. 색상, 위치, 투명도 등 여러 속성의 변화에 애니메이션을 추가하여 인터페이스를 더욱 동적으로 만들 수 있습니다."}],"\n",["$","h3",null,{"id":"029bad30","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"색상 변화 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"상태 변화에 따라 색상이 변경되는 애니메이션을 적용해 보겠습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isHighlighted = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(isHighlighted ? Color.red : Color.blue)\n                .frame(width: 200, height: 200)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isHighlighted.toggle()\n            }) {\n                Text(\"Toggle Color\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1668},"end":{"line":84,"column":4,"offset":2357}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isHighlighted = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(isHighlighted ? Color.red : Color.blue)\n                .frame(width: 200, height: 200)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isHighlighted.toggle()\n            }) {\n                Text(\"Toggle Color\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 @State 변수 isHighlighted를 사용하여 색상 변화를 제어합니다. 버튼 클릭 시 isHighlighted의 값이 변경되며, 이에 따라 사각형의 색상이 변경됩니다. .animation(.easeInOut(duration: 0.5))을 사용하여 색상 변화에 애니메이션을 적용했습니다."}],"\n",["$","h3",null,{"id":"380f1a59","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"위치 변화 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 상태 변화에 따라 뷰의 위치가 변경되는 애니메이션 예제입니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var moveRight = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: 100, height: 100)\n                .offset(x: moveRight ? 150 : -150)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                moveRight.toggle()\n            }) {\n                Text(\"Move Rectangle\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":92,"column":1,"offset":2589},"end":{"line":122,"column":4,"offset":3295}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var moveRight = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: 100, height: 100)\n                .offset(x: moveRight ? 150 : -150)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                moveRight.toggle()\n            }) {\n                Text(\"Move Rectangle\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서는 @State 변수 moveRight를 사용하여 사각형의 위치 변화를 제어합니다. offset(x:) modifier를 사용하여 x축 방향으로 사각형을 이동시키며, .animation(.easeInOut(duration: 0.5))을 사용하여 위치 변화에 애니메이션을 적용했습니다."}],"\n",["$","h3",null,{"id":"7804587c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"투명도 변화 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 상태 변화에 따라 뷰의 투명도가 변경되는 애니메이션 예제입니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isVisible = true\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: 200, height: 200)\n                .opacity(isVisible ? 1.0 : 0.0)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isVisible.toggle()\n            }) {\n                Text(\"Toggle Visibility\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":130,"column":1,"offset":3522},"end":{"line":160,"column":4,"offset":4227}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isVisible = true\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: 200, height: 200)\n                .opacity(isVisible ? 1.0 : 0.0)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isVisible.toggle()\n            }) {\n                Text(\"Toggle Visibility\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 @State 변수 isVisible을 사용하여 사각형의 투명도 변화를 제어합니다. opacity() modifier를 사용하여 투명도를 설정하며, .animation(.easeInOut(duration: 0.5))을 사용하여 투명도 변화에 애니메이션을 적용했습니다."}],"\n",["$","h2",null,{"id":"b15f548b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태 변화 애니메이션의 복합 적용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"상태 변화 애니메이션을 복합적으로 적용하여 더욱 동적인 UI를 구현할 수 있습니다. 예를 들어, 위치, 크기, 색상 등의 변화를 동시에 적용하여 복잡한 애니메이션을 만들 수 있습니다."}],"\n",["$","h3",null,{"id":"12bacc82","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 복합 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 상태 변화에 따라 위치, 크기, 색상이 동시에 변경되는 예제입니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isTransformed = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(isTransformed ? Color.red : Color.blue)\n                .frame(width: isTransformed ? 300 : 100, height: isTransformed ? 300 : 100)\n                .offset(x: isTransformed ? 150 : -150)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isTransformed.toggle()\n            }) {\n                Text(\"Transform Rectangle\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":172,"column":1,"offset":4575},"end":{"line":202,"column":4,"offset":5370}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isTransformed = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(isTransformed ? Color.red : Color.blue)\n                .frame(width: isTransformed ? 300 : 100, height: isTransformed ? 300 : 100)\n                .offset(x: isTransformed ? 150 : -150)\n                .animation(.easeInOut(duration: 0.5))\n\n            Spacer()\n\n            Button(action: {\n                isTransformed.toggle()\n            }) {\n                Text(\"Transform Rectangle\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 @State 변수 isTransformed를 사용하여 사각형의 위치, 크기, 색상 변화를 제어합니다. 상태 변화에 따라 이 세 가지 속성이 동시에 변경되며, .animation(.easeInOut(duration: 0.5))을 사용하여 복합 애니메이션을 적용했습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI에서는 상태 변화에 따른 애니메이션을 간단하게 적용할 수 있습니다. 상태 변화를 애니메이션으로 시각화하면 사용자에게 자연스럽고 매력적인 인터페이스를 제공할 수 있습니다. 기본적인 크기, 색상, 위치 변화 애니메이션부터 복합 애니메이션까지 다양한 예제를 통해 상태 변화 애니메이션의 적용 방법을 살펴보았습니다. SwiftUI의 강력한 애니메이션 기능을 활용하여 동적인 UI를 구현해 보세요. 상태 변화 애니메이션은 사용자 경험을 향상시키는 중요한 요소입니다. SwiftUI의 애니메이션 기능을 잘 이해하고 활용하면, 보다 매력적이고 직관적인 애플리케이션을 만들 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"SwiftUI 상태 변화 애니메이션: 상태 변화에 따른 애니메이션을 적용, 동적인 UI를 구현","toc":[{"tagName":"h2","title":"상태 변화 애니메이션: 상태 변화(state change)에 따라 애니메이션을 적용하는 방법과 이를 통해 동적인 UI를 구현하는 방법","id":"9ed320ec"},{"tagName":"h2","title":"상태 변화와 애니메이션의 기본 개념","id":"24dec6a1"},{"tagName":"h3","title":"예제: 버튼 클릭 시 크기 변화 애니메이션","id":"beea2734"},{"tagName":"h2","title":"상태 변화 애니메이션의 다양한 적용","id":"8871f014"},{"tagName":"h3","title":"색상 변화 애니메이션","id":"029bad30"},{"tagName":"h3","title":"위치 변화 애니메이션","id":"380f1a59"},{"tagName":"h3","title":"투명도 변화 애니메이션","id":"7804587c"},{"tagName":"h2","title":"상태 변화 애니메이션의 복합 적용","id":"b15f548b"},{"tagName":"h3","title":"예제: 복합 애니메이션","id":"12bacc82"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
