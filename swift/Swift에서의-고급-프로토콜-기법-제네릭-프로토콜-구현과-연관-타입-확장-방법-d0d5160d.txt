1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%A0%EA%B8%89-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B8%B0%EB%B2%95-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%97%B0%EA%B4%80-%ED%83%80%EC%9E%85-%ED%99%95%EC%9E%A5-%EB%B0%A9%EB%B2%95-d0d5160d","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서의-고급-프로토콜-기법-제네릭-프로토콜-구현과-연관-타입-확장-방법-d0d5160d\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%A0%EA%B8%89-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B8%B0%EB%B2%95-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%97%B0%EA%B4%80-%ED%83%80%EC%9E%85-%ED%99%95%EC%9E%A5-%EB%B0%A9%EB%B2%95-d0d5160d","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서의-고급-프로토콜-기법-제네릭-프로토콜-구현과-연관-타입-확장-방법-d0d5160d\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%A0%EA%B8%89-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B8%B0%EB%B2%95-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%97%B0%EA%B4%80-%ED%83%80%EC%9E%85-%ED%99%95%EC%9E%A5-%EB%B0%A9%EB%B2%95-d0d5160d","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 고급 프로토콜 기법인 제네릭 프로토콜 구현과 연관 타입 확장 방법을 다룹니다. 이러한 고급 기법을 통해 프로토콜을 더욱 유연하고 강력하게 사용할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,protocol,generic,associated types"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%A0%EA%B8%89-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B8%B0%EB%B2%95-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%97%B0%EA%B4%80-%ED%83%80%EC%9E%85-%ED%99%95%EC%9E%A5-%EB%B0%A9%EB%B2%95-d0d5160d"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 고급 프로토콜 기법인 제네릭 프로토콜 구현과 연관 타입 확장 방법을 다룹니다. 이러한 고급 기법을 통해 프로토콜을 더욱 유연하고 강력하게 사용할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%EA%B3%A0%EA%B8%89-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B8%B0%EB%B2%95-%EC%A0%9C%EB%84%A4%EB%A6%AD-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EA%B5%AC%ED%98%84%EA%B3%BC-%EC%97%B0%EA%B4%80-%ED%83%80%EC%9E%85-%ED%99%95%EC%9E%A5-%EB%B0%A9%EB%B2%95-d0d5160d"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 고급 프로토콜 기법인 제네릭 프로토콜 구현과 연관 타입 확장 방법을 다룹니다. 이러한 고급 기법을 통해 프로토콜을 더욱 유연하고 강력하게 사용할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-05"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fa7b30d2","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift는 강력한 프로토콜 시스템을 제공하여 코드의 유연성과 재사용성을 높입니다. 이번 글에서는 그 중에서도 고급 기법인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"제네릭 프로토콜 구현","position":{"start":{"line":4,"column":70,"offset":119},"end":{"line":4,"column":83,"offset":132}}}],"position":{"start":{"line":4,"column":70,"offset":119},"end":{"line":4,"column":83,"offset":132}}},"children":"제네릭 프로토콜 구현"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"연관 타입 확장 방법","position":{"start":{"line":4,"column":85,"offset":134},"end":{"line":4,"column":98,"offset":147}}}],"position":{"start":{"line":4,"column":85,"offset":134},"end":{"line":4,"column":98,"offset":147}}},"children":"연관 타입 확장 방법"}}],"에 대해 다뤄보겠습니다. 이를 통해 더욱 복잡하고 다양한 요구사항을 충족시킬 수 있습니다."]}],"\n",["$","h2",null,{"id":"fe6346e9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"제네릭 프로토콜 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"제네릭 프로토콜은 프로토콜이 여러 유형의 값에 대해 타입 안정성을 유지하면서 작업할 수 있게 합니다. 예를 들어, 동일한 기능을 제공하는 서로 다른 타입이 있을 때 이들을 동일한 프로토콜로 처리할 수 있습니다."}],"\n",["$","h3",null,{"id":"564df270","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예시: Container 프로토콜"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["간단한 컨테이너를 표현하는 프로토콜을 정의해보겠습니다. 이 컨테이너는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":12,"column":40,"offset":397},"end":{"line":12,"column":46,"offset":403}}}],"position":{"start":{"line":12,"column":40,"offset":397},"end":{"line":12,"column":46,"offset":403}}},"children":"Item"}}]," 타입의 데이터를 담을 수 있어야 합니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Container {\n    associatedtype Item\n    func addItem(_ item: Item)\n    func getItem(at index: Int) -> Item?\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":428},"end":{"line":20,"column":4,"offset":559}}},"children":"protocol Container {\n    associatedtype Item\n    func addItem(_ item: Item)\n    func getItem(at index: Int) -> Item?\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":22,"column":1,"offset":561},"end":{"line":22,"column":7,"offset":567}}}],"position":{"start":{"line":22,"column":1,"offset":561},"end":{"line":22,"column":7,"offset":567}}},"children":"Item"}}],"이라는 연관 타입이 사용되었습니다. 이제 이 프로토콜을 준수하는 클래스 혹은 구조체를 작성해보겠습니다."]}],"\n",["$","h3",null,{"id":"d1a13469","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"ArrayContainer 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":26,"column":4,"offset":652},"end":{"line":26,"column":15,"offset":663}}}],"position":{"start":{"line":26,"column":4,"offset":652},"end":{"line":26,"column":15,"offset":663}}},"children":"Container"}}]," 프로토콜을 따르는 클래스를 하나 만들어보겠습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ArrayContainer<Element>: Container {\n    private var items = [Element]()\n\n    func addItem(_ item: Element) {\n        items.append(item)\n    }\n\n    func getItem(at index: Int) -> Element? {\n        guard index < items.count else { return nil }\n        return items[index]\n    }\n}\n"}],"position":{"start":{"line":28,"column":1,"offset":693},"end":{"line":41,"column":4,"offset":991}}},"children":"class ArrayContainer<Element>: Container {\n    private var items = [Element]()\n\n    func addItem(_ item: Element) {\n        items.append(item)\n    }\n\n    func getItem(at index: Int) -> Element? {\n        guard index < items.count else { return nil }\n        return items[index]\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ArrayContainer","position":{"start":{"line":43,"column":8,"offset":1000},"end":{"line":43,"column":24,"offset":1016}}}],"position":{"start":{"line":43,"column":8,"offset":1000},"end":{"line":43,"column":24,"offset":1016}}},"children":"ArrayContainer"}}],"는 이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":43,"column":29,"offset":1021},"end":{"line":43,"column":40,"offset":1032}}}],"position":{"start":{"line":43,"column":29,"offset":1021},"end":{"line":43,"column":40,"offset":1032}}},"children":"Container"}}]," 프로토콜을 준수하게 됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":43,"column":57,"offset":1049},"end":{"line":43,"column":66,"offset":1058}}}],"position":{"start":{"line":43,"column":57,"offset":1049},"end":{"line":43,"column":66,"offset":1058}}},"children":"Element"}}]," 타입을 사용하여 제네릭 프로그래밍을 구현할 수 있습니다."]}],"\n",["$","h2",null,{"id":"7eab501d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"연관 타입 확장 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 프로토콜에서는 연관 타입을 통해 매우 유연한 타입 정의가 가능합니다. 이러한 연관 타입을 확장해서 다양한 용도로 활용할 수 있습니다."}],"\n",["$","h3",null,{"id":"83d7bd2a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예시: 연관 타입 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, 좀 더 복잡한 프로토콜을 정의해보겠습니다. 이 프로토콜은 두 개의 연관 타입을 가지고 있으며, 이들 간의 관계를 정리할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol PairContainer {\n    associatedtype Key\n    associatedtype Value\n    func addItem(key: Key, value: Value)\n    func getValue(forKey key: Key) -> Value?\n}\n"}],"position":{"start":{"line":53,"column":1,"offset":1289},"end":{"line":60,"column":4,"offset":1462}}},"children":"protocol PairContainer {\n    associatedtype Key\n    associatedtype Value\n    func addItem(key: Key, value: Value)\n    func getValue(forKey key: Key) -> Value?\n}\n"}}]}],"\n",["$","h3",null,{"id":"b61b279e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"딕셔너리 컨테이너 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PairContainer","position":{"start":{"line":64,"column":4,"offset":1485},"end":{"line":64,"column":19,"offset":1500}}}],"position":{"start":{"line":64,"column":4,"offset":1485},"end":{"line":64,"column":19,"offset":1500}}},"children":"PairContainer"}}]," 프로토콜을 따르는 클래스를 하나 구현해보겠습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class DictionaryContainer<Key: Hashable, Value>: PairContainer {\n    private var items = [Key: Value]()\n\n    func addItem(key: Key, value: Value) {\n        items[key] = value\n    }\n\n    func getValue(forKey key: Key) -> Value? {\n        return items[key]\n    }\n}\n"}],"position":{"start":{"line":66,"column":1,"offset":1530},"end":{"line":78,"column":4,"offset":1805}}},"children":"class DictionaryContainer<Key: Hashable, Value>: PairContainer {\n    private var items = [Key: Value]()\n\n    func addItem(key: Key, value: Value) {\n        items[key] = value\n    }\n\n    func getValue(forKey key: Key) -> Value? {\n        return items[key]\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 클래스를 보면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Key","position":{"start":{"line":80,"column":12,"offset":1818},"end":{"line":80,"column":17,"offset":1823}}}],"position":{"start":{"line":80,"column":12,"offset":1818},"end":{"line":80,"column":17,"offset":1823}}},"children":"Key"}}],"가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":80,"column":19,"offset":1825},"end":{"line":80,"column":29,"offset":1835}}}],"position":{"start":{"line":80,"column":19,"offset":1825},"end":{"line":80,"column":29,"offset":1835}}},"children":"Hashable"}}]," 프로토콜을 준수해야 한다는 제한이 추가되었습니다. 이를 통해 딕셔너리 데이터 구조를 효과적으로 사용할 수 있습니다."]}],"\n",["$","h3",null,{"id":"eda60cf6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로토콜의 확장"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 기존의 프로토콜에 새로운 메소드를 추가하는 확장(Extension)을 만들어보겠습니다. 이를 통해 프로토콜에 기본 구현을 제공할 수 있습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"extension Container {\n    func allItems() -> [Item] {\n        var items = [Item]()\n        var index = 0\n        while let item = getItem(at: index) {\n            items.append(item)\n            index += 1\n        }\n        return items\n    }\n}\n"}],"position":{"start":{"line":86,"column":1,"offset":2000},"end":{"line":98,"column":4,"offset":2256}}},"children":"extension Container {\n    func allItems() -> [Item] {\n        var items = [Item]()\n        var index = 0\n        while let item = getItem(at: index) {\n            items.append(item)\n            index += 1\n        }\n        return items\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 하면, 모든 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Container","position":{"start":{"line":100,"column":12,"offset":2269},"end":{"line":100,"column":23,"offset":2280}}}],"position":{"start":{"line":100,"column":12,"offset":2269},"end":{"line":100,"column":23,"offset":2280}}},"children":"Container"}}],"를 준수하는 타입은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"allItems","position":{"start":{"line":100,"column":34,"offset":2291},"end":{"line":100,"column":44,"offset":2301}}}],"position":{"start":{"line":100,"column":34,"offset":2291},"end":{"line":100,"column":44,"offset":2301}}},"children":"allItems"}}]," 메소드를 사용할 수 있게 됩니다. 이는 기본 구현을 제공하여 코드의 중복을 줄일 수 있습니다."]}],"\n",["$","h2",null,{"id":"b353f1ff","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"연관 타입의 제한"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["연관 타입에 제한을 추가하면 특정 조건을 충족하는 타입만 사용할 수 있게 됩니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Comparable","position":{"start":{"line":104,"column":54,"offset":2423},"end":{"line":104,"column":66,"offset":2435}}}],"position":{"start":{"line":104,"column":54,"offset":2423},"end":{"line":104,"column":66,"offset":2435}}},"children":"Comparable"}}],"을 준수하는 타입만을 연관 타입으로 사용할 수 있게 할 수 있습니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol SortedContainer {\n    associatedtype Item: Comparable\n    func addItem(_ item: Item)\n    func sortedItems() -> [Item]\n}\n"}],"position":{"start":{"line":106,"column":1,"offset":2475},"end":{"line":112,"column":4,"offset":2616}}},"children":"protocol SortedContainer {\n    associatedtype Item: Comparable\n    func addItem(_ item: Item)\n    func sortedItems() -> [Item]\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":114,"column":6,"offset":2623},"end":{"line":114,"column":12,"offset":2629}}}],"position":{"start":{"line":114,"column":6,"offset":2623},"end":{"line":114,"column":12,"offset":2629}}},"children":"Item"}}]," 타입이 반드시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Comparable","position":{"start":{"line":114,"column":21,"offset":2638},"end":{"line":114,"column":33,"offset":2650}}}],"position":{"start":{"line":114,"column":21,"offset":2638},"end":{"line":114,"column":33,"offset":2650}}},"children":"Comparable"}}]," 프로토콜을 준수해야 합니다. 이를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sortedItems","position":{"start":{"line":114,"column":56,"offset":2673},"end":{"line":114,"column":69,"offset":2686}}}],"position":{"start":{"line":114,"column":56,"offset":2673},"end":{"line":114,"column":69,"offset":2686}}},"children":"sortedItems"}}]," 메소드에서는 안전하게 정렬 작업을 수행할 수 있게 됩니다."]}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ArraySortedContainer<Element: Comparable>: SortedContainer {\n    private var items = [Element]()\n\n    func addItem(_ item: Element) {\n        items.append(item)\n    }\n\n    func sortedItems() -> [Element] {\n        return items.sorted()\n    }\n}\n"}],"position":{"start":{"line":116,"column":1,"offset":2721},"end":{"line":128,"column":4,"offset":2983}}},"children":"class ArraySortedContainer<Element: Comparable>: SortedContainer {\n    private var items = [Element]()\n\n    func addItem(_ item: Element) {\n        items.append(item)\n    }\n\n    func sortedItems() -> [Element] {\n        return items.sorted()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 클래스는 이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SortedContainer","position":{"start":{"line":130,"column":11,"offset":2995},"end":{"line":130,"column":28,"offset":3012}}}],"position":{"start":{"line":130,"column":11,"offset":2995},"end":{"line":130,"column":28,"offset":3012}}},"children":"SortedContainer"}}]," 프로토콜을 준수하며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Element","position":{"start":{"line":130,"column":41,"offset":3025},"end":{"line":130,"column":50,"offset":3034}}}],"position":{"start":{"line":130,"column":41,"offset":3025},"end":{"line":130,"column":50,"offset":3034}}},"children":"Element"}}],"는 반드시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Comparable","position":{"start":{"line":130,"column":56,"offset":3040},"end":{"line":130,"column":68,"offset":3052}}}],"position":{"start":{"line":130,"column":56,"offset":3040},"end":{"line":130,"column":68,"offset":3052}}},"children":"Comparable"}}],"을 준수해야 합니다."]}],"\n",["$","h2",null,{"id":"ed8464a3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"마무리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 제네릭 프로토콜과 연관 타입을 활용하면 코드의 재사용성과 유연성을 극대화할 수 있습니다. 제네릭 프로토콜을 사용하여 다양한 타입을 처리할 수 있으며, 연관 타입과 이들의 제한을 통해 타입 안정성을 높일 수 있습니다. 이러한 고급 기법을 적절히 활용하면 보다 안정적이고 유지보수가 쉬운 코드를 작성할 수 있게 됩니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법.","toc":[{"tagName":"h1","title":"Swift에서의 고급 프로토콜 기법: 제네릭 프로토콜 구현과 연관 타입 확장 방법","id":"fa7b30d2"},{"tagName":"h2","title":"제네릭 프로토콜 구현","id":"fe6346e9"},{"tagName":"h3","title":"예시: Container 프로토콜","id":"564df270"},{"tagName":"h3","title":"ArrayContainer 구현","id":"d1a13469"},{"tagName":"h2","title":"연관 타입 확장 방법","id":"7eab501d"},{"tagName":"h3","title":"예시: 연관 타입 사용","id":"83d7bd2a"},{"tagName":"h3","title":"딕셔너리 컨테이너 구현","id":"b61b279e"},{"tagName":"h3","title":"프로토콜의 확장","id":"eda60cf6"},{"tagName":"h2","title":"연관 타입의 제한","id":"b353f1ff"},{"tagName":"h2","title":"마무리","id":"ed8464a3"}],"language":"kr"}]}]]}]]
8:null
