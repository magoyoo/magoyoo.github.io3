1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","comparable%2Bprotocol","d"],{"children":["__PAGE__?{\"slug\":\"comparable+protocol\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","comparable%2Bprotocol","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"comparable+protocol\"}"},"styles":[]}],"segment":["slug","comparable%2Bprotocol","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] Comparable Protocol에 대해서 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Comparable에 대해서 알아봅니다."}],["$","meta","3",{"name":"keywords","content":"swift"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/comparable+protocol"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] Comparable Protocol에 대해서 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] Comparable Protocol에 대해서 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Comparable에 대해서 알아봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/comparable+protocol"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] Comparable Protocol에 대해서 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Comparable에 대해서 알아봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:T1110,
# Comparable Protocol 이란 ?

---

Swift에서 Comparable은 두 개의 값 또는 객체를 비교할 때 사용되는 프로토콜이다. 이 프로토콜은 두 개의 값이 순서가 있을 때, 그리고 이를 비교할 수 있을 때 구현된다. 이를 통해 Swift에서 Comparable을 구현하면 범위 연산자, 정렬 메서드, 검색 알고리즘 등에서 사용될 수 있어 더욱 강력한 프로그래밍을 할 수 있다.

Comparable을 구현하는 방법은 매우 간단하다. Comparable 프로토콜을 채택하면서 비교 가능한 타입인 경우, 이를 비교할 수 있는 "<" 연산자와 "==" 연산자를 구현해주면 된다. "<" 연산자는 두 개의 값의 순서를 비교하며, "==" 연산자는 두 개의 값이 같은지를 비교한다.

예를 들어, Int 타입은 이미 Comparable 프로토콜을 구현하고 있기 때문에, 아래와 같이 사용할 수 있다.

```swift
let a = 1
let b = 2

if a < b {
    print("a is less than b")
} else if a == b {
    print("a is equal to b")
} else {
    print("a is greater than b")
}
```

위 코드에서 Int 타입은 이미 Comparable 프로토콜을 구현하고 있으므로, "<" 연산자와 "==" 연산자를 사용하여 a와 b의 값을 비교할 수 있다. 만약 a가 b보다 작으면 "a is less than b"를 출력하고, a와 b가 같으면 "a is equal to b"를 출력하며, a가 b보다 크면 "a is greater than b"를 출력한다.

그러나, 만약 우리가 직접 구현한 타입이 Comparable 프로토콜을 따르지 않는다면 어떻게 해야 할까? 아래는 Person이라는 구조체를 예시로 살펴보자.

```swift
struct Person {
    var name: String
    var age: Int
}
```

Person 타입은 Comparable 프로토콜을 구현하지 않았기 때문에, "<" 연산자와 "==" 연산자를 직접 구현해주어야 한다. 아래는 Person 타입을 Comparable 프로토콜에 따라 구현한 코드이다.

```swift
extension Person: Comparable {
    static func < (lhs: Person, rhs: Person) -> Bool {
        return lhs.age < rhs.age
    }

    static func == (lhs: Person, rhs: Person) -> Bool {
        return lhs.name == rhs.name && lhs.age == rhs.age
    }
}
```

이렇게 구현된 Person 타입은 Comparable 프로토콜을 준수하므로, 다음과 같이 사용할 수 있다.

```swift
let john = Person(name: "John", age: 25)
let jane = Person(name: "Jane", age: 30)

if john < jane {
    print("John is younger than Jane")
} else if john == jane {
    print("John is the same age as Jane")
} else {
    print("John is older than Jane")
}
```

위 코드에서는 "<" 연산자와 "==" 연산자를 사용하여 john과 jane의 값을 비교한다. 만약 john이 jane보다 어리면 "John is younger than Jane"을 출력하고, john과 jane이 같은 나이이면 "John is the same age as Jane"을 출력하며, john이 jane보다 많이 나이가 들면 "John is older than Jane"을 출력한다.

Comparable은 Swift에서 매우 중요한 프로토콜 중 하나이며, 많은 기본 타입이 이미 이 프로토콜을 구현하고 있다. 따라서 Swift에서는 기본 타입뿐만 아니라 우리가 직접 구현한 타입에 대해서도 쉽게 비교할 수 있게 된다. 이를 통해 범위 연산자, 정렬 메서드, 검색 알고리즘 등에서 간단하고 빠르게 값을 비교할 수 있어, Swift에서 더욱 강력한 프로그래밍을 할 수 있게 되었다.

# Comparable은 Protocol을 준수하는 타입

---

Swift의 많은 기본 타입은 이미 Comparable 프로토콜을 구현하고 있다. 이러한 타입들은 숫자와 문자열 등 데이터를 비교해야 할 때 매우 유용하게 사용할 수 있다. 아래는 Swift에서 기본으로 제공하는 Comparable을 준수하는 타입의 몇 가지 예시이다.

- Int, UInt, Double, Float, CGFloat
- String, Character
- Bool
- Date, DateComponents
- URL

위와 같은 타입들은 Comparable 프로토콜을 구현하므로, 해당 타입의 값들을 간단하게 비교할 수 있다. 예를 들어 Int 타입에서는 "<", "<=", ">=", ">"와 같은 비교 연산자를 사용하여 값을 비교할 수 있다.

# 참고 자료

---

저작권 등 문제가 되는 부분이 있다면 삭제하겠습니다.

- ["Apple developer"](https://developer.apple.com/documentation/swift/comparable)
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] Comparable Protocol에 대해서"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] Comparable Protocol에 대해서"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2023-04-09"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"1a171e75","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Comparable Protocol 이란 ?"}],"\n",["$","hr","hr-0",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 Comparable은 두 개의 값 또는 객체를 비교할 때 사용되는 프로토콜이다. 이 프로토콜은 두 개의 값이 순서가 있을 때, 그리고 이를 비교할 수 있을 때 구현된다. 이를 통해 Swift에서 Comparable을 구현하면 범위 연산자, 정렬 메서드, 검색 알고리즘 등에서 사용될 수 있어 더욱 강력한 프로그래밍을 할 수 있다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Comparable을 구현하는 방법은 매우 간단하다. Comparable 프로토콜을 채택하면서 비교 가능한 타입인 경우, 이를 비교할 수 있는 \"<\" 연산자와 \"==\" 연산자를 구현해주면 된다. \"<\" 연산자는 두 개의 값의 순서를 비교하며, \"==\" 연산자는 두 개의 값이 같은지를 비교한다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, Int 타입은 이미 Comparable 프로토콜을 구현하고 있기 때문에, 아래와 같이 사용할 수 있다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let a = 1\nlet b = 2\n\nif a < b {\n    print(\"a is less than b\")\n} else if a == b {\n    print(\"a is equal to b\")\n} else {\n    print(\"a is greater than b\")\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":460},"end":{"line":23,"column":4,"offset":626}}},"children":"let a = 1\nlet b = 2\n\nif a < b {\n    print(\"a is less than b\")\n} else if a == b {\n    print(\"a is equal to b\")\n} else {\n    print(\"a is greater than b\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 Int 타입은 이미 Comparable 프로토콜을 구현하고 있으므로, \"<\" 연산자와 \"==\" 연산자를 사용하여 a와 b의 값을 비교할 수 있다. 만약 a가 b보다 작으면 \"a is less than b\"를 출력하고, a와 b가 같으면 \"a is equal to b\"를 출력하며, a가 b보다 크면 \"a is greater than b\"를 출력한다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"그러나, 만약 우리가 직접 구현한 타입이 Comparable 프로토콜을 따르지 않는다면 어떻게 해야 할까? 아래는 Person이라는 구조체를 예시로 살펴보자."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person {\n    var name: String\n    var age: Int\n}\n"}],"position":{"start":{"line":29,"column":1,"offset":922},"end":{"line":34,"column":4,"offset":990}}},"children":"struct Person {\n    var name: String\n    var age: Int\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Person 타입은 Comparable 프로토콜을 구현하지 않았기 때문에, \"<\" 연산자와 \"==\" 연산자를 직접 구현해주어야 한다. 아래는 Person 타입을 Comparable 프로토콜에 따라 구현한 코드이다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"extension Person: Comparable {\n    static func < (lhs: Person, rhs: Person) -> Bool {\n        return lhs.age < rhs.age\n    }\n\n    static func == (lhs: Person, rhs: Person) -> Bool {\n        return lhs.name == rhs.name && lhs.age == rhs.age\n    }\n}\n"}],"position":{"start":{"line":38,"column":1,"offset":1113},"end":{"line":48,"column":4,"offset":1373}}},"children":"extension Person: Comparable {\n    static func < (lhs: Person, rhs: Person) -> Bool {\n        return lhs.age < rhs.age\n    }\n\n    static func == (lhs: Person, rhs: Person) -> Bool {\n        return lhs.name == rhs.name && lhs.age == rhs.age\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이렇게 구현된 Person 타입은 Comparable 프로토콜을 준수하므로, 다음과 같이 사용할 수 있다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let john = Person(name: \"John\", age: 25)\nlet jane = Person(name: \"Jane\", age: 30)\n\nif john < jane {\n    print(\"John is younger than Jane\")\n} else if john == jane {\n    print(\"John is the same age as Jane\")\n} else {\n    print(\"John is older than Jane\")\n}\n"}],"position":{"start":{"line":52,"column":1,"offset":1436},"end":{"line":63,"column":4,"offset":1702}}},"children":"let john = Person(name: \"John\", age: 25)\nlet jane = Person(name: \"Jane\", age: 30)\n\nif john < jane {\n    print(\"John is younger than Jane\")\n} else if john == jane {\n    print(\"John is the same age as Jane\")\n} else {\n    print(\"John is older than Jane\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서는 \"<\" 연산자와 \"==\" 연산자를 사용하여 john과 jane의 값을 비교한다. 만약 john이 jane보다 어리면 \"John is younger than Jane\"을 출력하고, john과 jane이 같은 나이이면 \"John is the same age as Jane\"을 출력하며, john이 jane보다 많이 나이가 들면 \"John is older than Jane\"을 출력한다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Comparable은 Swift에서 매우 중요한 프로토콜 중 하나이며, 많은 기본 타입이 이미 이 프로토콜을 구현하고 있다. 따라서 Swift에서는 기본 타입뿐만 아니라 우리가 직접 구현한 타입에 대해서도 쉽게 비교할 수 있게 된다. 이를 통해 범위 연산자, 정렬 메서드, 검색 알고리즘 등에서 간단하고 빠르게 값을 비교할 수 있어, Swift에서 더욱 강력한 프로그래밍을 할 수 있게 되었다."}],"\n",["$","h1",null,{"id":"92588b54","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Comparable은 Protocol을 준수하는 타입"}],"\n",["$","hr","hr-1",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 많은 기본 타입은 이미 Comparable 프로토콜을 구현하고 있다. 이러한 타입들은 숫자와 문자열 등 데이터를 비교해야 할 때 매우 유용하게 사용할 수 있다. 아래는 Swift에서 기본으로 제공하는 Comparable을 준수하는 타입의 몇 가지 예시이다."}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"Int, UInt, Double, Float, CGFloat"}],"\n",["$","li","li-1",{"children":"String, Character"}],"\n",["$","li","li-2",{"children":"Bool"}],"\n",["$","li","li-3",{"children":"Date, DateComponents"}],"\n",["$","li","li-4",{"children":"URL"}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위와 같은 타입들은 Comparable 프로토콜을 구현하므로, 해당 타입의 값들을 간단하게 비교할 수 있다. 예를 들어 Int 타입에서는 \"<\", \"<=\", \">=\", \">\"와 같은 비교 연산자를 사용하여 값을 비교할 수 있다."}],"\n",["$","h1",null,{"id":"7cf40973","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"참고 자료"}],"\n",["$","hr","hr-2",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"저작권 등 문제가 되는 부분이 있다면 삭제하겠습니다."}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":["$","$Le",null,{"props":{"href":"https://developer.apple.com/documentation/swift/comparable","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swift/comparable"},"children":[{"type":"text","value":"\"Apple developer\"","position":{"start":{"line":89,"column":4,"offset":2609},"end":{"line":89,"column":21,"offset":2626}}}],"position":{"start":{"line":89,"column":3,"offset":2608},"end":{"line":89,"column":82,"offset":2687}}},"children":"\"Apple developer\""},"post":{"title":"[Swift] Comparable Protocol에 대해서","description":"Comparable에 대해서 알아봅니다.","date":"2023-04-09T20:06:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift","readMin":"5.3","totalCnt":-1,"monthlyCnt":0,"weeklyCnt":0,"slug":"comparable+protocol","content":"$f","category":"swift"},"language":"kr"}]}],"\n"]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"[Swift] Comparable Protocol에 대해서","toc":[{"tagName":"h1","title":"Comparable Protocol 이란 ?","id":"1a171e75"},{"tagName":"h1","title":"Comparable은 Protocol을 준수하는 타입","id":"92588b54"},{"tagName":"h1","title":"참고 자료","id":"7cf40973"}],"language":"kr"}]}]]}]]
8:null
