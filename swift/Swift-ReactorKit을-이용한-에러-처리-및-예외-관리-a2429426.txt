1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%98%88%EC%99%B8-%EA%B4%80%EB%A6%AC-a2429426","d"],{"children":["__PAGE__?{\"slug\":\"Swift-ReactorKit을-이용한-에러-처리-및-예외-관리-a2429426\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%98%88%EC%99%B8-%EA%B4%80%EB%A6%AC-a2429426","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-ReactorKit을-이용한-에러-처리-및-예외-관리-a2429426\"}"},"styles":[]}],"segment":["slug","Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%98%88%EC%99%B8-%EA%B4%80%EB%A6%AC-a2429426","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift의 ReactorKit 프레임워크를 사용해 에러를 처리하고 예외를 관리하는 방법에 대해 설명합니다. ReactorKit은 Unidirectional Data Flow(단방향 데이터 흐름)를 채택한 훌륭한 도구로, 에러와 예외를 효과적으로 관리할 수 있어 애플리케이션의 안정성을 높여줍니다."}],["$","meta","3",{"name":"keywords","content":"Swift,ReactorKit,Error Handling,Exception Management"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%98%88%EC%99%B8-%EA%B4%80%EB%A6%AC-a2429426"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift의 ReactorKit 프레임워크를 사용해 에러를 처리하고 예외를 관리하는 방법에 대해 설명합니다. ReactorKit은 Unidirectional Data Flow(단방향 데이터 흐름)를 채택한 훌륭한 도구로, 에러와 예외를 효과적으로 관리할 수 있어 애플리케이션의 안정성을 높여줍니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC-%EB%B0%8F-%EC%98%88%EC%99%B8-%EA%B4%80%EB%A6%AC-a2429426"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift의 ReactorKit 프레임워크를 사용해 에러를 처리하고 예외를 관리하는 방법에 대해 설명합니다. ReactorKit은 Unidirectional Data Flow(단방향 데이터 흐름)를 채택한 훌륭한 도구로, 에러와 예외를 효과적으로 관리할 수 있어 애플리케이션의 안정성을 높여줍니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-08"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5a2be999","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 ReactorKit을 이용한 에러 처리 및 예외 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 Swift에서 단방향 데이터 흐름을 구현할 수 있도록 도와주는 프레임워크입니다. 이는 ViewModel과 유사한 역할을 하며, 주로 RxSwift와 함께 사용됩니다. ReactorKit은 에러 처리 및 예외 관리를 효율적으로 하기 위한 다양한 메커니즘을 제공합니다. 이번 글에서는 ReactorKit을 이용해 에러를 처리하고 예외를 관리하는 방법을 알아보겠습니다."}],"\n",["$","h2",null,{"id":"fc7d1624","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. ReactorKit의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit의 핵심 개념은 다음과 같습니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":10,"column":3,"offset":316},"end":{"line":10,"column":12,"offset":325}}}],"position":{"start":{"line":10,"column":3,"offset":316},"end":{"line":10,"column":12,"offset":325}}},"children":"Reactor"}}],": 상태와 입력을 관리하는 중심 역할을 합니다. 사용자의 액션을 받아서 상태를 업데이트합니다."]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Action","position":{"start":{"line":11,"column":3,"offset":380},"end":{"line":11,"column":11,"offset":388}}}],"position":{"start":{"line":11,"column":3,"offset":380},"end":{"line":11,"column":11,"offset":388}}},"children":"Action"}}],": 사용자의 액션을 나타냅니다. 이는 버튼 클릭, 텍스트 입력 등 다양한 사용자 인터랙션을 포함합니다."]}],"\n",["$","li","li-2",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"State","position":{"start":{"line":12,"column":3,"offset":448},"end":{"line":12,"column":10,"offset":455}}}],"position":{"start":{"line":12,"column":3,"offset":448},"end":{"line":12,"column":10,"offset":455}}},"children":"State"}}],": 현재의 앱 상태를 나타냅니다. 이 상태는 불변(immutable)이며, Reactor에 의해 관리됩니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 기본 개념을 이해하면, 에러 처리 및 예외 관리를 효과적으로 구현할 수 있습니다."}],"\n",["$","h2",null,{"id":"cbc92f3a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. 기본적인 에러 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기본적인 에러 처리는 Reactor에서 Action을 처리하는 과정에서 발생합니다. Action에 따른 상태 변경이 항상 성공적인 것은 아니기 때문에, 발생할 수 있는 에러를 미리 예상하고 처리하는 것이 중요합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import ReactorKit\nimport RxSwift\n\nenum MyAction {\n    case fetchData\n}\n\nenum MyError: Error {\n    case networkError\n}\n}\n\nclass MyReactor: Reactor {\n    let initialState = State()\n\n    struct State {\n        var data: String?\n        var error: MyError?\n    }\n\n    enum Action {\n        case fetchData\n    }\n\n    enum Mutation {\n        case setData(String)\n        case setError(MyError)\n    }\n\n    func mutate(action: Action) -> Observable<Mutation> {\n        switch action {\n        case .fetchData:\n            return fetchDataFromNetwork()\n                .map { Mutation.setData($0) }\n                .catchError { error in\n                    return .just(.setError(.networkError))\n                }\n        }\n    }\n\n    func reduce(state: State, mutation: Mutation) -> State {\n        var newState = state\n        switch mutation {\n        case let .setData(data):\n            newState.data = data\n        case let .setError(error):\n            newState.error = error\n        }\n        return newState\n    }\n}\n"}],"position":{"start":{"line":20,"column":1,"offset":706},"end":{"line":72,"column":4,"offset":1735}}},"children":"import ReactorKit\nimport RxSwift\n\nenum MyAction {\n    case fetchData\n}\n\nenum MyError: Error {\n    case networkError\n}\n}\n\nclass MyReactor: Reactor {\n    let initialState = State()\n\n    struct State {\n        var data: String?\n        var error: MyError?\n    }\n\n    enum Action {\n        case fetchData\n    }\n\n    enum Mutation {\n        case setData(String)\n        case setError(MyError)\n    }\n\n    func mutate(action: Action) -> Observable<Mutation> {\n        switch action {\n        case .fetchData:\n            return fetchDataFromNetwork()\n                .map { Mutation.setData($0) }\n                .catchError { error in\n                    return .just(.setError(.networkError))\n                }\n        }\n    }\n\n    func reduce(state: State, mutation: Mutation) -> State {\n        var newState = state\n        switch mutation {\n        case let .setData(data):\n            newState.data = data\n        case let .setError(error):\n            newState.error = error\n        }\n        return newState\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchDataFromNetwork()","position":{"start":{"line":74,"column":8,"offset":1744},"end":{"line":74,"column":32,"offset":1768}}}],"position":{"start":{"line":74,"column":8,"offset":1744},"end":{"line":74,"column":32,"offset":1768}}},"children":"fetchDataFromNetwork()"}}]," 메서드는 네트워크 요청을 수행합니다. 네트워크 요청 중 에러가 발생하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catchError","position":{"start":{"line":74,"column":73,"offset":1809},"end":{"line":74,"column":85,"offset":1821}}}],"position":{"start":{"line":74,"column":73,"offset":1809},"end":{"line":74,"column":85,"offset":1821}}},"children":"catchError"}}]," 연산자를 사용해 에러를 처리하고, 상태를 업데이트합니다."]}],"\n",["$","h2",null,{"id":"4d00541f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. 에러 처리 전략"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit 내에서 에러를 처리하는 다양한 전략이 있습니다. 에러 처리는 상황에 따라 다를 수 있으며, 일반적으로 다음과 같은 방법들이 사용됩니다."}],"\n",["$","h3",null,{"id":"34634b64","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.1 전체 상태를 단순하게 유지하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["에러를 상태의 일부로 유지하여, 해당 상태를 통해 에러를 쉽게 전달하고 관리할 수 있습니다. 위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"State","position":{"start":{"line":82,"column":60,"offset":2044},"end":{"line":82,"column":67,"offset":2051}}}],"position":{"start":{"line":82,"column":60,"offset":2044},"end":{"line":82,"column":67,"offset":2051}}},"children":"State"}}]," 구조체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"error","position":{"start":{"line":82,"column":73,"offset":2057},"end":{"line":82,"column":80,"offset":2064}}}],"position":{"start":{"line":82,"column":73,"offset":2057},"end":{"line":82,"column":80,"offset":2064}}},"children":"error"}}]," 프로퍼티를 포함하고 있어서, 네트워크 에러를 쉽게 처리할 수 있습니다."]}],"\n",["$","h3",null,{"id":"8ecd7d88","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.2 사용자 친화적인 에러 메시지 제공"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"에러 발생 시 사용자에게 친화적인 메시지를 제공하는 것도 중요합니다. 예를 들어, 네트워크 에러가 발생한 경우 이를 이해하기 쉬운 메시지로 변환하여 사용자에게 표시할 수 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"switch mutation {\n    case let .setError(error):\n        newState.errorMessage = \"Network error: Please try again later.\"\n}\n"}],"position":{"start":{"line":88,"column":1,"offset":2236},"end":{"line":93,"column":4,"offset":2372}}},"children":"switch mutation {\n    case let .setError(error):\n        newState.errorMessage = \"Network error: Please try again later.\"\n}\n"}}]}],"\n",["$","h3",null,{"id":"c8cbb5ca","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.3 에러 리트라이"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"일부 경우에는 에러가 발생하더라도 이를 자동으로 재시도하는 것이 유용할 수 있습니다. 예를 들어, 네트워크 요청이 실패한 경우 잠시 후에 다시 시도하도록 하는 것이 좋습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"return fetchDataFromNetwork()\n    .retry(3)\n    .map { Mutation.setData($0) }\n    .catchError { error in\n        return .just(.setError(.networkError))\n    }\n"}],"position":{"start":{"line":99,"column":1,"offset":2490},"end":{"line":106,"column":4,"offset":2660}}},"children":"return fetchDataFromNetwork()\n    .retry(3)\n    .map { Mutation.setData($0) }\n    .catchError { error in\n        return .just(.setError(.networkError))\n    }\n"}}]}],"\n",["$","h2",null,{"id":"f9bb893f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. 고급 에러 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"고급 에러 처리 기법은 좀 더 구체적인 예외 상황을 다룹니다. 예를 들어, 사용자 인증 오류 또는 데이터 파싱 오류 같은 경우가 있습니다. 이런 경우 개별적인 에러 타입을 정의하고 이에 대응하는 전략을 구현하는 것이 좋습니다."}],"\n",["$","h3",null,{"id":"cea72213","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4.1 에러 타입 확장"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"에러 타입을 확장하여 다양한 에러 상황을 구체적으로 다룰 수 있습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum AppError: Error {\n    case networkError\n    case authenticationError\n    case parsingError\n}\n"}],"position":{"start":{"line":116,"column":1,"offset":2865},"end":{"line":122,"column":4,"offset":2975}}},"children":"enum AppError: Error {\n    case networkError\n    case authenticationError\n    case parsingError\n}\n"}}]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func mutate(action: Action) -> Observable<Mutation> {\n    switch action {\n    case .fetchData:\n        return fetchDataFromNetwork()\n            .map { Mutation.setData($0) }\n            .catchError { error in\n                if error is AuthenticationError {\n                    return .just(.setError(.authenticationError))\n                } else if error is ParsingError {\n                    return .just(.setError(.parsingError))\n                } else {\n                    return .just(.setError(.networkError))\n                }\n            }\n    }\n}\n"}],"position":{"start":{"line":124,"column":1,"offset":2977},"end":{"line":141,"column":4,"offset":3548}}},"children":"func mutate(action: Action) -> Observable<Mutation> {\n    switch action {\n    case .fetchData:\n        return fetchDataFromNetwork()\n            .map { Mutation.setData($0) }\n            .catchError { error in\n                if error is AuthenticationError {\n                    return .just(.setError(.authenticationError))\n                } else if error is ParsingError {\n                    return .just(.setError(.parsingError))\n                } else {\n                    return .just(.setError(.networkError))\n                }\n            }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 서로 다른 에러 타입에 대해 각각 다른 상태를 설정합니다. 이를 통해 더 구체적인 에러 처리가 가능합니다."}],"\n",["$","h2",null,{"id":"65a842f7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. 결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit을 이용한 에러 처리 및 예외 관리는 애플리케이션의 안정성을 크게 향상시킬 수 있습니다. 에러를 예측하고 이를 효과적으로 처리하는 것은 소프트웨어 개발의 중요한 부분입니다. ReactorKit의 단방향 데이터 흐름 모델을 활용하면, 에러와 예외를 관리하는 코드가 더욱 명확하고 유지보수하기 쉬워집니다. 이를 통해 사용자 친화적이고 안정적인 애플리케이션을 개발할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"[Swift] ReactorKit을 이용한 에러 처리 및 예외 관리","toc":[{"tagName":"h1","title":"Swift에서 ReactorKit을 이용한 에러 처리 및 예외 관리","id":"5a2be999"},{"tagName":"h2","title":"1. ReactorKit의 기본 개념","id":"fc7d1624"},{"tagName":"h2","title":"2. 기본적인 에러 처리","id":"cbc92f3a"},{"tagName":"h2","title":"3. 에러 처리 전략","id":"4d00541f"},{"tagName":"h3","title":"3.1 전체 상태를 단순하게 유지하기","id":"34634b64"},{"tagName":"h3","title":"3.2 사용자 친화적인 에러 메시지 제공","id":"8ecd7d88"},{"tagName":"h3","title":"3.3 에러 리트라이","id":"c8cbb5ca"},{"tagName":"h2","title":"4. 고급 에러 처리","id":"f9bb893f"},{"tagName":"h3","title":"4.1 에러 타입 확장","id":"cea72213"},{"tagName":"h2","title":"5. 결론","id":"65a842f7"}],"language":"kr"}]}]]}]]
8:null
