1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Core-Data%EC%99%80-UIKit-%ED%86%B5%ED%95%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A7%80%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC-46391073","d"],{"children":["__PAGE__?{\"slug\":\"Core-Data와-UIKit-통합-데이터-지속성-관리-46391073\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Core-Data%EC%99%80-UIKit-%ED%86%B5%ED%95%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A7%80%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC-46391073","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Core-Data와-UIKit-통합-데이터-지속성-관리-46391073\"}"},"styles":[]}],"segment":["slug","Core-Data%EC%99%80-UIKit-%ED%86%B5%ED%95%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A7%80%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC-46391073","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Core Data와 UIKit 통합: 데이터 지속성 관리 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Core Data와 UIKit을 통합하여 iOS 앱의 데이터 지속성을 관리하는 방법을 다룹니다. 다양한 사례와 코드 예제를 통해 Core Data의 기본 개념과 이를 UIKit과 결합하여 효율적인 데이터 관리 시스템을 구축하는 방법을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Core Data,UIKit,iOS"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Core-Data%EC%99%80-UIKit-%ED%86%B5%ED%95%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A7%80%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC-46391073"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Core Data와 UIKit 통합: 데이터 지속성 관리 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Core Data와 UIKit 통합: 데이터 지속성 관리 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Core Data와 UIKit을 통합하여 iOS 앱의 데이터 지속성을 관리하는 방법을 다룹니다. 다양한 사례와 코드 예제를 통해 Core Data의 기본 개념과 이를 UIKit과 결합하여 효율적인 데이터 관리 시스템을 구축하는 방법을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Core-Data%EC%99%80-UIKit-%ED%86%B5%ED%95%A9-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A7%80%EC%86%8D%EC%84%B1-%EA%B4%80%EB%A6%AC-46391073"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Core Data와 UIKit 통합: 데이터 지속성 관리 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Core Data와 UIKit을 통합하여 iOS 앱의 데이터 지속성을 관리하는 방법을 다룹니다. 다양한 사례와 코드 예제를 통해 Core Data의 기본 개념과 이를 UIKit과 결합하여 효율적인 데이터 관리 시스템을 구축하는 방법을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Core Data와 UIKit 통합: 데이터 지속성 관리"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Core Data와 UIKit 통합: 데이터 지속성 관리"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-12"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"9b3a7c8f","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Core Data와 UIKit 통합: 데이터 지속성 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 애플리케이션을 개발하는 데 있어 데이터 지속성은 매우 중요한 요소입니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":4,"column":53,"offset":88},"end":{"line":4,"column":64,"offset":99}}}],"position":{"start":{"line":4,"column":53,"offset":88},"end":{"line":4,"column":64,"offset":99}}},"children":"Core Data"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIKit","position":{"start":{"line":4,"column":66,"offset":101},"end":{"line":4,"column":73,"offset":108}}}],"position":{"start":{"line":4,"column":66,"offset":101},"end":{"line":4,"column":73,"offset":108}}},"children":"UIKit"}}],"을 통합하여 데이터를 지속적으로 관리하는 방법을 알아보겠습니다. 다양한 실제 사례와 함께 효율적인 데이터 관리 시스템을 구축하는 데 필요한 기본 개념과 코드 예제를 제공할 것입니다."]}],"\n",["$","h2",null,{"id":"3f16fc09","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Core Data의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":8,"column":1,"offset":232},"end":{"line":8,"column":12,"offset":243}}}],"position":{"start":{"line":8,"column":1,"offset":232},"end":{"line":8,"column":12,"offset":243}}},"children":"Core Data"}}],"는 iOS와 macOS 애플리케이션에서 사용하는 데이터 관리 프레임워크로, 객체 그래프와 영구 저장소를 처리하는 데 사용됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":8,"column":84,"offset":315},"end":{"line":8,"column":95,"offset":326}}}],"position":{"start":{"line":8,"column":84,"offset":315},"end":{"line":8,"column":95,"offset":326}}},"children":"Core Data"}}],"를 사용하면 데이터 모델링, 데이터 검증 및 유지 관리의 복잡성을 감소시킬 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":10,"column":1,"offset":377},"end":{"line":10,"column":12,"offset":388}}}],"position":{"start":{"line":10,"column":1,"offset":377},"end":{"line":10,"column":12,"offset":388}}},"children":"Core Data"}}],"의 주요 구성 요소는 다음과 같습니다:"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"NSManagedObjectModel"}],": 데이터 모델을 정의합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"NSPersistentStoreCoordinator"}],": 영구 저장소와 데이터 모델 간의 조정을 담당합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"NSManagedObjectContext"}],": 데이터를 관리하고 저장소와의 상호작용을 처리합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"NSManagedObject"}],": 저장된 데이터를 객체 형태로 나타내며, 데이터 모델의 각 엔티티와 일치합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"2bbf307c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"UIKit과의 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":18,"column":1,"offset":660},"end":{"line":18,"column":12,"offset":671}}}],"position":{"start":{"line":18,"column":1,"offset":660},"end":{"line":18,"column":12,"offset":671}}},"children":"Core Data"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIKit","position":{"start":{"line":18,"column":14,"offset":673},"end":{"line":18,"column":21,"offset":680}}}],"position":{"start":{"line":18,"column":14,"offset":673},"end":{"line":18,"column":21,"offset":680}}},"children":"UIKit"}}],"을 통합하여 데이터를 관리하기 위해서는 사용자 인터페이스(UI)와 데이터 저장소 사이의 원활한 데이터 흐름을 구현하는 것이 중요합니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIKit","position":{"start":{"line":18,"column":101,"offset":760},"end":{"line":18,"column":108,"offset":767}}}],"position":{"start":{"line":18,"column":101,"offset":760},"end":{"line":18,"column":108,"offset":767}}},"children":"UIKit"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":18,"column":110,"offset":769},"end":{"line":18,"column":121,"offset":780}}}],"position":{"start":{"line":18,"column":110,"offset":769},"end":{"line":18,"column":121,"offset":780}}},"children":"Core Data"}}],"를 통합하는 일반적인 방법입니다."]}],"\n",["$","h3",null,{"id":"642c13aa","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 모델 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":22,"column":4,"offset":818},"end":{"line":22,"column":15,"offset":829}}}],"position":{"start":{"line":22,"column":4,"offset":818},"end":{"line":22,"column":15,"offset":829}}},"children":"Core Data"}}]," 데이터 모델을 설정해야 합니다. 이는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".xcdatamodeld","position":{"start":{"line":22,"column":37,"offset":851},"end":{"line":22,"column":52,"offset":866}}}],"position":{"start":{"line":22,"column":37,"offset":851},"end":{"line":22,"column":52,"offset":866}}},"children":".xcdatamodeld"}}]," 파일로 생성되며, 이 파일 내에서 엔티티와 이들의 속성을 정의합니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import CoreData\n\nclass DataController {\n    let persistentContainer: NSPersistentContainer\n\n    init(modelName: String) {\n        persistentContainer = NSPersistentContainer(name: modelName)\n        persistentContainer.loadPersistentStores { (storeDescription, error) in\n            if let error = error {\n                fatalError(\"Unresolved error \\(error)\")\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":24,"column":1,"offset":907},"end":{"line":39,"column":4,"offset":1313}}},"children":"import CoreData\n\nclass DataController {\n    let persistentContainer: NSPersistentContainer\n\n    init(modelName: String) {\n        persistentContainer = NSPersistentContainer(name: modelName)\n        persistentContainer.loadPersistentStores { (storeDescription, error) in\n            if let error = error {\n                fatalError(\"Unresolved error \\(error)\")\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"f0a711f5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Managed Object Context 준비"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSManagedObjectContext","position":{"start":{"line":43,"column":1,"offset":1346},"end":{"line":43,"column":25,"offset":1370}}}],"position":{"start":{"line":43,"column":1,"offset":1346},"end":{"line":43,"column":25,"offset":1370}}},"children":"NSManagedObjectContext"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":43,"column":27,"offset":1372},"end":{"line":43,"column":38,"offset":1383}}}],"position":{"start":{"line":43,"column":27,"offset":1372},"end":{"line":43,"column":38,"offset":1383}}},"children":"Core Data"}}],"의 데이터를 담고 있는 컨테이너로, 데이터 업데이트와 조회를 처리합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext\n"}],"position":{"start":{"line":45,"column":1,"offset":1425},"end":{"line":47,"column":4,"offset":1531}}},"children":"let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext\n"}}]}],"\n",["$","h3",null,{"id":"9d731ca5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 추가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":51,"column":5,"offset":1549},"end":{"line":51,"column":16,"offset":1560}}}],"position":{"start":{"line":51,"column":5,"offset":1549},"end":{"line":51,"column":16,"offset":1560}}},"children":"Core Data"}}],"에 새 데이터를 추가하는 방법입니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":51,"column":44,"offset":1588},"end":{"line":51,"column":52,"offset":1596}}}],"position":{"start":{"line":51,"column":44,"offset":1588},"end":{"line":51,"column":52,"offset":1596}}},"children":"Person"}}],"이라는 엔티티가 있다고 가정해 봅시다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func addPerson(name: String, age: Int16) {\n    let person = Person(context: context)\n    person.name = name\n    person.age = age\n\n    do {\n        try context.save()\n    } catch {\n        print(\"Failed saving\")\n    }\n}\n"}],"position":{"start":{"line":53,"column":1,"offset":1619},"end":{"line":65,"column":4,"offset":1850}}},"children":"func addPerson(name: String, age: Int16) {\n    let person = Person(context: context)\n    person.name = name\n    person.age = age\n\n    do {\n        try context.save()\n    } catch {\n        print(\"Failed saving\")\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"ff93c7e6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 가져오기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"저장된 데이터를 가져오는 방법은 다음과 같습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func fetchPeople() -> [Person]? {\n    let fetchRequest: NSFetchRequest<Person> = Person.fetchRequest()\n\n    do {\n        let people = try context.fetch(fetchRequest)\n        return people\n    } catch {\n        print(\"Failed fetching\")\n        return nil\n    }\n}\n"}],"position":{"start":{"line":71,"column":1,"offset":1895},"end":{"line":83,"column":4,"offset":2169}}},"children":"func fetchPeople() -> [Person]? {\n    let fetchRequest: NSFetchRequest<Person> = Person.fetchRequest()\n\n    do {\n        let people = try context.fetch(fetchRequest)\n        return people\n    } catch {\n        print(\"Failed fetching\")\n        return nil\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"52354a85","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 수정 및 삭제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"데이터를 수정하거나 삭제하는 예제입니다. 데이터를 수정하는 경우는 다음과 같습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func updatePerson(person: Person, newName: String, newAge: Int16) {\n    person.name = newName\n    person.age = newAge\n\n    do {\n        try context.save()\n    } catch {\n        print(\"Failed updating\")\n    }\n}\n"}],"position":{"start":{"line":89,"column":1,"offset":2236},"end":{"line":100,"column":4,"offset":2458}}},"children":"func updatePerson(person: Person, newName: String, newAge: Int16) {\n    person.name = newName\n    person.age = newAge\n\n    do {\n        try context.save()\n    } catch {\n        print(\"Failed updating\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"데이터를 삭제하는 경우는 다음과 같습니다."}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func deletePerson(person: Person) {\n    context.delete(person)\n    do {\n        try context.save()\n    } catch {\n        print(\"Failed deleting\")\n    }\n}\n"}],"position":{"start":{"line":104,"column":1,"offset":2485},"end":{"line":113,"column":4,"offset":2651}}},"children":"func deletePerson(person: Person) {\n    context.delete(person)\n    do {\n        try context.save()\n    } catch {\n        print(\"Failed deleting\")\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"19365665","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"UITableView와의 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음으로, 데이터를 테이블 뷰에 표시하는 방법을 알아보겠습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UITableView","position":{"start":{"line":117,"column":37,"offset":2710},"end":{"line":117,"column":50,"offset":2723}}}],"position":{"start":{"line":117,"column":37,"offset":2710},"end":{"line":117,"column":50,"offset":2723}}},"children":"UITableView"}}],"를 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":117,"column":57,"offset":2730},"end":{"line":117,"column":68,"offset":2741}}}],"position":{"start":{"line":117,"column":57,"offset":2730},"end":{"line":117,"column":68,"offset":2741}}},"children":"Core Data"}}],"의 데이터를 표시하는 예시는 다음과 같습니다."]}],"\n",["$","h3",null,{"id":"a6f35080","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UITableView 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, 테이블 뷰를 설정하고 데이터 소스 및 델리게이트 메서드를 구현합니다."}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n\n    var people: [Person] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        fetchPeopleAndUpdateUI()\n    }\n\n    func fetchPeopleAndUpdateUI() {\n        if let fetchedPeople = fetchPeople() {\n            people = fetchedPeople\n            tableView.reloadData()\n        }\n    }\n\n    // MARK: - UITableViewDataSource Methods\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return people.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        let person = people[indexPath.row]\n        cell.textLabel?.text = \"\\(person.name) - \\(person.age)\"\n        return cell\n    }\n}\n"}],"position":{"start":{"line":123,"column":1,"offset":2832},"end":{"line":156,"column":4,"offset":3846}}},"children":"class ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n\n    var people: [Person] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        fetchPeopleAndUpdateUI()\n    }\n\n    func fetchPeopleAndUpdateUI() {\n        if let fetchedPeople = fetchPeople() {\n            people = fetchedPeople\n            tableView.reloadData()\n        }\n    }\n\n    // MARK: - UITableViewDataSource Methods\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return people.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        let person = people[indexPath.row]\n        cell.textLabel?.text = \"\\(person.name) - \\(person.age)\"\n        return cell\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"2ab1ff5b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 추가 및 UI 업데이트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"데이터가 추가되었을 때 UI를 업데이트하는 함수입니다."}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@IBAction func addButtonTapped(_ sender: Any) {\n    let alert = UIAlertController(title: \"New Person\", message: \"Add a new person\", preferredStyle: .alert)\n    alert.addTextField { (textField) in\n        textField.placeholder = \"Name\"\n    }\n    alert.addTextField { (textField) in\n        textField.placeholder = \"Age\"\n        textField.keyboardType = .numberPad\n    }\n    let saveAction = UIAlertAction(title: \"Save\", style: .default) { [unowned self] action in\n        guard let nameTextField = alert.textFields?[0], let ageTextField = alert.textFields?[1] else {\n            return\n        }\n        if let name = nameTextField.text, let ageText = ageTextField.text, let age = Int16(ageText) {\n            self.addPerson(name: name, age: age)\n            self.fetchPeopleAndUpdateUI()\n        }\n    }\n    alert.addAction(saveAction)\n    alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\n    present(alert, animated: true)\n}\n"}],"position":{"start":{"line":162,"column":1,"offset":3902},"end":{"line":185,"column":4,"offset":4855}}},"children":"@IBAction func addButtonTapped(_ sender: Any) {\n    let alert = UIAlertController(title: \"New Person\", message: \"Add a new person\", preferredStyle: .alert)\n    alert.addTextField { (textField) in\n        textField.placeholder = \"Name\"\n    }\n    alert.addTextField { (textField) in\n        textField.placeholder = \"Age\"\n        textField.keyboardType = .numberPad\n    }\n    let saveAction = UIAlertAction(title: \"Save\", style: .default) { [unowned self] action in\n        guard let nameTextField = alert.textFields?[0], let ageTextField = alert.textFields?[1] else {\n            return\n        }\n        if let name = nameTextField.text, let ageText = ageTextField.text, let age = Int16(ageText) {\n            self.addPerson(name: name, age: age)\n            self.fetchPeopleAndUpdateUI()\n        }\n    }\n    alert.addAction(saveAction)\n    alert.addAction(UIAlertAction(title: \"Cancel\", style: .cancel))\n    present(alert, animated: true)\n}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":189,"column":1,"offset":4864},"end":{"line":189,"column":12,"offset":4875}}}],"position":{"start":{"line":189,"column":1,"offset":4864},"end":{"line":189,"column":12,"offset":4875}}},"children":"Core Data"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIKit","position":{"start":{"line":189,"column":14,"offset":4877},"end":{"line":189,"column":21,"offset":4884}}}],"position":{"start":{"line":189,"column":14,"offset":4877},"end":{"line":189,"column":21,"offset":4884}}},"children":"UIKit"}}],"을 통합하여 iOS 앱의 데이터 지속성을 효과적으로 관리하는 방법을 살펴보았습니다. 데이터 모델 설정부터, 데이터 추가, 조회, 수정 및 삭제, 그리고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UITableView","position":{"start":{"line":189,"column":106,"offset":4969},"end":{"line":189,"column":119,"offset":4982}}}],"position":{"start":{"line":189,"column":106,"offset":4969},"end":{"line":189,"column":119,"offset":4982}}},"children":"UITableView"}}],"와 통합하여 데이터를 표시하는 예제를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Data","position":{"start":{"line":189,"column":143,"offset":5006},"end":{"line":189,"column":154,"offset":5017}}}],"position":{"start":{"line":189,"column":143,"offset":5006},"end":{"line":189,"column":154,"offset":5017}}},"children":"Core Data"}}],"의 강력한 기능을 활용할 수 있습니다. 이 가이드를 참고하여 여러분의 iOS 앱에서 데이터 관리를 쉽게 구현해 보세요."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Core Data와 UIKit 통합: 데이터 지속성 관리","toc":[{"tagName":"h1","title":"Core Data와 UIKit 통합: 데이터 지속성 관리","id":"9b3a7c8f"},{"tagName":"h2","title":"Core Data의 기본 개념","id":"3f16fc09"},{"tagName":"h2","title":"UIKit과의 통합","id":"2bbf307c"},{"tagName":"h3","title":"데이터 모델 설정","id":"642c13aa"},{"tagName":"h3","title":"Managed Object Context 준비","id":"f0a711f5"},{"tagName":"h3","title":"데이터 추가","id":"9d731ca5"},{"tagName":"h3","title":"데이터 가져오기","id":"ff93c7e6"},{"tagName":"h3","title":"데이터 수정 및 삭제","id":"52354a85"},{"tagName":"h2","title":"UITableView와의 통합","id":"19365665"},{"tagName":"h3","title":"UITableView 설정","id":"a6f35080"},{"tagName":"h3","title":"데이터 추가 및 UI 업데이트","id":"2ab1ff5b"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
