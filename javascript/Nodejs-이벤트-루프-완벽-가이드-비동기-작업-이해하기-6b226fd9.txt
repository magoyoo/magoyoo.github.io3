1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-6b226fd9","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-이벤트-루프-완벽-가이드-비동기-작업-이해하기-6b226fd9\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-6b226fd9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-이벤트-루프-완벽-가이드-비동기-작업-이해하기-6b226fd9\"}"},"styles":[]}],"segment":["slug","Nodejs-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-6b226fd9","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js의 핵심 개념 중 하나인 이벤트 루프와 비동기 작업 처리 방식에 대해 설명합니다. 자바스크립트와 서버 프로그래밍 초보자에게 유익한 내용으로, 실제 예제를 포함해 기본 개념부터 심화 이해까지 폭넓게 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,이벤트 루프,비동기,자바스크립트"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-6b226fd9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js의 핵심 개념 중 하나인 이벤트 루프와 비동기 작업 처리 방식에 대해 설명합니다. 자바스크립트와 서버 프로그래밍 초보자에게 유익한 내용으로, 실제 예제를 포함해 기본 개념부터 심화 이해까지 폭넓게 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EB%A3%A8%ED%94%84-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-6b226fd9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js의 핵심 개념 중 하나인 이벤트 루프와 비동기 작업 처리 방식에 대해 설명합니다. 자바스크립트와 서버 프로그래밍 초보자에게 유익한 내용으로, 실제 예제를 포함해 기본 개념부터 심화 이해까지 폭넓게 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-26"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"c64d6bac","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js는 서버 측 자바스크립트 환경으로, 비동기 I/O 및 이벤트 기반 아키텍처 덕분에 높은 성능을 자랑합니다. 이러한 비동기성이 Node.js의 핵심이며, 이를 실현하는 중심에 '이벤트 루프'가 있습니다. 이번 글에서는 이벤트 루프의 작동 방식과 비동기 작업 처리 메커니즘을 깊이 있게 살펴보도록 하겠습니다."}],"\n",["$","h2",null,{"id":"e28c9676","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"이벤트 루프란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이벤트 루프는 Node.js가 비동기 작업을 처리할 수 있게 해주는 내부 메커니즘입니다. Node.js는 단일 스레드로 구동되지만, 이벤트 루프를 통해 동시에 여러 작업을 처리할 수 있습니다. 이벤트 루프는 기본적으로 아래의 단계로 작동합니다."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"테스크 큐 확인"}],": 먼저 대기 중인 테스크들이 있는지 확인합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"콜백 실행"}],": 테스크 큐에서 콜백 함수를 가져와 실행합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"I/O 작업 확인"}],": 네트워크 I/O, 파일 시스템 I/O 등의 비동기 요청 상태를 확인합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"타이머 확인"}],": setTimeout이나 setInterval 등의 타이머 작업을 확인하고 실행합니다."]}],"\n",["$","li","li-4",{"children":[["$","strong",null,{"className":"font-black","children":"다음 큐 대기"}],": 모든 작업이 완료되면, 새로운 작업이 들어올 때까지 대기합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이러한 반복적인 과정을 통해 Node.js는 자바스크립트 코드의 비동기 작업을 효율적으로 처리합니다."}],"\n",["$","h2",null,{"id":"498b81dc","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"비동기 작업 처리 방식"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js에서 비동기 작업을 처리하는 방법에는 여러 가지가 있습니다. 대표적인 방법들은 다음과 같습니다."}],"\n",["$","h3",null,{"id":"d78cf78a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"콜백 함수"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js의 초기 비동기 처리 방식은 주로 콜백 함수입니다. 콜백 함수는 특정 작업이 완료되었을 때 호출되는 함수를 말합니다. 예를 들어 파일을 읽는 비동기 작업을 살펴보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n"}],"position":{"start":{"line":26,"column":1,"offset":885},"end":{"line":33,"column":4,"offset":1028}}},"children":"const fs = require('fs');\n\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fs.readFile","position":{"start":{"line":35,"column":8,"offset":1037},"end":{"line":35,"column":21,"offset":1050}}}],"position":{"start":{"line":35,"column":8,"offset":1037},"end":{"line":35,"column":21,"offset":1050}}},"children":"fs.readFile"}}]," 함수는 파일을 비동기로 읽고, 파일이 읽혀지면 마지막 인자로 전달된 콜백 함수가 호출됩니다. 이와 같이 콜백 함수는 Node.js 비동기 작업 처리의 기본 방법입니다."]}],"\n",["$","h3",null,{"id":"bb6560a7","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로미스(Promise)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"콜백 함수의 단점인 콜백 헬을 해결하기 위해 ES6에서 도입된 프로미스는 좀 더 직관적으로 비동기 작업을 처리할 수 있습니다. 다음은 프로미스를 사용한 예제입니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const fs = require('fs').promises;\n\nfs.readFile('example.txt', 'utf8')\n  .then(data => {\n    console.log(data);\n  })\n  .catch(err => {\n    console.error(err);\n  });\n"}],"position":{"start":{"line":41,"column":1,"offset":1258},"end":{"line":51,"column":4,"offset":1440}}},"children":"const fs = require('fs').promises;\n\nfs.readFile('example.txt', 'utf8')\n  .then(data => {\n    console.log(data);\n  })\n  .catch(err => {\n    console.error(err);\n  });\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["프로미스 객체는 비동기 작업의 결과를 '약속'하는 객체로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"then","position":{"start":{"line":53,"column":34,"offset":1475},"end":{"line":53,"column":40,"offset":1481}}}],"position":{"start":{"line":53,"column":34,"offset":1475},"end":{"line":53,"column":40,"offset":1481}}},"children":"then"}}]," 과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch","position":{"start":{"line":53,"column":43,"offset":1484},"end":{"line":53,"column":50,"offset":1491}}}],"position":{"start":{"line":53,"column":43,"offset":1484},"end":{"line":53,"column":50,"offset":1491}}},"children":"catch"}}],"를 통해 성공과 실패를 처리할 수 있습니다. 이를 통해 비동기 코드를 보다 가독성 있게 작성할 수 있습니다."]}],"\n",["$","h3",null,{"id":"6c49f1d5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"async/await"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["ES8에서는 비동기 작업을 동기 작업처럼 작성할 수 있게 해주는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async/await","position":{"start":{"line":57,"column":37,"offset":1606},"end":{"line":57,"column":50,"offset":1619}}}],"position":{"start":{"line":57,"column":37,"offset":1606},"end":{"line":57,"column":50,"offset":1619}}},"children":"async/await"}}]," 구문이 도입되었습니다. 다음은 같은 예제를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async/await","position":{"start":{"line":57,"column":75,"offset":1644},"end":{"line":57,"column":88,"offset":1657}}}],"position":{"start":{"line":57,"column":75,"offset":1644},"end":{"line":57,"column":88,"offset":1657}}},"children":"async/await"}}],"를 이용해 작성한 코드입니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const fs = require('fs').promises;\n\nasync function readFile() {\n  try {\n    const data = await fs.readFile('example.txt', 'utf8');\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nreadFile();\n"}],"position":{"start":{"line":59,"column":1,"offset":1675},"end":{"line":72,"column":4,"offset":1907}}},"children":"const fs = require('fs').promises;\n\nasync function readFile() {\n  try {\n    const data = await fs.readFile('example.txt', 'utf8');\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nreadFile();\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async","position":{"start":{"line":74,"column":1,"offset":1909},"end":{"line":74,"column":8,"offset":1916}}}],"position":{"start":{"line":74,"column":1,"offset":1909},"end":{"line":74,"column":8,"offset":1916}}},"children":"async"}}]," 함수는 항상 프로미스를 반환하며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"await","position":{"start":{"line":74,"column":28,"offset":1936},"end":{"line":74,"column":35,"offset":1943}}}],"position":{"start":{"line":74,"column":28,"offset":1936},"end":{"line":74,"column":35,"offset":1943}}},"children":"await"}}]," 키워드는 프로미스의 완료를 기다립니다. 이를 통해 비동기 작업을 마치 동기 작업처럼 다룰 수 있어 코드의 가독성과 유지보수성을 높여줍니다."]}],"\n",["$","h2",null,{"id":"d280ee50","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"이벤트 루프의 단계별 진행"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이벤트 루프는 다양한 비동기 작업들을 어떻게 처리하는지 단계별로 이해하는 것이 중요합니다. 아래는 이벤트 루프의 주요 단계입니다."}],"\n",["$","h3",null,{"id":"21d43778","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"타이머 단계(Timers Phase)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 단계에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setTimeout","position":{"start":{"line":82,"column":9,"offset":2150},"end":{"line":82,"column":21,"offset":2162}}}],"position":{"start":{"line":82,"column":9,"offset":2150},"end":{"line":82,"column":21,"offset":2162}}},"children":"setTimeout"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setInterval","position":{"start":{"line":82,"column":23,"offset":2164},"end":{"line":82,"column":36,"offset":2177}}}],"position":{"start":{"line":82,"column":23,"offset":2164},"end":{"line":82,"column":36,"offset":2177}}},"children":"setInterval"}}],"로 예약된 콜백 함수들이 실행됩니다. 타이머가 만료된 콜백이 이 큐에 쌓이며, 이벤트 루프는 이 콜백들을 순차적으로 실행합니다."]}],"\n",["$","h3",null,{"id":"206ff6c9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"I/O 콜백 단계(I/O Callbacks Phase)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"여기서는 대부분의 비동기 I/O 콜백이 실행됩니다. 네트워크 요청, 파일 시스템 작업 등이 이 단계에서 처리됩니다. 예를 들어 파일이 성공적으로 읽혀졌을 때 호출되는 콜백 함수가 여기서 실행됩니다."}],"\n",["$","h3",null,{"id":"20c8f5ae","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"대기 단계(Idling, Prepare Phase)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 단계는 내부적으로 Node.js가 처리하는 작업으로, 대부분의 사용자 코드는 여기서 실행되지 않습니다."}],"\n",["$","h3",null,{"id":"0bd61133","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"폴링 단계(Poll Phase)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"폴링 단계에서는 새로운 I/O 이벤트를 대기하거나, 폴링 큐에 있는 이벤트들을 처리합니다. 이 단계가 완료되지 않으면 타이머 단계로 넘어가지 않습니다."}],"\n",["$","h3",null,{"id":"778f3246","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"체크 단계(Check Phase)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setImmediate","position":{"start":{"line":98,"column":1,"offset":2626},"end":{"line":98,"column":15,"offset":2640}}}],"position":{"start":{"line":98,"column":1,"offset":2626},"end":{"line":98,"column":15,"offset":2640}}},"children":"setImmediate"}}],"로 예약된 콜백 함수들이 이 단계에서 실행됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setImmediate","position":{"start":{"line":98,"column":43,"offset":2668},"end":{"line":98,"column":57,"offset":2682}}}],"position":{"start":{"line":98,"column":43,"offset":2668},"end":{"line":98,"column":57,"offset":2682}}},"children":"setImmediate"}}],"는 이벤트 루프의 '현재' 단계 이후 실행되도록 예약됩니다."]}],"\n",["$","h3",null,{"id":"c36193d6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"닫기 단계(Close Callbacks Phase)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"close","position":{"start":{"line":102,"column":1,"offset":2751},"end":{"line":102,"column":8,"offset":2758}}}],"position":{"start":{"line":102,"column":1,"offset":2751},"end":{"line":102,"column":8,"offset":2758}}},"children":"close"}}]," 이벤트가 발생했을 때 호출되는 콜백 함수가 여기서 실행됩니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"socket.on('close', ...)","position":{"start":{"line":102,"column":51,"offset":2801},"end":{"line":102,"column":76,"offset":2826}}}],"position":{"start":{"line":102,"column":51,"offset":2801},"end":{"line":102,"column":76,"offset":2826}}},"children":"socket.on('close', ...)"}}],"와 같은 콜백이 이 단계에서 처리됩니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js의 이벤트 루프와 비동기 처리 메커니즘은 단일 스레드 환경에서 고성능 서버를 구현할 수 있게 해주는 중요한 요소입니다. 콜백 함수, 프로미스, 그리고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async/await","position":{"start":{"line":106,"column":92,"offset":2948},"end":{"line":106,"column":105,"offset":2961}}}],"position":{"start":{"line":106,"column":92,"offset":2948},"end":{"line":106,"column":105,"offset":2961}}},"children":"async/await"}}],"와 같은 다양한 비동기 작업 처리 방법을 통해 코드의 가독성과 유지보수성을 높일 수 있습니다. 이러한 기법들을 잘 이해하고 활용하면 보다 효율적이고 강력한 Node.js 애플리케이션을 작성할 수 있을 것입니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기","toc":[{"tagName":"h1","title":"Node.js 이벤트 루프 완벽 가이드: 비동기 작업 이해하기","id":"c64d6bac"},{"tagName":"h2","title":"이벤트 루프란 무엇인가?","id":"e28c9676"},{"tagName":"h2","title":"비동기 작업 처리 방식","id":"498b81dc"},{"tagName":"h3","title":"콜백 함수","id":"d78cf78a"},{"tagName":"h3","title":"프로미스(Promise)","id":"bb6560a7"},{"tagName":"h3","title":"async/await","id":"6c49f1d5"},{"tagName":"h2","title":"이벤트 루프의 단계별 진행","id":"d280ee50"},{"tagName":"h3","title":"타이머 단계(Timers Phase)","id":"21d43778"},{"tagName":"h3","title":"I/O 콜백 단계(I/O Callbacks Phase)","id":"206ff6c9"},{"tagName":"h3","title":"대기 단계(Idling, Prepare Phase)","id":"20c8f5ae"},{"tagName":"h3","title":"폴링 단계(Poll Phase)","id":"0bd61133"},{"tagName":"h3","title":"체크 단계(Check Phase)","id":"778f3246"},{"tagName":"h3","title":"닫기 단계(Close Callbacks Phase)","id":"c36193d6"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
