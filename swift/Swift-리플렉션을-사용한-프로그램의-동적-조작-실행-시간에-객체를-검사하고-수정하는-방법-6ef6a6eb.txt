1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A1%B0%EC%9E%91-%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84%EC%97%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B2%80%EC%82%AC%ED%95%98%EA%B3%A0-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-6ef6a6eb","d"],{"children":["__PAGE__?{\"slug\":\"Swift-리플렉션을-사용한-프로그램의-동적-조작-실행-시간에-객체를-검사하고-수정하는-방법-6ef6a6eb\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A1%B0%EC%9E%91-%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84%EC%97%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B2%80%EC%82%AC%ED%95%98%EA%B3%A0-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-6ef6a6eb","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-리플렉션을-사용한-프로그램의-동적-조작-실행-시간에-객체를-검사하고-수정하는-방법-6ef6a6eb\"}"},"styles":[]}],"segment":["slug","Swift-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A1%B0%EC%9E%91-%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84%EC%97%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B2%80%EC%82%AC%ED%95%98%EA%B3%A0-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-6ef6a6eb","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift의 리플렉션(reflection) 기능을 사용하여 실행 시간에 객체를 검사하고 수정하는 방법에 대해 다룹니다. 리플렉션은 코드의 동작을 동적으로 파악하고 변경할 수 있게 해주는 강력한 도구입니다."}],["$","meta","3",{"name":"keywords","content":"Swift,리플렉션,동적 프로그래밍,iOS 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A1%B0%EC%9E%91-%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84%EC%97%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B2%80%EC%82%AC%ED%95%98%EA%B3%A0-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-6ef6a6eb"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift의 리플렉션(reflection) 기능을 사용하여 실행 시간에 객체를 검사하고 수정하는 방법에 대해 다룹니다. 리플렉션은 코드의 동작을 동적으로 파악하고 변경할 수 있게 해주는 강력한 도구입니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EB%A6%AC%ED%94%8C%EB%A0%89%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%EB%8F%99%EC%A0%81-%EC%A1%B0%EC%9E%91-%EC%8B%A4%ED%96%89-%EC%8B%9C%EA%B0%84%EC%97%90-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EA%B2%80%EC%82%AC%ED%95%98%EA%B3%A0-%EC%88%98%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-6ef6a6eb"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift의 리플렉션(reflection) 기능을 사용하여 실행 시간에 객체를 검사하고 수정하는 방법에 대해 다룹니다. 리플렉션은 코드의 동작을 동적으로 파악하고 변경할 수 있게 해주는 강력한 도구입니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-08"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"d0ef8da2","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["리플렉션(reflection)은 프로그램이 실행 중에 객체를 검사하고 수정할 수 있게 해주는 강력한 기능입니다. Swift에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":4,"column":73,"offset":129},"end":{"line":4,"column":81,"offset":137}}}],"position":{"start":{"line":4,"column":73,"offset":129},"end":{"line":4,"column":81,"offset":137}}},"children":"Mirror"}}]," 클래스를 사용하여 이러한 작업을 수행할 수 있습니다. 이 글에서는 리플렉션을 사용하는 방법과 그 유용성, 주의할 점에 대해 설명합니다."]}],"\n",["$","h2",null,{"id":"e1dff776","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"리플렉션이란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션은 프로그램이 자신을 검사하고 수정할 수 있는 메타프로그래밍 기법입니다. 코드 작성 시점이 아닌 실행 시점에 클래스나 객체의 구조와 값을 알아내거나 수정할 수 있는 기술입니다. 리플렉션을 사용하면 개발자가 예측하지 못한 상황에서도 프로그램이 유연하게 동작하게 만들 수 있습니다."}],"\n",["$","h3",null,{"id":"4cab983f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"왜 리플렉션을 사용하는가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션의 주된 이점은 다음과 같습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"동적 프로퍼티 접근"}],": 컴파일 시간에 알 수 없는 객체의 프로퍼티에 접근할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"디버깅 및 테스트"}],": 객체 상태를 런타임에 검사하여 디버깅에 유용합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"일반화된 코드 작성"}],": 특정 객체 유형에 의존하지 않는 일반화된 코드를 작성할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"48ebdefe","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 리플렉션 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":20,"column":10,"offset":630},"end":{"line":20,"column":18,"offset":638}}}],"position":{"start":{"line":20,"column":10,"offset":630},"end":{"line":20,"column":18,"offset":638}}},"children":"Mirror"}}]," 클래스를 사용하여 리플렉션을 구현할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":20,"column":47,"offset":667},"end":{"line":20,"column":55,"offset":675}}}],"position":{"start":{"line":20,"column":47,"offset":667},"end":{"line":20,"column":55,"offset":675}}},"children":"Mirror"}}],"는 인스턴스의 모든 프로퍼티와 메소드에 접근할 수 있는 인터페이스를 제공합니다."]}],"\n",["$","h3",null,{"id":"d56b8282","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":["기본적인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":22,"column":10,"offset":730},"end":{"line":22,"column":18,"offset":738}}}],"position":{"start":{"line":22,"column":10,"offset":730},"end":{"line":22,"column":18,"offset":738}}},"children":"Mirror"}}]," 사용법"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":24,"column":5,"offset":748},"end":{"line":24,"column":13,"offset":756}}}],"position":{"start":{"line":24,"column":5,"offset":748},"end":{"line":24,"column":13,"offset":756}}},"children":"Mirror"}}],"를 사용하여 객체의 프로퍼티를 나열하는 예제입니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet person = Person(name: \"Alice\", age: 30)\nlet mirror = Mirror(reflecting: person)\n\nfor child in mirror.children {\n    if let label = child.label {\n        print(\"\"]Property: \\(label), Value: \\(child.value)\")\n    }\n}\n"}],"position":{"start":{"line":26,"column":1,"offset":786},"end":{"line":45,"column":4,"offset":1166}}},"children":"class Person {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet person = Person(name: \"Alice\", age: 30)\nlet mirror = Mirror(reflecting: person)\n\nfor child in mirror.children {\n    if let label = child.label {\n        print(\"\"]Property: \\(label), Value: \\(child.value)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":47,"column":7,"offset":1174},"end":{"line":47,"column":15,"offset":1182}}}],"position":{"start":{"line":47,"column":7,"offset":1174},"end":{"line":47,"column":15,"offset":1182}}},"children":"Person"}}]," 클래스의 인스턴스를 생성하고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror(reflecting:)","position":{"start":{"line":47,"column":32,"offset":1199},"end":{"line":47,"column":53,"offset":1220}}}],"position":{"start":{"line":47,"column":32,"offset":1199},"end":{"line":47,"column":53,"offset":1220}}},"children":"Mirror(reflecting:)"}}]," 메서드를 사용하여 해당 인스턴스를 반영합니다. 그런 다음, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mirror.children","position":{"start":{"line":47,"column":87,"offset":1254},"end":{"line":47,"column":104,"offset":1271}}}],"position":{"start":{"line":47,"column":87,"offset":1254},"end":{"line":47,"column":104,"offset":1271}}},"children":"mirror.children"}}],"을 통해 모든 프로퍼티와 그 값을 출력합니다."]}],"\n",["$","h3",null,{"id":"a5127052","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"동적 프로퍼티 변경"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션을 통해 객체의 프로퍼티 값을 동적으로 변경할 수 있습니다. 이렇게 하려면, 특정 프로퍼티에 대한 키-값 데이터를 알고 있어야 합니다. 다음 예제를 통해 이를 다룹니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass Person {\n    @objc dynamic var name: String\n    @objc dynamic var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet person = Person(name: \"Alice\", age: 30)\n\nlet mirror = Mirror(reflecting: person)\nvar dict: [String: Any] = [:]\n\nfor child in mirror.children {\n    if let label = child.label {\n        dict[label] = child.value\n    }\n}\n\n// 동적으로 값 변경\nif let _ = dict[\"name\"] {\n    person.setValue(\"Bob\", forKey: \"name\")\n}\n\nprint(person.name) // 출력: Bob\n"}],"position":{"start":{"line":53,"column":1,"offset":1414},"end":{"line":83,"column":4,"offset":1961}}},"children":"import Foundation\n\nclass Person {\n    @objc dynamic var name: String\n    @objc dynamic var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet person = Person(name: \"Alice\", age: 30)\n\nlet mirror = Mirror(reflecting: person)\nvar dict: [String: Any] = [:]\n\nfor child in mirror.children {\n    if let label = child.label {\n        dict[label] = child.value\n    }\n}\n\n// 동적으로 값 변경\nif let _ = dict[\"name\"] {\n    person.setValue(\"Bob\", forKey: \"name\")\n}\n\nprint(person.name) // 출력: Bob\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드에서는 KVC(Key-Value Coding)를 사용하여 객체의 프로퍼티 값을 동적으로 변경합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@objc dynamic","position":{"start":{"line":85,"column":61,"offset":2023},"end":{"line":85,"column":76,"offset":2038}}}],"position":{"start":{"line":85,"column":61,"offset":2023},"end":{"line":85,"column":76,"offset":2038}}},"children":"@objc dynamic"}}]," 키워드는 Objective-C 런타임을 통해 KVC를 사용할 수 있게 해줍니다."]}],"\n",["$","h2",null,{"id":"68f862c6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"리플렉션의 유용성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션은 다양한 상황에서 유용하게 사용될 수 있습니다:"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"디버깅"}],": 객체의 상태를 런타임에 검사하여 버그를 해결할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"테스팅"}],": 테스트 케이스에서 객체 프로퍼티를 동적으로 설정하여 다양한 시나리오를 검증할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"프레임워크 개발"}],": 특정 타입에 종속되지 않는 범용적인 기능을 구현할 수 있습니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"fae0d4e9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: JSON 직렬화 및 역직렬화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션을 사용하여 JSON 데이터를 동적으로 객체로 변환하거나 객체를 JSON 데이터로 변환할 수 있습니다. 다음 예제를 봅시다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass Person: Codable {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet jsonData = \"{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30}\".data(using: .utf8)!\nlet decoder = JSONDecoder()\nlet person = try! decoder.decode(Person.self, from: jsonData)\n\nprint(person.name) // 출력: Alice\nprint(person.age)  // 출력: 30\n"}],"position":{"start":{"line":99,"column":1,"offset":2395},"end":{"line":118,"column":4,"offset":2809}}},"children":"import Foundation\n\nclass Person: Codable {\n    var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n    }\n}\n\nlet jsonData = \"{\\\"name\\\": \\\"Alice\\\", \\\"age\\\": 30}\".data(using: .utf8)!\nlet decoder = JSONDecoder()\nlet person = try! decoder.decode(Person.self, from: jsonData)\n\nprint(person.name) // 출력: Alice\nprint(person.age)  // 출력: 30\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":120,"column":6,"offset":2816},"end":{"line":120,"column":15,"offset":2825}}}],"position":{"start":{"line":120,"column":6,"offset":2816},"end":{"line":120,"column":15,"offset":2825}}},"children":"Codable"}}]," 프로토콜과 리플렉션을 사용하여 JSON 데이터를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":120,"column":43,"offset":2853},"end":{"line":120,"column":51,"offset":2861}}}],"position":{"start":{"line":120,"column":43,"offset":2853},"end":{"line":120,"column":51,"offset":2861}}},"children":"Person"}}]," 객체로 역직렬화합니다."]}],"\n",["$","h2",null,{"id":"b56d1a66","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"주의할 점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션은 강력하지만 남용하면 성능 문제와 코드 유지 보수의 어려움을 초래할 수 있습니다. 리플렉션은 주로 디버깅, 테스트, 프레임워크와 같은 특정 상황에서 사용해야 합니다."}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"성능"}],": 리플렉션은 런타임 오버헤드가 크기 때문에 빈번하게 사용하면 성능 문제가 발생할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"안정성"}],": 동적으로 프로퍼티를 변경하는 것은 코드의 가독성과 안전성을 떨어뜨릴 수 있습니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션을 잘 활용하면 더욱 유연하고 강력한 프로그램을 작성할 수 있습니다. 그러나 항상 적절한 상황에서 신중하게 사용해야 합니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법.","toc":[{"tagName":"h1","title":"Swift 리플렉션을 사용한 프로그램의 동적 조작: 실행 시간에 객체를 검사하고 수정하는 방법","id":"d0ef8da2"},{"tagName":"h2","title":"리플렉션이란 무엇인가?","id":"e1dff776"},{"tagName":"h3","title":"왜 리플렉션을 사용하는가?","id":"4cab983f"},{"tagName":"h2","title":"Swift에서 리플렉션 사용하기","id":"48ebdefe"},{"tagName":"h3","title":"기본적인 ","id":"d56b8282"},{"tagName":"h3","title":"동적 프로퍼티 변경","id":"a5127052"},{"tagName":"h2","title":"리플렉션의 유용성","id":"68f862c6"},{"tagName":"h3","title":"예제: JSON 직렬화 및 역직렬화","id":"fae0d4e9"},{"tagName":"h2","title":"주의할 점","id":"b56d1a66"}],"language":"kr"}]}]]}]]
8:null
