1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EB%A1%9C-Custom-View%EC%99%80-DIP%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-80c5833c","d"],{"children":["__PAGE__?{\"slug\":\"Swift로-Custom-View와-DIP를-구현하는-방법-80c5833c\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EB%A1%9C-Custom-View%EC%99%80-DIP%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-80c5833c","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift로-Custom-View와-DIP를-구현하는-방법-80c5833c\"}"},"styles":[]}],"segment":["slug","Swift%EB%A1%9C-Custom-View%EC%99%80-DIP%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-80c5833c","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift로 Custom View와 DIP를 구현하는 방법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift로 Custom View를 만들고 의존성 주입(DIP: Dependency Injection Principle)을 사용하여 이를 관리하는 방법을 설명합니다. Custom View의 경우, 팩토리 패턴과 프로토콜 지향 프로그래밍을 활용하여 유연하면서도 확장 가능한 구조로 구현하는 내용을 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Custom View,Dependency Injection,DIP"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EB%A1%9C-Custom-View%EC%99%80-DIP%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-80c5833c"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift로 Custom View와 DIP를 구현하는 방법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift로 Custom View와 DIP를 구현하는 방법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift로 Custom View를 만들고 의존성 주입(DIP: Dependency Injection Principle)을 사용하여 이를 관리하는 방법을 설명합니다. Custom View의 경우, 팩토리 패턴과 프로토콜 지향 프로그래밍을 활용하여 유연하면서도 확장 가능한 구조로 구현하는 내용을 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EB%A1%9C-Custom-View%EC%99%80-DIP%EB%A5%BC-%EA%B5%AC%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-80c5833c"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift로 Custom View와 DIP를 구현하는 방법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift로 Custom View를 만들고 의존성 주입(DIP: Dependency Injection Principle)을 사용하여 이를 관리하는 방법을 설명합니다. Custom View의 경우, 팩토리 패턴과 프로토콜 지향 프로그래밍을 활용하여 유연하면서도 확장 가능한 구조로 구현하는 내용을 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift로 Custom View와 DIP를 구현하는 방법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift로 Custom View와 DIP를 구현하는 방법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-13"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5c78f3f3","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift로 Custom View와 DIP를 구현하는 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 간결하고 강력한 프로그래밍 언어로, iOS 개발자들 사이에서 인기가 많습니다. 이 글에서는 Swift로 Custom View를 생성하고 의존성 주입(DIP: Dependency Injection Principle)을 사용하여 이를 관리하는 방법을 알아보겠습니다. 이를 통해 유연하고 확장 가능한 구조를 설계하는 방법을 배워봅시다."}],"\n",["$","h2",null,{"id":"dccbcd88","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Custom View 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Custom View는 UIKit에서 제공하는 기본 뷰를 상속받아 우리가 원하는 대로 커스터마이즈 한 뷰입니다. 이 섹션에서는 기본적인 Custom View를 만드는 방법을 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"03875306","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 Custom View 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"우선 가장 기본적인 Custom View를 만들겠습니다. 예를 들어, 둥근 모서리를 가진 UIView를 만들어 보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nclass RoundedView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        self.layer.cornerRadius = 10\n        self.layer.masksToBounds = true\n    }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":450},"end":{"line":34,"column":4,"offset":813}}},"children":"import UIKit\n\nclass RoundedView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        self.layer.cornerRadius = 10\n        self.layer.masksToBounds = true\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RoundedView","position":{"start":{"line":36,"column":9,"offset":823},"end":{"line":36,"column":22,"offset":836}}}],"position":{"start":{"line":36,"column":9,"offset":823},"end":{"line":36,"column":22,"offset":836}}},"children":"RoundedView"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":36,"column":28,"offset":842},"end":{"line":36,"column":36,"offset":850}}}],"position":{"start":{"line":36,"column":28,"offset":842},"end":{"line":36,"column":36,"offset":850}}},"children":"UIView"}}],"를 상속받아 커스터마이즈한 것입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setupView","position":{"start":{"line":36,"column":57,"offset":871},"end":{"line":36,"column":68,"offset":882}}}],"position":{"start":{"line":36,"column":57,"offset":871},"end":{"line":36,"column":68,"offset":882}}},"children":"setupView"}}]," 메서드를 통해 둥근 모서리를 적용했습니다."]}],"\n",["$","h2",null,{"id":"b7058c53","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"팩토리 패턴과 Custom View"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Custom View의 복잡도가 증가하면 팩토리 패턴을 사용하여 객체 생성을 관리하는 것이 효율적입니다. 팩토리 패턴은 객체 생성 코드를 한 곳으로 모아서 관리할 수 있도록 합니다."}],"\n",["$","h3",null,{"id":"055a75e3","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"팩토리 패턴 적용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음 예제는 팩토리 패턴을 사용해 Custom View를 생성하는 방법입니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol ViewFactory {\n    func createRoundedView() -> RoundedView\n    func createAnotherCustomView() -> AnotherCustomView\n}\n\nclass ConcreteViewFactory: ViewFactory {\n    func createRoundedView() -> RoundedView {\n        return RoundedView()\n    }\n\n    func createAnotherCustomView() -> AnotherCustomView {\n        return AnotherCustomView()\n    }\n}\n\nclass AnotherCustomView: UIView {\n    // 커스터마이즈된 뷰 구현\n}\n"}],"position":{"start":{"line":46,"column":1,"offset":1097},"end":{"line":65,"column":4,"offset":1516}}},"children":"protocol ViewFactory {\n    func createRoundedView() -> RoundedView\n    func createAnotherCustomView() -> AnotherCustomView\n}\n\nclass ConcreteViewFactory: ViewFactory {\n    func createRoundedView() -> RoundedView {\n        return RoundedView()\n    }\n\n    func createAnotherCustomView() -> AnotherCustomView {\n        return AnotherCustomView()\n    }\n}\n\nclass AnotherCustomView: UIView {\n    // 커스터마이즈된 뷰 구현\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewFactory","position":{"start":{"line":67,"column":1,"offset":1518},"end":{"line":67,"column":14,"offset":1531}}}],"position":{"start":{"line":67,"column":1,"offset":1518},"end":{"line":67,"column":14,"offset":1531}}},"children":"ViewFactory"}}]," 프로토콜을 통해 Custom View를 생성하는 메서드를 정의하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConcreteViewFactory","position":{"start":{"line":67,"column":53,"offset":1570},"end":{"line":67,"column":74,"offset":1591}}}],"position":{"start":{"line":67,"column":53,"offset":1570},"end":{"line":67,"column":74,"offset":1591}}},"children":"ConcreteViewFactory"}}]," 클래스가 이를 구현합니다. 이를 통해 Custom View 생성 과정을 단순화하고 다양한 뷰를 쉽게 관리할 수 있습니다."]}],"\n",["$","h2",null,{"id":"39723874","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"의존성 주입 (Dependency Injection)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"의존성 주입은 클래스 간의 의존 관계를 외부에서 설정해주는 디자인 패턴입니다. 이를 통해 코드의 유연성과 테스트 용이성을 높일 수 있습니다. 다음과 같은 방식으로 적용할 수 있습니다."}],"\n",["$","h3",null,{"id":"f1be96b3","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"생성자 주입"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"가장 일반적인 의존성 주입 방법은 생성자 주입입니다. Custom View에 필요한 의존성을 생성자에서 주입받습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class CustomViewWithDependency: UIView {\n    private let dependency: SomeDependency\n\n    init(dependency: SomeDependency) {\n        self.dependency = dependency\n        super.init(frame: .zero)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupView() {\n        // 의존성을 활용한 뷰 설정\n    }\n}\n"}],"position":{"start":{"line":77,"column":1,"offset":1878},"end":{"line":95,"column":4,"offset":2279}}},"children":"class CustomViewWithDependency: UIView {\n    private let dependency: SomeDependency\n\n    init(dependency: SomeDependency) {\n        self.dependency = dependency\n        super.init(frame: .zero)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupView() {\n        // 의존성을 활용한 뷰 설정\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"의존성을 추상화하여 다양한 구현체를 사용할 수 있도록 합니다. 다음과 같이 할 수 있습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol SomeDependency {\n    func performSomeAction()\n}\n\nclass RealDependency: SomeDependency {\n    func performSomeAction() {\n        print(\"Action performed\")\n    }\n}\n"}],"position":{"start":{"line":99,"column":1,"offset":2334},"end":{"line":109,"column":4,"offset":2516}}},"children":"protocol SomeDependency {\n    func performSomeAction()\n}\n\nclass RealDependency: SomeDependency {\n    func performSomeAction() {\n        print(\"Action performed\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CustomViewWithDependency","position":{"start":{"line":111,"column":4,"offset":2521},"end":{"line":111,"column":30,"offset":2547}}}],"position":{"start":{"line":111,"column":4,"offset":2521},"end":{"line":111,"column":30,"offset":2547}}},"children":"CustomViewWithDependency"}}]," 객체를 사용할 때 의존성을 주입하여 생성할 수 있습니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let dependency = RealDependency()\nlet customView = CustomViewWithDependency(dependency: dependency)\n"}],"position":{"start":{"line":113,"column":1,"offset":2581},"end":{"line":116,"column":4,"offset":2693}}},"children":"let dependency = RealDependency()\nlet customView = CustomViewWithDependency(dependency: dependency)\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 Swift로 Custom View를 생성하고 의존성 주입을 통해 이를 관리하는 방법을 알아보았습니다. 기본적인 Custom View 생성과 팩토리 패턴을 적용한 객체 생성, 그리고 의존성 주입을 통한 유연한 코드 설계 방법을 다루었습니다. 이러한 원칙들을 적용함으로써 보다 유지보수성이 높고 확장 가능한 애플리케이션을 개발할 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift로 Custom View와 DIP를 구현하는 방법","toc":[{"tagName":"h1","title":"Swift로 Custom View와 DIP를 구현하는 방법","id":"5c78f3f3"},{"tagName":"h2","title":"Custom View 만들기","id":"dccbcd88"},{"tagName":"h3","title":"기본 Custom View 생성","id":"03875306"},{"tagName":"h2","title":"팩토리 패턴과 Custom View","id":"b7058c53"},{"tagName":"h3","title":"팩토리 패턴 적용하기","id":"055a75e3"},{"tagName":"h2","title":"의존성 주입 (Dependency Injection)","id":"39723874"},{"tagName":"h3","title":"생성자 주입","id":"f1be96b3"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
