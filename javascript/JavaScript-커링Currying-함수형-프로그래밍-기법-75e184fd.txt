1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","JavaScript-%EC%BB%A4%EB%A7%81Currying-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95-75e184fd","d"],{"children":["__PAGE__?{\"slug\":\"JavaScript-커링Currying-함수형-프로그래밍-기법-75e184fd\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","JavaScript-%EC%BB%A4%EB%A7%81Currying-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95-75e184fd","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"JavaScript-커링Currying-함수형-프로그래밍-기법-75e184fd\"}"},"styles":[]}],"segment":["slug","JavaScript-%EC%BB%A4%EB%A7%81Currying-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95-75e184fd","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"JavaScript 커링(Currying): 함수형 프로그래밍 기법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 JavaScript에서 커링(Currying)이라는 함수형 프로그래밍 기법을 소개하고, 이를 활용하는 방법을 자세히 설명합니다. 커링의 개념, 장점, 그리고 실제 예제를 통해 JavaScript에서 이 강력한 기법을 어떻게 사용할 수 있는지 알아봅니다."}],["$","meta","3",{"name":"keywords","content":"JavaScript,커링,함수형 프로그래밍,프로그래밍 기법"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/JavaScript-%EC%BB%A4%EB%A7%81Currying-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95-75e184fd"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"JavaScript 커링(Currying): 함수형 프로그래밍 기법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"JavaScript 커링(Currying): 함수형 프로그래밍 기법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 JavaScript에서 커링(Currying)이라는 함수형 프로그래밍 기법을 소개하고, 이를 활용하는 방법을 자세히 설명합니다. 커링의 개념, 장점, 그리고 실제 예제를 통해 JavaScript에서 이 강력한 기법을 어떻게 사용할 수 있는지 알아봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/JavaScript-%EC%BB%A4%EB%A7%81Currying-%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EA%B8%B0%EB%B2%95-75e184fd"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"JavaScript 커링(Currying): 함수형 프로그래밍 기법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 JavaScript에서 커링(Currying)이라는 함수형 프로그래밍 기법을 소개하고, 이를 활용하는 방법을 자세히 설명합니다. 커링의 개념, 장점, 그리고 실제 예제를 통해 JavaScript에서 이 강력한 기법을 어떻게 사용할 수 있는지 알아봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"JavaScript 커링(Currying): 함수형 프로그래밍 기법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"JavaScript 커링(Currying): 함수형 프로그래밍 기법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"97884ece","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"JavaScript 커링(Currying): 함수형 프로그래밍 기법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"JavaScript에서 커링(Currying)은 하나의 함수가 여러 개의 인자를 받는 대신, 하나의 인자를 받은 후 나머지 인자를 받는 새로운 함수를 반환하는 것입니다. 이 기법은 함수형 프로그래밍에서 자주 사용되며, 코드의 재사용성과 가독성을 높이는 데 많은 장점을 제공합니다. 이번 글에서는 커링의 개념, 장점, 그리고 몇 가지 예제를 통해 JavaScript에서 커링을 어떻게 적용할 수 있는지 알아보겠습니다."}],"\n",["$","h2",null,{"id":"bf5a065d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커링의 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커링은 영어 수학자 Haskell Curry의 이름을 딴 것으로, 다중 인수 함수(Multi-Argument Function)를 연쇄적인 단일 인수 함수로 변환하는 것을 의미합니다. 이를 통해 함수 호출 시 하나의 인수만 전달하고, 나머지 인수들은 나중에 전달할 수 있게 됩니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-js","node":{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"function add(a, b) {\n  return a + b;\n}\n\nconst curriedAdd = (a) => (b) => add(a, b);\n\nconsole.log(curriedAdd(2)(3)); // 5\n"}],"position":{"start":{"line":10,"column":1,"offset":445},"end":{"line":18,"column":4,"offset":575}}},"children":"function add(a, b) {\n  return a + b;\n}\n\nconst curriedAdd = (a) => (b) => add(a, b);\n\nconsole.log(curriedAdd(2)(3)); // 5\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"add","position":{"start":{"line":20,"column":8,"offset":584},"end":{"line":20,"column":13,"offset":589}}}],"position":{"start":{"line":20,"column":8,"offset":584},"end":{"line":20,"column":13,"offset":589}}},"children":"add"}}]," 함수는 두 개의 인수를 받습니다. 그러나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"curriedAdd","position":{"start":{"line":20,"column":37,"offset":613},"end":{"line":20,"column":49,"offset":625}}}],"position":{"start":{"line":20,"column":37,"offset":613},"end":{"line":20,"column":49,"offset":625}}},"children":"curriedAdd"}}]," 함수는 먼저 첫 번째 인수 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"a","position":{"start":{"line":20,"column":65,"offset":641},"end":{"line":20,"column":68,"offset":644}}}],"position":{"start":{"line":20,"column":65,"offset":641},"end":{"line":20,"column":68,"offset":644}}},"children":"a"}}],"를 받고, 다시 두 번째 인수 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"b","position":{"start":{"line":20,"column":85,"offset":661},"end":{"line":20,"column":88,"offset":664}}}],"position":{"start":{"line":20,"column":85,"offset":661},"end":{"line":20,"column":88,"offset":664}}},"children":"b"}}],"를 받는 새로운 함수를 반환합니다. 이를 통해 여러 인수를 각각의 호출로 분리할 수 있게 됩니다."]}],"\n",["$","h2",null,{"id":"922d8528","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커링의 장점"}],"\n",["$","h3",null,{"id":"bab635e9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. 코드의 재사용성 증가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커링을 통해 특정 인수를 고정한 새로운 함수를 쉽게 생성할 수 있습니다. 이는 다수의 함수에서 공통된 인수를 재사용할 때 매우 유용합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-js","node":{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const add5 = curriedAdd(5);\n\nconsole.log(add5(3)); // 8\nconsole.log(add5(10)); // 15\n"}],"position":{"start":{"line":28,"column":1,"offset":830},"end":{"line":33,"column":4,"offset":924}}},"children":"const add5 = curriedAdd(5);\n\nconsole.log(add5(3)); // 8\nconsole.log(add5(10)); // 15\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"curriedAdd(5)","position":{"start":{"line":35,"column":9,"offset":934},"end":{"line":35,"column":24,"offset":949}}}],"position":{"start":{"line":35,"column":9,"offset":934},"end":{"line":35,"column":24,"offset":949}}},"children":"curriedAdd(5)"}}],"를 통해 항상 5를 더하는 새로운 함수를 만들었습니다. 이를 통해 반복적인 코드 작성을 피할 수 있습니다."]}],"\n",["$","h3",null,{"id":"605958c2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. 함수 조합성 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커링은 함수형 프로그래밍의 핵심인 함수 조합성을 크게 향상시킵니다. 하나의 함수 실행 결과를 다른 함수의 입력으로 쉽게 전달할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-js","node":{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const multiply = (a, b) => a * b;\nconst curriedMultiply = (a) => (b) => multiply(a, b);\n\nconst multiplyBy2 = curriedMultiply(2);\nconst addAndMultiply = (a, b) => multiplyBy2(curriedAdd(a)(b));\n\nconsole.log(addAndMultiply(2, 3)); // 10\n"}],"position":{"start":{"line":41,"column":1,"offset":1108},"end":{"line":49,"column":4,"offset":1352}}},"children":"const multiply = (a, b) => a * b;\nconst curriedMultiply = (a) => (b) => multiply(a, b);\n\nconst multiplyBy2 = curriedMultiply(2);\nconst addAndMultiply = (a, b) => multiplyBy2(curriedAdd(a)(b));\n\nconsole.log(addAndMultiply(2, 3)); // 10\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"curriedAdd","position":{"start":{"line":51,"column":7,"offset":1360},"end":{"line":51,"column":19,"offset":1372}}}],"position":{"start":{"line":51,"column":7,"offset":1360},"end":{"line":51,"column":19,"offset":1372}}},"children":"curriedAdd"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"curriedMultiply","position":{"start":{"line":51,"column":21,"offset":1374},"end":{"line":51,"column":38,"offset":1391}}}],"position":{"start":{"line":51,"column":21,"offset":1374},"end":{"line":51,"column":38,"offset":1391}}},"children":"curriedMultiply"}}],"를 사용하여 각기 다른 연산을 쉽게 조합하는 예를 보여줍니다."]}],"\n",["$","h3",null,{"id":"4cd0f2df","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. 소프트웨어 설계의 유연성 증가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커링은 복잡한 소프트웨어 시스템에서 함수의 구성을 더 유연하게 만듭니다. 특히, 다단계 파라미터를 처리할 때 유용하게 사용할 수 있습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-js","node":{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const fetchData = (url) => (params) => (callback) => {\n  const query = Object.keys(params).map(k => `${k}=${params[k]}`).join('&');\n  fetch(`${url}?${query}`)\n    .then(response => response.json())\n    .then(data => callback(null, data))\n    .catch(err => callback(err));\n};\n\nconst fetchGitHubAPI = fetchData('https://api.github.com');\nconst fetchUser = fetchGitHubAPI({ per_page: 1 });\n\nfetchUser((err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});\n"}],"position":{"start":{"line":57,"column":1,"offset":1531},"end":{"line":76,"column":4,"offset":2034}}},"children":"const fetchData = (url) => (params) => (callback) => {\n  const query = Object.keys(params).map(k => `${k}=${params[k]}`).join('&');\n  fetch(`${url}?${query}`)\n    .then(response => response.json())\n    .then(data => callback(null, data))\n    .catch(err => callback(err));\n};\n\nconst fetchGitHubAPI = fetchData('https://api.github.com');\nconst fetchUser = fetchGitHubAPI({ per_page: 1 });\n\nfetchUser((err, data) => {\n  if (err) {\n    console.error(err);\n  } else {\n    console.log(data);\n  }\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":78,"column":9,"offset":2044},"end":{"line":78,"column":20,"offset":2055}}}],"position":{"start":{"line":78,"column":9,"offset":2044},"end":{"line":78,"column":20,"offset":2055}}},"children":"fetchData"}}]," 함수가 URL, params, 그리고 콜백을 받아 GitHub API 호출을 처리합니다. 이를 통해 코드의 복잡성을 줄이고, 각 단계에서 함수를 유연하게 구성할 수 있습니다."]}],"\n",["$","h2",null,{"id":"daf9909a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커링을 구현하는 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"JavaScript에서 커링을 구현하는 방법에는 여러 가지가 있지만, 가장 기본적인 방법은 함수 반환을 활용하는 것입니다. 이것은 함수가 다른 함수를 반환하여 각 인수에 대해 독립적인 호출을 가능하게 합니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-js","node":{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"const curry = (fn) => {\n  return function curried(...args) {\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (...nextArgs) {\n        return curried.apply(this, args.concat(nextArgs));\n      };\n    }\n  };\n};\n\nconst curriedAdd = curry((a, b) => a + b);\n\nconsole.log(curriedAdd(1, 2)); // 3\nconsole.log(curriedAdd(1)(2)); // 3\n"}],"position":{"start":{"line":84,"column":1,"offset":2289},"end":{"line":101,"column":4,"offset":2680}}},"children":"const curry = (fn) => {\n  return function curried(...args) {\n    if (args.length >= fn.length) {\n      return fn.apply(this, args);\n    } else {\n      return function (...nextArgs) {\n        return curried.apply(this, args.concat(nextArgs));\n      };\n    }\n  };\n};\n\nconst curriedAdd = curry((a, b) => a + b);\n\nconsole.log(curriedAdd(1, 2)); // 3\nconsole.log(curriedAdd(1)(2)); // 3\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커링 함수는 내부에서 값을 받아 필요한 인수가 모두 채워질 때까지 새로운 함수를 반환합니다. 이렇게 구현된 커링 함수는 인수 개수가 서로 다른 다양한 호출 방식을 지원합니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"JavaScript에서 커링은 함수형 프로그래밍의 강력한 기법 중 하나로, 코드의 재사용성과 가독성을 크게 향상시킵니다. 커링을 사용하면 특정 인수를 고정한 새로운 함수를 쉽게 생성하고, 함수 조합성을 향상시키며, 복잡한 소프트웨어 설계에서 유연성을 높일 수 있습니다. 실제 프로젝트에서 이 기법을 활용한다면 더 깔끔하고 유지보수하기 쉬운 코드를 작성할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"JavaScript 커링(Currying): 함수형 프로그래밍 기법","toc":[{"tagName":"h1","title":"JavaScript 커링(Currying): 함수형 프로그래밍 기법","id":"97884ece"},{"tagName":"h2","title":"커링의 개념","id":"bf5a065d"},{"tagName":"h2","title":"커링의 장점","id":"922d8528"},{"tagName":"h3","title":"1. 코드의 재사용성 증가","id":"bab635e9"},{"tagName":"h3","title":"2. 함수 조합성 향상","id":"605958c2"},{"tagName":"h3","title":"3. 소프트웨어 설계의 유연성 증가","id":"4cd0f2df"},{"tagName":"h2","title":"커링을 구현하는 방법","id":"daf9909a"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
