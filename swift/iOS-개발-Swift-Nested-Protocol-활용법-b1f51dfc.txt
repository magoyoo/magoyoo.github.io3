1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift-Nested-Protocol-%ED%99%9C%EC%9A%A9%EB%B2%95-b1f51dfc","d"],{"children":["__PAGE__?{\"slug\":\"iOS-개발-Swift-Nested-Protocol-활용법-b1f51dfc\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift-Nested-Protocol-%ED%99%9C%EC%9A%A9%EB%B2%95-b1f51dfc","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS-개발-Swift-Nested-Protocol-활용법-b1f51dfc\"}"},"styles":[]}],"segment":["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift-Nested-Protocol-%ED%99%9C%EC%9A%A9%EB%B2%95-b1f51dfc","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 개발: Swift Nested Protocol 활용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 iOS 개발에서 Swift 언어를 사용하여 Nested Protocol을 활용하는 방법을 설명합니다. Nested Protocol은 모듈화된 코드 구조를 만들고 코드 재사용성을 높이는 데 도움이 됩니다."}],["$","meta","3",{"name":"keywords","content":"Swift,iOS,프로토콜,코드 재사용성"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C-Swift-Nested-Protocol-%ED%99%9C%EC%9A%A9%EB%B2%95-b1f51dfc"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 개발: Swift Nested Protocol 활용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 개발: Swift Nested Protocol 활용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 iOS 개발에서 Swift 언어를 사용하여 Nested Protocol을 활용하는 방법을 설명합니다. Nested Protocol은 모듈화된 코드 구조를 만들고 코드 재사용성을 높이는 데 도움이 됩니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C-Swift-Nested-Protocol-%ED%99%9C%EC%9A%A9%EB%B2%95-b1f51dfc"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 개발: Swift Nested Protocol 활용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 iOS 개발에서 Swift 언어를 사용하여 Nested Protocol을 활용하는 방법을 설명합니다. Nested Protocol은 모듈화된 코드 구조를 만들고 코드 재사용성을 높이는 데 도움이 됩니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS 개발: Swift Nested Protocol 활용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS 개발: Swift Nested Protocol 활용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-04"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5c0b9fdd","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS 개발: Swift Nested Protocol 활용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"iOS 애플리케이션 개발 시 코드의 가독성과 재사용성을 향상시키기 위해 다양한 디자인 패턴과 개념들이 사용됩니다. 그 중 하나가 'Nested Protocol'을 이용한 프로토콜 내 중첩입니다. 이 글에서는 Swift 언어에서 Nested Protocol을 활용하는 방법과 이에 따른 이점에 대해 설명하겠습니다."}],"\n",["$","h2",null,{"id":"0690c611","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 프로토콜은 특정 작업이나 기능을 정의하는 일종의 청사진입니다. 프로토콜은 클래스, 구조체, 열거형 등에서 채택될 수 있으며, 특정 메서드나 속성을 구현하도록 강제할 수 있습니다. Nested Protocol은 하나의 프로토콜 내에 또 다른 프로토콜을 중첩하여 정의하는 것을 의미합니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이는 모듈화된 코드 구조를 만들고 연관된 기능들을 그룹화하는 데 유용합니다. 예를 들어, 여러분이 복잡한 네트워크 레이어를 가지고 있고 이 내부에 여러 가지 서로 관련된 작업들(예: 요청, 응답, 오류 처리 등)을 프로토콜로 정의하고 싶다면 Nested Protocol을 사용할 수 있습니다."}],"\n",["$","h2",null,{"id":"70eeb626","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 문법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol을 정의하는 문법은 다음과 같습니다. 여기에 두 개의 서로 연관된 프로토콜을 중첩된 형태로 정의해보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol OuterProtocol {\n    func performTask()\n    \n    // Nested Protocol\n    protocol InnerProtocol {\n        func execute(innerTask: String)\n    }\n}\n"}],"position":{"start":{"line":16,"column":1,"offset":676},"end":{"line":25,"column":4,"offset":841}}},"children":"protocol OuterProtocol {\n    func performTask()\n    \n    // Nested Protocol\n    protocol InnerProtocol {\n        func execute(innerTask: String)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":27,"column":7,"offset":849},"end":{"line":27,"column":22,"offset":864}}}],"position":{"start":{"line":27,"column":7,"offset":849},"end":{"line":27,"column":22,"offset":864}}},"children":"OuterProtocol"}}],"이라는 프로토콜 안에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerProtocol","position":{"start":{"line":27,"column":34,"offset":876},"end":{"line":27,"column":49,"offset":891}}}],"position":{"start":{"line":27,"column":34,"offset":876},"end":{"line":27,"column":49,"offset":891}}},"children":"InnerProtocol"}}],"이라는 프로토콜을 중첩하여 정의한 것입니다. 이제 이 프로토콜을 사용하는 클래스를 만들어보겠습니다."]}],"\n",["$","h2",null,{"id":"4052e98e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 사용 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 위에서 정의한 Nested Protocol을 채택(Adopt)하고 구현하는 클래스를 작성해보겠습니다. 두 개의 클래스를 각각 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":31,"column":74,"offset":1048},"end":{"line":31,"column":89,"offset":1063}}}],"position":{"start":{"line":31,"column":74,"offset":1048},"end":{"line":31,"column":89,"offset":1063}}},"children":"OuterProtocol"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerProtocol","position":{"start":{"line":31,"column":91,"offset":1065},"end":{"line":31,"column":106,"offset":1080}}}],"position":{"start":{"line":31,"column":91,"offset":1065},"end":{"line":31,"column":106,"offset":1080}}},"children":"InnerProtocol"}}],"을 준수하도록 구현하겠습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class OuterClass: OuterProtocol {\n    func performTask() {\n        print(\"Outer task is performed\")\n    }\n\n    class InnerClass: OuterProtocol.InnerProtocol {\n        func execute(innerTask: String) {\n            print(\"Inner task \\(innerTask) is executed\")\n        }\n    }\n}\n"}],"position":{"start":{"line":33,"column":1,"offset":1098},"end":{"line":45,"column":4,"offset":1386}}},"children":"class OuterClass: OuterProtocol {\n    func performTask() {\n        print(\"Outer task is performed\")\n    }\n\n    class InnerClass: OuterProtocol.InnerProtocol {\n        func execute(innerTask: String) {\n            print(\"Inner task \\(innerTask) is executed\")\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterClass","position":{"start":{"line":47,"column":7,"offset":1394},"end":{"line":47,"column":19,"offset":1406}}}],"position":{"start":{"line":47,"column":7,"offset":1394},"end":{"line":47,"column":19,"offset":1406}}},"children":"OuterClass"}}],"가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":47,"column":21,"offset":1408},"end":{"line":47,"column":36,"offset":1423}}}],"position":{"start":{"line":47,"column":21,"offset":1408},"end":{"line":47,"column":36,"offset":1423}}},"children":"OuterProtocol"}}],"을 준수하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerClass","position":{"start":{"line":47,"column":44,"offset":1431},"end":{"line":47,"column":56,"offset":1443}}}],"position":{"start":{"line":47,"column":44,"offset":1431},"end":{"line":47,"column":56,"offset":1443}}},"children":"InnerClass"}}],"가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol.InnerProtocol","position":{"start":{"line":47,"column":58,"offset":1445},"end":{"line":47,"column":87,"offset":1474}}}],"position":{"start":{"line":47,"column":58,"offset":1445},"end":{"line":47,"column":87,"offset":1474}}},"children":"OuterProtocol.InnerProtocol"}}],"을 준수하는 것을 보여줍니다. 이제 각 클래스의 인스턴스를 생성하고 메서드를 호출할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let outerInstance = OuterClass()\nouterInstance.performTask()\n\nlet innerInstance = OuterClass.InnerClass()\ninnerInstance.execute(innerTask: \"Sample Task\")\n"}],"position":{"start":{"line":49,"column":1,"offset":1530},"end":{"line":55,"column":4,"offset":1696}}},"children":"let outerInstance = OuterClass()\nouterInstance.performTask()\n\nlet innerInstance = OuterClass.InnerClass()\ninnerInstance.execute(innerTask: \"Sample Task\")\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 코드는 다음과 같은 출력을 생성합니다:"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Outer task is performed\nInner task Sample Task is executed\n"}],"position":{"start":{"line":59,"column":1,"offset":1723},"end":{"line":62,"column":4,"offset":1789}}},"children":"Outer task is performed\nInner task Sample Task is executed\n"}}]}],"\n",["$","h2",null,{"id":"e4368ec8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 이점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol을 사용하면 다음과 같은 이점을 얻을 수 있습니다:"}],"\n",["$","h3",null,{"id":"2c35ec09","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"모듈화된 코드 구조"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol을 사용하면 관련된 기능들을 하나의 큰 그룹 안에 모아서 보다 직관적이고 관리하기 쉬운 코드를 작성할 수 있습니다. 이는 특히 큰 규모의 프로젝트에서 기능별로 모듈화하여 작업할 때 매우 유용합니다."}],"\n",["$","h3",null,{"id":"bb209bc2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"이름 공간 충돌 방지"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"여러 프로토콜을 중첩하여 사용하면 동일한 이름의 프로토콜이나 메서드가 다수 존재할 때 발생할 수 있는 충돌을 피할 수 있습니다. 중첩된 프로토콜은 외부 프로토콜의 이름 공간 내에 존재하므로, 충돌 가능성이 줄어듭니다."}],"\n",["$","h3",null,{"id":"73be598e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"코드 재사용성 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"동일한 구조와 기능을 여러 곳에서 반복하여 사용할 수 있으므로, 코드 재사용성이 크게 향상됩니다. 이는 중복된 코드를 줄이고 유지보수성을 높이는 데 기여합니다."}],"\n",["$","h2",null,{"id":"e748666d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실제 애플리케이션에서의 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"실제 애플리케이션에서는 네트워크 요청과 응답을 처리하는 레이어에서 Nested Protocol을 활용할 수 있습니다. 예를 들어:"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol NetworkService {\n    func fetchData(url: String)\n\n    protocol NetworkDelegate {\n        func didReceiveData(data: Data)\n        func didFailWithError(error: Error)\n    }\n}\n"}],"position":{"start":{"line":84,"column":1,"offset":2344},"end":{"line":93,"column":4,"offset":2538}}},"children":"protocol NetworkService {\n    func fetchData(url: String)\n\n    protocol NetworkDelegate {\n        func didReceiveData(data: Data)\n        func didFailWithError(error: Error)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 프로토콜은 네트워크 요청을 수행하고 응답을 받는 방법을 정의하며, 네트워크 응답을 처리하기 위한 델리게이트 메서드도 포함합니다. 이를 구현하는 클래스는 다음과 같을 수 있습니다."}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class APIService: NetworkService {\n    var delegate: NetworkService.NetworkDelegate?\n\n    func fetchData(url: String) {\n        // 네트워크 요청 예제 코드\n        let data = Data() // 서버 응답을 담는 Data 객체\n        delegate?.didReceiveData(data: data)\n    }\n\n    class NetworkHandler: NetworkService.NetworkDelegate {\n        func didReceiveData(data: Data) {\n            print(\"Received data: \\(data)\")\n        }\n\n        func didFailWithError(error: Error) {\n            print(\"Failed with error: \\(error.localizedDescription)\")\n        }\n    }\n}\n"}],"position":{"start":{"line":97,"column":1,"offset":2643},"end":{"line":117,"column":4,"offset":3189}}},"children":"class APIService: NetworkService {\n    var delegate: NetworkService.NetworkDelegate?\n\n    func fetchData(url: String) {\n        // 네트워크 요청 예제 코드\n        let data = Data() // 서버 응답을 담는 Data 객체\n        delegate?.didReceiveData(data: data)\n    }\n\n    class NetworkHandler: NetworkService.NetworkDelegate {\n        func didReceiveData(data: Data) {\n            print(\"Received data: \\(data)\")\n        }\n\n        func didFailWithError(error: Error) {\n            print(\"Failed with error: \\(error.localizedDescription)\")\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"APIService","position":{"start":{"line":119,"column":4,"offset":3194},"end":{"line":119,"column":16,"offset":3206}}}],"position":{"start":{"line":119,"column":4,"offset":3194},"end":{"line":119,"column":16,"offset":3206}}},"children":"APIService"}}]," 클래스가 네트워크 요청을 수행하고, 델리게이트 패턴을 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkHandler","position":{"start":{"line":119,"column":50,"offset":3240},"end":{"line":119,"column":66,"offset":3256}}}],"position":{"start":{"line":119,"column":50,"offset":3240},"end":{"line":119,"column":66,"offset":3256}}},"children":"NetworkHandler"}}]," 클래스에서 응답을 처리하는 구조입니다. 이처럼 Nested Protocol을 사용하여 네트워크 레이어에서의 역할 분담과 코드 모듈화를 달성할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol을 사용하면 iOS 개발 시 모듈화된 관리와 코드 재사용성을 높일 수 있습니다. Swift의 강력한 프로토콜 기능을 잘 활용하여 더 간결하고 효율적인 코드를 작성해보세요. 다양한 상황에서 Nested Protocol을 응용할 수 있으며, 이를 통해 더 좋은 애플리케이션을 만들 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"iOS 개발: Swift Nested Protocol 활용법","toc":[{"tagName":"h1","title":"iOS 개발: Swift Nested Protocol 활용법","id":"5c0b9fdd"},{"tagName":"h2","title":"Nested Protocol의 기본 개념","id":"0690c611"},{"tagName":"h2","title":"Nested Protocol의 문법","id":"70eeb626"},{"tagName":"h2","title":"Nested Protocol의 사용 예제","id":"4052e98e"},{"tagName":"h2","title":"Nested Protocol의 이점","id":"e4368ec8"},{"tagName":"h3","title":"모듈화된 코드 구조","id":"2c35ec09"},{"tagName":"h3","title":"이름 공간 충돌 방지","id":"bb209bc2"},{"tagName":"h3","title":"코드 재사용성 향상","id":"73be598e"},{"tagName":"h2","title":"실제 애플리케이션에서의 예제","id":"e748666d"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
