1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift%EC%97%90%EC%84%9C-DispatchQueue%EC%99%80-weak-self%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-97d8a466","d"],{"children":["__PAGE__?{\"slug\":\"iOS-개발-Swift에서-DispatchQueue와-weak-self의-관계-이해하기-97d8a466\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift%EC%97%90%EC%84%9C-DispatchQueue%EC%99%80-weak-self%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-97d8a466","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS-개발-Swift에서-DispatchQueue와-weak-self의-관계-이해하기-97d8a466\"}"},"styles":[]}],"segment":["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift%EC%97%90%EC%84%9C-DispatchQueue%EC%99%80-weak-self%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-97d8a466","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"본 글은 iOS 개발 과정에서 Swift의 중요한 개념인 DispatchQueue와 [weak self]의 관계를 상세히 설명합니다. DispatchQueue는 비동기 코드 실행을 관리하는 주요 도구이며, [weak self]는 메모리 관리 및 잠재적 메모리 누수를 피하는 방법입니다. 이 두 개념을 함께 활용하는 방법을 알아봅니다."}],["$","meta","3",{"name":"keywords","content":"iOS,Swift,DispatchQueue,weak self"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C-Swift%EC%97%90%EC%84%9C-DispatchQueue%EC%99%80-weak-self%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-97d8a466"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"본 글은 iOS 개발 과정에서 Swift의 중요한 개념인 DispatchQueue와 [weak self]의 관계를 상세히 설명합니다. DispatchQueue는 비동기 코드 실행을 관리하는 주요 도구이며, [weak self]는 메모리 관리 및 잠재적 메모리 누수를 피하는 방법입니다. 이 두 개념을 함께 활용하는 방법을 알아봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C-Swift%EC%97%90%EC%84%9C-DispatchQueue%EC%99%80-weak-self%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-97d8a466"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"본 글은 iOS 개발 과정에서 Swift의 중요한 개념인 DispatchQueue와 [weak self]의 관계를 상세히 설명합니다. DispatchQueue는 비동기 코드 실행을 관리하는 주요 도구이며, [weak self]는 메모리 관리 및 잠재적 메모리 누수를 피하는 방법입니다. 이 두 개념을 함께 활용하는 방법을 알아봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-26"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"f99b6960","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 개발에서는 비동기 프로그래밍과 메모리 관리가 중요한 요소입니다. 이 글에서는 Swift 프로그래밍에서 흔히 사용되는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":4,"column":70,"offset":125},"end":{"line":4,"column":85,"offset":140}}}],"position":{"start":{"line":4,"column":70,"offset":125},"end":{"line":4,"column":85,"offset":140}}},"children":"DispatchQueue"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":4,"column":87,"offset":142},"end":{"line":4,"column":100,"offset":155}}}],"position":{"start":{"line":4,"column":87,"offset":142},"end":{"line":4,"column":100,"offset":155}}},"children":"[weak self]"}}]," 키워드의 관계를 깊이 있게 다뤄보겠습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":4,"column":125,"offset":180},"end":{"line":4,"column":140,"offset":195}}}],"position":{"start":{"line":4,"column":125,"offset":180},"end":{"line":4,"column":140,"offset":195}}},"children":"DispatchQueue"}}],"는 코드를 비동기적으로 실행하는 데 사용되며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":4,"column":166,"offset":221},"end":{"line":4,"column":179,"offset":234}}}],"position":{"start":{"line":4,"column":166,"offset":221},"end":{"line":4,"column":179,"offset":234}}},"children":"[weak self]"}}],"는 클로저 내에서 순환 참조로 인해 발생하는 메모리 누수를 방지하는 데 도움이 됩니다."]}],"\n",["$","h2",null,{"id":"7355bd4c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"DispatchQueue란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":8,"column":1,"offset":304},"end":{"line":8,"column":16,"offset":319}}}],"position":{"start":{"line":8,"column":1,"offset":304},"end":{"line":8,"column":16,"offset":319}}},"children":"DispatchQueue"}}],"는 Grand Central Dispatch(GCD)라는 Apple의 기술을 바탕으로 하는 API로, 여러 작업을 비동기적으로 실행할 수 있게 해줍니다. 이는 단일 스레드에서 실행되거나, 여러 스레드에서 동시에 실행될 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":8,"column":146,"offset":449},"end":{"line":8,"column":161,"offset":464}}}],"position":{"start":{"line":8,"column":146,"offset":449},"end":{"line":8,"column":161,"offset":464}}},"children":"DispatchQueue"}}],"는 크게 두 종류로 나뉩니다:"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"직렬 큐(Serial Queue):"}]," 한 번에 하나의 작업만 처리가능합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"동시 큐(Concurrent Queue):"}]," 여러 작업을 동시에 실행할 수 있습니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 다음 코드는 직렬 큐를 생성하고 작업을 추가하는 방식입니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let serialQueue = DispatchQueue(label: \"com.example.serialQueue\")\nserialQueue.async {\n    print(\"This is a task on the serial queue\")\n}\n"}],"position":{"start":{"line":15,"column":1,"offset":626},"end":{"line":20,"column":4,"offset":774}}},"children":"let serialQueue = DispatchQueue(label: \"com.example.serialQueue\")\nserialQueue.async {\n    print(\"This is a task on the serial queue\")\n}\n"}}]}],"\n",["$","h2",null,{"id":"a165a826","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"[weak self]란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 클로저는 기본적으로 강한 참조를 갖습니다. 이는 대부분의 상황에서는 문제가 없지만, 특히 비동기 코드에서 순환 참조(Circular Reference)로 인한 메모리 누수가 발생할 수 있습니다. 이를 피하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":24,"column":128,"offset":921},"end":{"line":24,"column":141,"offset":934}}}],"position":{"start":{"line":24,"column":128,"offset":921},"end":{"line":24,"column":141,"offset":934}}},"children":"[weak self]"}}],"를 사용하여 약한 참조를 설정할 수 있습니다. 약한 참조는 객체가 메모리에서 해제되었는지 여부를 확인하고, 해제되었을 경우 자동으로 nil로 설정됩니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":26,"column":5,"offset":1025},"end":{"line":26,"column":18,"offset":1038}}}],"position":{"start":{"line":26,"column":5,"offset":1025},"end":{"line":26,"column":18,"offset":1038}}},"children":"[weak self]"}}],"를 사용한 예제입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewController: UIViewController {\n    var name: String = \"Hello\"\n\n    func asyncOperation() {\n        let queue = DispatchQueue(label: \"com.example.asyncQueue\")\n        queue.async { [weak self] in\n            guard let self = self else { return }\n            self.name = \"World\"\n            print(self.name)\n        }\n    }\n}\n"}],"position":{"start":{"line":28,"column":1,"offset":1052},"end":{"line":41,"column":4,"offset":1398}}},"children":"class ViewController: UIViewController {\n    var name: String = \"Hello\"\n\n    func asyncOperation() {\n        let queue = DispatchQueue(label: \"com.example.asyncQueue\")\n        queue.async { [weak self] in\n            guard let self = self else { return }\n            self.name = \"World\"\n            print(self.name)\n        }\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"056fce2a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"DispatchQueue와 [weak self]의 관계"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["비동기 코드 실행 시 메모리 누수를 방지하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":45,"column":29,"offset":1463},"end":{"line":45,"column":44,"offset":1478}}}],"position":{"start":{"line":45,"column":29,"offset":1463},"end":{"line":45,"column":44,"offset":1478}}},"children":"DispatchQueue"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":45,"column":46,"offset":1480},"end":{"line":45,"column":59,"offset":1493}}}],"position":{"start":{"line":45,"column":46,"offset":1480},"end":{"line":45,"column":59,"offset":1493}}},"children":"[weak self]"}}],"를 함께 활용할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":45,"column":76,"offset":1510},"end":{"line":45,"column":91,"offset":1525}}}],"position":{"start":{"line":45,"column":76,"offset":1510},"end":{"line":45,"column":91,"offset":1525}}},"children":"DispatchQueue"}}],"는 비동기 작업을 큐에 추가하여 실행하는 반면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":45,"column":118,"offset":1552},"end":{"line":45,"column":131,"offset":1565}}}],"position":{"start":{"line":45,"column":118,"offset":1552},"end":{"line":45,"column":131,"offset":1565}}},"children":"[weak self]"}}],"는 그 작업이 클로저 내에서 순환 참조를 방지합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["많은 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":47,"column":8,"offset":1603},"end":{"line":47,"column":24,"offset":1619}}}],"position":{"start":{"line":47,"column":8,"offset":1603},"end":{"line":47,"column":24,"offset":1619}}},"children":"ViewController"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":47,"column":26,"offset":1621},"end":{"line":47,"column":34,"offset":1629}}}],"position":{"start":{"line":47,"column":26,"offset":1621},"end":{"line":47,"column":34,"offset":1629}}},"children":"UIView"}}],"같이 사용자 인터페이스 관련 객체는 비동기 작업을 수행하는 동안 메모리에서 해제될 수 있습니다. 이럴 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":47,"column":93,"offset":1688},"end":{"line":47,"column":106,"offset":1701}}}],"position":{"start":{"line":47,"column":93,"offset":1688},"end":{"line":47,"column":106,"offset":1701}}},"children":"[weak self]"}}],"를 사용하면 메모리 누수를 방지할 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 실제 예제를 통해 두 개념을 통합하는 방법을 보여줍니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class DataFetcher {\n    var completionHandler: ((String) -> Void)?\n\n    func fetchData() {\n        let queue = DispatchQueue.global(qos: .background)\n\n        queue.async { [weak self] in\n            guard let self = self else { return }\n\n            // 가상 데이터 패칭 시뮬레이션\n            Thread.sleep(forTimeInterval: 2)\n            let data = \"Fetched Data\"\n\n            DispatchQueue.main.async {\n                self.completionHandler?(data)\n            }\n        }\n    }\n}\n\nclass ViewController: UIViewController {\n    let dataFetcher = DataFetcher()\n    var dataLabel: UILabel!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        dataLabel = UILabel()\n        view.addSubview(dataLabel)\n\n        dataFetcher.completionHandler = { [weak self] data in\n            self?.dataLabel.text = data\n        }\n\n        dataFetcher.fetchData()\n    }\n}\n"}],"position":{"start":{"line":51,"column":1,"offset":1766},"end":{"line":89,"column":4,"offset":2638}}},"children":"class DataFetcher {\n    var completionHandler: ((String) -> Void)?\n\n    func fetchData() {\n        let queue = DispatchQueue.global(qos: .background)\n\n        queue.async { [weak self] in\n            guard let self = self else { return }\n\n            // 가상 데이터 패칭 시뮬레이션\n            Thread.sleep(forTimeInterval: 2)\n            let data = \"Fetched Data\"\n\n            DispatchQueue.main.async {\n                self.completionHandler?(data)\n            }\n        }\n    }\n}\n\nclass ViewController: UIViewController {\n    let dataFetcher = DataFetcher()\n    var dataLabel: UILabel!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        dataLabel = UILabel()\n        view.addSubview(dataLabel)\n\n        dataFetcher.completionHandler = { [weak self] data in\n            self?.dataLabel.text = data\n        }\n\n        dataFetcher.fetchData()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DataFetcher","position":{"start":{"line":91,"column":8,"offset":2647},"end":{"line":91,"column":21,"offset":2660}}}],"position":{"start":{"line":91,"column":8,"offset":2647},"end":{"line":91,"column":21,"offset":2660}}},"children":"DataFetcher"}}],"는 비동기적으로 데이터를 가져오고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":91,"column":41,"offset":2680},"end":{"line":91,"column":57,"offset":2696}}}],"position":{"start":{"line":91,"column":41,"offset":2680},"end":{"line":91,"column":57,"offset":2696}}},"children":"ViewController"}}],"는 가져온 데이터를 사용자 인터페이스에 업데이트합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":91,"column":88,"offset":2727},"end":{"line":91,"column":101,"offset":2740}}}],"position":{"start":{"line":91,"column":88,"offset":2727},"end":{"line":91,"column":101,"offset":2740}}},"children":"[weak self]"}}],"를 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":91,"column":108,"offset":2747},"end":{"line":91,"column":124,"offset":2763}}}],"position":{"start":{"line":91,"column":108,"offset":2747},"end":{"line":91,"column":124,"offset":2763}}},"children":"ViewController"}}],"가 메모리에서 해제되는 것을 대비하고, 안전하게 클로저 내에서 접근할 수 있도록 합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":95,"column":1,"offset":2821},"end":{"line":95,"column":16,"offset":2836}}}],"position":{"start":{"line":95,"column":1,"offset":2821},"end":{"line":95,"column":16,"offset":2836}}},"children":"DispatchQueue"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":95,"column":18,"offset":2838},"end":{"line":95,"column":31,"offset":2851}}}],"position":{"start":{"line":95,"column":18,"offset":2838},"end":{"line":95,"column":31,"offset":2851}}},"children":"[weak self]"}}],"는 Swift에서 비동기 프로그래밍과 메모리 관리에 필수적인 도구입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":95,"column":72,"offset":2892},"end":{"line":95,"column":87,"offset":2907}}}],"position":{"start":{"line":95,"column":72,"offset":2892},"end":{"line":95,"column":87,"offset":2907}}},"children":"DispatchQueue"}}],"를 사용하여 비동기 작업을 쉽게 관리하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[weak self]","position":{"start":{"line":95,"column":111,"offset":2931},"end":{"line":95,"column":124,"offset":2944}}}],"position":{"start":{"line":95,"column":111,"offset":2931},"end":{"line":95,"column":124,"offset":2944}}},"children":"[weak self]"}}],"를 통해 잠재적인 메모리 누수를 예방할 수 있습니다. 이를 통해 안정적이고 효율적인 코드를 작성할 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"iOS 개발자라면 이 두 가지 개념을 깊이 이해하고, 실제 프로젝트에서 어떻게 활용할지 숙지하는 것이 중요합니다. 이를 통해 더 깔끔하고 효율적인 앱을 개발할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기","toc":[{"tagName":"h1","title":"iOS 개발: Swift에서 DispatchQueue와 [weak self]의 관계 이해하기","id":"f99b6960"},{"tagName":"h2","title":"DispatchQueue란?","id":"7355bd4c"},{"tagName":"h2","title":"[weak self]란?","id":"a165a826"},{"tagName":"h2","title":"DispatchQueue와 [weak self]의 관계","id":"056fce2a"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
