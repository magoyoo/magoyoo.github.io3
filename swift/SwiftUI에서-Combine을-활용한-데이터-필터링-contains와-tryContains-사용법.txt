1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI%EC%97%90%EC%84%9C-Combine%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%84%ED%84%B0%EB%A7%81-contains%EC%99%80-tryContains-%EC%82%AC%EC%9A%A9%EB%B2%95","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI에서-Combine을-활용한-데이터-필터링-contains와-tryContains-사용법\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI%EC%97%90%EC%84%9C-Combine%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%84%ED%84%B0%EB%A7%81-contains%EC%99%80-tryContains-%EC%82%AC%EC%9A%A9%EB%B2%95","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI에서-Combine을-활용한-데이터-필터링-contains와-tryContains-사용법\"}"},"styles":[]}],"segment":["slug","SwiftUI%EC%97%90%EC%84%9C-Combine%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%84%ED%84%B0%EB%A7%81-contains%EC%99%80-tryContains-%EC%82%AC%EC%9A%A9%EB%B2%95","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI와 Combine을 사용하여 데이터 필터링을 구현하는 방법을 알아봅니다. 이 글에서는 contains와 tryContains 연산자를 사용해 배열의 특정 값을 확인하고, 오류를 처리하는 방법을 설명합니다. 실전 예제를 통해 사용자 목록에서 특정 이름을 검색하는 기능을 구현해 보세요."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,Combine,Swift"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-Combine%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%84%ED%84%B0%EB%A7%81-contains%EC%99%80-tryContains-%EC%82%AC%EC%9A%A9%EB%B2%95"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI와 Combine을 사용하여 데이터 필터링을 구현하는 방법을 알아봅니다. 이 글에서는 contains와 tryContains 연산자를 사용해 배열의 특정 값을 확인하고, 오류를 처리하는 방법을 설명합니다. 실전 예제를 통해 사용자 목록에서 특정 이름을 검색하는 기능을 구현해 보세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-Combine%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%84%ED%84%B0%EB%A7%81-contains%EC%99%80-tryContains-%EC%82%AC%EC%9A%A9%EB%B2%95"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI와 Combine을 사용하여 데이터 필터링을 구현하는 방법을 알아봅니다. 이 글에서는 contains와 tryContains 연산자를 사용해 배열의 특정 값을 확인하고, 오류를 처리하는 방법을 설명합니다. 실전 예제를 통해 사용자 목록에서 특정 이름을 검색하는 기능을 구현해 보세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T53d,import SwiftUI
import Combine

struct ContentView: View {
    @State private var containsValue = false
    @State private var errorMessage: String?
    @State private var cancellable: AnyCancellable?

    var body: some View {
        VStack {
            Text("Contains value: \(containsValue ? "Yes" : "No")")
                .padding()

            if let errorMessage = errorMessage {
                Text("Error: \(errorMessage)")
                    .foregroundColor(.red)
            }

            Button("Check Value with Error Handling") {
                checkContainsValueWithErrorHandling()
            }
        }
    }

    func checkContainsValueWithErrorHandling() {
        let values = [1, 2, 3, 4, 5].publisher
        cancellable = values
            .tryContains { value in
                if value == 4 {
                    throw NSError(domain: "ValueError", code: 100, userInfo: nil)
                }
                return value == 3
            }
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        errorMessage = error.localizedDescription
                    }
                },
                receiveValue: { result in
                    containsValue = result
                }
            )
    }
}
f:T53d,import SwiftUI
import Combine

struct ContentView: View {
    @State private var containsValue = false
    @State private var errorMessage: String?
    @State private var cancellable: AnyCancellable?

    var body: some View {
        VStack {
            Text("Contains value: \(containsValue ? "Yes" : "No")")
                .padding()

            if let errorMessage = errorMessage {
                Text("Error: \(errorMessage)")
                    .foregroundColor(.red)
            }

            Button("Check Value with Error Handling") {
                checkContainsValueWithErrorHandling()
            }
        }
    }

    func checkContainsValueWithErrorHandling() {
        let values = [1, 2, 3, 4, 5].publisher
        cancellable = values
            .tryContains { value in
                if value == 4 {
                    throw NSError(domain: "ValueError", code: 100, userInfo: nil)
                }
                return value == 3
            }
            .sink(
                receiveCompletion: { completion in
                    if case .failure(let error) = completion {
                        errorMessage = error.localizedDescription
                    }
                },
                receiveValue: { result in
                    containsValue = result
                }
            )
    }
}
10:T4a8,import SwiftUI
import Combine

struct User: Identifiable {
    let id: Int
    let name: String
}

struct ContentView: View {
    @State private var userList: [User] = [
        User(id: 1, name: "Alice"),
        User(id: 2, name: "Bob"),
        User(id: 3, name: "Charlie"),
        User(id: 4, name: "David")
    ]
    @State private var searchName: String = ""
    @State private var containsUser: Bool = false
    @State private var cancellable: AnyCancellable?

    var body: some View {
        VStack {
            TextField("Enter name to search", text: $searchName)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            Button("Check User") {
                checkContainsUser()
            }

            Text("Contains user: \(containsUser ? "Yes" : "No")")
                .padding()

            List(userList) { user in
                Text(user.name)
            }
        }
        .padding()
    }

    func checkContainsUser() {
        cancellable = userList.publisher
            .map { $0.name }
            .contains(searchName)
            .sink { result in
                containsUser = result
            }
    }
}
11:T4a8,import SwiftUI
import Combine

struct User: Identifiable {
    let id: Int
    let name: String
}

struct ContentView: View {
    @State private var userList: [User] = [
        User(id: 1, name: "Alice"),
        User(id: 2, name: "Bob"),
        User(id: 3, name: "Charlie"),
        User(id: 4, name: "David")
    ]
    @State private var searchName: String = ""
    @State private var containsUser: Bool = false
    @State private var cancellable: AnyCancellable?

    var body: some View {
        VStack {
            TextField("Enter name to search", text: $searchName)
                .textFieldStyle(RoundedBorderTextFieldStyle())
                .padding()

            Button("Check User") {
                checkContainsUser()
            }

            Text("Contains user: \(containsUser ? "Yes" : "No")")
                .padding()

            List(userList) { user in
                Text(user.name)
            }
        }
        .padding()
    }

    func checkContainsUser() {
        cancellable = userList.publisher
            .map { $0.name }
            .contains(searchName)
            .sink { result in
                containsUser = result
            }
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-07"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"ff6a0357","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI는 iOS 앱 개발을 위한 강력한 프레임워크로, Combine은 비동기 이벤트 처리 및 반응형 프로그래밍을 지원하는 프레임워크입니다. 이 두 프레임워크를 결합하면 데이터 필터링과 상태 관리를 보다 쉽게 할 수 있습니다. 이번 글에서는 Combine의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":4,"column":148,"offset":210},"end":{"line":4,"column":158,"offset":220}}}],"position":{"start":{"line":4,"column":148,"offset":210},"end":{"line":4,"column":158,"offset":220}}},"children":"contains"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tryContains","position":{"start":{"line":4,"column":160,"offset":222},"end":{"line":4,"column":173,"offset":235}}}],"position":{"start":{"line":4,"column":160,"offset":222},"end":{"line":4,"column":173,"offset":235}}},"children":"tryContains"}}]," 연산자를 사용하여 SwiftUI에서 데이터를 필터링하는 방법을 자세히 알아보겠습니다."]}],"\n",["$","h3",null,{"id":"9c32d287","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. Combine과 SwiftUI 소개"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Combine은 Apple이 제공하는 반응형 프로그래밍 프레임워크로, 비동기 이벤트를 처리하고 데이터를 스트림 형태로 관리할 수 있습니다. Combine은 퍼블리셔(Publisher)와 서브스크라이버(Subscriber) 개념을 기반으로 하며, 다양한 연산자를 제공하여 데이터를 변환하고 필터링할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 선언형 UI 프레임워크로, 상태 기반의 UI 업데이트를 간편하게 할 수 있습니다. Combine과 SwiftUI를 함께 사용하면 데이터 변경에 따라 UI를 자동으로 업데이트할 수 있어 매우 효율적입니다."}],"\n",["$","h3",null,{"id":"1d5f8a77","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. contains 연산자 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":14,"column":1,"offset":637},"end":{"line":14,"column":11,"offset":647}}}],"position":{"start":{"line":14,"column":1,"offset":637},"end":{"line":14,"column":11,"offset":647}}},"children":"contains"}}]," 연산자는 퍼블리셔가 특정 요소를 포함하고 있는지 여부를 확인합니다. 예를 들어, 배열 퍼블리셔가 특정 값을 포함하는지 검사할 때 유용합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":16,"column":5,"offset":732},"end":{"line":16,"column":15,"offset":742}}}],"position":{"start":{"line":16,"column":5,"offset":732},"end":{"line":16,"column":15,"offset":742}}},"children":"contains"}}]," 연산자를 사용하여 배열에 특정 값이 있는지 확인하는 예제입니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\nimport Combine\n\nstruct ContentView: View {\n    @State private var containsValue = false\n    @State private var cancellable: AnyCancellable?\n\n    var body: some View {\n        VStack {\n            Text(\"Contains value: \\(containsValue ? \"Yes\" : \"No\")\")\n                .padding()\n\n            Button(\"Check Value\") {\n                checkContainsValue()\n            }\n        }\n    }\n\n    func checkContainsValue() {\n        let values = [1, 2, 3, 4, 5].publisher\n        cancellable = values\n            .contains(3)\n            .sink { result in\n                containsValue = result\n            }\n    }\n}\n"}],"position":{"start":{"line":18,"column":1,"offset":780},"end":{"line":46,"column":4,"offset":1415}}},"children":"import SwiftUI\nimport Combine\n\nstruct ContentView: View {\n    @State private var containsValue = false\n    @State private var cancellable: AnyCancellable?\n\n    var body: some View {\n        VStack {\n            Text(\"Contains value: \\(containsValue ? \"Yes\" : \"No\")\")\n                .padding()\n\n            Button(\"Check Value\") {\n                checkContainsValue()\n            }\n        }\n    }\n\n    func checkContainsValue() {\n        let values = [1, 2, 3, 4, 5].publisher\n        cancellable = values\n            .contains(3)\n            .sink { result in\n                containsValue = result\n            }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 버튼을 눌러 배열 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[1, 2, 3, 4, 5]","position":{"start":{"line":48,"column":19,"offset":1435},"end":{"line":48,"column":36,"offset":1452}}}],"position":{"start":{"line":48,"column":19,"offset":1435},"end":{"line":48,"column":36,"offset":1452}}},"children":"[1, 2, 3, 4, 5]"}}],"가 값 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"3","position":{"start":{"line":48,"column":40,"offset":1456},"end":{"line":48,"column":43,"offset":1459}}}],"position":{"start":{"line":48,"column":40,"offset":1456},"end":{"line":48,"column":43,"offset":1459}}},"children":"3"}}],"을 포함하는지 확인합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":48,"column":58,"offset":1474},"end":{"line":48,"column":68,"offset":1484}}}],"position":{"start":{"line":48,"column":58,"offset":1474},"end":{"line":48,"column":68,"offset":1484}}},"children":"contains"}}]," 연산자는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Bool","position":{"start":{"line":48,"column":74,"offset":1490},"end":{"line":48,"column":80,"offset":1496}}}],"position":{"start":{"line":48,"column":74,"offset":1490},"end":{"line":48,"column":80,"offset":1496}}},"children":"Bool"}}]," 값을 반환하며, 결과는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"containsValue","position":{"start":{"line":48,"column":94,"offset":1510},"end":{"line":48,"column":109,"offset":1525}}}],"position":{"start":{"line":48,"column":94,"offset":1510},"end":{"line":48,"column":109,"offset":1525}}},"children":"containsValue"}}]," 상태 변수에 저장됩니다."]}],"\n",["$","h3",null,{"id":"ed97a47d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. tryContains 연산자 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tryContains","position":{"start":{"line":52,"column":1,"offset":1569},"end":{"line":52,"column":14,"offset":1582}}}],"position":{"start":{"line":52,"column":1,"offset":1569},"end":{"line":52,"column":14,"offset":1582}}},"children":"tryContains"}}]," 연산자는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":52,"column":20,"offset":1588},"end":{"line":52,"column":30,"offset":1598}}}],"position":{"start":{"line":52,"column":20,"offset":1588},"end":{"line":52,"column":30,"offset":1598}}},"children":"contains"}}],"와 유사하지만, 오류가 발생할 수 있는 조건을 처리할 수 있습니다. 주로 예외 처리가 필요한 경우 사용됩니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tryContains","position":{"start":{"line":54,"column":5,"offset":1665},"end":{"line":54,"column":18,"offset":1678}}}],"position":{"start":{"line":54,"column":5,"offset":1665},"end":{"line":54,"column":18,"offset":1678}}},"children":"tryContains"}}]," 연산자를 사용하여 배열에 특정 값이 있는지 확인하는 예제입니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":56,"column":1,"offset":1716},"end":{"line":102,"column":4,"offset":3069}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 배열 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[1, 2, 3, 4, 5]","position":{"start":{"line":104,"column":12,"offset":3082},"end":{"line":104,"column":29,"offset":3099}}}],"position":{"start":{"line":104,"column":12,"offset":3082},"end":{"line":104,"column":29,"offset":3099}}},"children":"[1, 2, 3, 4, 5]"}}],"의 값 중 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"3","position":{"start":{"line":104,"column":35,"offset":3105},"end":{"line":104,"column":38,"offset":3108}}}],"position":{"start":{"line":104,"column":35,"offset":3105},"end":{"line":104,"column":38,"offset":3108}}},"children":"3"}}],"이 있는지 확인하지만, 값 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"4","position":{"start":{"line":104,"column":53,"offset":3123},"end":{"line":104,"column":56,"offset":3126}}}],"position":{"start":{"line":104,"column":53,"offset":3123},"end":{"line":104,"column":56,"offset":3126}}},"children":"4"}}],"가 발견되면 오류를 발생시킵니다. 오류가 발생하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"errorMessage","position":{"start":{"line":104,"column":84,"offset":3154},"end":{"line":104,"column":98,"offset":3168}}}],"position":{"start":{"line":104,"column":84,"offset":3154},"end":{"line":104,"column":98,"offset":3168}}},"children":"errorMessage"}}]," 상태 변수에 오류 메시지가 저장됩니다."]}],"\n",["$","h3",null,{"id":"61534ac2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4. 실전 예제: 사용자 목록 필터링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 Combine의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":108,"column":13,"offset":3230},"end":{"line":108,"column":23,"offset":3240}}}],"position":{"start":{"line":108,"column":13,"offset":3230},"end":{"line":108,"column":23,"offset":3240}}},"children":"contains"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tryContains","position":{"start":{"line":108,"column":25,"offset":3242},"end":{"line":108,"column":38,"offset":3255}}}],"position":{"start":{"line":108,"column":25,"offset":3242},"end":{"line":108,"column":38,"offset":3255}}},"children":"tryContains"}}]," 연산자를 사용하여 사용자 목록을 필터링하는 실전 예제를 살펴보겠습니다. 사용자 목록에서 특정 이름을 포함하는지 확인하는 UI를 만들어 보겠습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":110,"column":1,"offset":3339},"end":{"line":159,"column":4,"offset":4543}}},"children":"$11"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TextField","position":{"start":{"line":161,"column":9,"offset":4553},"end":{"line":161,"column":20,"offset":4564}}}],"position":{"start":{"line":161,"column":9,"offset":4553},"end":{"line":161,"column":20,"offset":4564}}},"children":"TextField"}}],"를 통해 사용자가 입력한 이름을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"searchName","position":{"start":{"line":161,"column":38,"offset":4582},"end":{"line":161,"column":50,"offset":4594}}}],"position":{"start":{"line":161,"column":38,"offset":4582},"end":{"line":161,"column":50,"offset":4594}}},"children":"searchName"}}]," 상태 변수에 저장합니다. 버튼을 눌러 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"searchName","position":{"start":{"line":161,"column":72,"offset":4616},"end":{"line":161,"column":84,"offset":4628}}}],"position":{"start":{"line":161,"column":72,"offset":4616},"end":{"line":161,"column":84,"offset":4628}}},"children":"searchName"}}],"이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"userList","position":{"start":{"line":161,"column":86,"offset":4630},"end":{"line":161,"column":96,"offset":4640}}}],"position":{"start":{"line":161,"column":86,"offset":4630},"end":{"line":161,"column":96,"offset":4640}}},"children":"userList"}}],"에 있는지 확인합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":161,"column":109,"offset":4653},"end":{"line":161,"column":119,"offset":4663}}}],"position":{"start":{"line":161,"column":109,"offset":4653},"end":{"line":161,"column":119,"offset":4663}}},"children":"contains"}}]," 연산자를 사용하여 필터링 결과를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"containsUser","position":{"start":{"line":161,"column":138,"offset":4682},"end":{"line":161,"column":152,"offset":4696}}}],"position":{"start":{"line":161,"column":138,"offset":4682},"end":{"line":161,"column":152,"offset":4696}}},"children":"containsUser"}}]," 상태 변수에 저장합니다."]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Combine의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contains","position":{"start":{"line":165,"column":10,"offset":4729},"end":{"line":165,"column":20,"offset":4739}}}],"position":{"start":{"line":165,"column":10,"offset":4729},"end":{"line":165,"column":20,"offset":4739}}},"children":"contains"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tryContains","position":{"start":{"line":165,"column":22,"offset":4741},"end":{"line":165,"column":35,"offset":4754}}}],"position":{"start":{"line":165,"column":22,"offset":4741},"end":{"line":165,"column":35,"offset":4754}}},"children":"tryContains"}}]," 연산자를 사용하면 SwiftUI에서 데이터를 효율적으로 필터링할 수 있습니다. 이 글에서는 배열의 특정 값을 확인하고, 오류를 처리하는 방법을 설명했습니다. 실전 예제를 통해 사용자 목록에서 특정 이름을 검색하는 기능을 구현해 보았습니다. Combine과 SwiftUI를 결합하여 강력하고 반응형 UI를 만들 수 있습니다. 이러한 기법을 활용하면 비동기 데이터 처리와 사용자 인터페이스 업데이트를 보다 간편하게 구현할 수 있습니다."]}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법","toc":[{"tagName":"h2","title":"SwiftUI에서 Combine을 활용한 데이터 필터링: contains와 tryContains 사용법","id":"ff6a0357"},{"tagName":"h3","title":"1. Combine과 SwiftUI 소개","id":"9c32d287"},{"tagName":"h3","title":"2. contains 연산자 사용법","id":"1d5f8a77"},{"tagName":"h3","title":"3. tryContains 연산자 사용법","id":"ed97a47d"},{"tagName":"h3","title":"4. 실전 예제: 사용자 목록 필터링","id":"61534ac2"},{"tagName":"h3","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
