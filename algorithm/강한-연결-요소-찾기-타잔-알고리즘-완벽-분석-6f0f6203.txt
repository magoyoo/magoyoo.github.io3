1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%EA%B0%95%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C-%EC%B0%BE%EA%B8%B0-%ED%83%80%EC%9E%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%99%84%EB%B2%BD-%EB%B6%84%EC%84%9D-6f0f6203","d"],{"children":["__PAGE__?{\"slug\":\"강한-연결-요소-찾기-타잔-알고리즘-완벽-분석-6f0f6203\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%EA%B0%95%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C-%EC%B0%BE%EA%B8%B0-%ED%83%80%EC%9E%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%99%84%EB%B2%BD-%EB%B6%84%EC%84%9D-6f0f6203","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"강한-연결-요소-찾기-타잔-알고리즘-완벽-분석-6f0f6203\"}"},"styles":[]}],"segment":["slug","%EA%B0%95%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C-%EC%B0%BE%EA%B8%B0-%ED%83%80%EC%9E%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%99%84%EB%B2%BD-%EB%B6%84%EC%84%9D-6f0f6203","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"강한 연결 요소는 그래프 이론에서 중요한 개념으로, 타잔 알고리즘을 이용하여 유효하게 찾을 수 있습니다. 이번 글에서는 타잔 알고리즘의 작동 원리와 사용법에 대해 상세하게 분석합니다."}],["$","meta","3",{"name":"keywords","content":"Algorithm,Graph Theory,Tarjan's Algorithm,Strongly Connected Components"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%EA%B0%95%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C-%EC%B0%BE%EA%B8%B0-%ED%83%80%EC%9E%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%99%84%EB%B2%BD-%EB%B6%84%EC%84%9D-6f0f6203"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"강한 연결 요소는 그래프 이론에서 중요한 개념으로, 타잔 알고리즘을 이용하여 유효하게 찾을 수 있습니다. 이번 글에서는 타잔 알고리즘의 작동 원리와 사용법에 대해 상세하게 분석합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%EA%B0%95%ED%95%9C-%EC%97%B0%EA%B2%B0-%EC%9A%94%EC%86%8C-%EC%B0%BE%EA%B8%B0-%ED%83%80%EC%9E%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%99%84%EB%B2%BD-%EB%B6%84%EC%84%9D-6f0f6203"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"강한 연결 요소는 그래프 이론에서 중요한 개념으로, 타잔 알고리즘을 이용하여 유효하게 찾을 수 있습니다. 이번 글에서는 타잔 알고리즘의 작동 원리와 사용법에 대해 상세하게 분석합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
e:T595,class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = defaultdict(list)
        self.Time = 0

    def add_edge(self, v, w):
        self.graph[v].append(w)

    def SCCUtil(self, u, low, disc, stack_member, st):
        disc[u] = self.Time
        low[u] = self.Time
        self.Time += 1
        stack_member[u] = True
        st.append(u)

        for v in self.graph[u]:
            if disc[v] == -1:
                self.SCCUtil(v, low, disc, stack_member, st)
                low[u] = min(low[u], low[v])
            elif stack_member[v]:
                low[u] = min(low[u], disc[v])

        w = -1  # To store stack extracted vertices
        if low[u] == disc[u]:
            while w != u:
                w = st.pop()
                print(w, end=' ')
                stack_member[w] = False
            print()

    def SCC(self):
        disc = [-1] * self.V
        low = [-1] * self.V
        stack_member = [False] * self.V
        st = []

        for i in range(self.V):
            if disc[i] == -1:
                self.SCCUtil(i, low, disc, stack_member, st)

# Driver code
if __name__ == '__main__':
    g1 = Graph(7)
    g1.add_edge(0, 1)
    g1.add_edge(1, 2)
    g1.add_edge(2, 0)
    g1.add_edge(1, 3)
    g1.add_edge(3, 4)
    g1.add_edge(4, 5)
    g1.add_edge(5, 6)
    g1.add_edge(6, 4)
    print('Strongly Connected Components in given graph:')
    g1.SCC()
f:T595,class Graph:
    def __init__(self, vertices):
        self.V = vertices
        self.graph = defaultdict(list)
        self.Time = 0

    def add_edge(self, v, w):
        self.graph[v].append(w)

    def SCCUtil(self, u, low, disc, stack_member, st):
        disc[u] = self.Time
        low[u] = self.Time
        self.Time += 1
        stack_member[u] = True
        st.append(u)

        for v in self.graph[u]:
            if disc[v] == -1:
                self.SCCUtil(v, low, disc, stack_member, st)
                low[u] = min(low[u], low[v])
            elif stack_member[v]:
                low[u] = min(low[u], disc[v])

        w = -1  # To store stack extracted vertices
        if low[u] == disc[u]:
            while w != u:
                w = st.pop()
                print(w, end=' ')
                stack_member[w] = False
            print()

    def SCC(self):
        disc = [-1] * self.V
        low = [-1] * self.V
        stack_member = [False] * self.V
        st = []

        for i in range(self.V):
            if disc[i] == -1:
                self.SCCUtil(i, low, disc, stack_member, st)

# Driver code
if __name__ == '__main__':
    g1 = Graph(7)
    g1.add_edge(0, 1)
    g1.add_edge(1, 2)
    g1.add_edge(2, 0)
    g1.add_edge(1, 3)
    g1.add_edge(3, 4)
    g1.add_edge(4, 5)
    g1.add_edge(5, 6)
    g1.add_edge(6, 4)
    print('Strongly Connected Components in given graph:')
    g1.SCC()
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/defaultBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-13"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"4d86c903","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"그래프 이론에서 강한 연결 요소(Strongly Connected Components, SCCs)는 아주 중요한 개념입니다. 강한 연결 요소는 방향 그래프에서 모든 정점들이 서로 도달 가능한 부분 그래프입니다. 이를 찾기 위해 다양한 알고리즘이 사용되지만, 그 중에서도 타잔 알고리즘(Tarjan's Algorithm)은 효율적이고 직관적입니다. 이번 글에서는 타잔 알고리즘의 기본 개념부터 코드 구현까지 상세하게 분석해보도록 하겠습니다."}],"\n",["$","h2",null,{"id":"b2aa8d25","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"타잔 알고리즘의 기본 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["타잔 알고리즘은 DFS(Depth-First Search, 깊이 우선 탐색)를 기반으로 하며, 각 정점에 대해 두 가지 중요한 정보인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"disc","position":{"start":{"line":8,"column":76,"offset":372},"end":{"line":8,"column":82,"offset":378}}}],"position":{"start":{"line":8,"column":76,"offset":372},"end":{"line":8,"column":82,"offset":378}}},"children":"disc"}}],"(discovery time, 발견 시간)와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"low","position":{"start":{"line":8,"column":107,"offset":403},"end":{"line":8,"column":112,"offset":408}}}],"position":{"start":{"line":8,"column":107,"offset":403},"end":{"line":8,"column":112,"offset":408}}},"children":"low"}}]," 값을 기록합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"disc","position":{"start":{"line":8,"column":123,"offset":419},"end":{"line":8,"column":129,"offset":425}}}],"position":{"start":{"line":8,"column":123,"offset":419},"end":{"line":8,"column":129,"offset":425}}},"children":"disc"}}]," 값은 DFS가 처음으로 그 정점에 도달한 시간을 나타내고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"low","position":{"start":{"line":8,"column":163,"offset":459},"end":{"line":8,"column":168,"offset":464}}}],"position":{"start":{"line":8,"column":163,"offset":459},"end":{"line":8,"column":168,"offset":464}}},"children":"low"}}]," 값은 해당 정점 혹은 하위 트리에서 방문할 수 있는 가장 높은 정점의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"disc","position":{"start":{"line":8,"column":208,"offset":504},"end":{"line":8,"column":214,"offset":510}}}],"position":{"start":{"line":8,"column":208,"offset":504},"end":{"line":8,"column":214,"offset":510}}},"children":"disc"}}]," 값을 저장합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"알고리즘의 큰 아이디어는 다음과 같습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["DFS를 통해 정점을 방문하며 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"disc","position":{"start":{"line":12,"column":21,"offset":567},"end":{"line":12,"column":27,"offset":573}}}],"position":{"start":{"line":12,"column":21,"offset":567},"end":{"line":12,"column":27,"offset":573}}},"children":"disc"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"low","position":{"start":{"line":12,"column":29,"offset":575},"end":{"line":12,"column":34,"offset":580}}}],"position":{"start":{"line":12,"column":29,"offset":575},"end":{"line":12,"column":34,"offset":580}}},"children":"low"}}]," 값을 갱신합니다."]}],"\n",["$","li","li-1",{"children":"정점을 스택에 저장하며, 스택의 요소들이 잠정적인 SCC에 속하는지를 추적합니다."}],"\n",["$","li","li-2",{"children":["DFS 탐색 중에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"low","position":{"start":{"line":14,"column":14,"offset":653},"end":{"line":14,"column":19,"offset":658}}}],"position":{"start":{"line":14,"column":14,"offset":653},"end":{"line":14,"column":19,"offset":658}}},"children":"low"}}]," 값이 자신의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"disc","position":{"start":{"line":14,"column":27,"offset":666},"end":{"line":14,"column":33,"offset":672}}}],"position":{"start":{"line":14,"column":27,"offset":666},"end":{"line":14,"column":33,"offset":672}}},"children":"disc"}}]," 값과 같은 정점을 찾으면, 해당 정점은 하나의 SCC의 루트입니다. 스택에서 해당 SCC의 모든 정점을 추출합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"55774bb4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"알고리즘의 의사 코드"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-plaintext","node":{"type":"element","tagName":"code","properties":{"className":["language-plaintext"]},"children":[{"type":"text","value":"initialize disc[v] and low[v] for all v to -1\ninitialize stack as empty\ninitialize onStack[v] for all v to False\n\nfunction tarjan(v):\n    disc[v] = low[v] = time\n    time += 1\n    stack.append(v)\n    onStack[v] = True\n\n    for (v, w) in edges[v]:\n        if disc[w] == -1:  # w is not visited\n            tarjan(w)\n            low[v] = min(low[v], low[w])\n        else if onStack[w]:  # w is in stack, hence in the current SCC\n            low[v] = min(low[v], disc[w])\n\n    if low[v] == disc[v]:  # v is the root of an SCC\n        while True:\n            w = stack.pop()\n            onStack[w] = False\n            add w to current SCC\n            if w == v: break\n        output current SCC\n\nfor all v:\n    if disc[v] == -1:\n        tarjan(v)\n"}],"position":{"start":{"line":18,"column":1,"offset":756},"end":{"line":47,"column":4,"offset":1515}}},"children":"initialize disc[v] and low[v] for all v to -1\ninitialize stack as empty\ninitialize onStack[v] for all v to False\n\nfunction tarjan(v):\n    disc[v] = low[v] = time\n    time += 1\n    stack.append(v)\n    onStack[v] = True\n\n    for (v, w) in edges[v]:\n        if disc[w] == -1:  # w is not visited\n            tarjan(w)\n            low[v] = min(low[v], low[w])\n        else if onStack[w]:  # w is in stack, hence in the current SCC\n            low[v] = min(low[v], disc[w])\n\n    if low[v] == disc[v]:  # v is the root of an SCC\n        while True:\n            w = stack.pop()\n            onStack[w] = False\n            add w to current SCC\n            if w == v: break\n        output current SCC\n\nfor all v:\n    if disc[v] == -1:\n        tarjan(v)\n"}}]}],"\n",["$","h2",null,{"id":"d0b35796","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"타잔 알고리즘의 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"아래는 타잔 알고리즘을 적용한 예제입니다. 이 예제에서 방향 그래프는 다음과 같습니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-plaintext","node":{"type":"element","tagName":"code","properties":{"className":["language-plaintext"]},"children":[{"type":"text","value":"  0 → 1 → 2 → 3 ↘\n  ↑        ↘   ↙\n  \\\n   4 → 5\n"}],"position":{"start":{"line":53,"column":1,"offset":1583},"end":{"line":58,"column":4,"offset":1647}}},"children":"  0 → 1 → 2 → 3 ↘\n  ↑        ↘   ↙\n  \\\n   4 → 5\n"}}]}],"\n",["$","h3",null,{"id":"8d7ada34","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Python 구현 예제"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":62,"column":1,"offset":1667},"end":{"line":117,"column":4,"offset":3109}}},"children":"$f"}}]}],"\n",["$","h3",null,{"id":"84196436","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"설명"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Graph","position":{"start":{"line":121,"column":9,"offset":3127},"end":{"line":121,"column":16,"offset":3134}}}],"position":{"start":{"line":121,"column":9,"offset":3127},"end":{"line":121,"column":16,"offset":3134}}},"children":"Graph"}}]," 클래스를 정의하여 그래프를 표현하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SCCUtil","position":{"start":{"line":121,"column":38,"offset":3156},"end":{"line":121,"column":47,"offset":3165}}}],"position":{"start":{"line":121,"column":38,"offset":3156},"end":{"line":121,"column":47,"offset":3165}}},"children":"SCCUtil"}}]," 메서드를 통해 각 정점에서 SCC를 찾습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SCC","position":{"start":{"line":121,"column":74,"offset":3192},"end":{"line":121,"column":79,"offset":3197}}}],"position":{"start":{"line":121,"column":74,"offset":3192},"end":{"line":121,"column":79,"offset":3197}}},"children":"SCC"}}]," 메서드는 DFS를 시작하며, 아직 방문되지 않은 정점들을 대상으로 합니다."]}],"\n",["$","h2",null,{"id":"dc86c0b1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"타잔 알고리즘의 시간 복잡도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["타잔 알고리즘의 시간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(V + E)","position":{"start":{"line":125,"column":18,"offset":3278},"end":{"line":125,"column":28,"offset":3288}}}],"position":{"start":{"line":125,"column":18,"offset":3278},"end":{"line":125,"column":28,"offset":3288}}},"children":"O(V + E)"}}],"입니다. 여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"V","position":{"start":{"line":125,"column":37,"offset":3297},"end":{"line":125,"column":40,"offset":3300}}}],"position":{"start":{"line":125,"column":37,"offset":3297},"end":{"line":125,"column":40,"offset":3300}}},"children":"V"}}],"는 그래프의 정점 수, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"E","position":{"start":{"line":125,"column":53,"offset":3313},"end":{"line":125,"column":56,"offset":3316}}}],"position":{"start":{"line":125,"column":53,"offset":3313},"end":{"line":125,"column":56,"offset":3316}}},"children":"E"}}],"는 그래프의 간선 수입니다. 이 알고리즘은 DFS를 기반으로 하기 때문에, 각 정점을 처음으로 방문하고, 다시 돌아올 때까지의 모든 간선을 확인합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"타잔 알고리즘은 강한 연결 요소를 찾기 위한 매우 효율적이고 강력한 방법입니다. 이를 통해 복잡한 방향 그래프에서 중요한 연결 구조를 쉽게 파악할 수 있습니다. 본 글에서는 타잔 알고리즘의 동작 원리와 구현 방법을 자세히 살펴보았습니다. 다양한 그래프 문제에서 이 알고리즘을 적용해보면서 그 유용성을 직접 체험해보시길 추천드립니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석","toc":[{"tagName":"h1","title":"강한 연결 요소 찾기: 타잔 알고리즘 완벽 분석","id":"4d86c903"},{"tagName":"h2","title":"타잔 알고리즘의 기본 원리","id":"b2aa8d25"},{"tagName":"h3","title":"알고리즘의 의사 코드","id":"55774bb4"},{"tagName":"h2","title":"타잔 알고리즘의 예제","id":"d0b35796"},{"tagName":"h3","title":"Python 구현 예제","id":"8d7ada34"},{"tagName":"h3","title":"설명","id":"84196436"},{"tagName":"h2","title":"타잔 알고리즘의 시간 복잡도","id":"dc86c0b1"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
