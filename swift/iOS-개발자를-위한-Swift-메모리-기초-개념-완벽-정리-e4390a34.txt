1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%85%90-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC-e4390a34","d"],{"children":["__PAGE__?{\"slug\":\"iOS-개발자를-위한-Swift-메모리-기초-개념-완벽-정리-e4390a34\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%85%90-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC-e4390a34","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS-개발자를-위한-Swift-메모리-기초-개념-완벽-정리-e4390a34\"}"},"styles":[]}],"segment":["slug","iOS-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%85%90-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC-e4390a34","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"성능 최적화와 안정적인 iOS 앱 개발을 위해 중요한 Swift 메모리 관리를 다룹니다. 이 글은 Swift 메모리 모델의 기초 개념을 설명하고, ARC, 강한 참조, 약한 참조 등의 주제를 포함합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,메모리 관리,iOS 개발,ARC"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%85%90-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC-e4390a34"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"성능 최적화와 안정적인 iOS 앱 개발을 위해 중요한 Swift 메모리 관리를 다룹니다. 이 글은 Swift 메모리 모델의 기초 개념을 설명하고, ARC, 강한 참조, 약한 참조 등의 주제를 포함합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B8%B0%EC%B4%88-%EA%B0%9C%EB%85%90-%EC%99%84%EB%B2%BD-%EC%A0%95%EB%A6%AC-e4390a34"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"성능 최적화와 안정적인 iOS 앱 개발을 위해 중요한 Swift 메모리 관리를 다룹니다. 이 글은 Swift 메모리 모델의 기초 개념을 설명하고, ARC, 강한 참조, 약한 참조 등의 주제를 포함합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-19"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"f7a5764a","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 앱 개발에서 성능 최적화와 안정적인 동작을 보장하기 위해 메모리 관리는 매우 중요한 요소입니다. Swift는 메모리 관리를 자동으로 처리하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Automatic Reference Counting (ARC)","position":{"start":{"line":4,"column":84,"offset":121},"end":{"line":4,"column":120,"offset":157}}}],"position":{"start":{"line":4,"column":84,"offset":121},"end":{"line":4,"column":120,"offset":157}}},"children":"Automatic Reference Counting (ARC)"}}],"를 사용하지만, 기본 개념을 이해하지 못하면 메모리 누수나 성능 저하 등의 문제를 겪을 수 있습니다. 이 글에서는 Swift 메모리 관리의 기초 개념과 실용적인 예제를 통해 중요한 사항들을 정리하겠습니다."]}],"\n",["$","h2",null,{"id":"1d679d4e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"메모리 관리 기초 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 메모리 관리는 객체가 생성되고 해제되는 과정을 효율적으로 관리하기 위해 ARC를 사용합니다. ARC는 각 객체에 대한 참조(reference) 카운트를 관리하여 객체가 더 이상 필요 없을 때 메모리에서 해제하도록 합니다. 기본적인 개념은 다음과 같습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"강한 참조 (Strong Reference)"}],": 객체를 소유합니다. 즉, 강한 참조가 있는 한 객체는 메모리에서 해제되지 않습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"약한 참조 (Weak Reference)"}],": 객체를 소유하지 않습니다. 약한 참조가 있는 객체는 다른 강한 참조가 모두 사라지면 해제될 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"미소유 참조 (Unowned Reference)"}],": 객체를 소유하지 않지만 약한 참조와 달리 참조하는 객체가 해제된 이후에도 nil이 되지 않습니다. 만약 해제된 객체에 접근하려 하면 런타임 오류가 발생합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"a18093ba","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Automatic Reference Counting (ARC)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["ARC는 객체의 생성과 해제 주기를 자동으로 관리하여 메모리 누수를 방지합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ARC","position":{"start":{"line":16,"column":46,"offset":820},"end":{"line":16,"column":51,"offset":825}}}],"position":{"start":{"line":16,"column":46,"offset":820},"end":{"line":16,"column":51,"offset":825}}},"children":"ARC"}}],"는 객체의 참조 카운트를 기반으로 동작하며, 객체가 생성될 때마다 참조 카운트가 1 증가하고, 참조가 해제될 때마다 1 감소합니다. 참조 카운트가 0이 되면 객체가 메모리에서 해제됩니다."]}],"\n",["$","h3",null,{"id":"e56f6c63","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제 코드"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n        print(\"\n        (name) is being initialized\")\n    }\n    deinit {\n        print(\"\n (name) is being deinitialized\")\n    }\n\nvar person1: Person? = Person(name: \"John\")\nvar person2: Person? = person1\nvar person3: Person? = person1\n\nperson1 = nil\nperson2 = nil\nperson3 = nil\n"}],"position":{"start":{"line":19,"column":1,"offset":941},"end":{"line":39,"column":4,"offset":1317}}},"children":"class Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n        print(\"\n        (name) is being initialized\")\n    }\n    deinit {\n        print(\"\n (name) is being deinitialized\")\n    }\n\nvar person1: Person? = Person(name: \"John\")\nvar person2: Person? = person1\nvar person3: Person? = person1\n\nperson1 = nil\nperson2 = nil\nperson3 = nil\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 객체 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":40,"column":11,"offset":1328},"end":{"line":40,"column":19,"offset":1336}}}],"position":{"start":{"line":40,"column":11,"offset":1328},"end":{"line":40,"column":19,"offset":1336}}},"children":"Person"}}]," 은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person1","position":{"start":{"line":40,"column":22,"offset":1339},"end":{"line":40,"column":31,"offset":1348}}}],"position":{"start":{"line":40,"column":22,"offset":1339},"end":{"line":40,"column":31,"offset":1348}}},"children":"person1"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person2","position":{"start":{"line":40,"column":33,"offset":1350},"end":{"line":40,"column":42,"offset":1359}}}],"position":{"start":{"line":40,"column":33,"offset":1350},"end":{"line":40,"column":42,"offset":1359}}},"children":"person2"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person3","position":{"start":{"line":40,"column":44,"offset":1361},"end":{"line":40,"column":53,"offset":1370}}}],"position":{"start":{"line":40,"column":44,"offset":1361},"end":{"line":40,"column":53,"offset":1370}}},"children":"person3"}}],"이라는 변수에 의해 참조됩니다. 세 참조가 모두 nil로 설정되면 ARC는 객체가 더 이상 필요하지 않다고 판단하고 메모리에서 해제합니다."]}],"\n",["$","h2",null,{"id":"66b2040d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"메모리 누수 방지: 강한 순환 참조 (Strong Reference Cycles)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 대체로 잘 작동하지만, 강한 순환 참조(Strong Reference Cycles) 문제를 발생시킬 수 있습니다. 이는 두 개 이상의 객체가 서로를 강하게 참조하여 메모리에서 해제되지 않는 상황을 말합니다."}],"\n",["$","h3",null,{"id":"e56f6c63","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제 코드"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n    }\n    var apartment: Apartment?\n}\n\nclass Apartment {\n    let unit: String\n    init(unit: String) {\n        self.unit = unit\n    }\n    var tenant: Person?\n}\n\nvar john: Person? = Person(name: \"John\")\nvar unit4A: Apartment? = Apartment(unit: \"4A\")\njohn?.apartment = unit4A\nunit4A?.tenant = john\n\njohn = nil\nunit4A = nil\n"}],"position":{"start":{"line":47,"column":1,"offset":1631},"end":{"line":71,"column":4,"offset":2050}}},"children":"class Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n    }\n    var apartment: Apartment?\n}\n\nclass Apartment {\n    let unit: String\n    init(unit: String) {\n        self.unit = unit\n    }\n    var tenant: Person?\n}\n\nvar john: Person? = Person(name: \"John\")\nvar unit4A: Apartment? = Apartment(unit: \"4A\")\njohn?.apartment = unit4A\nunit4A?.tenant = john\n\njohn = nil\nunit4A = nil\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"john","position":{"start":{"line":72,"column":8,"offset":2058},"end":{"line":72,"column":14,"offset":2064}}}],"position":{"start":{"line":72,"column":8,"offset":2058},"end":{"line":72,"column":14,"offset":2064}}},"children":"john"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"unit4A","position":{"start":{"line":72,"column":16,"offset":2066},"end":{"line":72,"column":24,"offset":2074}}}],"position":{"start":{"line":72,"column":16,"offset":2066},"end":{"line":72,"column":24,"offset":2074}}},"children":"unit4A"}}],"는 서로를 강하게 참조하므로 참조 카운트가 0이 되지 않아 메모리에서 해제되지 않습니다."]}],"\n",["$","h2",null,{"id":"ca07f3f8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"약한 참조와 미소유 참조로 강한 참조 방지"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"강한 참조 순환을 방지하기 위해 약한 참조(weak)와 미소유 참조(unowned)를 사용합니다. 약한 참조는 객체의 참조 카운트를 증가시키지 않으며, 객체가 해제될 때 nil로 설정됩니다. 미소유 참조는 객체가 해제된 이후에도 참조를 유지하지만, 해제된 객체에 접근하려 하면 오류가 발생합니다."}],"\n",["$","h3",null,{"id":"e56f6c63","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제 코드"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n    }\n    var apartment: Apartment?\n    deinit {\n        print(\"\n (name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    init(unit: String) {\n        self.unit = unit\n}\n    weak var tenant: Person?\n    deinit {\n        print(\"\n (unit) is being deinitialized\")\n}\n}\n\nvar john: Person? = Person(name: \"John\")\nvar unit4A: Apartment? = Apartment(unit: \"4A\")\njohn?.apartment = unit4A\nunit4A?.tenant = john\n\njohn = nil\nunit4A = nil\n"}],"position":{"start":{"line":79,"column":1,"offset":2330},"end":{"line":111,"column":4,"offset":2882}}},"children":"class Person {\n    let name: String\n    init(name: String) {\n        self.name = name\n    }\n    var apartment: Apartment?\n    deinit {\n        print(\"\n (name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    init(unit: String) {\n        self.unit = unit\n}\n    weak var tenant: Person?\n    deinit {\n        print(\"\n (unit) is being deinitialized\")\n}\n}\n\nvar john: Person? = Person(name: \"John\")\nvar unit4A: Apartment? = Apartment(unit: \"4A\")\njohn?.apartment = unit4A\nunit4A?.tenant = john\n\njohn = nil\nunit4A = nil\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"tenant","position":{"start":{"line":112,"column":9,"offset":2891},"end":{"line":112,"column":17,"offset":2899}}}],"position":{"start":{"line":112,"column":9,"offset":2891},"end":{"line":112,"column":17,"offset":2899}}},"children":"tenant"}}]," 속성을 약한 참조로 선언하여 강한 참조 순환을 방지합니다. 결과적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"john","position":{"start":{"line":112,"column":57,"offset":2939},"end":{"line":112,"column":63,"offset":2945}}}],"position":{"start":{"line":112,"column":57,"offset":2939},"end":{"line":112,"column":63,"offset":2945}}},"children":"john"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"unit4A","position":{"start":{"line":112,"column":65,"offset":2947},"end":{"line":112,"column":73,"offset":2955}}}],"position":{"start":{"line":112,"column":65,"offset":2947},"end":{"line":112,"column":73,"offset":2955}}},"children":"unit4A"}}],"는 모두 안전하게 메모리에서 해제됩니다."]}],"\n",["$","h2",null,{"id":"a159e81e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"클로저와 메모리 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클로저와 같은 비동기 작업에서 메모리 관리 또한 중요한 요소입니다. 클로저는 강한 참조를 발생시키므로 클로저 내부에서 자신을 캡처할 때 강한 참조 순환이 발생할 수 있습니다. 이를 방지하기 위해 클로저 내부에서 캡처 리스트를 사용하여 약한 참조를 정의할 수 있습니다."}],"\n",["$","h3",null,{"id":"e56f6c63","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제 코드"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class SomeClass {\n    var someProperty: String = \"Hello\"\n    lazy var someClosure: () -> String = { [weak self] in\n        return self?.someProperty ?? \"\"\n    }\n}\n\nlet instance = SomeClass()\nlet result = instance.someClosure()\nprint(result)\n"}],"position":{"start":{"line":119,"column":1,"offset":3156},"end":{"line":130,"column":4,"offset":3409}}},"children":"class SomeClass {\n    var someProperty: String = \"Hello\"\n    lazy var someClosure: () -> String = { [weak self] in\n        return self?.someProperty ?? \"\"\n    }\n}\n\nlet instance = SomeClass()\nlet result = instance.someClosure()\nprint(result)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 클로저 내부에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self","position":{"start":{"line":131,"column":18,"offset":3427},"end":{"line":131,"column":24,"offset":3433}}}],"position":{"start":{"line":131,"column":18,"offset":3427},"end":{"line":131,"column":24,"offset":3433}}},"children":"self"}}],"를 약한 참조로 캡처하여 강한 참조 순환을 방지합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 메모리 관리는 ARC를 통해 자동으로 처리되지만, 기본 개념을 이해하고 강한 참조 순환을 방지하기 위한 올바른 접근법을 사용하는 것이 중요합니다. 강한 참조, 약한 참조, 미소유 참조 및 클로저 캡처 리스트와 같은 개념을 잘 이해하여 효율적이고 안정적인 iOS 앱을 개발할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리","toc":[{"tagName":"h1","title":"iOS 개발자를 위한 Swift 메모리 기초 개념 완벽 정리","id":"f7a5764a"},{"tagName":"h2","title":"메모리 관리 기초 개념","id":"1d679d4e"},{"tagName":"h2","title":"Automatic Reference Counting (ARC)","id":"a18093ba"},{"tagName":"h3","title":"예제 코드","id":"e56f6c63"},{"tagName":"h2","title":"메모리 누수 방지: 강한 순환 참조 (Strong Reference Cycles)","id":"66b2040d"},{"tagName":"h3","title":"예제 코드","id":"e56f6c63"},{"tagName":"h2","title":"약한 참조와 미소유 참조로 강한 참조 방지","id":"ca07f3f8"},{"tagName":"h3","title":"예제 코드","id":"e56f6c63"},{"tagName":"h2","title":"클로저와 메모리 관리","id":"a159e81e"},{"tagName":"h3","title":"예제 코드","id":"e56f6c63"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
