1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-API-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EB%B2%95-73fe82b7","d"],{"children":["__PAGE__?{\"slug\":\"Swift를-이용한-효율적인-네트워크-레이어-설계-URLSession과-Codable을-이용한-API-통신-방법-73fe82b7\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-API-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EB%B2%95-73fe82b7","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift를-이용한-효율적인-네트워크-레이어-설계-URLSession과-Codable을-이용한-API-통신-방법-73fe82b7\"}"},"styles":[]}],"segment":["slug","Swift%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-API-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EB%B2%95-73fe82b7","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift를 이용한 네트워크 레이어 설계에 대해 다룹니다. 특히 URLSession과 Codable을 활용하여 효율적인 API 통신 방법에 대해 살펴봅니다. 이 글은 네트워크 요청과 응답을 관리하는 방법을 설명하며, 실제 예제를 통해 이해를 돕습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,네트워크,URLSession,Codable"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-API-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EB%B2%95-73fe82b7"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift를 이용한 네트워크 레이어 설계에 대해 다룹니다. 특히 URLSession과 Codable을 활용하여 효율적인 API 통신 방법에 대해 살펴봅니다. 이 글은 네트워크 요청과 응답을 관리하는 방법을 설명하며, 실제 예제를 통해 이해를 돕습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-API-%ED%86%B5%EC%8B%A0-%EB%B0%A9%EB%B2%95-73fe82b7"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift를 이용한 네트워크 레이어 설계에 대해 다룹니다. 특히 URLSession과 Codable을 활용하여 효율적인 API 통신 방법에 대해 살펴봅니다. 이 글은 네트워크 요청과 응답을 관리하는 방법을 설명하며, 실제 예제를 통해 이해를 돕습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T510,import Foundation

class NetworkService {
    static let shared = NetworkService()
    private init() {}

    private let baseURL = "https://api.example.com"

    private var defaultSession: URLSession {
        let configuration = URLSessionConfiguration.default
        return URLSession(configuration: configuration)
    }

    func fetchData<T: Codable>(endpoint: String, completion: @escaping (Result<T, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)\(endpoint)") else {
            completion(.failure(NSError(domain: "Invalid URL", code: 0, userInfo: nil)))
            return
        }

        let request = URLRequest(url: url)

        let task = defaultSession.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: 0, userInfo: nil)))
                return
            }

            do {
                let decodedData = try JSONDecoder().decode(T.self, from: data)
                completion(.success(decodedData))
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }
}
f:T510,import Foundation

class NetworkService {
    static let shared = NetworkService()
    private init() {}

    private let baseURL = "https://api.example.com"

    private var defaultSession: URLSession {
        let configuration = URLSessionConfiguration.default
        return URLSession(configuration: configuration)
    }

    func fetchData<T: Codable>(endpoint: String, completion: @escaping (Result<T, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)\(endpoint)") else {
            completion(.failure(NSError(domain: "Invalid URL", code: 0, userInfo: nil)))
            return
        }

        let request = URLRequest(url: url)

        let task = defaultSession.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "No data", code: 0, userInfo: nil)))
                return
            }

            do {
                let decodedData = try JSONDecoder().decode(T.self, from: data)
                completion(.success(decodedData))
            } catch {
                completion(.failure(error))
            }
        }

        task.resume()
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-07"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"b30eb4d4","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 요청은 현대 애플리케이션 개발에서 필수 요소입니다. Swift를 사용하여 iOS 애플리케이션을 개발할 때, 네트워크 레이어를 효율적으로 설계하는 것이 중요합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":4,"column":104,"offset":171},"end":{"line":4,"column":116,"offset":183}}}],"position":{"start":{"line":4,"column":104,"offset":171},"end":{"line":4,"column":116,"offset":183}}},"children":"URLSession"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":4,"column":118,"offset":185},"end":{"line":4,"column":127,"offset":194}}}],"position":{"start":{"line":4,"column":118,"offset":185},"end":{"line":4,"column":127,"offset":194}}},"children":"Codable"}}],"을 활용하여 네트워크 요청 및 응답을 효율적으로 처리하는 방법에 대해 다루겠습니다."]}],"\n",["$","h2",null,{"id":"3ddabd98","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"URLSession이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":8,"column":1,"offset":260},"end":{"line":8,"column":13,"offset":272}}}],"position":{"start":{"line":8,"column":1,"offset":260},"end":{"line":8,"column":13,"offset":272}}},"children":"URLSession"}}],"은 HTTP 또는 HTTPS를 통해 데이터를 송수신할 수 있게 하는 iOS 및 macOS의 기본 프레임워크입니다. 이 프레임워크는 간단한 네트워크 요청부터 파일 다운로드, 업로드 등 다양한 작업을 지원합니다."]}],"\n",["$","h3",null,{"id":"9dfcbefc","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"URLSession의 기본 구성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":12,"column":1,"offset":413},"end":{"line":12,"column":13,"offset":425}}}],"position":{"start":{"line":12,"column":1,"offset":413},"end":{"line":12,"column":13,"offset":425}}},"children":"URLSession"}}],"은 세 부분으로 구성됩니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"URLSessionConfiguration"}],": 세션의 모든 설정이 저장되는 객체입니다. 기본 설정, 불릴 수 없는 설정, 백그라운드 설정 등 여러 가지 설정을 잡을 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"URLSession"}],": 네트워크 요청을 조정하고 실행합니다. 이를 통해 데이터 작업, 다운로드 작업, 그리고 업로드 작업을 관리합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"URLSessionTask"}],": 개별 네트워크 요청을 나타내는 객체입니다. 이를 통해 작업을 시작, 일시 중지, 취소할 수 있습니다."]}],"\n"]}],"\n",["$","h4","h4-0",{"children":"기본 예제"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nlet url = URL(string: \"https://api.example.com/data\")!\nvar request = URLRequest(url: url)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\n\nlet task = session.dataTask(with: request) { data, response, error in\n    if let error = error {\n        print(\"Error: \\(error.localizedDescription)\")\n        return\n    }\n\n    guard let data = data else {\n        print(\"No data received.\")\n        return\n    }\n\n    // JSON 데이터 처리\n    do {\n        let json = try JSONSerialization.jsonObject(with: data, options: [])\n        print(\"Response JSON: \\(json)\")\n    } catch {\n        print(\"Error parsing JSON: \\(error)\")\n    }\n}\n\ntask.resume()\n"}],"position":{"start":{"line":20,"column":1,"offset":723},"end":{"line":50,"column":4,"offset":1396}}},"children":"import Foundation\n\nlet url = URL(string: \"https://api.example.com/data\")!\nvar request = URLRequest(url: url)\nrequest.httpMethod = \"GET\"\n\nlet session = URLSession.shared\n\nlet task = session.dataTask(with: request) { data, response, error in\n    if let error = error {\n        print(\"Error: \\(error.localizedDescription)\")\n        return\n    }\n\n    guard let data = data else {\n        print(\"No data received.\")\n        return\n    }\n\n    // JSON 데이터 처리\n    do {\n        let json = try JSONSerialization.jsonObject(with: data, options: [])\n        print(\"Response JSON: \\(json)\")\n    } catch {\n        print(\"Error parsing JSON: \\(error)\")\n    }\n}\n\ntask.resume()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서 우리는 기본 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":52,"column":16,"offset":1413},"end":{"line":52,"column":28,"offset":1425}}}],"position":{"start":{"line":52,"column":16,"offset":1413},"end":{"line":52,"column":28,"offset":1425}}},"children":"URLSession"}}],"을 사용하여 네트워크 요청을 보내고 JSON 데이터를 처리합니다. 이제 이를 바탕으로 코드를 더 단순하고 효율적으로 만들기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":52,"column":100,"offset":1497},"end":{"line":52,"column":109,"offset":1506}}}],"position":{"start":{"line":52,"column":100,"offset":1497},"end":{"line":52,"column":109,"offset":1506}}},"children":"Codable"}}],"과 커스텀 네트워크 레이어를 사용해보겠습니다."]}],"\n",["$","h2",null,{"id":"dc29de40","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Codable을 이용한 데이터 모델링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":56,"column":1,"offset":1558},"end":{"line":56,"column":10,"offset":1567}}}],"position":{"start":{"line":56,"column":1,"offset":1558},"end":{"line":56,"column":10,"offset":1567}}},"children":"Codable"}}]," 프로토콜은 Swift에서 JSON 데이터와 객체 간의 변환을 쉽게 하기 위해 도입되었습니다. 이 프로토콜을 사용하면 JSON 파싱 코드가 크게 간소화됩니다."]}],"\n",["$","h3",null,{"id":"1c59ca6b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Codable 예제"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\n// JSON 데이터\nlet jsonData = \"{\"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}\".data(using: .utf8)!\n\n// JSON 파싱\nlet user = try? JSONDecoder().decode(User.self, from: jsonData)\nif let user = user {\n    print(\"User: \\(user)\")\n}\n"}],"position":{"start":{"line":60,"column":1,"offset":1673},"end":{"line":75,"column":4,"offset":2008}}},"children":"struct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\n// JSON 데이터\nlet jsonData = \"{\"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\"}\".data(using: .utf8)!\n\n// JSON 파싱\nlet user = try? JSONDecoder().decode(User.self, from: jsonData)\nif let user = user {\n    print(\"User: \\(user)\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제를 통해 JSON 데이터를 파싱하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"User","position":{"start":{"line":77,"column":26,"offset":2035},"end":{"line":77,"column":32,"offset":2041}}}],"position":{"start":{"line":77,"column":26,"offset":2035},"end":{"line":77,"column":32,"offset":2041}}},"children":"User"}}]," 객체로 만들 수 있습니다. 이를 바탕으로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":77,"column":57,"offset":2066},"end":{"line":77,"column":69,"offset":2078}}}],"position":{"start":{"line":77,"column":57,"offset":2066},"end":{"line":77,"column":69,"offset":2078}}},"children":"URLSession"}}],"을 사용하여 네트워크 서비스를 구성해보겠습니다."]}],"\n",["$","h2",null,{"id":"8286d3e4","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"네트워크 서비스 레이어 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"네트워크 서비스 레이어를 구현하면, 코드의 재사용성과 유지보수성을 높일 수 있습니다. 다음은 이를 구현하는 방법입니다."}],"\n",["$","h3",null,{"id":"1b800a0f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"네트워크 서비스 클래스"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":85,"column":1,"offset":2212},"end":{"line":129,"column":4,"offset":3520}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkService","position":{"start":{"line":131,"column":4,"offset":3525},"end":{"line":131,"column":20,"offset":3541}}}],"position":{"start":{"line":131,"column":4,"offset":3525},"end":{"line":131,"column":20,"offset":3541}}},"children":"NetworkService"}}]," 클래스는 단일 인스턴스를 제공하는 싱글톤 패턴을 사용하며, 제네릭을 활용하여 다양한 엔드포인트와 데이터 타입을 처리할 수 있습니다. 이를 통해 다양한 API 호출을 손쉽게 관리할 수 있습니다."]}],"\n",["$","h3",null,{"id":"af7af39c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용 예제"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"NetworkService.shared.fetchData(endpoint: \"/users/1\") { (result: Result<User, Error>) in\n    switch result {\n    case .success(let user):\n        print(\"User: \\(user)\")\n    case .failure(let error):\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}\n"}],"position":{"start":{"line":135,"column":1,"offset":3662},"end":{"line":144,"column":4,"offset":3935}}},"children":"NetworkService.shared.fetchData(endpoint: \"/users/1\") { (result: Result<User, Error>) in\n    switch result {\n    case .success(let user):\n        print(\"User: \\(user)\")\n    case .failure(let error):\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":146,"column":10,"offset":3946},"end":{"line":146,"column":21,"offset":3957}}}],"position":{"start":{"line":146,"column":10,"offset":3946},"end":{"line":146,"column":21,"offset":3957}}},"children":"fetchData"}}]," 메소드를 사용하여 사용자 데이터를 가져오는 방법을 보여줍니다. 이는 간단한 예제이지만, 이 접근 방식을 통해 여러 종류의 네트워크 요청을 효율적으로 처리할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":150,"column":9,"offset":4069},"end":{"line":150,"column":21,"offset":4081}}}],"position":{"start":{"line":150,"column":9,"offset":4069},"end":{"line":150,"column":21,"offset":4081}}},"children":"URLSession"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":150,"column":23,"offset":4083},"end":{"line":150,"column":32,"offset":4092}}}],"position":{"start":{"line":150,"column":23,"offset":4083},"end":{"line":150,"column":32,"offset":4092}}},"children":"Codable"}}],"을 활용하여 네트워크 레이어를 설계하는 방법을 알아보았습니다. 이러한 접근 방식을 통해 코드의 가독성과 유지보수성을 높이고, 다양한 네트워크 요청을 효율적으로 관리할 수 있습니다. 앞으로도 계속해서 이러한 Best Practice를 적용하여 더 나은 애플리케이션을 개발해보세요."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법.","toc":[{"tagName":"h1","title":"Swift를 이용한 효율적인 네트워크 레이어 설계: URLSession과 Codable을 이용한 API 통신 방법","id":"b30eb4d4"},{"tagName":"h2","title":"URLSession이란?","id":"3ddabd98"},{"tagName":"h3","title":"URLSession의 기본 구성","id":"9dfcbefc"},{"tagName":"h2","title":"Codable을 이용한 데이터 모델링","id":"dc29de40"},{"tagName":"h3","title":"Codable 예제","id":"1c59ca6b"},{"tagName":"h2","title":"네트워크 서비스 레이어 구현","id":"8286d3e4"},{"tagName":"h3","title":"네트워크 서비스 클래스","id":"1b800a0f"},{"tagName":"h3","title":"사용 예제","id":"af7af39c"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
