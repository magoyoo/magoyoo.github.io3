1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81-b7efaa19","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-클러스터링으로-확장성-높이기-성능-최적화-팁-b7efaa19\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81-b7efaa19","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-클러스터링으로-확장성-높이기-성능-최적화-팁-b7efaa19\"}"},"styles":[]}],"segment":["slug","Nodejs-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81-b7efaa19","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Node.js를 사용한 웹 애플리케이션의 확장성을 높이기 위해 클러스터링 기법을 사용하는 방법과 성능 최적화 팁을 소개합니다. 클러스터 모듈의 기본 개념부터 실제 활용 예제까지 단계별로 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,클러스터링,성능 최적화,웹 애플리케이션"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81-b7efaa19"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Node.js를 사용한 웹 애플리케이션의 확장성을 높이기 위해 클러스터링 기법을 사용하는 방법과 성능 최적화 팁을 소개합니다. 클러스터 모듈의 기본 개념부터 실제 활용 예제까지 단계별로 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EB%A7%81%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%ED%8C%81-b7efaa19"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Node.js를 사용한 웹 애플리케이션의 확장성을 높이기 위해 클러스터링 기법을 사용하는 방법과 성능 최적화 팁을 소개합니다. 클러스터 모듈의 기본 개념부터 실제 활용 예제까지 단계별로 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"8775a566","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js는 단일 스레드 이벤트 루프를 기반으로 동작하기 때문에, 기본적으로 하나의 CPU 코어만을 사용합니다. 하지만 다중 코어 시스템에서도 높은 성능과 확장성을 달성하고자 한다면, Node.js의 클러스터링 기능을 활용할 수 있습니다. 이 글에서는 클러스터 모듈을 사용하여 Node.js 애플리케이션의 성능을 최적화하고 확장성을 높이는 방법을 설명하겠습니다."}],"\n",["$","h2",null,{"id":"32fb5971","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"클러스터 모듈의 이해"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js 클러스터 모듈은 여러 개의 워커 프로세스를 생성하여 단일 애플리케이션 인스턴스가 다중 요청을 병렬로 처리할 수 있게 합니다. 워커 프로세스는 각자 독립적인 메모리 공간을 가지며, 동일한 포트에서 수신된 요청을 처리합니다. 이렇게 함으로써 다중 코어 CPU의 장점을 최대한 활용할 수 있습니다."}],"\n",["$","h3",null,{"id":"183e33dd","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 클러스터링 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 기본적인 클러스터링 설정 예제입니다. 간단한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTTP","position":{"start":{"line":12,"column":30,"offset":481},"end":{"line":12,"column":36,"offset":487}}}],"position":{"start":{"line":12,"column":30,"offset":481},"end":{"line":12,"column":36,"offset":487}}},"children":"HTTP"}}]," 서버를 설정하고 클러스터링을 적용하여 성능을 향상시키는 방법을 보여줍니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n    console.log(`Master ${process.pid} is running`);\n\n    for (let i = 0; i < numCPUs; i++) {\n        cluster.fork();\n    }\n\n    cluster.on('exit', (worker, code, signal) => {\n        console.log(`Worker ${worker.process.pid} died`);\n    });\n} else {\n    http.createServer((req, res) => {\n        res.writeHead(200);\n        res.end('hello world\\n');\n    }).listen(8000);\n\n    console.log(`Worker ${process.pid} started`);\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":531},"end":{"line":37,"column":4,"offset":1109}}},"children":"const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n    console.log(`Master ${process.pid} is running`);\n\n    for (let i = 0; i < numCPUs; i++) {\n        cluster.fork();\n    }\n\n    cluster.on('exit', (worker, code, signal) => {\n        console.log(`Worker ${worker.process.pid} died`);\n    });\n} else {\n    http.createServer((req, res) => {\n        res.writeHead(200);\n        res.end('hello world\\n');\n    }).listen(8000);\n\n    console.log(`Worker ${process.pid} started`);\n}\n"}}]}],"\n",["$","h3",null,{"id":"ddb42f6d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"코드 설명"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cluster.isMaster","position":{"start":{"line":41,"column":4,"offset":1125},"end":{"line":41,"column":22,"offset":1143}}}],"position":{"start":{"line":41,"column":4,"offset":1125},"end":{"line":41,"column":22,"offset":1143}}},"children":"cluster.isMaster"}}],": 마스터 프로세스인지 확인합니다."]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cluster.fork()","position":{"start":{"line":42,"column":4,"offset":1166},"end":{"line":42,"column":20,"offset":1182}}}],"position":{"start":{"line":42,"column":4,"offset":1166},"end":{"line":42,"column":20,"offset":1182}}},"children":"cluster.fork()"}}],": 워커 프로세스를 생성합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"numCPUs","position":{"start":{"line":42,"column":38,"offset":1200},"end":{"line":42,"column":47,"offset":1209}}}],"position":{"start":{"line":42,"column":38,"offset":1200},"end":{"line":42,"column":47,"offset":1209}}},"children":"numCPUs"}}]," 만큼 생성하여 다중 코어를 활용합니다."]}],"\n",["$","li","li-2",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"cluster.on('exit')","position":{"start":{"line":43,"column":4,"offset":1235},"end":{"line":43,"column":24,"offset":1255}}}],"position":{"start":{"line":43,"column":4,"offset":1235},"end":{"line":43,"column":24,"offset":1255}}},"children":"cluster.on('exit')"}}],": 워커 프로세스가 종료되었을 때의 이벤트를 처리합니다."]}],"\n",["$","li","li-3",{"children":"워커 프로세스는 각각 HTTP 서버를 생성하여 요청을 처리합니다."}],"\n"]}],"\n",["$","h2",null,{"id":"8587b86d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 최적화 팁"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클러스터링만으로 성능을 최적화할 수 있지만, 추가적인 최적화 기법을 적용하면 더욱 효율적인 시스템을 구축할 수 있습니다."}],"\n",["$","h3",null,{"id":"02ceb5ea","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"로드 밸런싱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js 클러스터링은 운영체제 차원에서의 기본 로드 밸런싱을 활용합니다. 그러나 좀 더 세부적인 로드 밸런싱이 필요하다면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nginx","position":{"start":{"line":52,"column":72,"offset":1494},"end":{"line":52,"column":79,"offset":1501}}}],"position":{"start":{"line":52,"column":72,"offset":1494},"end":{"line":52,"column":79,"offset":1501}}},"children":"nginx"}}],"와 같은 외부 로드 밸런서를 도입하는 것이 좋습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nginx","position":{"start":{"line":52,"column":109,"offset":1531},"end":{"line":52,"column":116,"offset":1538}}}],"position":{"start":{"line":52,"column":109,"offset":1531},"end":{"line":52,"column":116,"offset":1538}}},"children":"nginx"}}],"는 클라이언트 요청을 여러 워커 프로세스로 균등하게 분배하여 성능을 최적화합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-nginx","node":{"type":"element","tagName":"code","properties":{"className":["language-nginx"]},"children":[{"type":"text","value":"http {\n    upstream node_js_upstream {\n        server 127.0.0.1:8000;\n        server 127.0.0.1:8001;\n        server 127.0.0.1:8002;\n        server 127.0.0.1:8003;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://node_js_upstream;\n        }\n    }\n}\n"}],"position":{"start":{"line":54,"column":1,"offset":1585},"end":{"line":71,"column":4,"offset":1887}}},"children":"http {\n    upstream node_js_upstream {\n        server 127.0.0.1:8000;\n        server 127.0.0.1:8001;\n        server 127.0.0.1:8002;\n        server 127.0.0.1:8003;\n    }\n\n    server {\n        listen 80;\n\n        location / {\n            proxy_pass http://node_js_upstream;\n        }\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"5ba60bec","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로세스 모니터링과 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["클러스터링을 사용하면 워커 프로세스가 언제든지 종료될 수 있습니다. 이를 대비해 각 워커 프로세스를 모니터링하고 자동으로 재시작할 수 있는 관리 도구를 사용하는 것이 좋습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PM2","position":{"start":{"line":75,"column":100,"offset":2007},"end":{"line":75,"column":105,"offset":2012}}}],"position":{"start":{"line":75,"column":100,"offset":2007},"end":{"line":75,"column":105,"offset":2012}}},"children":"PM2"}}],"는 가장 인기 있는 프로세스 관리 도구 중 하나입니다."]}],"\n",["$","h4","h4-0",{"children":"PM2 설치 및 사용 예제"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install pm2 -g\npm2 start app.js -i max\npm2 list\npm2 monit\npm2 logs\n"}],"position":{"start":{"line":79,"column":1,"offset":2065},"end":{"line":85,"column":4,"offset":2147}}},"children":"npm install pm2 -g\npm2 start app.js -i max\npm2 list\npm2 monit\npm2 logs\n"}}]}],"\n",["$","h2",null,{"id":"90567fa6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실시간 성능 모니터링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["성능 모니터링 툴을 사용하면 애플리케이션의 병목 지점을 파악하고 최적화할 수 있습니다. APM(Application Performance Management) 툴인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"New Relic","position":{"start":{"line":89,"column":93,"offset":2257},"end":{"line":89,"column":104,"offset":2268}}}],"position":{"start":{"line":89,"column":93,"offset":2257},"end":{"line":89,"column":104,"offset":2268}}},"children":"New Relic"}}],"이나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AppDynamics","position":{"start":{"line":89,"column":107,"offset":2271},"end":{"line":89,"column":120,"offset":2284}}}],"position":{"start":{"line":89,"column":107,"offset":2271},"end":{"line":89,"column":120,"offset":2284}}},"children":"AppDynamics"}}],"을 사용하면, 실시간으로 애플리케이션의 상태를 모니터링하고 성능 이슈를 신속하게 식별할 수 있습니다."]}],"\n",["$","h3",null,{"id":"a34d67ac","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"New Relic 설치 및 설정 예제"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":"New Relic 계정을 생성합니다."}],"\n",["$","li","li-1",{"children":"New Relic Node.js 에이전트를 설치합니다."}],"\n"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install newrelic --save\n"}],"position":{"start":{"line":95,"column":1,"offset":2426},"end":{"line":97,"column":4,"offset":2465}}},"children":"npm install newrelic --save\n"}}]}],"\n",["$","ol","ol-2",{"start":3,"children":["\n",["$","li","li-0",{"children":"New Relic 설정 파일을 작성합니다."}],"\n"]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// newrelic.js\nexports.config = {\n  app_name: ['Your App Name'],\n  license_key: 'YOUR_NEW_RELIC_LICENSE_KEY',\n  logging: { level: 'info' },\n};\n"}],"position":{"start":{"line":99,"column":1,"offset":2493},"end":{"line":106,"column":4,"offset":2653}}},"children":"// newrelic.js\nexports.config = {\n  app_name: ['Your App Name'],\n  license_key: 'YOUR_NEW_RELIC_LICENSE_KEY',\n  logging: { level: 'info' },\n};\n"}}]}],"\n",["$","ol","ol-3",{"start":4,"children":["\n",["$","li","li-0",{"children":"애플리케이션 코드에 New Relic을 추가합니다."}],"\n"]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"require('newrelic');\nconst http = require('http');\n\nhttp.createServer((req, res) => {\n  res.writeHead(200);\n  res.end('Hello World!\\n');\n}).listen(8000);\n"}],"position":{"start":{"line":108,"column":1,"offset":2686},"end":{"line":116,"column":4,"offset":2857}}},"children":"require('newrelic');\nconst http = require('http');\n\nhttp.createServer((req, res) => {\n  res.writeHead(200);\n  res.end('Hello World!\\n');\n}).listen(8000);\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js의 클러스터링 기능을 활용하면, 단일 프로세스로 인한 성능 제약을 극복하고 다중 코어 시스템에서 높은 성능을 유지할 수 있습니다. 클러스터 모듈의 기본 개념을 이해하고, 로드 밸런싱, 프로세스 관리를 통해 최적화를 추가로 적용함으로써 실제 운영 환경에서 확장성과 신뢰성을 동시에 달성할 수 있습니다. 추가적으로 성능 모니터링 도구를 사용하여 실시간으로 애플리케이션 상태를 파악하면, 발생 가능한 성능 이슈를 미리 파악하고 대응할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁","toc":[{"tagName":"h1","title":"Node.js 클러스터링으로 확장성 높이기: 성능 최적화 팁","id":"8775a566"},{"tagName":"h2","title":"클러스터 모듈의 이해","id":"32fb5971"},{"tagName":"h3","title":"기본 클러스터링 예제","id":"183e33dd"},{"tagName":"h3","title":"코드 설명","id":"ddb42f6d"},{"tagName":"h2","title":"성능 최적화 팁","id":"8587b86d"},{"tagName":"h3","title":"로드 밸런싱","id":"02ceb5ea"},{"tagName":"h3","title":"프로세스 모니터링과 관리","id":"5ba60bec"},{"tagName":"h2","title":"실시간 성능 모니터링","id":"90567fa6"},{"tagName":"h3","title":"New Relic 설치 및 설정 예제","id":"a34d67ac"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
