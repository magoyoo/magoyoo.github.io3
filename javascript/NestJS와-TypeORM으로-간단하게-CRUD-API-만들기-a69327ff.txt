1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","NestJS%EC%99%80-TypeORM%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-CRUD-API-%EB%A7%8C%EB%93%A4%EA%B8%B0-a69327ff","d"],{"children":["__PAGE__?{\"slug\":\"NestJS와-TypeORM으로-간단하게-CRUD-API-만들기-a69327ff\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","NestJS%EC%99%80-TypeORM%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-CRUD-API-%EB%A7%8C%EB%93%A4%EA%B8%B0-a69327ff","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"NestJS와-TypeORM으로-간단하게-CRUD-API-만들기-a69327ff\"}"},"styles":[]}],"segment":["slug","NestJS%EC%99%80-TypeORM%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-CRUD-API-%EB%A7%8C%EB%93%A4%EA%B8%B0-a69327ff","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 NestJS와 TypeORM을 사용하여 간단한 CRUD API를 만드는 방법을 설명합니다. RESTful API를 구현하는 데 필요한 기본 개념과 단계들을 다루며, 실습 예제도 포함되어 있습니다."}],["$","meta","3",{"name":"keywords","content":"NestJS,TypeORM,CRUD,RESTful API"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/NestJS%EC%99%80-TypeORM%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-CRUD-API-%EB%A7%8C%EB%93%A4%EA%B8%B0-a69327ff"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 NestJS와 TypeORM을 사용하여 간단한 CRUD API를 만드는 방법을 설명합니다. RESTful API를 구현하는 데 필요한 기본 개념과 단계들을 다루며, 실습 예제도 포함되어 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/NestJS%EC%99%80-TypeORM%EC%9C%BC%EB%A1%9C-%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-CRUD-API-%EB%A7%8C%EB%93%A4%EA%B8%B0-a69327ff"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 NestJS와 TypeORM을 사용하여 간단한 CRUD API를 만드는 방법을 설명합니다. RESTful API를 구현하는 데 필요한 기본 개념과 단계들을 다루며, 실습 예제도 포함되어 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-02"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"d8d39e65","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기"}],"\n",["$","h2",null,{"id":"fa255f0c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"소개"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"NestJS는 Node.js를 위한 프로그레시브 웹 프레임워크로, 최신의 자바스크립트 기능을 활용하여 강력한 서버사이드 애플리케이션을 구축할 수 있게 도와줍니다. TypeORM은 TypeScript와 함께 사용하기 좋은 ORM(Object Relational Mapper)으로, 쉽게 데이터베이스와 상호작용할 수 있게 해줍니다. 이 글에서는 NestJS와 TypeORM을 사용해서 간단한 CRUD(Create, Read, Update, Delete) API를 만드는 방법을 알아보겠습니다."}],"\n",["$","h3",null,{"id":"6ba77094","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"준비물"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"Node.js와 npm이 설치되어 있어야 합니다."}],"\n",["$","li","li-1",{"children":["NestJS CLI가 설치되어 있어야 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"npm install -g @nestjs/cli","position":{"start":{"line":9,"column":29,"offset":387},"end":{"line":9,"column":57,"offset":415}}}],"position":{"start":{"line":9,"column":29,"offset":387},"end":{"line":9,"column":57,"offset":415}}},"children":"npm install -g @nestjs/cli"}}]]}],"\n"]}],"\n",["$","h2",null,{"id":"35ce895d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로젝트 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"NestJS 프로젝트를 생성하고 TypeORM을 설정하는 단계부터 시작하겠습니다."}],"\n",["$","h3",null,{"id":"cdef69a5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로젝트 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, NestJS 프로젝트를 생성합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-sh","node":{"type":"element","tagName":"code","properties":{"className":["language-sh"]},"children":[{"type":"text","value":"nest new crud-api\ncd crud-api\n"}],"position":{"start":{"line":17,"column":1,"offset":512},"end":{"line":20,"column":4,"offset":551}}},"children":"nest new crud-api\ncd crud-api\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"생성된 프로젝트로 이동한 후, 필요한 패키지들을 설치합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-sh","node":{"type":"element","tagName":"code","properties":{"className":["language-sh"]},"children":[{"type":"text","value":"npm install --save @nestjs/typeorm typeorm mysql2\n"}],"position":{"start":{"line":24,"column":1,"offset":588},"end":{"line":26,"column":4,"offset":647}}},"children":"npm install --save @nestjs/typeorm typeorm mysql2\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"여기서는 MySQL을 사용합니다. 다른 데이터베이스를 사용하려면 패키지를 변경하면 됩니다."}],"\n",["$","h3",null,{"id":"b6d93314","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"환경 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["루트 디렉토리에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":".env","position":{"start":{"line":31,"column":10,"offset":720},"end":{"line":31,"column":16,"offset":726}}}],"position":{"start":{"line":31,"column":10,"offset":720},"end":{"line":31,"column":16,"offset":726}}},"children":".env"}}]," 파일을 생성하고 데이터베이스 연결 정보를 설정합니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DB_HOST=localhost\nDB_PORT=3306\nDB_USERNAME=root\nDB_PASSWORD=password\nDB_DATABASE=testdb\n"}],"position":{"start":{"line":33,"column":1,"offset":758},"end":{"line":39,"column":4,"offset":853}}},"children":"DB_HOST=localhost\nDB_PORT=3306\nDB_USERNAME=root\nDB_PASSWORD=password\nDB_DATABASE=testdb\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/app.module.ts","position":{"start":{"line":41,"column":1,"offset":855},"end":{"line":41,"column":20,"offset":874}}}],"position":{"start":{"line":41,"column":1,"offset":855},"end":{"line":41,"column":20,"offset":874}}},"children":"src/app.module.ts"}}]," 파일을 수정하여 TypeORM을 설정합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-typescript","node":{"type":"element","tagName":"code","properties":{"className":["language-typescript"]},"children":[{"type":"text","value":"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT, 10),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: true,\n    }),\n    // 다른 모듈들을 여기에 추가할 수 있습니다.\n  ],\n})\nexport class AppModule {}\n"}],"position":{"start":{"line":43,"column":1,"offset":901},"end":{"line":67,"column":4,"offset":1541}}},"children":"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT, 10),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: true,\n    }),\n    // 다른 모듈들을 여기에 추가할 수 있습니다.\n  ],\n})\nexport class AppModule {}\n"}}]}],"\n",["$","h2",null,{"id":"10b3ca55","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"엔티티 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["간단한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":70,"column":5,"offset":1557},"end":{"line":70,"column":11,"offset":1563}}}],"position":{"start":{"line":70,"column":5,"offset":1557},"end":{"line":70,"column":11,"offset":1563}}},"children":"Item"}}]," 엔티티를 만듭니다. 이 엔티티는 데이터베이스 테이블과 매핑되며, CRUD 연산을 수행할 대상이 됩니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-typescript","node":{"type":"element","tagName":"code","properties":{"className":["language-typescript"]},"children":[{"type":"text","value":"import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Item {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column('text')\n  description: string;\n}\n"}],"position":{"start":{"line":72,"column":1,"offset":1623},"end":{"line":86,"column":4,"offset":1852}}},"children":"import { Entity, Column, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class Item {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column('text')\n  description: string;\n}\n"}}]}],"\n",["$","h2",null,{"id":"dfae782d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"서비스와 컨트롤러 작성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"서비스와 컨트롤러를 작성하여 CRUD API를 구현합니다."}],"\n",["$","h3",null,{"id":"45c901dc","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"서비스"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["서비스 클래스는 비즈니스 로직을 담당합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/item/item.service.ts","position":{"start":{"line":92,"column":26,"offset":1937},"end":{"line":92,"column":52,"offset":1963}}}],"position":{"start":{"line":92,"column":26,"offset":1937},"end":{"line":92,"column":52,"offset":1963}}},"children":"src/item/item.service.ts"}}]," 파일을 생성하여 다음과 같이 작성합니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-typescript","node":{"type":"element","tagName":"code","properties":{"className":["language-typescript"]},"children":[{"type":"text","value":"import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Item } from './item.entity';\n\n@Injectable()\nexport class ItemService {\n  constructor(\n    @InjectRepository(Item)\n    private readonly itemRepository: Repository<Item>,\n  ) {}\n\n  async findAll(): Promise<Item[]> {\n    return this.itemRepository.find();\n  }\n\n  async findOne(id: number): Promise<Item> {\n    return this.itemRepository.findOne(id);\n  }\n\n  async create(item: Item): Promise<Item> {\n    return this.itemRepository.save(item);\n  }\n\n  async update(id: number, item: Item): Promise<void> {\n    await this.itemRepository.update(id, item);\n  }\n\n  async remove(id: number): Promise<void> {\n    await this.itemRepository.delete(id);\n  }\n}\n"}],"position":{"start":{"line":94,"column":1,"offset":1988},"end":{"line":127,"column":4,"offset":2794}}},"children":"import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Item } from './item.entity';\n\n@Injectable()\nexport class ItemService {\n  constructor(\n    @InjectRepository(Item)\n    private readonly itemRepository: Repository<Item>,\n  ) {}\n\n  async findAll(): Promise<Item[]> {\n    return this.itemRepository.find();\n  }\n\n  async findOne(id: number): Promise<Item> {\n    return this.itemRepository.findOne(id);\n  }\n\n  async create(item: Item): Promise<Item> {\n    return this.itemRepository.save(item);\n  }\n\n  async update(id: number, item: Item): Promise<void> {\n    await this.itemRepository.update(id, item);\n  }\n\n  async remove(id: number): Promise<void> {\n    await this.itemRepository.delete(id);\n  }\n}\n"}}]}],"\n",["$","h3",null,{"id":"7831dd12","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"컨트롤러"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["컨트롤러 클래스는 HTTP 요청을 처리하고 서비스 클래스를 호출하여 응답을 반환합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/item/item.controller.ts","position":{"start":{"line":130,"column":50,"offset":2854},"end":{"line":130,"column":79,"offset":2883}}}],"position":{"start":{"line":130,"column":50,"offset":2854},"end":{"line":130,"column":79,"offset":2883}}},"children":"src/item/item.controller.ts"}}]," 파일을 생성하여 다음과 같이 작성합니다."]}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-typescript","node":{"type":"element","tagName":"code","properties":{"className":["language-typescript"]},"children":[{"type":"text","value":"import { Controller, Get, Post, Body, Param, Delete, Put } from '@nestjs/common';\nimport { ItemService } from './item.service';\nimport { Item } from './item.entity';\n\n@Controller('items')\nexport class ItemController {\n  constructor(private readonly itemService: ItemService) {}\n\n  @Get()\n  findAll(): Promise<Item[]> {\n    return this.itemService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: number): Promise<Item> {\n    return this.itemService.findOne(id);\n  }\n\n  @Post()\n  create(@Body() item: Item): Promise<Item> {\n    return this.itemService.create(item);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: number, @Body() item: Item): Promise<void> {\n    return this.itemService.update(id, item);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: number): Promise<void> {\n    return this.itemService.remove(id);\n  }\n}\n"}],"position":{"start":{"line":132,"column":1,"offset":2908},"end":{"line":166,"column":4,"offset":3753}}},"children":"import { Controller, Get, Post, Body, Param, Delete, Put } from '@nestjs/common';\nimport { ItemService } from './item.service';\nimport { Item } from './item.entity';\n\n@Controller('items')\nexport class ItemController {\n  constructor(private readonly itemService: ItemService) {}\n\n  @Get()\n  findAll(): Promise<Item[]> {\n    return this.itemService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: number): Promise<Item> {\n    return this.itemService.findOne(id);\n  }\n\n  @Post()\n  create(@Body() item: Item): Promise<Item> {\n    return this.itemService.create(item);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: number, @Body() item: Item): Promise<void> {\n    return this.itemService.update(id, item);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: number): Promise<void> {\n    return this.itemService.remove(id);\n  }\n}\n"}}]}],"\n",["$","h2",null,{"id":"e47ff81f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"모듈 등록"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Item","position":{"start":{"line":169,"column":1,"offset":3764},"end":{"line":169,"column":7,"offset":3770}}}],"position":{"start":{"line":169,"column":1,"offset":3764},"end":{"line":169,"column":7,"offset":3770}}},"children":"Item"}}]," 모듈을 등록하여 완성합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/item/item.module.ts","position":{"start":{"line":169,"column":24,"offset":3787},"end":{"line":169,"column":49,"offset":3812}}}],"position":{"start":{"line":169,"column":24,"offset":3787},"end":{"line":169,"column":49,"offset":3812}}},"children":"src/item/item.module.ts"}}]," 파일을 생성하여 다음과 같이 작성합니다."]}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"className":"language-typescript","node":{"type":"element","tagName":"code","properties":{"className":["language-typescript"]},"children":[{"type":"text","value":"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Item } from './item.entity';\nimport { ItemService } from './item.service';\nimport { ItemController } from './item.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Item])],\n  providers: [ItemService],\n  controllers: [ItemController],\n})\nexport class ItemModule {}\n"}],"position":{"start":{"line":171,"column":1,"offset":3837},"end":{"line":184,"column":4,"offset":4229}}},"children":"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Item } from './item.entity';\nimport { ItemService } from './item.service';\nimport { ItemController } from './item.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Item])],\n  providers: [ItemService],\n  controllers: [ItemController],\n})\nexport class ItemModule {}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AppModule","position":{"start":{"line":186,"column":4,"offset":4234},"end":{"line":186,"column":15,"offset":4245}}}],"position":{"start":{"line":186,"column":4,"offset":4234},"end":{"line":186,"column":15,"offset":4245}}},"children":"AppModule"}}],"에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ItemModule","position":{"start":{"line":186,"column":17,"offset":4247},"end":{"line":186,"column":29,"offset":4259}}}],"position":{"start":{"line":186,"column":17,"offset":4247},"end":{"line":186,"column":29,"offset":4259}}},"children":"ItemModule"}}],"을 등록합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"src/app.module.ts","position":{"start":{"line":186,"column":38,"offset":4268},"end":{"line":186,"column":57,"offset":4287}}}],"position":{"start":{"line":186,"column":38,"offset":4268},"end":{"line":186,"column":57,"offset":4287}}},"children":"src/app.module.ts"}}]," 파일을 다음과 같이 수정합니다."]}],"\n",["$","pre","pre-8",{"children":["$","$Ld",null,{"props":{"className":"language-typescript","node":{"type":"element","tagName":"code","properties":{"className":["language-typescript"]},"children":[{"type":"text","value":"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { ItemModule } from './item/item.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT, 10),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: true,\n    }),\n    ItemModule,\n  ],\n})\nexport class AppModule {}\n"}],"position":{"start":{"line":188,"column":1,"offset":4307},"end":{"line":213,"column":4,"offset":4981}}},"children":"import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\nimport { ItemModule } from './item/item.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: 'mysql',\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT, 10),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_DATABASE,\n      entities: [__dirname + '/**/*.entity{.ts,.js}'],\n      synchronize: true,\n    }),\n    ItemModule,\n  ],\n})\nexport class AppModule {}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 NestJS와 TypeORM을 사용하여 간단한 CRUD API를 구현하는 방법을 배웠습니다. 이 애플리케이션은 기본적인 CRUD 연산을 수행할 수 있으며, 이를 바탕으로 더 복잡한 비즈니스 로직과 다양한 기능을 추가해 나갈 수 있습니다. 다음 단계로는 인증, 권한 부여, 테스트 등 더 고급 주제들을 배우고 프로젝트에 적용해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기","toc":[{"tagName":"h1","title":"NestJS와 TypeORM으로 간단하게 CRUD API 만들기","id":"d8d39e65"},{"tagName":"h2","title":"소개","id":"fa255f0c"},{"tagName":"h3","title":"준비물","id":"6ba77094"},{"tagName":"h2","title":"프로젝트 설정","id":"35ce895d"},{"tagName":"h3","title":"프로젝트 생성","id":"cdef69a5"},{"tagName":"h3","title":"환경 설정","id":"b6d93314"},{"tagName":"h2","title":"엔티티 생성","id":"10b3ca55"},{"tagName":"h2","title":"서비스와 컨트롤러 작성","id":"dfae782d"},{"tagName":"h3","title":"서비스","id":"45c901dc"},{"tagName":"h3","title":"컨트롤러","id":"7831dd12"},{"tagName":"h2","title":"모듈 등록","id":"e47ff81f"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
