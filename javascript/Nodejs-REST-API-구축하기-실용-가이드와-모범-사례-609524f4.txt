1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-REST-API-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80-609524f4","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-REST-API-구축하기-실용-가이드와-모범-사례-609524f4\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-REST-API-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80-609524f4","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-REST-API-구축하기-실용-가이드와-모범-사례-609524f4\"}"},"styles":[]}],"segment":["slug","Nodejs-REST-API-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80-609524f4","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js REST API 구축하기: 실용 가이드와 모범 사례 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js를 사용하여 REST API를 구축하는 과정과 모범 사례에 대해 다룹니다. Node.js는 비동기 이벤트 주도와 비차단 I/O 모델을 채택하여 고성능 네트워크 어플리케이션을 개발하는 데 최적화되어 있습니다. 이 가이드는 단계별 예제와 함께 REST API 설계, 구현, 테스트 및 배포 방법을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,REST API,JavaScript,웹 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-REST-API-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80-609524f4"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js REST API 구축하기: 실용 가이드와 모범 사례 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js REST API 구축하기: 실용 가이드와 모범 사례 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js를 사용하여 REST API를 구축하는 과정과 모범 사례에 대해 다룹니다. Node.js는 비동기 이벤트 주도와 비차단 I/O 모델을 채택하여 고성능 네트워크 어플리케이션을 개발하는 데 최적화되어 있습니다. 이 가이드는 단계별 예제와 함께 REST API 설계, 구현, 테스트 및 배포 방법을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-REST-API-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-%EC%8B%A4%EC%9A%A9-%EA%B0%80%EC%9D%B4%EB%93%9C%EC%99%80-%EB%AA%A8%EB%B2%94-%EC%82%AC%EB%A1%80-609524f4"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js REST API 구축하기: 실용 가이드와 모범 사례 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js를 사용하여 REST API를 구축하는 과정과 모범 사례에 대해 다룹니다. Node.js는 비동기 이벤트 주도와 비차단 I/O 모델을 채택하여 고성능 네트워크 어플리케이션을 개발하는 데 최적화되어 있습니다. 이 가이드는 단계별 예제와 함께 REST API 설계, 구현, 테스트 및 배포 방법을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
e:T1b76,
# Node.js REST API 구축하기: 실용 가이드와 모범 사례

Node.js는 서버-클라이언트 모델에서 비동기 이벤트 주도와 비차단 I/O 모델을 활용하여 고성능 네트워크 어플리케이션을 만드는데 아주 유용한 도구입니다. 이 글은 Node.js를 사용하여 REST API를 구축하는 과정과 모범 사례를 소개합니다. REST API는 Representational State Transfer Application Programming Interface의 약자로, 웹 기반의 데이터 교환 방식입니다. 이 글에서는 Node.js를 활용하여 데이터와 리소스를 효율적으로 처리하는 방법을 배워보겠습니다.

## 개발 환경 설정

먼저, 개발 환경을 설정해야 합니다. Node.js와 npm(Node Package Manager)이 필요합니다. Node.js와 npm을 설치하는 방법은 다음과 같습니다.

1. Node.js 공식 웹사이트에서 설치 프로그램 다운로드 및 실행: [Node.js 홈페이지](https://nodejs.org)
2. 설치가 완료되면 터미널을 열고 다음 명령어를 입력하여 설치가 제대로 되었는지 확인합니다.

```bash
node -v
npm -v
```

## 프로젝트 초기화

이제 프로젝트를 초기화해보겠습니다. 프로젝트 폴더를 만들고 초기화 명령어를 입력합니다.

```bash
mkdir my-rest-api
cd my-rest-api
npm init -y
```

이 명령어는 기본 설정으로 `package.json` 파일을 만듭니다. 이 파일은 프로젝트의 메타데이터 및 종속성을 관리합니다.

## 기본 패키지 설치

REST API를 구축하기 위해 몇 가지 필수 패키지를 설치해야 합니다. Express는 Node.js의 가장 인기 있는 웹 프레임워크 중 하나로, REST API 서버를 빠르게 만들 수 있도록 도와줍니다.

```bash
npm install express
npm install body-parser
```

- `express`: Node.js 웹 프레임워크
- `body-parser`: 클라이언트에서 전송된 요청의 본문을 해석하는 미들웨어

## 기본 서버 설정 및 라우트 추가

Express를 사용하여 서버를 설정하고 간단한 라우트를 추가해보겠습니다. 프로젝트 루트 디렉토리에 `index.js` 파일을 만들고 다음 코드를 작성합니다.

```javascript
const express = require('express');
const bodyParser = require('body-parser');
const app = express();
const port = 3000;

app.use(bodyParser.json());

app.get('/', (req, res) => {
  res.send('안녕하세요, Node.js REST API입니다!');
});

app.listen(port, () => {
  console.log(`서버가 http://localhost:${port}/ 에서 실행 중입니다.`);
});
```

이제 터미널에서 다음 명령어를 입력하여 서버를 실행합니다.

```bash
node index.js
```

웹 브라우저를 열고 `http://localhost:3000` 을 입력하면 `안녕하세요, Node.js REST API입니다!` 라는 메시지가 보여야 합니다.

## CRUD 기능 추가

REST API의 핵심 기능은 CRUD(생성, 읽기, 업데이트, 삭제) 작업을 수행하는 것입니다. 예제 데이터를 관리하는 간단한 REST API를 만들어보겠습니다.

먼저, 사용자를 저장할 수 있는 `users` 배열을 추가합니다.

```javascript
let users = [];
```

### 사용자 생성(Create)

사용자를 생성하는 `POST` 요청을 처리하는 라우트를 추가합니다.

```javascript
app.post('/users', (req, res) => {
  const user = req.body;
  user.id = users.length + 1;
  users.push(user);
  res.status(201).send(user);
});
```

### 사용자 조회(Read)

모든 사용자를 조회하는 `GET` 요청 라우트를 추가합니다

```javascript
app.get('/users', (req, res) => {
  res.send(users);
});
```

특정 사용자를 조회하는 `GET` 요청 라우트도 추가합니다.

```javascript
app.get('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id, 10);
  const user = users.find(u => u.id === userId);
  if (user) {
    res.send(user);
  } else {
    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });
  }
});
```

### 사용자 업데이트(Update)

특정 사용자를 업데이트하는 `PUT` 요청 라우트를 추가합니다.

```javascript
app.put('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id, 10);
  const userIndex = users.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    users[userIndex] = { ...users[userIndex], ...req.body };
    res.send(users[userIndex]);
  } else {
    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });
  }
});
```

### 사용자 삭제(Delete)

특정 사용자를 삭제하는 `DELETE` 요청 라우트를 추가합니다.

```javascript
app.delete('/users/:id', (req, res) => {
  const userId = parseInt(req.params.id, 10);
  const userIndex = users.findIndex(u => u.id === userId);
  if (userIndex !== -1) {
    const deletedUser = users.splice(userIndex, 1);
    res.send(deletedUser);
  } else {
    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });
  }
});
```

## 모범 사례

Node.js로 REST API를 구축할 때 다음과 같은 모범 사례를 따르는 것이 좋습니다.

### 에러 처리

API 요청 중에 발생할 수 있는 다양한 에러를 명확하게 처리해야 합니다. 사용자에게 적절한 HTTP 상태 코드와 에러 메시지를 반환하여 문제를 진단할 수 있도록 도와줍니다.

```javascript
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send({ message: '서버 에러가 발생했습니다.' });
});
```

### 입력 데이터 유효성 검사

사용자 입력 데이터를 검증하여 잘못된 데이터가 서버에 저장되지 않도록 해야 합니다. 이를 위해 `Joi`와 같은 데이터 유효성 검사 라이브러리를 사용할 수 있습니다.

```bash
npm install joi
```

```javascript
const Joi = require('joi');

const userSchema = Joi.object({
  name: Joi.string().min(3).required(),
  email: Joi.string().email().required()
});

app.post('/users', (req, res) => {
  const { error } = userSchema.validate(req.body);
  if (error) {
    return res.status(400).send({ message: error.details[0].message });
  }
  const user = req.body;
  user.id = users.length + 1;
  users.push(user);
  res.status(201).send(user);
});
```

### 로깅과 모니터링

서버의 상태와 API 요청을 모니터링하기 위해 로깅 기능을 설정하는 것이 좋습니다. `morgan`과 같은 라이브러리를 사용하여 HTTP 요청을 기록할 수 있습니다.

```bash
npm install morgan
```

```javascript
const morgan = require('morgan');
app.use(morgan('combined'));
```

## 결론

이 글에서는 Node.js와 Express를 사용하여 간단한 REST API를 구축하는 방법을 배웠습니다. 또한 데이터 유효성 검사, 에러 처리 및 로깅과 같은 모범 사례를 적용하여 안정적이고 신뢰할 수 있는 API를 만드는 방법도 살펴보았습니다. 이 가이드를 통해 더 나은 REST API를 구축하는 데 필요한 지식과 기술을 습득할 수 있기를 바랍니다.
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js REST API 구축하기: 실용 가이드와 모범 사례"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js REST API 구축하기: 실용 가이드와 모범 사례"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-30"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"163b9593","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js REST API 구축하기: 실용 가이드와 모범 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js는 서버-클라이언트 모델에서 비동기 이벤트 주도와 비차단 I/O 모델을 활용하여 고성능 네트워크 어플리케이션을 만드는데 아주 유용한 도구입니다. 이 글은 Node.js를 사용하여 REST API를 구축하는 과정과 모범 사례를 소개합니다. REST API는 Representational State Transfer Application Programming Interface의 약자로, 웹 기반의 데이터 교환 방식입니다. 이 글에서는 Node.js를 활용하여 데이터와 리소스를 효율적으로 처리하는 방법을 배워보겠습니다."}],"\n",["$","h2",null,{"id":"0aa5bcbe","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"개발 환경 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, 개발 환경을 설정해야 합니다. Node.js와 npm(Node Package Manager)이 필요합니다. Node.js와 npm을 설치하는 방법은 다음과 같습니다."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["Node.js 공식 웹사이트에서 설치 프로그램 다운로드 및 실행: ",["$","$Ld",null,{"props":{"href":"https://nodejs.org","node":{"type":"element","tagName":"a","properties":{"href":"https://nodejs.org"},"children":[{"type":"text","value":"Node.js 홈페이지","position":{"start":{"line":10,"column":42,"offset":491},"end":{"line":10,"column":54,"offset":503}}}],"position":{"start":{"line":10,"column":41,"offset":490},"end":{"line":10,"column":75,"offset":524}}},"children":"Node.js 홈페이지"},"post":{"id":"609524f4-b03e-43df-9d37-4471041f6aff","title":"Node.js REST API 구축하기: 실용 가이드와 모범 사례","fileName":"Nodejs-REST-API-구축하기-실용-가이드와-모범-사례-609524f4","description":"이 글은 Node.js를 사용하여 REST API를 구축하는 과정과 모범 사례에 대해 다룹니다. Node.js는 비동기 이벤트 주도와 비차단 I/O 모델을 채택하여 고성능 네트워크 어플리케이션을 개발하는 데 최적화되어 있습니다. 이 가이드는 단계별 예제와 함께 REST API 설계, 구현, 테스트 및 배포 방법을 설명합니다.","date":"2024-07-30T06:02:59.645Z","tags":[{"name":"Node.js","path":"/tags/node.js","id":"node.js"},{"name":"REST API","path":"/tags/rest-api","id":"rest-api"},{"name":"JavaScript","path":"/tags/javascript","id":"javascript"},{"name":"웹 개발","path":"/tags/웹-개발","id":"웹-개발"}],"banner":"/images/javascriptBanner1.jpg","author":"마고유","project":null,"totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"Nodejs-REST-API-구축하기-실용-가이드와-모범-사례-609524f4","content":"$e","category":"javascript","readMin":"7.2"},"language":"kr"}]]}],"\n",["$","li","li-1",{"children":"설치가 완료되면 터미널을 열고 다음 명령어를 입력하여 설치가 제대로 되었는지 확인합니다."}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Lf",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"node -v\nnpm -v\n"}],"position":{"start":{"line":13,"column":1,"offset":579},"end":{"line":16,"column":4,"offset":605}}},"children":"node -v\nnpm -v\n"}}]}],"\n",["$","h2",null,{"id":"0ef85213","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로젝트 초기화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 프로젝트를 초기화해보겠습니다. 프로젝트 폴더를 만들고 초기화 명령어를 입력합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Lf",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"mkdir my-rest-api\ncd my-rest-api\nnpm init -y\n"}],"position":{"start":{"line":22,"column":1,"offset":670},"end":{"line":26,"column":4,"offset":726}}},"children":"mkdir my-rest-api\ncd my-rest-api\nnpm init -y\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 명령어는 기본 설정으로 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"package.json","position":{"start":{"line":28,"column":16,"offset":743},"end":{"line":28,"column":30,"offset":757}}}],"position":{"start":{"line":28,"column":16,"offset":743},"end":{"line":28,"column":30,"offset":757}}},"children":"package.json"}}]," 파일을 만듭니다. 이 파일은 프로젝트의 메타데이터 및 종속성을 관리합니다."]}],"\n",["$","h2",null,{"id":"37d1ae53","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 패키지 설치"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"REST API를 구축하기 위해 몇 가지 필수 패키지를 설치해야 합니다. Express는 Node.js의 가장 인기 있는 웹 프레임워크 중 하나로, REST API 서버를 빠르게 만들 수 있도록 도와줍니다."}],"\n",["$","pre","pre-2",{"children":["$","$Lf",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install express\nnpm install body-parser\n"}],"position":{"start":{"line":34,"column":1,"offset":932},"end":{"line":37,"column":4,"offset":987}}},"children":"npm install express\nnpm install body-parser\n"}}]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"express","position":{"start":{"line":39,"column":3,"offset":991},"end":{"line":39,"column":12,"offset":1000}}}],"position":{"start":{"line":39,"column":3,"offset":991},"end":{"line":39,"column":12,"offset":1000}}},"children":"express"}}],": Node.js 웹 프레임워크"]}],"\n",["$","li","li-1",{"children":[["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"body-parser","position":{"start":{"line":40,"column":3,"offset":1020},"end":{"line":40,"column":16,"offset":1033}}}],"position":{"start":{"line":40,"column":3,"offset":1020},"end":{"line":40,"column":16,"offset":1033}}},"children":"body-parser"}}],": 클라이언트에서 전송된 요청의 본문을 해석하는 미들웨어"]}],"\n"]}],"\n",["$","h2",null,{"id":"e2638930","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 서버 설정 및 라우트 추가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Express를 사용하여 서버를 설정하고 간단한 라우트를 추가해보겠습니다. 프로젝트 루트 디렉토리에 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"index.js","position":{"start":{"line":44,"column":57,"offset":1144},"end":{"line":44,"column":67,"offset":1154}}}],"position":{"start":{"line":44,"column":57,"offset":1144},"end":{"line":44,"column":67,"offset":1154}}},"children":"index.js"}}]," 파일을 만들고 다음 코드를 작성합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.json());\n\napp.get('/', (req, res) => {\n  res.send('안녕하세요, Node.js REST API입니다!');\n});\n\napp.listen(port, () => {\n  console.log(`서버가 http://localhost:${port}/ 에서 실행 중입니다.`);\n});\n"}],"position":{"start":{"line":46,"column":1,"offset":1178},"end":{"line":61,"column":4,"offset":1512}}},"children":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.json());\n\napp.get('/', (req, res) => {\n  res.send('안녕하세요, Node.js REST API입니다!');\n});\n\napp.listen(port, () => {\n  console.log(`서버가 http://localhost:${port}/ 에서 실행 중입니다.`);\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 터미널에서 다음 명령어를 입력하여 서버를 실행합니다."}],"\n",["$","pre","pre-4",{"children":["$","$Lf",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"node index.js\n"}],"position":{"start":{"line":65,"column":1,"offset":1548},"end":{"line":67,"column":4,"offset":1573}}},"children":"node index.js\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["웹 브라우저를 열고 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"http://localhost:3000","position":{"start":{"line":69,"column":12,"offset":1586},"end":{"line":69,"column":35,"offset":1609}}}],"position":{"start":{"line":69,"column":12,"offset":1586},"end":{"line":69,"column":35,"offset":1609}}},"children":"http://localhost:3000"}}]," 을 입력하면 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"안녕하세요, Node.js REST API입니다!","position":{"start":{"line":69,"column":43,"offset":1617},"end":{"line":69,"column":72,"offset":1646}}}],"position":{"start":{"line":69,"column":43,"offset":1617},"end":{"line":69,"column":72,"offset":1646}}},"children":"안녕하세요, Node.js REST API입니다!"}}]," 라는 메시지가 보여야 합니다."]}],"\n",["$","h2",null,{"id":"9a129148","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"CRUD 기능 추가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"REST API의 핵심 기능은 CRUD(생성, 읽기, 업데이트, 삭제) 작업을 수행하는 것입니다. 예제 데이터를 관리하는 간단한 REST API를 만들어보겠습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저, 사용자를 저장할 수 있는 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"users","position":{"start":{"line":75,"column":19,"offset":1791},"end":{"line":75,"column":26,"offset":1798}}}],"position":{"start":{"line":75,"column":19,"offset":1791},"end":{"line":75,"column":26,"offset":1798}}},"children":"users"}}]," 배열을 추가합니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"let users = [];\n"}],"position":{"start":{"line":77,"column":1,"offset":1811},"end":{"line":79,"column":4,"offset":1844}}},"children":"let users = [];\n"}}]}],"\n",["$","h3",null,{"id":"d47c54c4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용자 생성(Create)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["사용자를 생성하는 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"POST","position":{"start":{"line":83,"column":11,"offset":1876},"end":{"line":83,"column":17,"offset":1882}}}],"position":{"start":{"line":83,"column":11,"offset":1876},"end":{"line":83,"column":17,"offset":1882}}},"children":"POST"}}]," 요청을 처리하는 라우트를 추가합니다."]}],"\n",["$","pre","pre-6",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"app.post('/users', (req, res) => {\n  const user = req.body;\n  user.id = users.length + 1;\n  users.push(user);\n  res.status(201).send(user);\n});\n"}],"position":{"start":{"line":85,"column":1,"offset":1905},"end":{"line":92,"column":4,"offset":2066}}},"children":"app.post('/users', (req, res) => {\n  const user = req.body;\n  user.id = users.length + 1;\n  users.push(user);\n  res.status(201).send(user);\n});\n"}}]}],"\n",["$","h3",null,{"id":"e46a2347","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용자 조회(Read)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["모든 사용자를 조회하는 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GET","position":{"start":{"line":96,"column":14,"offset":2099},"end":{"line":96,"column":19,"offset":2104}}}],"position":{"start":{"line":96,"column":14,"offset":2099},"end":{"line":96,"column":19,"offset":2104}}},"children":"GET"}}]," 요청 라우트를 추가합니다"]}],"\n",["$","pre","pre-7",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"app.get('/users', (req, res) => {\n  res.send(users);\n});\n"}],"position":{"start":{"line":98,"column":1,"offset":2120},"end":{"line":102,"column":4,"offset":2194}}},"children":"app.get('/users', (req, res) => {\n  res.send(users);\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["특정 사용자를 조회하는 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GET","position":{"start":{"line":104,"column":14,"offset":2209},"end":{"line":104,"column":19,"offset":2214}}}],"position":{"start":{"line":104,"column":14,"offset":2209},"end":{"line":104,"column":19,"offset":2214}}},"children":"GET"}}]," 요청 라우트도 추가합니다."]}],"\n",["$","pre","pre-8",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"app.get('/users/:id', (req, res) => {\n  const userId = parseInt(req.params.id, 10);\n  const user = users.find(u => u.id === userId);\n  if (user) {\n    res.send(user);\n  } else {\n    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });\n  }\n});\n"}],"position":{"start":{"line":106,"column":1,"offset":2231},"end":{"line":116,"column":4,"offset":2492}}},"children":"app.get('/users/:id', (req, res) => {\n  const userId = parseInt(req.params.id, 10);\n  const user = users.find(u => u.id === userId);\n  if (user) {\n    res.send(user);\n  } else {\n    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });\n  }\n});\n"}}]}],"\n",["$","h3",null,{"id":"8b9fbe40","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용자 업데이트(Update)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["특정 사용자를 업데이트하는 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PUT","position":{"start":{"line":120,"column":16,"offset":2531},"end":{"line":120,"column":21,"offset":2536}}}],"position":{"start":{"line":120,"column":16,"offset":2531},"end":{"line":120,"column":21,"offset":2536}}},"children":"PUT"}}]," 요청 라우트를 추가합니다."]}],"\n",["$","pre","pre-9",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"app.put('/users/:id', (req, res) => {\n  const userId = parseInt(req.params.id, 10);\n  const userIndex = users.findIndex(u => u.id === userId);\n  if (userIndex !== -1) {\n    users[userIndex] = { ...users[userIndex], ...req.body };\n    res.send(users[userIndex]);\n  } else {\n    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });\n  }\n});\n"}],"position":{"start":{"line":122,"column":1,"offset":2553},"end":{"line":133,"column":4,"offset":2909}}},"children":"app.put('/users/:id', (req, res) => {\n  const userId = parseInt(req.params.id, 10);\n  const userIndex = users.findIndex(u => u.id === userId);\n  if (userIndex !== -1) {\n    users[userIndex] = { ...users[userIndex], ...req.body };\n    res.send(users[userIndex]);\n  } else {\n    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });\n  }\n});\n"}}]}],"\n",["$","h3",null,{"id":"c437436b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용자 삭제(Delete)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["특정 사용자를 삭제하는 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DELETE","position":{"start":{"line":137,"column":14,"offset":2944},"end":{"line":137,"column":22,"offset":2952}}}],"position":{"start":{"line":137,"column":14,"offset":2944},"end":{"line":137,"column":22,"offset":2952}}},"children":"DELETE"}}]," 요청 라우트를 추가합니다."]}],"\n",["$","pre","pre-10",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"app.delete('/users/:id', (req, res) => {\n  const userId = parseInt(req.params.id, 10);\n  const userIndex = users.findIndex(u => u.id === userId);\n  if (userIndex !== -1) {\n    const deletedUser = users.splice(userIndex, 1);\n    res.send(deletedUser);\n  } else {\n    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });\n  }\n});\n"}],"position":{"start":{"line":139,"column":1,"offset":2969},"end":{"line":150,"column":4,"offset":3314}}},"children":"app.delete('/users/:id', (req, res) => {\n  const userId = parseInt(req.params.id, 10);\n  const userIndex = users.findIndex(u => u.id === userId);\n  if (userIndex !== -1) {\n    const deletedUser = users.splice(userIndex, 1);\n    res.send(deletedUser);\n  } else {\n    res.status(404).send({ message: '사용자를 찾을 수 없습니다.' });\n  }\n});\n"}}]}],"\n",["$","h2",null,{"id":"a49bcef8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"모범 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js로 REST API를 구축할 때 다음과 같은 모범 사례를 따르는 것이 좋습니다."}],"\n",["$","h3",null,{"id":"8488876a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"에러 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"API 요청 중에 발생할 수 있는 다양한 에러를 명확하게 처리해야 합니다. 사용자에게 적절한 HTTP 상태 코드와 에러 메시지를 반환하여 문제를 진단할 수 있도록 도와줍니다."}],"\n",["$","pre","pre-11",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"app.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send({ message: '서버 에러가 발생했습니다.' });\n});\n"}],"position":{"start":{"line":160,"column":1,"offset":3489},"end":{"line":165,"column":4,"offset":3628}}},"children":"app.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send({ message: '서버 에러가 발생했습니다.' });\n});\n"}}]}],"\n",["$","h3",null,{"id":"830696cf","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"입력 데이터 유효성 검사"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["사용자 입력 데이터를 검증하여 잘못된 데이터가 서버에 저장되지 않도록 해야 합니다. 이를 위해 ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Joi","position":{"start":{"line":169,"column":54,"offset":3702},"end":{"line":169,"column":59,"offset":3707}}}],"position":{"start":{"line":169,"column":54,"offset":3702},"end":{"line":169,"column":59,"offset":3707}}},"children":"Joi"}}],"와 같은 데이터 유효성 검사 라이브러리를 사용할 수 있습니다."]}],"\n",["$","pre","pre-12",{"children":["$","$Lf",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install joi\n"}],"position":{"start":{"line":171,"column":1,"offset":3743},"end":{"line":173,"column":4,"offset":3770}}},"children":"npm install joi\n"}}]}],"\n",["$","pre","pre-13",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const Joi = require('joi');\n\nconst userSchema = Joi.object({\n  name: Joi.string().min(3).required(),\n  email: Joi.string().email().required()\n});\n\napp.post('/users', (req, res) => {\n  const { error } = userSchema.validate(req.body);\n  if (error) {\n    return res.status(400).send({ message: error.details[0].message });\n  }\n  const user = req.body;\n  user.id = users.length + 1;\n  users.push(user);\n  res.status(201).send(user);\n});\n"}],"position":{"start":{"line":175,"column":1,"offset":3772},"end":{"line":193,"column":4,"offset":4222}}},"children":"const Joi = require('joi');\n\nconst userSchema = Joi.object({\n  name: Joi.string().min(3).required(),\n  email: Joi.string().email().required()\n});\n\napp.post('/users', (req, res) => {\n  const { error } = userSchema.validate(req.body);\n  if (error) {\n    return res.status(400).send({ message: error.details[0].message });\n  }\n  const user = req.body;\n  user.id = users.length + 1;\n  users.push(user);\n  res.status(201).send(user);\n});\n"}}]}],"\n",["$","h3",null,{"id":"23d3e733","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"로깅과 모니터링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["서버의 상태와 API 요청을 모니터링하기 위해 로깅 기능을 설정하는 것이 좋습니다. ",["$","$Lf",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"morgan","position":{"start":{"line":197,"column":48,"offset":4285},"end":{"line":197,"column":56,"offset":4293}}}],"position":{"start":{"line":197,"column":48,"offset":4285},"end":{"line":197,"column":56,"offset":4293}}},"children":"morgan"}}],"과 같은 라이브러리를 사용하여 HTTP 요청을 기록할 수 있습니다."]}],"\n",["$","pre","pre-14",{"children":["$","$Lf",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install morgan\n"}],"position":{"start":{"line":199,"column":1,"offset":4332},"end":{"line":201,"column":4,"offset":4362}}},"children":"npm install morgan\n"}}]}],"\n",["$","pre","pre-15",{"children":["$","$Lf",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const morgan = require('morgan');\napp.use(morgan('combined'));\n"}],"position":{"start":{"line":203,"column":1,"offset":4364},"end":{"line":206,"column":4,"offset":4444}}},"children":"const morgan = require('morgan');\napp.use(morgan('combined'));\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 Node.js와 Express를 사용하여 간단한 REST API를 구축하는 방법을 배웠습니다. 또한 데이터 유효성 검사, 에러 처리 및 로깅과 같은 모범 사례를 적용하여 안정적이고 신뢰할 수 있는 API를 만드는 방법도 살펴보았습니다. 이 가이드를 통해 더 나은 REST API를 구축하는 데 필요한 지식과 기술을 습득할 수 있기를 바랍니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Node.js REST API 구축하기: 실용 가이드와 모범 사례","toc":[{"tagName":"h1","title":"Node.js REST API 구축하기: 실용 가이드와 모범 사례","id":"163b9593"},{"tagName":"h2","title":"개발 환경 설정","id":"0aa5bcbe"},{"tagName":"h2","title":"프로젝트 초기화","id":"0ef85213"},{"tagName":"h2","title":"기본 패키지 설치","id":"37d1ae53"},{"tagName":"h2","title":"기본 서버 설정 및 라우트 추가","id":"e2638930"},{"tagName":"h2","title":"CRUD 기능 추가","id":"9a129148"},{"tagName":"h3","title":"사용자 생성(Create)","id":"d47c54c4"},{"tagName":"h3","title":"사용자 조회(Read)","id":"e46a2347"},{"tagName":"h3","title":"사용자 업데이트(Update)","id":"8b9fbe40"},{"tagName":"h3","title":"사용자 삭제(Delete)","id":"c437436b"},{"tagName":"h2","title":"모범 사례","id":"a49bcef8"},{"tagName":"h3","title":"에러 처리","id":"8488876a"},{"tagName":"h3","title":"입력 데이터 유효성 검사","id":"830696cf"},{"tagName":"h3","title":"로깅과 모니터링","id":"23d3e733"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
