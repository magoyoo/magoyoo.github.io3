1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-ReactorKit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B3%84%ED%9A%8D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EC%A0%84%EB%9E%B5-e1d79b50","d"],{"children":["__PAGE__?{\"slug\":\"Swift-ReactorKit을-사용한-유닛-테스트-전략-유닛-테스트를-계획과-실행-전략-e1d79b50\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-ReactorKit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B3%84%ED%9A%8D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EC%A0%84%EB%9E%B5-e1d79b50","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-ReactorKit을-사용한-유닛-테스트-전략-유닛-테스트를-계획과-실행-전략-e1d79b50\"}"},"styles":[]}],"segment":["slug","Swift-ReactorKit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B3%84%ED%9A%8D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EC%A0%84%EB%9E%B5-e1d79b50","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"ReactorKit은 Swift로 애플리케이션을 개발할 때 반응형 프로그래밍을 지원하는 프레임워크입니다. 이 글에서는 ReactorKit을 사용한 유닛 테스트 계획과 실행 전략에 대해 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,ReactorKit,유닛 테스트,테스트 전략"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-ReactorKit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B3%84%ED%9A%8D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EC%A0%84%EB%9E%B5-e1d79b50"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"ReactorKit은 Swift로 애플리케이션을 개발할 때 반응형 프로그래밍을 지원하는 프레임워크입니다. 이 글에서는 ReactorKit을 사용한 유닛 테스트 계획과 실행 전략에 대해 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-ReactorKit%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EA%B3%84%ED%9A%8D%EA%B3%BC-%EC%8B%A4%ED%96%89-%EC%A0%84%EB%9E%B5-e1d79b50"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"ReactorKit은 Swift로 애플리케이션을 개발할 때 반응형 프로그래밍을 지원하는 프레임워크입니다. 이 글에서는 ReactorKit을 사용한 유닛 테스트 계획과 실행 전략에 대해 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-23"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fb7b2b67","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 ReactorKit을 사용한 유닛 테스트 전략"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 Swift로 애플리케이션을 개발할 때 반응형 프로그래밍을 지원하는 프레임워크로, MVC 패턴을 대신해 사이클링 UI 상태 관리를 보다 간결하고 직관적으로 할 수 있게 합니다. 이 글에서는 ReactorKit을 사용한 유닛 테스트 전략을 다루며, 유닛 테스트를 계획하고 실행하는 방법에 대해 알아보겠습니다."}],"\n",["$","h2",null,{"id":"60060058","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ReactorKit이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 애플리케이션의 상태를 관리하기 위한 잘 정의된 패턴을 제공하여 복잡한 UI 상태 관리를 간단하게 만들어주는 반응형 프로그래밍 프레임워크입니다. ReactorKit의 핵심 구성 요소는 다음과 같습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Reactor"}],": 애플리케이션의 상태를 관리하고 이벤트를 처리하는 로직을 포함합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Action"}],": 유저의 인터랙션이나 시스템 이벤트를 나타내며, Reactor로 전달됩니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"State"}],": 애플리케이션의 현재 상태를 나타냅니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"3acfade7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"유닛 테스트의 중요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"유닛 테스트는 개별적인 코드 단위를 테스트하여 각 부분이 예상대로 동작하는지 확인하는 과정입니다. 유닛 테스트를 통해 코드의 버그를 조기에 발견하고, 리팩토링 시 애플리케이션 전체에 미치는 영향을 최소화할 수 있습니다. 특히, 반응형 프로그래밍에서는 상태 관리가 중요하기 때문에 유닛 테스트를 통해 상태 전환이 제대로 이루어지는지 검증하는 것이 필수적입니다."}],"\n",["$","h2",null,{"id":"a951fd35","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ReactorKit을 사용한 유닛 테스트 계획"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit을 사용한 유닛 테스트를 계획할 때에는 다음 요소를 고려해야 합니다:"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Action"}],"과 ",["$","strong",null,{"className":"font-black","children":"State"}],"의 정의: 테스트 대상이 되는 Action과 State를 명확히 정의합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Reactor"}],"의 동작 검증: 특정 Action이 주어졌을 때 Reactor가 올바르게 State를 변경하는지 확인합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"입출력 검증"}],": Reactor와 View 사이의 데이터 흐름을 검증합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"aa6dda9a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Action과 State 정의하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"간단한 예로 Todo 앱의 Action과 State를 정의해보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum TodoAction {\n    case addTask(String)\n    case removeTask(Int)\n    case completeTask(Int)\n}\n\nstruct TodoState {\n    var tasks: [String]\n    var completedTasks: [String]\n}\n"}],"position":{"start":{"line":30,"column":1,"offset":1067},"end":{"line":41,"column":4,"offset":1255}}},"children":"enum TodoAction {\n    case addTask(String)\n    case removeTask(Int)\n    case completeTask(Int)\n}\n\nstruct TodoState {\n    var tasks: [String]\n    var completedTasks: [String]\n}\n"}}]}],"\n",["$","h3",null,{"id":"806052fc","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Reactor의 동작 검증"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Reactor는 Action을 받아 상태를 변경하는 역할을 합니다. 이를 테스트하기 위해 특정 Action이 주어졌을 때 상태가 예상대로 변경되는지 확인해야 합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import XCTest\n@testable import YourApp\n\nclass TodoReactorTests: XCTestCase {\n    func testAddTask() {\n        // Given\n        let reactor = TodoReactor()\n\n        // When\n        reactor.action.onNext(.addTask(\"New Task\"))\n\n        // Then\n        XCTAssertEqual(reactor.currentState.tasks, [\"New Task\"])\n    }\n\n    func testRemoveTask() {\n        // Given\n        let reactor = TodoReactor()\n        reactor.action.onNext(.addTask(\"Task to Remove\"))\n\n        // When\n        reactor.action.onNext(.removeTask(0))\n\n        // Then\n        XCTAssertTrue(reactor.currentState.tasks.isEmpty)\n    }\n}\n"}],"position":{"start":{"line":47,"column":1,"offset":1371},"end":{"line":75,"column":4,"offset":1981}}},"children":"import XCTest\n@testable import YourApp\n\nclass TodoReactorTests: XCTestCase {\n    func testAddTask() {\n        // Given\n        let reactor = TodoReactor()\n\n        // When\n        reactor.action.onNext(.addTask(\"New Task\"))\n\n        // Then\n        XCTAssertEqual(reactor.currentState.tasks, [\"New Task\"])\n    }\n\n    func testRemoveTask() {\n        // Given\n        let reactor = TodoReactor()\n        reactor.action.onNext(.addTask(\"Task to Remove\"))\n\n        // When\n        reactor.action.onNext(.removeTask(0))\n\n        // Then\n        XCTAssertTrue(reactor.currentState.tasks.isEmpty)\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"6d669882","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"입출력 검증"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Reactor와 View 사이의 데이터 흐름을 검증하기 위해서는 ViewModel을 통해 데이터를 주고받는 방식을 테스트합니다. 이는 주로 ViewModel의 메서드 호출 후 Reactor의 상태 변화를 확인하는 방식으로 이루어집니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class TodoViewModelTests: XCTestCase {\n    func testToggleTaskCompletion() {\n        // Given\n        let reactor = TodoReactor()\n        let viewModel = TodoViewModel(reactor: reactor)\n        reactor.action.onNext(.addTask(\"Task to Complete\"))\n\n        // When\n        viewModel.toggleTaskCompletion(at: 0)\n\n        // Then\n        XCTAssertTrue(reactor.currentState.completedTasks.contains(\"Task to Complete\"))\n    }\n}\n"}],"position":{"start":{"line":81,"column":1,"offset":2128},"end":{"line":96,"column":4,"offset":2562}}},"children":"class TodoViewModelTests: XCTestCase {\n    func testToggleTaskCompletion() {\n        // Given\n        let reactor = TodoReactor()\n        let viewModel = TodoViewModel(reactor: reactor)\n        reactor.action.onNext(.addTask(\"Task to Complete\"))\n\n        // When\n        viewModel.toggleTaskCompletion(at: 0)\n\n        // Then\n        XCTAssertTrue(reactor.currentState.completedTasks.contains(\"Task to Complete\"))\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"4d0956b9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"최종 결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit을 사용한 애플리케이션 개발에서 유닛 테스트는 필수적인 부분입니다. ReactorKit의 핵심 개념인 Reactor, Action, State를 명확히 이해하고, 이를 기반으로 테스트를 구성함으로써 신뢰성 높은 코드를 작성할 수 있습니다. 유닛 테스트를 통해 코드의 안정성을 높이고, 유지보수를 용이하게 할 수 있습니다. 이는 결과적으로 사용자에게 더욱 높은 품질의 애플리케이션을 제공하는 데 중요한 역할을 합니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"[Swift] ReactorKit을 사용한 유닛 테스트 전략: 유닛 테스트를 계획과 실행 전략","toc":[{"tagName":"h1","title":"Swift에서 ReactorKit을 사용한 유닛 테스트 전략","id":"fb7b2b67"},{"tagName":"h2","title":"ReactorKit이란?","id":"60060058"},{"tagName":"h2","title":"유닛 테스트의 중요성","id":"3acfade7"},{"tagName":"h2","title":"ReactorKit을 사용한 유닛 테스트 계획","id":"a951fd35"},{"tagName":"h3","title":"Action과 State 정의하기","id":"aa6dda9a"},{"tagName":"h3","title":"Reactor의 동작 검증","id":"806052fc"},{"tagName":"h3","title":"입출력 검증","id":"6d669882"},{"tagName":"h2","title":"최종 결론","id":"4d0956b9"}],"language":"kr"}]}]]}]]
8:null
