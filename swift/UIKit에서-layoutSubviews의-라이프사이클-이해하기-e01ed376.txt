1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","UIKit%EC%97%90%EC%84%9C-layoutSubviews%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-e01ed376","d"],{"children":["__PAGE__?{\"slug\":\"UIKit에서-layoutSubviews의-라이프사이클-이해하기-e01ed376\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","UIKit%EC%97%90%EC%84%9C-layoutSubviews%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-e01ed376","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"UIKit에서-layoutSubviews의-라이프사이클-이해하기-e01ed376\"}"},"styles":[]}],"segment":["slug","UIKit%EC%97%90%EC%84%9C-layoutSubviews%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-e01ed376","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"UIKit에서 layoutSubviews의 라이프사이클 이해하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"UIKit 프레임워크에서는 뷰의 레이아웃을 조정하는 데 있어 layoutSubviews 메서드가 중요한 역할을 합니다. 이 글에서는 layoutSubviews의 라이프사이클과 그 사용 방법에 대해 깊이 있게 살펴봅니다."}],["$","meta","3",{"name":"keywords","content":"UIKit,iOS,Swift,layoutSubviews"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/UIKit%EC%97%90%EC%84%9C-layoutSubviews%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-e01ed376"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"UIKit에서 layoutSubviews의 라이프사이클 이해하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"UIKit에서 layoutSubviews의 라이프사이클 이해하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"UIKit 프레임워크에서는 뷰의 레이아웃을 조정하는 데 있어 layoutSubviews 메서드가 중요한 역할을 합니다. 이 글에서는 layoutSubviews의 라이프사이클과 그 사용 방법에 대해 깊이 있게 살펴봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/UIKit%EC%97%90%EC%84%9C-layoutSubviews%EC%9D%98-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-e01ed376"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"UIKit에서 layoutSubviews의 라이프사이클 이해하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"UIKit 프레임워크에서는 뷰의 레이아웃을 조정하는 데 있어 layoutSubviews 메서드가 중요한 역할을 합니다. 이 글에서는 layoutSubviews의 라이프사이클과 그 사용 방법에 대해 깊이 있게 살펴봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"UIKit에서 layoutSubviews의 라이프사이클 이해하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"UIKit에서 layoutSubviews의 라이프사이클 이해하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-06"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"10303ea3","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"UIKit에서 layoutSubviews의 라이프사이클 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["UIKit 프레임워크에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":4,"column":15,"offset":54},"end":{"line":4,"column":31,"offset":70}}}],"position":{"start":{"line":4,"column":15,"offset":54},"end":{"line":4,"column":31,"offset":70}}},"children":"layoutSubviews"}}],"는 뷰의 레이아웃을 다시 계산하고 변경할 때 매우 중요한 역할을 합니다. iOS 개발자라면 이 메서드의 작동 방식과 언제 호출되는지에 대한 명확한 이해가 필요합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":4,"column":131,"offset":170},"end":{"line":4,"column":147,"offset":186}}}],"position":{"start":{"line":4,"column":131,"offset":170},"end":{"line":4,"column":147,"offset":186}}},"children":"layoutSubviews"}}],"의 라이프사이클을 깊이 있게 탐구하며, 이를 올바르게 사용하는 방법을 배워보겠습니다."]}],"\n",["$","h2",null,{"id":"7891142b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":8,"column":1,"offset":256},"end":{"line":8,"column":17,"offset":272}}}],"position":{"start":{"line":8,"column":1,"offset":256},"end":{"line":8,"column":17,"offset":272}}},"children":"layoutSubviews"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":8,"column":19,"offset":274},"end":{"line":8,"column":27,"offset":282}}}],"position":{"start":{"line":8,"column":19,"offset":274},"end":{"line":8,"column":27,"offset":282}}},"children":"UIView"}}],"의 서브클래스에서 오버라이드할 수 있는 메서드로, 뷰의 서브뷰들에 대한 배치를 다시 계산할 때 호출됩니다. 이 메서드는 자동 레이아웃 시스템 또는 프로그래밍 방식으로 프레임을 설정하는 경우에 호출될 수 있습니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":8,"column":150,"offset":405},"end":{"line":8,"column":166,"offset":421}}}],"position":{"start":{"line":8,"column":150,"offset":405},"end":{"line":8,"column":166,"offset":421}}},"children":"layoutSubviews"}}],"의 기본적인 서명입니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func layoutSubviews() {\n    super.layoutSubviews()\n    \n    // 레이아웃 코드 작성\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":436},"end":{"line":16,"column":4,"offset":533}}},"children":"override func layoutSubviews() {\n    super.layoutSubviews()\n    \n    // 레이아웃 코드 작성\n}\n"}}]}],"\n",["$","h2",null,{"id":"b69f42ee","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews 호출 시점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":20,"column":1,"offset":560},"end":{"line":20,"column":17,"offset":576}}}],"position":{"start":{"line":20,"column":1,"offset":560},"end":{"line":20,"column":17,"offset":576}}},"children":"layoutSubviews"}}],"는 다음과 같은 상황에서 호출됩니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"뷰의 크기가 변경될 때:"}]," 뷰의 프레임이 변경되면, 레이아웃을 다시 계산하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":22,"column":53,"offset":650},"end":{"line":22,"column":69,"offset":666}}}],"position":{"start":{"line":22,"column":53,"offset":650},"end":{"line":22,"column":69,"offset":666}}},"children":"layoutSubviews"}}],"가 호출됩니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"서브뷰가 추가되거나 제거될 때:"}]," 새로운 서브뷰가 추가되거나 기존 서브뷰가 제거되면, 레이아웃을 다시 계산해야 할 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":23,"column":73,"offset":747},"end":{"line":23,"column":89,"offset":763}}}],"position":{"start":{"line":23,"column":73,"offset":747},"end":{"line":23,"column":89,"offset":763}}},"children":"layoutSubviews"}}],"가 호출됩니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"setNeedsLayout 호출 시:"}]," 프로그래머가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setNeedsLayout","position":{"start":{"line":24,"column":36,"offset":807},"end":{"line":24,"column":52,"offset":823}}}],"position":{"start":{"line":24,"column":36,"offset":807},"end":{"line":24,"column":52,"offset":823}}},"children":"setNeedsLayout"}}]," 메서드를 호출하면, 시스템은 다음 애니메이션 사이클에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":24,"column":84,"offset":855},"end":{"line":24,"column":100,"offset":871}}}],"position":{"start":{"line":24,"column":84,"offset":855},"end":{"line":24,"column":100,"offset":871}}},"children":"layoutSubviews"}}],"를 호출하여 레이아웃을 다시 계산합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"특정 상태 변경 시:"}]," 디바이스의 회전과 같은 특정 상태 변경은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":25,"column":43,"offset":936},"end":{"line":25,"column":59,"offset":952}}}],"position":{"start":{"line":25,"column":43,"offset":936},"end":{"line":25,"column":59,"offset":952}}},"children":"layoutSubviews"}}],"를 호출하여 레이아웃을 다시 계산합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"88d0c970","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews의 작동 방식"}],"\n",["$","h3",null,{"id":"2aacac19","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"자동 레이아웃과의 상호작용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["자동 레이아웃 시스템을 사용할 때는 직접적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":31,"column":27,"offset":1048},"end":{"line":31,"column":43,"offset":1064}}}],"position":{"start":{"line":31,"column":27,"offset":1048},"end":{"line":31,"column":43,"offset":1064}}},"children":"layoutSubviews"}}],"를 오버라이드하는 일이 드물지만, 프로그램적으로 오토 레이아웃을 설정해야 할 때 유용할 수 있습니다. 예를 들어, 뷰에서 특정 서브뷰들의 프레임을 보정해야 할 필요가 있을 때, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":31,"column":142,"offset":1163},"end":{"line":31,"column":158,"offset":1179}}}],"position":{"start":{"line":31,"column":142,"offset":1163},"end":{"line":31,"column":158,"offset":1179}}},"children":"layoutSubviews"}}],"는 매우 유용합니다."]}],"\n",["$","h3",null,{"id":"5ee86fce","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"수동 레이아웃 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["때때로 자동 레이아웃만으로는 원하는 결과를 얻기 어려울 때가 있습니다. 이런 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":35,"column":48,"offset":1255},"end":{"line":35,"column":64,"offset":1271}}}],"position":{"start":{"line":35,"column":48,"offset":1255},"end":{"line":35,"column":64,"offset":1271}}},"children":"layoutSubviews"}}],"를 오버라이드하여 수동으로 각 서브뷰의 프레임을 설정할 수 있습니다. 예를 들어:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func layoutSubviews() {\n    super.layoutSubviews()\n    \n    // 서브뷰들의 레이아웃 조정\n    subview1.frame = CGRect(x: 10, y: 10, width: self.bounds.width - 20, height: 50)\n    subview2.frame = CGRect(x: 10, y: subview1.frame.maxY + 10, width: self.bounds.width - 20, height: 50)\n}\n"}],"position":{"start":{"line":37,"column":1,"offset":1318},"end":{"line":45,"column":4,"offset":1610}}},"children":"override func layoutSubviews() {\n    super.layoutSubviews()\n    \n    // 서브뷰들의 레이아웃 조정\n    subview1.frame = CGRect(x: 10, y: 10, width: self.bounds.width - 20, height: 50)\n    subview2.frame = CGRect(x: 10, y: subview1.frame.maxY + 10, width: self.bounds.width - 20, height: 50)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서는 특정 서브뷰들의 프레임을 수동으로 설정하여 부모 뷰의 크기에 맞도록 조정하고 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self.bounds","position":{"start":{"line":47,"column":59,"offset":1670},"end":{"line":47,"column":72,"offset":1683}}}],"position":{"start":{"line":47,"column":59,"offset":1670},"end":{"line":47,"column":72,"offset":1683}}},"children":"self.bounds"}}],"를 사용하여 부모 뷰의 크기를 참조하고 있습니다. 이렇게 하면, 부모 뷰의 크기가 변경될 때마다 서브뷰들의 레이아웃이 자동으로 조정됩니다."]}],"\n",["$","h2",null,{"id":"65994d8d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 고려 사항"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":51,"column":1,"offset":1775},"end":{"line":51,"column":17,"offset":1791}}}],"position":{"start":{"line":51,"column":1,"offset":1775},"end":{"line":51,"column":17,"offset":1791}}},"children":"layoutSubviews"}}],"는 성능에 영향을 줄 수 있는 메서드입니다. 반복적으로 불필요하게 호출되면 애플리케이션의 렌더링 비용이 증가할 수 있습니다. 따라서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":51,"column":91,"offset":1865},"end":{"line":51,"column":107,"offset":1881}}}],"position":{"start":{"line":51,"column":91,"offset":1865},"end":{"line":51,"column":107,"offset":1881}}},"children":"layoutSubviews"}}]," 내에서 불필요한 연산이나 반복 작업을 최소화하는 것이 중요합니다. 다음은 성능을 최적화하기 위한 몇 가지 팁입니다:"]}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"서브뷰의 수를 최소화:"}]," 불필요한 서브뷰를 제거하여 레이아웃 계산 비용을 줄입니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 연산을 피하기:"}]," 레이아웃 계산 시 복잡한 수학적 연산을 피하고 가능한 간단한 연산으로 대체합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"레이아웃 계산을 델리게이트 역할로 분리:"}]," 레이아웃 계산을 각 서브뷰가 직접 처리하도록 델리게이트하여 메인 뷰의 부담을 줄입니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 복잡한 계산을 함수로 분리하고 필요할 때만 호출하도록 할 수 있습니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func layoutSubviews() {\n    super.layoutSubviews()\n    \n    // 복잡한 연산을 최소화\n    calculateSubviewFrames()\n}\n\nprivate func calculateSubviewFrames() {\n    // 실제 연산을 별도의 메소드로 분리\n    subview1.frame = ...\n    subview2.frame = ...\n}\n"}],"position":{"start":{"line":59,"column":1,"offset":2195},"end":{"line":72,"column":4,"offset":2441}}},"children":"override func layoutSubviews() {\n    super.layoutSubviews()\n    \n    // 복잡한 연산을 최소화\n    calculateSubviewFrames()\n}\n\nprivate func calculateSubviewFrames() {\n    // 실제 연산을 별도의 메소드로 분리\n    subview1.frame = ...\n    subview2.frame = ...\n}\n"}}]}],"\n",["$","h2",null,{"id":"aa530ee0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실전 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":76,"column":1,"offset":2453},"end":{"line":76,"column":17,"offset":2469}}}],"position":{"start":{"line":76,"column":1,"offset":2453},"end":{"line":76,"column":17,"offset":2469}}},"children":"layoutSubviews"}}],"를 활용한 실제 예제를 통해 이를 더 명확히 이해해 보겠습니다. 다음은 커스텀 뷰 클래스를 만들어 여러 서브뷰를 포함하는 예제입니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class CustomView: UIView {\n    private let subview1 = UIView()\n    private let subview2 = UIView()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        self.setupViews()\n    }\n    \n    private func setupViews() {\n        self.addSubview(subview1)\n        self.addSubview(subview2)\n        \n        // 서브뷰 기본 설정\n        subview1.backgroundColor = .red\n        subview2.backgroundColor = .blue\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        // 서브뷰들의 프레임 조정\n        let margin: CGFloat = 10\n        subview1.frame = CGRect(x: margin, y: margin, width: self.bounds.width - 2 * margin, height: (self.bounds.height - 3 * margin) / 2)\n        subview2.frame = CGRect(x: margin, y: subview1.frame.maxY + margin, width: self.bounds.width - 2 * margin, height: (self.bounds.height - 3 * margin) / 2)\n    }\n}\n"}],"position":{"start":{"line":78,"column":1,"offset":2545},"end":{"line":111,"column":4,"offset":3539}}},"children":"class CustomView: UIView {\n    private let subview1 = UIView()\n    private let subview2 = UIView()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        self.setupViews()\n    }\n    \n    private func setupViews() {\n        self.addSubview(subview1)\n        self.addSubview(subview2)\n        \n        // 서브뷰 기본 설정\n        subview1.backgroundColor = .red\n        subview2.backgroundColor = .blue\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        // 서브뷰들의 프레임 조정\n        let margin: CGFloat = 10\n        subview1.frame = CGRect(x: margin, y: margin, width: self.bounds.width - 2 * margin, height: (self.bounds.height - 3 * margin) / 2)\n        subview2.frame = CGRect(x: margin, y: subview1.frame.maxY + margin, width: self.bounds.width - 2 * margin, height: (self.bounds.height - 3 * margin) / 2)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CustomView","position":{"start":{"line":113,"column":9,"offset":3549},"end":{"line":113,"column":21,"offset":3561}}}],"position":{"start":{"line":113,"column":9,"offset":3549},"end":{"line":113,"column":21,"offset":3561}}},"children":"CustomView"}}],"라는 커스텀 뷰 클래스를 만들고, 두 개의 서브뷰를 추가하여 각각의 레이아웃을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":113,"column":65,"offset":3605},"end":{"line":113,"column":81,"offset":3621}}}],"position":{"start":{"line":113,"column":65,"offset":3605},"end":{"line":113,"column":81,"offset":3621}}},"children":"layoutSubviews"}}]," 메서드에서 조정하고 있습니다. 각 서브뷰는 부모 뷰의 크기에 맞도록 조정됩니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":117,"column":1,"offset":3675},"end":{"line":117,"column":17,"offset":3691}}}],"position":{"start":{"line":117,"column":1,"offset":3675},"end":{"line":117,"column":17,"offset":3691}}},"children":"layoutSubviews"}}],"는 UIKit에서 뷰의 레이아웃을 관리하는 데 매우 중요한 메서드입니다. 이를 올바르게 이해하고 활용하면, 효율적인 사용자 인터페이스를 구축할 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":117,"column":112,"offset":3786},"end":{"line":117,"column":128,"offset":3802}}}],"position":{"start":{"line":117,"column":112,"offset":3786},"end":{"line":117,"column":128,"offset":3802}}},"children":"layoutSubviews"}}],"의 라이프사이클, 호출 시점, 성능 최적화 방법 등에 대해 살펴보았습니다. 이제 실제 프로젝트에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":117,"column":183,"offset":3857},"end":{"line":117,"column":199,"offset":3873}}}],"position":{"start":{"line":117,"column":183,"offset":3857},"end":{"line":117,"column":199,"offset":3873}}},"children":"layoutSubviews"}}],"를 더 효과적으로 활용할 수 있을 것입니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"UIKit에서 layoutSubviews의 라이프사이클 이해하기","toc":[{"tagName":"h1","title":"UIKit에서 layoutSubviews의 라이프사이클 이해하기","id":"10303ea3"},{"tagName":"h2","title":"layoutSubviews란?","id":"7891142b"},{"tagName":"h2","title":"layoutSubviews 호출 시점","id":"b69f42ee"},{"tagName":"h2","title":"layoutSubviews의 작동 방식","id":"88d0c970"},{"tagName":"h3","title":"자동 레이아웃과의 상호작용","id":"2aacac19"},{"tagName":"h3","title":"수동 레이아웃 관리","id":"5ee86fce"},{"tagName":"h2","title":"성능 고려 사항","id":"65994d8d"},{"tagName":"h2","title":"실전 예제","id":"aa530ee0"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
