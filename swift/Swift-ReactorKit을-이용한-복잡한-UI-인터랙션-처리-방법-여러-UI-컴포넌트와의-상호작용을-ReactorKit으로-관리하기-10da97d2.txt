1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-%EC%97%AC%EB%9F%AC-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%EC%9D%84-ReactorKit%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-10da97d2","d"],{"children":["__PAGE__?{\"slug\":\"Swift-ReactorKit을-이용한-복잡한-UI-인터랙션-처리-방법-여러-UI-컴포넌트와의-상호작용을-ReactorKit으로-관리하기-10da97d2\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-%EC%97%AC%EB%9F%AC-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%EC%9D%84-ReactorKit%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-10da97d2","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-ReactorKit을-이용한-복잡한-UI-인터랙션-처리-방법-여러-UI-컴포넌트와의-상호작용을-ReactorKit으로-관리하기-10da97d2\"}"},"styles":[]}],"segment":["slug","Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-%EC%97%AC%EB%9F%AC-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%EC%9D%84-ReactorKit%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-10da97d2","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift 언어의 ReactorKit을 이용하여 복잡한 UI 인터랙션을 처리하는 방법에 대해 다룹니다. 여러 UI 컴포넌트 간의 상호작용을 효과적으로 관리하는 방법을 예제로 설명합니다. 이 글은 Swift 개발자들에게 ReactorKit의 장점과 사용 방법을 상세히 안내합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,ReactorKit,UI,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-%EC%97%AC%EB%9F%AC-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%EC%9D%84-ReactorKit%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-10da97d2"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift 언어의 ReactorKit을 이용하여 복잡한 UI 인터랙션을 처리하는 방법에 대해 다룹니다. 여러 UI 컴포넌트 간의 상호작용을 효과적으로 관리하는 방법을 예제로 설명합니다. 이 글은 Swift 개발자들에게 ReactorKit의 장점과 사용 방법을 상세히 안내합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-ReactorKit%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B3%B5%EC%9E%A1%ED%95%9C-UI-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-%EC%97%AC%EB%9F%AC-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%9D%98-%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9%EC%9D%84-ReactorKit%EC%9C%BC%EB%A1%9C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-10da97d2"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift 언어의 ReactorKit을 이용하여 복잡한 UI 인터랙션을 처리하는 방법에 대해 다룹니다. 여러 UI 컴포넌트 간의 상호작용을 효과적으로 관리하는 방법을 예제로 설명합니다. 이 글은 Swift 개발자들에게 ReactorKit의 장점과 사용 방법을 상세히 안내합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T675,import ReactorKit

class FormReactor: Reactor {
    enum Action {
        case updateName(String)
        case updateEmail(String)
        case submit
    }

    enum Mutation {
        case setName(String)
        case setEmail(String)
        case setSubmitting(Bool)
        case setError(String?)
    }

    struct State {
        var name: String = ""
        var email: String = ""
        var isSubmitting: Bool = false
        var errorMessage: String?
    }

    let initialState = State()

    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .updateName(let name):
            return Observable.just(.setName(name))
        case .updateEmail(let email):
            return Observable.just(.setEmail(email))
        case .submit:
            if currentState.name.isEmpty || currentState.email.isEmpty {
                return Observable.just(.setError("모든 필드를 입력하세요."))
            }
            return Observable.concat([
                Observable.just(.setSubmitting(true)),
                Observable.just(.setError(nil)),
                Observable.just(.setSubmitting(false))
            ])
        }
    }

    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case .setName(let name):
            newState.name = name
        case .setEmail(let email):
            newState.email = email
        case .setSubmitting(let isSubmitting):
            newState.isSubmitting = isSubmitting
        case .setError(let error):
            newState.errorMessage = error
        }
        return newState
    }
}
f:T675,import ReactorKit

class FormReactor: Reactor {
    enum Action {
        case updateName(String)
        case updateEmail(String)
        case submit
    }

    enum Mutation {
        case setName(String)
        case setEmail(String)
        case setSubmitting(Bool)
        case setError(String?)
    }

    struct State {
        var name: String = ""
        var email: String = ""
        var isSubmitting: Bool = false
        var errorMessage: String?
    }

    let initialState = State()

    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .updateName(let name):
            return Observable.just(.setName(name))
        case .updateEmail(let email):
            return Observable.just(.setEmail(email))
        case .submit:
            if currentState.name.isEmpty || currentState.email.isEmpty {
                return Observable.just(.setError("모든 필드를 입력하세요."))
            }
            return Observable.concat([
                Observable.just(.setSubmitting(true)),
                Observable.just(.setError(nil)),
                Observable.just(.setSubmitting(false))
            ])
        }
    }

    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case .setName(let name):
            newState.name = name
        case .setEmail(let email):
            newState.email = email
        case .setSubmitting(let isSubmitting):
            newState.isSubmitting = isSubmitting
        case .setError(let error):
            newState.errorMessage = error
        }
        return newState
    }
}
10:T43d,import UIKit
import ReactorKit
import RxSwift
import RxCocoa

class FormViewController: UIViewController, View {
    var disposeBag = DisposeBag()

    let nameTextField = UITextField()
    let emailTextField = UITextField()
    let submitButton = UIButton()
    let errorLabel = UILabel()

    override func viewDidLoad() {
        super.viewDidLoad()
        // UI 초기화
    }

    func bind(reactor: FormReactor) {
        // Action 바인딩
        nameTextField.rx.text.orEmpty.map { Reactor.Action.updateName($0) }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        emailTextField.rx.text.orEmpty.map { Reactor.Action.updateEmail($0) }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        submitButton.rx.tap.map { Reactor.Action.submit }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        // State 바인딩
        reactor.state.map { $0.errorMessage }
            .compactMap { $0 }
            .bind(to: errorLabel.rx.text)
            .disposed(by: disposeBag)
    }
}
11:T43d,import UIKit
import ReactorKit
import RxSwift
import RxCocoa

class FormViewController: UIViewController, View {
    var disposeBag = DisposeBag()

    let nameTextField = UITextField()
    let emailTextField = UITextField()
    let submitButton = UIButton()
    let errorLabel = UILabel()

    override func viewDidLoad() {
        super.viewDidLoad()
        // UI 초기화
    }

    func bind(reactor: FormReactor) {
        // Action 바인딩
        nameTextField.rx.text.orEmpty.map { Reactor.Action.updateName($0) }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        emailTextField.rx.text.orEmpty.map { Reactor.Action.updateEmail($0) }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        submitButton.rx.tap.map { Reactor.Action.submit }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        // State 바인딩
        reactor.state.map { $0.errorMessage }
            .compactMap { $0 }
            .bind(to: errorLabel.rx.text)
            .disposed(by: disposeBag)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-23"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"3109372c","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 Swift 기반의 애플리케이션에서 복잡한 상태 관리와 UI 인터랙션을 단순화해주는 라이브러리입니다. 이 글에서는 ReactorKit을 사용하여 여러 UI 컴포넌트 간의 상호작용을 어떻게 효과적으로 관리할 수 있는지 알아보겠습니다. 예제를 통해 ReactorKit의 기본 개념과 실제 적용 방법을 설명합니다."}],"\n",["$","h2",null,{"id":"4aa8f3ae","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ReactorKit의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 Unidirectional Data Flow(UDF) 아키텍처를 기반으로 하고 있습니다. 이 아키텍처는 상태(state), 변환(mutation), 및 액션(action)의 흐름을 단방향으로 유지해 복잡한 UI 상태를 예측 가능하고 관리하기 쉽게 만듭니다. ReactorKit은 크게 세 가지 주요 컴포넌트로 구성됩니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Reactor"}],": 상태 변경 로직을 정의합니다. 주로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Action","position":{"start":{"line":10,"column":37,"offset":520},"end":{"line":10,"column":45,"offset":528}}}],"position":{"start":{"line":10,"column":37,"offset":520},"end":{"line":10,"column":45,"offset":528}}},"children":"Action"}}],"을 받아 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mutation","position":{"start":{"line":10,"column":50,"offset":533},"end":{"line":10,"column":60,"offset":543}}}],"position":{"start":{"line":10,"column":50,"offset":533},"end":{"line":10,"column":60,"offset":543}}},"children":"Mutation"}}],"을 일으키고, 최종적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"State","position":{"start":{"line":10,"column":74,"offset":557},"end":{"line":10,"column":81,"offset":564}}}],"position":{"start":{"line":10,"column":74,"offset":557},"end":{"line":10,"column":81,"offset":564}}},"children":"State"}}],"를 업데이트합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"View"}],": 상태(state)를 구독하여 UI를 업데이트하고, 사용자 입력을 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Action","position":{"start":{"line":11,"column":53,"offset":627},"end":{"line":11,"column":61,"offset":635}}}],"position":{"start":{"line":11,"column":53,"offset":627},"end":{"line":11,"column":61,"offset":635}}},"children":"Action"}}],"을 보냅니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"Action"}],": 사용자의 입력이나 외부 이벤트를 정의합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"bc57d36a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로젝트 설정 및 기본 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit을 사용하는 프로젝트를 설정하려면 먼저 Cocoapods나 Carthage를 사용하여 ReactorKit을 설치해야 합니다. 여기서는 Cocoapods를 이용한 설치 방법을 예제로 보여 드리겠습니다."}],"\n",["$","h3",null,{"id":"67492f61","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Cocoapods 설치"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"# Podfile에 ReactorKit 추가\npod 'ReactorKit'\n\n# 변경 사항 적용\npod install\n"}],"position":{"start":{"line":20,"column":1,"offset":845},"end":{"line":26,"column":4,"offset":922}}},"children":"# Podfile에 ReactorKit 추가\npod 'ReactorKit'\n\n# 변경 사항 적용\npod install\n"}}]}],"\n",["$","h3",null,{"id":"be5120ef","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 예제: 카운터 앱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 ReactorKit을 이용한 간단한 카운터 앱 예제입니다. 이 예제를 통해 기본 개념을 이해해 보겠습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"Step 1"}],": Reactor 정의"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import ReactorKit\n\nclass CounterReactor: Reactor {\n    // Action 정의\n    enum Action {\n        case increase\n        case decrease\n    }\n\n    // Mutation 정의\n    enum Mutation {\n        case increaseValue\n        case decreaseValue\n    }\n\n    // State 정의\n    struct State {\n        var counter: Int\n    }\n\n    // 초기 상태 설정\n    let initialState: State = State(counter: 0)\n\n    // 상태 변환 로직\n    func mutate(action: Action) -> Observable<Mutation> {\n        switch action {\n        case .increase:\n            return Observable.just(.increaseValue)\n        case .decrease:\n            return Observable.just(.decreaseValue)\n        }\n    }\n\n    // 변환된 상태를 적용\n    func reduce(state: State, mutation: Mutation) -> State {\n        var newState = state\n        switch mutation {\n        case .increaseValue:\n            newState.counter += 1\n        case .decreaseValue:\n            newState.counter -= 1\n        }\n        return newState\n    }\n}\n"}],"position":{"start":{"line":34,"column":1,"offset":1031},"end":{"line":80,"column":4,"offset":1979}}},"children":"import ReactorKit\n\nclass CounterReactor: Reactor {\n    // Action 정의\n    enum Action {\n        case increase\n        case decrease\n    }\n\n    // Mutation 정의\n    enum Mutation {\n        case increaseValue\n        case decreaseValue\n    }\n\n    // State 정의\n    struct State {\n        var counter: Int\n    }\n\n    // 초기 상태 설정\n    let initialState: State = State(counter: 0)\n\n    // 상태 변환 로직\n    func mutate(action: Action) -> Observable<Mutation> {\n        switch action {\n        case .increase:\n            return Observable.just(.increaseValue)\n        case .decrease:\n            return Observable.just(.decreaseValue)\n        }\n    }\n\n    // 변환된 상태를 적용\n    func reduce(state: State, mutation: Mutation) -> State {\n        var newState = state\n        switch mutation {\n        case .increaseValue:\n            newState.counter += 1\n        case .decreaseValue:\n            newState.counter -= 1\n        }\n        return newState\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"Step 2"}],": ViewController 설정"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\nimport ReactorKit\nimport RxSwift\nimport RxCocoa\n\nclass CounterViewController: UIViewController, View {\n    var disposeBag = DisposeBag()\n\n    // UI 컴포넌트 생성\n    let increaseButton = UIButton()\n    let decreaseButton = UIButton()\n    let counterLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // UI 초기화\n        // 생략... (뷰 관련 코드)\n    }\n\n    func bind(reactor: CounterReactor) {\n        // Action 바인딩\n        increaseButton.rx.tap.map { Reactor.Action.increase }\n            .bind(to: reactor.action)\n            .disposed(by: disposeBag)\n\n        decreaseButton.rx.tap.map { Reactor.Action.decrease }\n            .bind(to: reactor.action)\n            .disposed(by: disposeBag)\n\n        // State 바인딩\n        reactor.state.map { $0.counter }\n            .distinctUntilChanged()\n            .map { \\\"Counter: \\($0)\\\" }\n            .bind(to: counterLabel.rx.text)\n            .disposed(by: disposeBag)\n    }\n}\n"}],"position":{"start":{"line":84,"column":1,"offset":2012},"end":{"line":122,"column":4,"offset":2982}}},"children":"import UIKit\nimport ReactorKit\nimport RxSwift\nimport RxCocoa\n\nclass CounterViewController: UIViewController, View {\n    var disposeBag = DisposeBag()\n\n    // UI 컴포넌트 생성\n    let increaseButton = UIButton()\n    let decreaseButton = UIButton()\n    let counterLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // UI 초기화\n        // 생략... (뷰 관련 코드)\n    }\n\n    func bind(reactor: CounterReactor) {\n        // Action 바인딩\n        increaseButton.rx.tap.map { Reactor.Action.increase }\n            .bind(to: reactor.action)\n            .disposed(by: disposeBag)\n\n        decreaseButton.rx.tap.map { Reactor.Action.decrease }\n            .bind(to: reactor.action)\n            .disposed(by: disposeBag)\n\n        // State 바인딩\n        reactor.state.map { $0.counter }\n            .distinctUntilChanged()\n            .map { \\\"Counter: \\($0)\\\" }\n            .bind(to: counterLabel.rx.text)\n            .disposed(by: disposeBag)\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"19fd4c68","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"여러 UI 컴포넌트 간의 상호작용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactKit을 사용하면 여러 UI 컴포넌트 간의 상호작용을 보다 효과적으로 관리할 수 있습니다. 이 부분에서는 복잡한 상호작용 예제를 통해 다양한 UI 컴포넌트가 어떻게 상호작용하는지 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"bb299c7f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 복잡한 폼 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 여러 텍스트 필드와 버튼이 상호작용하는 복잡한 폼을 ReactKit으로 관리하는 방법을 다룹니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"Step 1"}],": Reactor 정의"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":134,"column":1,"offset":3228},"end":{"line":193,"column":4,"offset":4873}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"Step 2"}],": ViewController 설정"]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":197,"column":1,"offset":4906},"end":{"line":237,"column":4,"offset":5985}}},"children":"$11"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 복잡한 UI 상태를 명확하고 간결하게 관리할 수 있는 강력한 툴입니다. 여러 UI 컴포넌트가 상호작용하는 애플리케이션에서도 일관된 상태 관리를 보장할 수 있습니다."}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기","toc":[{"tagName":"h1","title":"[Swift] ReactorKit을 이용한 복잡한 UI 인터랙션 처리 방법: 여러 UI 컴포넌트와의 상호작용을 ReactorKit으로 관리하기","id":"3109372c"},{"tagName":"h2","title":"ReactorKit의 기본 개념","id":"4aa8f3ae"},{"tagName":"h2","title":"프로젝트 설정 및 기본 예제","id":"bc57d36a"},{"tagName":"h3","title":"Cocoapods 설치","id":"67492f61"},{"tagName":"h3","title":"기본 예제: 카운터 앱","id":"be5120ef"},{"tagName":"h2","title":"여러 UI 컴포넌트 간의 상호작용","id":"19fd4c68"},{"tagName":"h3","title":"예제: 복잡한 폼 처리","id":"bb299c7f"}],"language":"kr"}]}]]}]]
8:null
