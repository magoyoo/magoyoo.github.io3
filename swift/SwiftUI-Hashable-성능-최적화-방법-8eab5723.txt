1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI-Hashable-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-8eab5723","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI-Hashable-성능-최적화-방법-8eab5723\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI-Hashable-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-8eab5723","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI-Hashable-성능-최적화-방법-8eab5723\"}"},"styles":[]}],"segment":["slug","SwiftUI-Hashable-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-8eab5723","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI Hashable 성능 최적화 방법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 SwiftUI에서 'Hashable' 프로토콜을 효율적으로 사용하여 성능을 최적화하는 방법에 대해 다룹니다. 코드 예제와 상세한 설명을 통해 최적화 기법을 쉽게 이해할 수 있도록 설명합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,Hashable,성능 최적화,Swift"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI-Hashable-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-8eab5723"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI Hashable 성능 최적화 방법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI Hashable 성능 최적화 방법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 SwiftUI에서 'Hashable' 프로토콜을 효율적으로 사용하여 성능을 최적화하는 방법에 대해 다룹니다. 코드 예제와 상세한 설명을 통해 최적화 기법을 쉽게 이해할 수 있도록 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI-Hashable-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-8eab5723"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI Hashable 성능 최적화 방법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 SwiftUI에서 'Hashable' 프로토콜을 효율적으로 사용하여 성능을 최적화하는 방법에 대해 다룹니다. 코드 예제와 상세한 설명을 통해 최적화 기법을 쉽게 이해할 수 있도록 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI Hashable 성능 최적화 방법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI Hashable 성능 최적화 방법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-21"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"248b3427","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"SwiftUI Hashable 성능 최적화 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI를 사용하여 강력하고 인터랙티브한 사용자 인터페이스를 구축하는 과정에서 많은 데이터 구조와 객체들을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":64,"offset":94},"end":{"line":4,"column":74,"offset":104}}}],"position":{"start":{"line":4,"column":64,"offset":94},"end":{"line":4,"column":74,"offset":104}}},"children":"Hashable"}}]," 프로토콜로 구현해야 하는 경우가 많습니다. 이를 효율적으로 처리하면 성능 향상에 도움을 줄 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":141,"offset":171},"end":{"line":4,"column":151,"offset":181}}}],"position":{"start":{"line":4,"column":141,"offset":171},"end":{"line":4,"column":151,"offset":181}}},"children":"Hashable"}}]," 프로토콜을 최적화하는 몇 가지 방법과 그 중요성을 설명하겠습니다."]}],"\n",["$","h2",null,{"id":"e2628c0f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Hashable 프로토콜의 기본 이해"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":8,"offset":252},"end":{"line":8,"column":18,"offset":262}}}],"position":{"start":{"line":8,"column":8,"offset":252},"end":{"line":8,"column":18,"offset":262}}},"children":"Hashable"}}]," 프로토콜은 해시 값으로 변환할 수 있는 타입을 정의합니다. 해시는 주로 집합(Set), 딕셔너리(Dictionary) 같은 컬렉션 타입에서 요소들을 효율적으로 관리하는 데 사용됩니다. 기본적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":128,"offset":372},"end":{"line":8,"column":138,"offset":382}}}],"position":{"start":{"line":8,"column":128,"offset":372},"end":{"line":8,"column":138,"offset":382}}},"children":"Hashable"}}],"을 구현하려면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":8,"column":146,"offset":390},"end":{"line":8,"column":159,"offset":403}}}],"position":{"start":{"line":8,"column":146,"offset":390},"end":{"line":8,"column":159,"offset":403}}},"children":"hash(into:)"}}]," 메서드를 정의해야 합니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct MyData: Hashable {\n    let id: Int\n    let name: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        hasher.combine(name)\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":420},"end":{"line":20,"column":4,"offset":603}}},"children":"struct MyData: Hashable {\n    let id: Int\n    let name: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        hasher.combine(name)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":22,"column":9,"offset":613},"end":{"line":22,"column":13,"offset":617}}}],"position":{"start":{"line":22,"column":9,"offset":613},"end":{"line":22,"column":13,"offset":617}}},"children":"id"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name","position":{"start":{"line":22,"column":15,"offset":619},"end":{"line":22,"column":21,"offset":625}}}],"position":{"start":{"line":22,"column":15,"offset":619},"end":{"line":22,"column":21,"offset":625}}},"children":"name"}}]," 프로퍼티를 합성하여 해시 값을 계산합니다. 하지만 모든 프로퍼티를 해시 값에 포함시키는 것은 늘 최선의 방법은 아닙니다."]}],"\n",["$","h2",null,{"id":"4a5608cd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 관점에서의 최적화 기법"}],"\n",["$","h3",null,{"id":"cedceb9a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"불필요한 프로퍼티 제외"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"여러 프로퍼티 중에서 객체를 유일하게 식별할 수 있는 최소한의 프로퍼티만 해싱에 포함시키는 것이 좋습니다. 불필요한 프로퍼티까지 해싱에 포함하면 성능 저하가 발생할 수 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct MyData: Hashable {\n    let id: Int\n    let name: String\n    let description: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        // name과 description은 해시에 포함시키지 않음\n    }\n}\n"}],"position":{"start":{"line":30,"column":1,"offset":834},"end":{"line":41,"column":4,"offset":1059}}},"children":"struct MyData: Hashable {\n    let id: Int\n    let name: String\n    let description: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        // name과 description은 해시에 포함시키지 않음\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"ce320f51","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"해시 계산의 최소화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["객체의 해시는 주로 Set, Dictionary 같은 컬렉션에서 사용되므로, 해당 컬렉션에 추가되기 전까지 해시 값 계산이 필요 없습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Hashable","position":{"start":{"line":45,"column":79,"offset":1155},"end":{"line":45,"column":90,"offset":1166}}}],"position":{"start":{"line":45,"column":79,"offset":1155},"end":{"line":45,"column":90,"offset":1166}}},"children":"@Hashable"}}]," 프로퍼티 래퍼를 사용하여 해시 값을 미리 캐싱해 둘 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@propertyWrapper\nstruct CachedHashable<T: Hashable>: Hashable {\n    private var value: T\n    private lazy var cachedHash: Int = {\n        var hasher = Hasher()\n        self.value.hash(into: &hasher)\n        return hasher.finalize()\n    }()\n\n    var wrappedValue: T {\n        get { value }\n        set {\n            value = newValue\n            cachedHash = {\n                var hasher = Hasher()\n                newValue.hash(into: &hasher)\n                return hasher.finalize()\n            }()\n        }\n    }\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(cachedHash)\n    }\n\n    static func == (lhs: CachedHashable, rhs: CachedHashable) -> Bool {\n        lhs.wrappedValue == rhs.wrappedValue\n    }\n}\n"}],"position":{"start":{"line":47,"column":1,"offset":1205},"end":{"line":77,"column":4,"offset":1943}}},"children":"@propertyWrapper\nstruct CachedHashable<T: Hashable>: Hashable {\n    private var value: T\n    private lazy var cachedHash: Int = {\n        var hasher = Hasher()\n        self.value.hash(into: &hasher)\n        return hasher.finalize()\n    }()\n\n    var wrappedValue: T {\n        get { value }\n        set {\n            value = newValue\n            cachedHash = {\n                var hasher = Hasher()\n                newValue.hash(into: &hasher)\n                return hasher.finalize()\n            }()\n        }\n    }\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(cachedHash)\n    }\n\n    static func == (lhs: CachedHashable, rhs: CachedHashable) -> Bool {\n        lhs.wrappedValue == rhs.wrappedValue\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"e5c18f86","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Equatable과의 균형"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":81,"column":1,"offset":1965},"end":{"line":81,"column":11,"offset":1975}}}],"position":{"start":{"line":81,"column":1,"offset":1965},"end":{"line":81,"column":11,"offset":1975}}},"children":"Hashable"}}],"은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":81,"column":13,"offset":1977},"end":{"line":81,"column":24,"offset":1988}}}],"position":{"start":{"line":81,"column":13,"offset":1977},"end":{"line":81,"column":24,"offset":1988}}},"children":"Equatable"}}],"을 상속받기 때문에 두 객체를 비교할 때 해시 값만을 사용하는 것이 가장 빠릅니다. 하지만 해시 충돌이 발생할 수 있으므로, 해시 값이 같은 경우에는 실제 객체를 비교해야 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":81,"column":125,"offset":2089},"end":{"line":81,"column":136,"offset":2100}}}],"position":{"start":{"line":81,"column":125,"offset":2089},"end":{"line":81,"column":136,"offset":2100}}},"children":"Equatable"}}],"을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":81,"column":138,"offset":2102},"end":{"line":81,"column":148,"offset":2112}}}],"position":{"start":{"line":81,"column":138,"offset":2102},"end":{"line":81,"column":148,"offset":2112}}},"children":"Hashable"}}],"과 함께 구현할 때는 두 객체의 특정 필드만 비교하는 것이 아니라 일관된 비교를 수행하도록 해야 합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct MyData: Hashable {\n    let id: Int\n    let name: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        hasher.combine(name)\n    }\n\n    static func == (lhs: MyData, rhs: MyData) -> Bool {\n        return lhs.id == rhs.id && lhs.name == rhs.name\n    }\n}\n"}],"position":{"start":{"line":83,"column":1,"offset":2172},"end":{"line":97,"column":4,"offset":2474}}},"children":"struct MyData: Hashable {\n    let id: Int\n    let name: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        hasher.combine(name)\n    }\n\n    static func == (lhs: MyData, rhs: MyData) -> Bool {\n        return lhs.id == rhs.id && lhs.name == rhs.name\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":101,"column":11,"offset":2493},"end":{"line":101,"column":21,"offset":2503}}}],"position":{"start":{"line":101,"column":11,"offset":2493},"end":{"line":101,"column":21,"offset":2503}}},"children":"Hashable"}}]," 프로토콜의 성능 최적화는 데이터를 처리하고 렌더링하는 데 중요한 역할을 합니다. 불필요한 프로퍼티를 제외하고 해시 계산을 최소화하며, Equatable과 균형을 맞춰 구현하면 성능 최적화에 큰 도움이 됩니다. 적절한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":101,"column":143,"offset":2625},"end":{"line":101,"column":153,"offset":2635}}}],"position":{"start":{"line":101,"column":143,"offset":2625},"end":{"line":101,"column":153,"offset":2635}}},"children":"Hashable"}}],"의 사용은 SwiftUI 앱의 반응성과 효율성을 높이는 데 중요한 요소입니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"SwiftUI Hashable 성능 최적화 방법","toc":[{"tagName":"h1","title":"SwiftUI Hashable 성능 최적화 방법","id":"248b3427"},{"tagName":"h2","title":"Hashable 프로토콜의 기본 이해","id":"e2628c0f"},{"tagName":"h2","title":"성능 관점에서의 최적화 기법","id":"4a5608cd"},{"tagName":"h3","title":"불필요한 프로퍼티 제외","id":"cedceb9a"},{"tagName":"h3","title":"해시 계산의 최소화","id":"ce320f51"},{"tagName":"h3","title":"Equatable과의 균형","id":"e5c18f86"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
