1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B3%A0%EA%B8%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%8A%B8%EB%A6%AC-%EA%B0%99%EC%9D%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1-8093f528","d"],{"children":["__PAGE__?{\"slug\":\"Swift-제네릭과-고급-데이터-구조-제네릭을-활용한-링크드-리스트와-트리-같은-커스텀-데이터-구조-생성-8093f528\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B3%A0%EA%B8%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%8A%B8%EB%A6%AC-%EA%B0%99%EC%9D%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1-8093f528","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-제네릭과-고급-데이터-구조-제네릭을-활용한-링크드-리스트와-트리-같은-커스텀-데이터-구조-생성-8093f528\"}"},"styles":[]}],"segment":["slug","Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B3%A0%EA%B8%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%8A%B8%EB%A6%AC-%EA%B0%99%EC%9D%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1-8093f528","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift의 제네릭과 고급 데이터 구조를 활용하여 링크드 리스트와 트리와 같은 커스텀 데이터 구조를 생성하는 방법을 알아봅니다. 제네릭을 적용하여 더 유연하고 재사용 가능한 코드를 작성하는 방법에 대해 탐구합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,제네릭,데이터 구조,링크드 리스트"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B3%A0%EA%B8%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%8A%B8%EB%A6%AC-%EA%B0%99%EC%9D%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1-8093f528"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift의 제네릭과 고급 데이터 구조를 활용하여 링크드 리스트와 트리와 같은 커스텀 데이터 구조를 생성하는 방법을 알아봅니다. 제네릭을 적용하여 더 유연하고 재사용 가능한 코드를 작성하는 방법에 대해 탐구합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EC%A0%9C%EB%84%A4%EB%A6%AD%EA%B3%BC-%EA%B3%A0%EA%B8%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%A7%81%ED%81%AC%EB%93%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%ED%8A%B8%EB%A6%AC-%EA%B0%99%EC%9D%80-%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-%EC%83%9D%EC%84%B1-8093f528"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift의 제네릭과 고급 데이터 구조를 활용하여 링크드 리스트와 트리와 같은 커스텀 데이터 구조를 생성하는 방법을 알아봅니다. 제네릭을 적용하여 더 유연하고 재사용 가능한 코드를 작성하는 방법에 대해 탐구합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-01"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"73448d9d","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift 언어는 강력하고 유연한 제네릭 시스템을 제공합니다. 제네릭을 활용하면 다양한 데이터 타입을 처리하는 코드의 중복을 줄일 수 있습니다. 이번 글에서는 Swift의 제네릭을 사용하여 링크드 리스트와 트리와 같은 커스텀 데이터 구조를 생성하는 방법을 알아보겠습니다."}],"\n",["$","h2",null,{"id":"19b7acd9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"제네릭의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"제네릭은 타입에 의존하지 않는 코드 작성 방식을 의미합니다. 즉, 구체적인 데이터 타입에 구애받지 않고 함수나 데이터 구조를 정의할 수 있습니다. 예를 들어, 제네릭을 사용하여 숫자나 문자열 모두를 처리할 수 있는 함수를 작성할 수 있습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func swapTwoValues<T>(_ a: inout T, _ b: inout T) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":369},"end":{"line":16,"column":4,"offset":487}}},"children":"func swapTwoValues<T>(_ a: inout T, _ b: inout T) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"swapTwoValues","position":{"start":{"line":18,"column":8,"offset":496},"end":{"line":18,"column":23,"offset":511}}}],"position":{"start":{"line":18,"column":8,"offset":496},"end":{"line":18,"column":23,"offset":511}}},"children":"swapTwoValues"}}]," 함수는 두 개의 값을 입력받아 서로 교환합니다. 여기서 ",["$","t","t-0",{"children":"는 타입 매개변수로, 함수 호출 시 구체적인 타입으로 대체됩니다. 이로 인해 코드의 재사용성이 높아지고 유연성이 극대화됩니다."}]]}],"\n",["$","h2",null,{"id":"66e928e7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"링크드 리스트 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"링크드 리스트는 데이터 요소가 각 요소의 주소를 포함하고 있는 포인터를 사용하여 연결된 선형 데이터 구조입니다. Swift에서 제네릭을 사용하여 링크드 리스트를 구현하는 방법을 보겠습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Node<T> {\n    var value: T\n    var next: Node<T>?\n    init(value: T) {\n        self.value = value\n    }\n}\n\nclass LinkedList<T> {\n    private var head: Node<T>?\n    func append(value: T) {\n        let newNode = Node(value: value)\n        if let lastNode = getLastNode() {\n            lastNode.next = newNode\n        } else {\n            head = newNode\n        }\n    }\n    private func getLastNode() -> Node<T>? {\n        var node = head\n        while node?.next != nil {\n            node = node?.next\n        }\n        return node\n    }\n}\n"}],"position":{"start":{"line":24,"column":1,"offset":740},"end":{"line":51,"column":4,"offset":1296}}},"children":"class Node<T> {\n    var value: T\n    var next: Node<T>?\n    init(value: T) {\n        self.value = value\n    }\n}\n\nclass LinkedList<T> {\n    private var head: Node<T>?\n    func append(value: T) {\n        let newNode = Node(value: value)\n        if let lastNode = getLastNode() {\n            lastNode.next = newNode\n        } else {\n            head = newNode\n        }\n    }\n    private func getLastNode() -> Node<T>? {\n        var node = head\n        while node?.next != nil {\n            node = node?.next\n        }\n        return node\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Node","position":{"start":{"line":53,"column":9,"offset":1306},"end":{"line":53,"column":15,"offset":1312}}}],"position":{"start":{"line":53,"column":9,"offset":1306},"end":{"line":53,"column":15,"offset":1312}}},"children":"Node"}}]," 클래스와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"LinkedList","position":{"start":{"line":53,"column":21,"offset":1318},"end":{"line":53,"column":33,"offset":1330}}}],"position":{"start":{"line":53,"column":21,"offset":1318},"end":{"line":53,"column":33,"offset":1330}}},"children":"LinkedList"}}]," 클래스는 제네릭 타입 T를 사용하여 구현되었습니다. 이런 방식으로 링크드 리스트를 만들면 문자열, 정수 등 다양한 타입의 데이터를 저장할 수 있습니다."]}],"\n",["$","h2",null,{"id":"3a9616c9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"트리 구조 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"트리는 각 노드가 여러 하위 노드를 가질 수 있는 비선형 데이터 구조입니다. Swift의 제네릭을 사용하여 이진 트리(binary tree)를 구현하는 예제를 보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class TreeNode<T> {\n    var value: T\n    var leftChild: TreeNode?\n    var rightChild: TreeNode?\n    init(value: T) {\n        self.value = value\n    }\n}\n\nclass BinaryTree<T> {\n    var root: TreeNode<T>?\n    func insert(value: T) {\n        let newNode = TreeNode(value: value)\n        if root == nil {\n            root = newNode\n        } else {\n            var queue: [TreeNode<T>] = [root!]\n            while !queue.isEmpty {\n                let node = queue.removeFirst()\n                if node.leftChild == nil {\n                    node.leftChild = newNode\n                    return\n                } else if node.rightChild == nil {\n                    node.rightChild = newNode\n                    return\n                } else {\n                    queue.append(node.leftChild!)\n                    queue.append(node.rightChild!)\n                }\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":59,"column":1,"offset":1527},"end":{"line":93,"column":4,"offset":2427}}},"children":"class TreeNode<T> {\n    var value: T\n    var leftChild: TreeNode?\n    var rightChild: TreeNode?\n    init(value: T) {\n        self.value = value\n    }\n}\n\nclass BinaryTree<T> {\n    var root: TreeNode<T>?\n    func insert(value: T) {\n        let newNode = TreeNode(value: value)\n        if root == nil {\n            root = newNode\n        } else {\n            var queue: [TreeNode<T>] = [root!]\n            while !queue.isEmpty {\n                let node = queue.removeFirst()\n                if node.leftChild == nil {\n                    node.leftChild = newNode\n                    return\n                } else if node.rightChild == nil {\n                    node.rightChild = newNode\n                    return\n                } else {\n                    queue.append(node.leftChild!)\n                    queue.append(node.rightChild!)\n                }\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TreeNode","position":{"start":{"line":95,"column":7,"offset":2435},"end":{"line":95,"column":17,"offset":2445}}}],"position":{"start":{"line":95,"column":7,"offset":2435},"end":{"line":95,"column":17,"offset":2445}}},"children":"TreeNode"}}]," 클래스와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"BinaryTree","position":{"start":{"line":95,"column":23,"offset":2451},"end":{"line":95,"column":35,"offset":2463}}}],"position":{"start":{"line":95,"column":23,"offset":2451},"end":{"line":95,"column":35,"offset":2463}}},"children":"BinaryTree"}}]," 클래스를 사용하여 이진 트리를 구현합니다. 값을 삽입할 때는 너비 우선 탐색(BFS)을 사용하여 트리의 적절한 위치에 노드를 추가합니다. 이와 같이 제네릭을 활용하면 다양한 데이터 타입에 대응할 수 있는 트리 구조를 설계할 수 있습니다."]}],"\n",["$","h2",null,{"id":"ddc461ab","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"제네릭을 활용한 커스텀 데이터 구조의 장점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"제네릭을 사용하면 데이터 구조의 유연성과 재사용성이 증가합니다. 동일한 코드 베이스로 다양한 타입의 데이터를 처리할 수 있기 때문에 코드의 가독성과 유지보수성이 향상됩니다. 더불어 데이터 타입에 구애받지 않고 새로운 데이터를 추가하거나 조작하는 로직을 쉽게 구현할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"요약하자면, Swift의 제네릭 시스템은 강력한 도구로서 다양한 커스텀 데이터 구조를 손쉽게 설계하고 구현할 수 있게 해줍니다. 링크드 리스트, 트리 등 복잡한 데이터 구조를 제네릭과 결합하여 유연하게 다룰 수 있는 방법을 익혀두면 프로그래밍의 많은 부분에서 큰 이점을 얻을 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성.","toc":[{"tagName":"h1","title":"Swift 제네릭과 고급 데이터 구조: 제네릭을 활용한 링크드 리스트와 트리 같은 커스텀 데이터 구조 생성","id":"73448d9d"},{"tagName":"h2","title":"제네릭의 기본 개념","id":"19b7acd9"},{"tagName":"h2","title":"링크드 리스트 구현","id":"66e928e7"},{"tagName":"h2","title":"트리 구조 구현","id":"3a9616c9"},{"tagName":"h2","title":"제네릭을 활용한 커스텀 데이터 구조의 장점","id":"ddc461ab"}],"language":"kr"}]}]]}]]
8:null
