1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","UIKit%EA%B3%BC-Metal-%EC%97%B0%EB%8F%99-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EA%B7%B8%EB%9E%98%ED%94%BD-%EA%B5%AC%ED%98%84-9c90d156","d"],{"children":["__PAGE__?{\"slug\":\"UIKit과-Metal-연동-고성능-그래픽-구현-9c90d156\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","UIKit%EA%B3%BC-Metal-%EC%97%B0%EB%8F%99-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EA%B7%B8%EB%9E%98%ED%94%BD-%EA%B5%AC%ED%98%84-9c90d156","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"UIKit과-Metal-연동-고성능-그래픽-구현-9c90d156\"}"},"styles":[]}],"segment":["slug","UIKit%EA%B3%BC-Metal-%EC%97%B0%EB%8F%99-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EA%B7%B8%EB%9E%98%ED%94%BD-%EA%B5%AC%ED%98%84-9c90d156","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"UIKit과 Metal 연동: 고성능 그래픽 구현 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift로 iOS 애플리케이션을 개발할 때, UIKit과 Metal을 연동하여 고성능 그래픽을 구현하는 방법을 설명합니다. 이를 통해 Metal의 강력한 그래픽 처리 능력을 UIKit 인터페이스와 통합하여 놀라운 사용자 경험을 제공할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,UIKit,Metal,그래픽"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/UIKit%EA%B3%BC-Metal-%EC%97%B0%EB%8F%99-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EA%B7%B8%EB%9E%98%ED%94%BD-%EA%B5%AC%ED%98%84-9c90d156"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"UIKit과 Metal 연동: 고성능 그래픽 구현 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"UIKit과 Metal 연동: 고성능 그래픽 구현 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift로 iOS 애플리케이션을 개발할 때, UIKit과 Metal을 연동하여 고성능 그래픽을 구현하는 방법을 설명합니다. 이를 통해 Metal의 강력한 그래픽 처리 능력을 UIKit 인터페이스와 통합하여 놀라운 사용자 경험을 제공할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/UIKit%EA%B3%BC-Metal-%EC%97%B0%EB%8F%99-%EA%B3%A0%EC%84%B1%EB%8A%A5-%EA%B7%B8%EB%9E%98%ED%94%BD-%EA%B5%AC%ED%98%84-9c90d156"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"UIKit과 Metal 연동: 고성능 그래픽 구현 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift로 iOS 애플리케이션을 개발할 때, UIKit과 Metal을 연동하여 고성능 그래픽을 구현하는 방법을 설명합니다. 이를 통해 Metal의 강력한 그래픽 처리 능력을 UIKit 인터페이스와 통합하여 놀라운 사용자 경험을 제공할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T43f,import UIKit
import Metal
import MetalKit

class MetalViewController: UIViewController, MTKViewDelegate {
    var device: MTLDevice!
    var commandQueue: MTLCommandQueue!
    var pipelineState: MTLRenderPipelineState!

    override func viewDidLoad() {
        super.viewDidLoad()

        // Device 초기화
        device = MTLCreateSystemDefaultDevice()!

        // MTKView 설정
        let mtkView = MTKView(frame: self.view.frame, device: device)
        mtkView.delegate = self
        self.view.addSubview(mtkView)

        // Command Queue 초기화
        commandQueue = device.makeCommandQueue()!

        // Pipeline State 설정
        let pipelineDescriptor = MTLRenderPipelineDescriptor()
        pipelineDescriptor.vertexFunction = defaultLibrary.makeFunction(name: "vertex_main")
        pipelineDescriptor.fragmentFunction = defaultLibrary.makeFunction(name: "fragment_main")
        pipelineDescriptor.colorAttachments[0].pixelFormat = mtkView.colorPixelFormat

        pipelineState = try! device.makeRenderPipelineState(descriptor: pipelineDescriptor)
    }
}
f:T43f,import UIKit
import Metal
import MetalKit

class MetalViewController: UIViewController, MTKViewDelegate {
    var device: MTLDevice!
    var commandQueue: MTLCommandQueue!
    var pipelineState: MTLRenderPipelineState!

    override func viewDidLoad() {
        super.viewDidLoad()

        // Device 초기화
        device = MTLCreateSystemDefaultDevice()!

        // MTKView 설정
        let mtkView = MTKView(frame: self.view.frame, device: device)
        mtkView.delegate = self
        self.view.addSubview(mtkView)

        // Command Queue 초기화
        commandQueue = device.makeCommandQueue()!

        // Pipeline State 설정
        let pipelineDescriptor = MTLRenderPipelineDescriptor()
        pipelineDescriptor.vertexFunction = defaultLibrary.makeFunction(name: "vertex_main")
        pipelineDescriptor.fragmentFunction = defaultLibrary.makeFunction(name: "fragment_main")
        pipelineDescriptor.colorAttachments[0].pixelFormat = mtkView.colorPixelFormat

        pipelineState = try! device.makeRenderPipelineState(descriptor: pipelineDescriptor)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"UIKit과 Metal 연동: 고성능 그래픽 구현"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"UIKit과 Metal 연동: 고성능 그래픽 구현"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-22"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"557de71f","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"UIKit과 Metal 연동: 고성능 그래픽 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 애플리케이션 개발에서 사용자 인터페이스(UI)는 매우 중요한 요소입니다. 일반적으로 UI를 구현하기 위해 UIKit을 사용하지만, 복잡하고 고성능의 그래픽을 요구할 때는 Metal을 사용하게 됩니다. 이번 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIKit","position":{"start":{"line":4,"column":125,"offset":156},"end":{"line":4,"column":132,"offset":163}}}],"position":{"start":{"line":4,"column":125,"offset":156},"end":{"line":4,"column":132,"offset":163}}},"children":"UIKit"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Metal","position":{"start":{"line":4,"column":134,"offset":165},"end":{"line":4,"column":141,"offset":172}}}],"position":{"start":{"line":4,"column":134,"offset":165},"end":{"line":4,"column":141,"offset":172}}},"children":"Metal"}}],"을 연동하여 고성능 그래픽을 구현하는 방법에 대해 자세히 설명하겠습니다."]}],"\n",["$","h2",null,{"id":"b1f60ab3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"UIKit과 Metal의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIKit은 iOS 애플리케이션에서 사용자 인터페이스를 구축하기 위해 사용되는 프레임워크입니다. UIKit을 통해 버튼, 레이블, 테이블 뷰 등과 같은 다양한 UI 컴포넌트를 쉽게 추가하고 관리할 수 있습니다. 반면, Metal은 애플의 저수준 그래픽 API로, GPU를 직접 제어하여 고성능 그래픽 및 연산 작업을 수행할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Metal을 사용하여 복잡한 3D 그래픽 또는 대규모 데이터 처리 작업을 수행할 수 있으며, 이를 UIKit과 연동하여 사용하면 기본적인 UI와 고성능 그래픽 처리를 효율적으로 결합할 수 있습니다."}],"\n",["$","h2",null,{"id":"35ce895d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로젝트 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIKit과 Metal을 연동하기 위해서는 우선 iOS 프로젝트에 Metal을 설정해야 합니다. 다음은 기본적인 설정 단계입니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"Xcode에서 새 프로젝트를 생성합니다."}],"\n",["$","li","li-1",{"children":["프로젝트의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"General","position":{"start":{"line":17,"column":10,"offset":661},"end":{"line":17,"column":19,"offset":670}}}],"position":{"start":{"line":17,"column":10,"offset":661},"end":{"line":17,"column":19,"offset":670}}},"children":"General"}}]," 설정에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Frameworks, Libraries, and Embedded Content","position":{"start":{"line":17,"column":25,"offset":676},"end":{"line":17,"column":70,"offset":721}}}],"position":{"start":{"line":17,"column":25,"offset":676},"end":{"line":17,"column":70,"offset":721}}},"children":"Frameworks, Libraries, and Embedded Content"}}]," 섹션에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Metal.framework","position":{"start":{"line":17,"column":75,"offset":726},"end":{"line":17,"column":92,"offset":743}}}],"position":{"start":{"line":17,"column":75,"offset":726},"end":{"line":17,"column":92,"offset":743}}},"children":"Metal.framework"}}],"를 추가합니다."]}],"\n",["$","li","li-2",{"children":["프로젝트의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Info.plist","position":{"start":{"line":18,"column":10,"offset":761},"end":{"line":18,"column":22,"offset":773}}}],"position":{"start":{"line":18,"column":10,"offset":761},"end":{"line":18,"column":22,"offset":773}}},"children":"Info.plist"}}]," 파일에 다음 키와 값을 추가하여 Metal을 사용하도록 설정합니다:"]}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-xml","node":{"type":"element","tagName":"code","properties":{"className":["language-xml"]},"children":[{"type":"text","value":"<key>MTLBlitCommandEncoder</key>\n<array>\n  <string>enabled</string>\n</array>\n"}],"position":{"start":{"line":20,"column":1,"offset":813},"end":{"line":25,"column":4,"offset":900}}},"children":"<key>MTLBlitCommandEncoder</key>\n<array>\n  <string>enabled</string>\n</array>\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 설정을 완료하면 Metal을 사용할 수 있게 됩니다."}],"\n",["$","h2",null,{"id":"c36d57c4","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Metal 설정 및 초기화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Metal을 사용하기 위해서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MTLDevice","position":{"start":{"line":31,"column":18,"offset":971},"end":{"line":31,"column":29,"offset":982}}}],"position":{"start":{"line":31,"column":18,"offset":971},"end":{"line":31,"column":29,"offset":982}}},"children":"MTLDevice"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MTLCommandQueue","position":{"start":{"line":31,"column":31,"offset":984},"end":{"line":31,"column":48,"offset":1001}}}],"position":{"start":{"line":31,"column":31,"offset":984},"end":{"line":31,"column":48,"offset":1001}}},"children":"MTLCommandQueue"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MTLRenderPipelineState","position":{"start":{"line":31,"column":50,"offset":1003},"end":{"line":31,"column":74,"offset":1027}}}],"position":{"start":{"line":31,"column":50,"offset":1003},"end":{"line":31,"column":74,"offset":1027}}},"children":"MTLRenderPipelineState"}}]," 등의 객체를 초기화해야 합니다. 다음은 기본적인 설정 코드입니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":33,"column":1,"offset":1066},"end":{"line":66,"column":4,"offset":2145}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MTKView","position":{"start":{"line":68,"column":9,"offset":2155},"end":{"line":68,"column":18,"offset":2164}}}],"position":{"start":{"line":68,"column":9,"offset":2155},"end":{"line":68,"column":18,"offset":2164}}},"children":"MTKView"}}],"를 생성하고, Metal 장치와 커맨드 큐를 초기화합니다. 또한, 기본적인 셰이더 함수가 포함된 파이프라인 상태를 설정합니다."]}],"\n",["$","h2",null,{"id":"02566f2d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"셰이더 함수 작성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"셰이더 함수는 Metal에서 그래픽 처리를 수행하는 데 중요한 요소입니다. 다음은 간단한 버텍스 및 프래그먼트 셰이더 함수 예제입니다. 이 예제에서는 기본적인 색상 정보를 렌더링합니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-metal","node":{"type":"element","tagName":"code","properties":{"className":["language-metal"]},"children":[{"type":"text","value":"#include <metal_stdlib>\nusing namespace metal;\n\ntypedef struct {\n    float4 position [[position]];\n    float4 color;\n} VertexOut;\n\nvertex VertexOut vertex_main(uint vertexID [[vertex_id]]) {\n    VertexOut out;\n    float4 positions[] = {\n        float4( 0.0,  0.5, 0.0, 1.0),\n        float4(-0.5, -0.5, 0.0, 1.0),\n        float4( 0.5, -0.5, 0.0, 1.0)\n    };\n    float4 colors[] = {\n        float4(1.0, 0.0, 0.0, 1.0),\n        float4(0.0, 1.0, 0.0, 1.0),\n        float4(0.0, 0.0, 1.0, 1.0)\n    };\n    out.position = positions[vertexID];\n    out.color = colors[vertexID];\n    return out;\n}\n\nfragment float4 fragment_main(VertexOut in [[stage_in]]) {\n    return in.color;\n}\n"}],"position":{"start":{"line":74,"column":1,"offset":2355},"end":{"line":103,"column":4,"offset":3037}}},"children":"#include <metal_stdlib>\nusing namespace metal;\n\ntypedef struct {\n    float4 position [[position]];\n    float4 color;\n} VertexOut;\n\nvertex VertexOut vertex_main(uint vertexID [[vertex_id]]) {\n    VertexOut out;\n    float4 positions[] = {\n        float4( 0.0,  0.5, 0.0, 1.0),\n        float4(-0.5, -0.5, 0.0, 1.0),\n        float4( 0.5, -0.5, 0.0, 1.0)\n    };\n    float4 colors[] = {\n        float4(1.0, 0.0, 0.0, 1.0),\n        float4(0.0, 1.0, 0.0, 1.0),\n        float4(0.0, 0.0, 1.0, 1.0)\n    };\n    out.position = positions[vertexID];\n    out.color = colors[vertexID];\n    return out;\n}\n\nfragment float4 fragment_main(VertexOut in [[stage_in]]) {\n    return in.color;\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 셰이더 코드는 기본적인 삼각형을 그리는 데 사용됩니다. 각각의 버텍스에 대해 위치와 색상 데이터를 정의하고, 프래그먼트 셰이더에서 이를 렌더링합니다."}],"\n",["$","h2",null,{"id":"8d9a5412","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"렌더링 루프 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MTKViewDelegate","position":{"start":{"line":109,"column":1,"offset":3140},"end":{"line":109,"column":18,"offset":3157}}}],"position":{"start":{"line":109,"column":1,"offset":3140},"end":{"line":109,"column":18,"offset":3157}}},"children":"MTKViewDelegate"}}]," 프로토콜을 구현하여 렌더링 루프를 작성합니다. 여기에서는 매 프레임마다 셰이더 함수를 호출하고, 버퍼를 설정하여 화면에 그래픽을 그립니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func mtkView(_ view: MTKView, drawableSizeWillChange size: CGSize) {\n    // 화면 크기가 변경될 때 호출됩니다\n}\n\nfunc draw(in view: MTKView) {\n    guard let drawable = view.currentDrawable else { return }\n    let renderPassDescriptor = view.currentRenderPassDescriptor!\n\n    let commandBuffer = commandQueue.makeCommandBuffer()!\n    let renderEncoder = commandBuffer.makeRenderCommandEncoder(descriptor: renderPassDescriptor)!\n\n    renderEncoder.setRenderPipelineState(pipelineState)\n    renderEncoder.drawPrimitives(type: .triangle, vertexStart: 0, vertexCount: 3)\n    renderEncoder.endEncoding()\n\n    commandBuffer.present(drawable)\n    commandBuffer.commit()\n}\n"}],"position":{"start":{"line":111,"column":1,"offset":3237},"end":{"line":130,"column":4,"offset":3898}}},"children":"func mtkView(_ view: MTKView, drawableSizeWillChange size: CGSize) {\n    // 화면 크기가 변경될 때 호출됩니다\n}\n\nfunc draw(in view: MTKView) {\n    guard let drawable = view.currentDrawable else { return }\n    let renderPassDescriptor = view.currentRenderPassDescriptor!\n\n    let commandBuffer = commandQueue.makeCommandBuffer()!\n    let renderEncoder = commandBuffer.makeRenderCommandEncoder(descriptor: renderPassDescriptor)!\n\n    renderEncoder.setRenderPipelineState(pipelineState)\n    renderEncoder.drawPrimitives(type: .triangle, vertexStart: 0, vertexCount: 3)\n    renderEncoder.endEncoding()\n\n    commandBuffer.present(drawable)\n    commandBuffer.commit()\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"draw()","position":{"start":{"line":132,"column":9,"offset":3908},"end":{"line":132,"column":17,"offset":3916}}}],"position":{"start":{"line":132,"column":9,"offset":3908},"end":{"line":132,"column":17,"offset":3916}}},"children":"draw()"}}]," 메서드를 사용하여 매 프레임마다 그래픽을 렌더링합니다. 현재 drawable 객체와 렌더 패스 설명자를 가져와서 커맨드 버퍼와 렌더 인코더를 설정한 후, 셰이더 함수를 호출하여 그래픽을 그립니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 Swift로 iOS 애플리케이션을 개발할 때 UIKit과 Metal을 연동하여 고성능 그래픽을 구현하는 방법을 설명했습니다. UIKit과 Metal을 결합함으로써 기본적인 UI 구성 요소를 사용하면서도 고성능 그래픽 처리를 효율적으로 수행할 수 있습니다. 이를 통해 더 나은 사용자 경험을 제공하고, 애플리케이션의 그래픽 성능을 극대화할 수 있습니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"UIKit과 Metal 연동: 고성능 그래픽 구현","toc":[{"tagName":"h1","title":"UIKit과 Metal 연동: 고성능 그래픽 구현","id":"557de71f"},{"tagName":"h2","title":"UIKit과 Metal의 기본 개념","id":"b1f60ab3"},{"tagName":"h2","title":"프로젝트 설정","id":"35ce895d"},{"tagName":"h2","title":"Metal 설정 및 초기화","id":"c36d57c4"},{"tagName":"h2","title":"셰이더 함수 작성","id":"02566f2d"},{"tagName":"h2","title":"렌더링 루프 구현","id":"8d9a5412"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
