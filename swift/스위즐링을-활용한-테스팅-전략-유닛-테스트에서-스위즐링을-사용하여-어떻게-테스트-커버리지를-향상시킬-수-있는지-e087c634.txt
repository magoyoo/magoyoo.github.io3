1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%AC-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80-e087c634","d"],{"children":["__PAGE__?{\"slug\":\"스위즐링을-활용한-테스팅-전략-유닛-테스트에서-스위즐링을-사용하여-어떻게-테스트-커버리지를-향상시킬-수-있는지-e087c634\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%AC-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80-e087c634","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"스위즐링을-활용한-테스팅-전략-유닛-테스트에서-스위즐링을-사용하여-어떻게-테스트-커버리지를-향상시킬-수-있는지-e087c634\"}"},"styles":[]}],"segment":["slug","%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%AC-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80-e087c634","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 스위즐링(swizzling)을 활용한 유닛 테스트 전략에 대해 다룹니다. 스위즐링 기술을 통해 어떻게 테스트 커버리지를 크게 향상시킬 수 있는지에 대해 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,스위즐링,유닛 테스트,테스트 커버리지"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%AC-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80-e087c634"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 스위즐링(swizzling)을 활용한 유닛 테스트 전략에 대해 다룹니다. 스위즐링 기술을 통해 어떻게 테스트 커버리지를 크게 향상시킬 수 있는지에 대해 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8C%85-%EC%A0%84%EB%9E%B5-%EC%9C%A0%EB%8B%9B-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%97%90%EC%84%9C-%EC%8A%A4%EC%9C%84%EC%A6%90%EB%A7%81%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80%EB%A5%BC-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%AC-%EC%88%98-%EC%9E%88%EB%8A%94%EC%A7%80-e087c634"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 스위즐링(swizzling)을 활용한 유닛 테스트 전략에 대해 다룹니다. 스위즐링 기술을 통해 어떻게 테스트 커버리지를 크게 향상시킬 수 있는지에 대해 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-03"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"925515bc","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 테스트 커버리지를 향상시키기"}],"\n",["$","h2",null,{"id":"b88fe997","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"스위즐링이란 무엇인가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"스위즐링이란 객체의 메소드를 런타임에 교체하여 그 동작을 변경하는 기법입니다. 이 기법은 Objective-C에서 유래했으나 Swift에서도 적용될 수 있습니다. 스위즐링을 통해 개발자는 특정 메소드의 동작을 임의로 변경하거나 확장할 수 있습니다. 이는 특히 유닛 테스트에서 큰 장점을 제공합니다."}],"\n",["$","h2",null,{"id":"f7b71bb7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"스위즐링의 기본 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"스위즐링의 기본 원리는 메소드 논리 교환에 있습니다. 런타임 중, 메소드의 실제 구현을 다른 메소드의 구현으로 교체합니다. 이를 통해 원래 메소드가 수행되는 위치에 다른 동작을 수행할 수 있습니다. 코드 예제를 통해 이를 좀 더 구체적으로 살펴보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import ObjectiveC.runtime\n\nextension UIViewController {\n    static let swizzleViewDidAppear: Void = {\n        let originalSelector = #selector(viewDidAppear(_:))\n        let swizzledSelector = #selector(swizzled_viewDidAppear(_:))\n\n        guard let originalMethod = class_getInstanceMethod(UIViewController.self, originalSelector),\n              let swizzledMethod = class_getInstanceMethod(UIViewController.self, swizzledSelector) else { return }\n\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }()\n\n    @objc func swizzled_viewDidAppear(_ animated: Bool) {\n        self.swizzled_viewDidAppear(animated)\n        print(\"View did appear swizzled.\")\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":400},"end":{"line":29,"column":4,"offset":1097}}},"children":"import ObjectiveC.runtime\n\nextension UIViewController {\n    static let swizzleViewDidAppear: Void = {\n        let originalSelector = #selector(viewDidAppear(_:))\n        let swizzledSelector = #selector(swizzled_viewDidAppear(_:))\n\n        guard let originalMethod = class_getInstanceMethod(UIViewController.self, originalSelector),\n              let swizzledMethod = class_getInstanceMethod(UIViewController.self, swizzledSelector) else { return }\n\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }()\n\n    @objc func swizzled_viewDidAppear(_ animated: Bool) {\n        self.swizzled_viewDidAppear(animated)\n        print(\"View did appear swizzled.\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIViewController","position":{"start":{"line":31,"column":8,"offset":1106},"end":{"line":31,"column":26,"offset":1124}}}],"position":{"start":{"line":31,"column":8,"offset":1106},"end":{"line":31,"column":26,"offset":1124}}},"children":"UIViewController"}}],"의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"viewDidAppear","position":{"start":{"line":31,"column":28,"offset":1126},"end":{"line":31,"column":43,"offset":1141}}}],"position":{"start":{"line":31,"column":28,"offset":1126},"end":{"line":31,"column":43,"offset":1141}}},"children":"viewDidAppear"}}]," 메소드를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"swizzled_viewDidAppear","position":{"start":{"line":31,"column":49,"offset":1147},"end":{"line":31,"column":73,"offset":1171}}}],"position":{"start":{"line":31,"column":49,"offset":1147},"end":{"line":31,"column":73,"offset":1171}}},"children":"swizzled_viewDidAppear"}}],"으로 바꿉니다. 이제 원래의 메소드가 호출될 때마다 교체된 메소드가 대신 호출됩니다."]}],"\n",["$","h2",null,{"id":"5cb38fda","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"유닛 테스트에서의 스위즐링 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["유닛 테스트에서 스위즐링은 여러 상황에서 매우 유용합니다. 특히 네트워크 요청과 같은 외부 의존성이 많은 코드를 테스트할 때 사용됩니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":34,"column":82,"offset":1322},"end":{"line":34,"column":93,"offset":1333}}}],"position":{"start":{"line":34,"column":82,"offset":1322},"end":{"line":34,"column":93,"offset":1333}}},"children":"fetchData"}}]," 메소드를 구현한 간단한 예제입니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class NetworkManager {\n    func fetchData(from url: URL, completion: @escaping (Data?, Error?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            completion(data, error)\n        }\n        task.resume()\n    }\n}\n"}],"position":{"start":{"line":36,"column":1,"offset":1355},"end":{"line":45,"column":4,"offset":1633}}},"children":"class NetworkManager {\n    func fetchData(from url: URL, completion: @escaping (Data?, Error?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            completion(data, error)\n        }\n        task.resume()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":47,"column":5,"offset":1639},"end":{"line":47,"column":16,"offset":1650}}}],"position":{"start":{"line":47,"column":5,"offset":1639},"end":{"line":47,"column":16,"offset":1650}}},"children":"fetchData"}}]," 메소드는 URL 요청을 수행하고 결과를 반환합니다. 이 메소드를 테스트할 때 네트워크 요청을 실제로 수행할 필요 없이 스위즐링을 사용할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"extension URLSessionDataTask {\n    static let swizzleResume: Void = {\n        let originalSelector = #selector(URLSessionDataTask.resume)\n        let swizzledSelector = #selector(swizzled_resume)\n\n        guard let originalMethod = class_getInstanceMethod(URLSessionDataTask.self, originalSelector),\n              let swizzledMethod = class_getInstanceMethod(URLSessionDataTask.self, swizzledSelector) else { return }\n\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }()\n\n    @objc func swizzled_resume() {\n        print(\"Network request swizzled.\")\n    }\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1736},"end":{"line":65,"column":4,"offset":2333}}},"children":"extension URLSessionDataTask {\n    static let swizzleResume: Void = {\n        let originalSelector = #selector(URLSessionDataTask.resume)\n        let swizzledSelector = #selector(swizzled_resume)\n\n        guard let originalMethod = class_getInstanceMethod(URLSessionDataTask.self, originalSelector),\n              let swizzledMethod = class_getInstanceMethod(URLSessionDataTask.self, swizzledSelector) else { return }\n\n        method_exchangeImplementations(originalMethod, swizzledMethod)\n    }()\n\n    @objc func swizzled_resume() {\n        print(\"Network request swizzled.\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSessionDataTask","position":{"start":{"line":67,"column":9,"offset":2343},"end":{"line":67,"column":29,"offset":2363}}}],"position":{"start":{"line":67,"column":9,"offset":2343},"end":{"line":67,"column":29,"offset":2363}}},"children":"URLSessionDataTask"}}],"의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"resume","position":{"start":{"line":67,"column":31,"offset":2365},"end":{"line":67,"column":39,"offset":2373}}}],"position":{"start":{"line":67,"column":31,"offset":2365},"end":{"line":67,"column":39,"offset":2373}}},"children":"resume"}}]," 메소드를 스위즐링하여 실제 네트워크 요청 대신 콘솔에 로그를 남기도록 합니다. 이를 통해 네트워크 요청 없이 테스트를 진행할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class NetworkManagerTests: XCTestCase {\n\n    override class func setUp() {\n        super.setUp()\n        URLSessionDataTask.swizzleResume\n    }\n\n    func testFetchData() {\n        let networkManager = NetworkManager()\n        let url = URL(string: \"https://example.com\")!\n\n        let expectation = self.expectation(description: \"Completion handler invoked\")\n        var responseData: Data?\n        var responseError: Error?\n\n        networkManager.fetchData(from: url) { data, error in\n            responseData = data\n            responseError = error\n            expectation.fulfill()\n        }\n\n        waitForExpectations(timeout: 5, handler: nil)\n\n        XCTAssertNil(responseData)\n        XCTAssertNil(responseError)\n    }\n}\n"}],"position":{"start":{"line":69,"column":1,"offset":2453},"end":{"line":97,"column":4,"offset":3197}}},"children":"class NetworkManagerTests: XCTestCase {\n\n    override class func setUp() {\n        super.setUp()\n        URLSessionDataTask.swizzleResume\n    }\n\n    func testFetchData() {\n        let networkManager = NetworkManager()\n        let url = URL(string: \"https://example.com\")!\n\n        let expectation = self.expectation(description: \"Completion handler invoked\")\n        var responseData: Data?\n        var responseError: Error?\n\n        networkManager.fetchData(from: url) { data, error in\n            responseData = data\n            responseError = error\n            expectation.fulfill()\n        }\n\n        waitForExpectations(timeout: 5, handler: nil)\n\n        XCTAssertNil(responseData)\n        XCTAssertNil(responseError)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkManagerTests","position":{"start":{"line":99,"column":4,"offset":3202},"end":{"line":99,"column":25,"offset":3223}}}],"position":{"start":{"line":99,"column":4,"offset":3202},"end":{"line":99,"column":25,"offset":3223}}},"children":"NetworkManagerTests"}}]," 클래스에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":99,"column":32,"offset":3230},"end":{"line":99,"column":43,"offset":3241}}}],"position":{"start":{"line":99,"column":32,"offset":3230},"end":{"line":99,"column":43,"offset":3241}}},"children":"fetchData"}}]," 메소드는 네트워크 요청 없이도 테스트를 통과할 수 있습니다."]}],"\n",["$","h2",null,{"id":"25a6d81a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"스위즐링의 장단점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"스위즐링은 매우 강력하지만 신중하게 사용해야 하는 기술입니다."}],"\n",["$","h3",null,{"id":"0e91a822","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"장점"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"테스트 커버리지 확장"}],": 외부 시스템이나 의존성에 대해 더 높은 커버리지를 확보할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"유연성"}],": 다양한 시나리오를 테스트할 수 있으며, 이를 통해 더 많은 예외 상황을 다룰 수 있습니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"7c7251f1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"단점"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡성 증가"}],": 스위즐링은 코드를 복잡하게 만들며 디버깅이 어려울 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"안정성 문제"}],": 잘못된 스위즐링은 앱의 동작을 예기치 않게 만들 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"스위즐링은 Swift에서 유닛 테스트를 강화하는 데 중요한 도구가 될 수 있습니다. 네트워크 요청과 같이 외부 의존성을 가진 코드를 테스트할 때 유용하며, 이를 통해 테스트 커버리지를 크게 향상시킬 수 있습니다. 그렇지만 신중하게 사용해야 하며, 잘못된 사용은 앱의 안정성을 해칠 수 있습니다. 이러한 점을 잘 이해하고 활용하면 스위즐링은 테스트 품질을 한 단계 향상시키는 데 큰 도움이 될 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 어떻게 테스트 커버리지를 향상시킬 수 있는지.","toc":[{"tagName":"h1","title":"스위즐링을 활용한 테스팅 전략: 유닛 테스트에서 스위즐링을 사용하여 테스트 커버리지를 향상시키기","id":"925515bc"},{"tagName":"h2","title":"스위즐링이란 무엇인가","id":"b88fe997"},{"tagName":"h2","title":"스위즐링의 기본 원리","id":"f7b71bb7"},{"tagName":"h2","title":"유닛 테스트에서의 스위즐링 활용","id":"5cb38fda"},{"tagName":"h2","title":"스위즐링의 장단점","id":"25a6d81a"},{"tagName":"h3","title":"장점","id":"0e91a822"},{"tagName":"h3","title":"단점","id":"7c7251f1"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
