1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","swift-%EB%B0%B0%EC%97%B4-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%84%B8%ED%8A%B8-%EA%B5%B3%EC%9D%B4-%EC%95%8C%ED%95%84%EC%9A%94-%EC%97%86%EB%8B%A4","d"],{"children":["__PAGE__?{\"slug\":\"swift-배열-딕셔너리-세트-굳이-알필요-없다\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","swift-%EB%B0%B0%EC%97%B4-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%84%B8%ED%8A%B8-%EA%B5%B3%EC%9D%B4-%EC%95%8C%ED%95%84%EC%9A%94-%EC%97%86%EB%8B%A4","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"swift-배열-딕셔너리-세트-굳이-알필요-없다\"}"},"styles":[]}],"segment":["slug","swift-%EB%B0%B0%EC%97%B4-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%84%B8%ED%8A%B8-%EA%B5%B3%EC%9D%B4-%EC%95%8C%ED%95%84%EC%9A%94-%EC%97%86%EB%8B%A4","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄) | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift 고급 개발자를 위한 심화 자료로, 배열, 딕셔너리, 세트의 고급 사용법을 다룹니다. 배열 슬라이싱, 고차 함수 활용, 딕셔너리 병합 및 필터링, 세트 연산 등 다양한 고급 기능과 성능 최적화 방법을 상세히 설명합니다. 비동기 프로그래밍과 컬렉션 타입의 효율적인 활용법도 포함되어 있어 실무에서 유용하게 활용할 수 있습니다. Swift의 컬렉션 타입을 완벽히 이해하고 싶다면 이 가이드를 확인하세요."}],["$","meta","3",{"name":"keywords","content":"swift,array,dicionary"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/swift-%EB%B0%B0%EC%97%B4-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%84%B8%ED%8A%B8-%EA%B5%B3%EC%9D%B4-%EC%95%8C%ED%95%84%EC%9A%94-%EC%97%86%EB%8B%A4"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄) | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄) | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift 고급 개발자를 위한 심화 자료로, 배열, 딕셔너리, 세트의 고급 사용법을 다룹니다. 배열 슬라이싱, 고차 함수 활용, 딕셔너리 병합 및 필터링, 세트 연산 등 다양한 고급 기능과 성능 최적화 방법을 상세히 설명합니다. 비동기 프로그래밍과 컬렉션 타입의 효율적인 활용법도 포함되어 있어 실무에서 유용하게 활용할 수 있습니다. Swift의 컬렉션 타입을 완벽히 이해하고 싶다면 이 가이드를 확인하세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/swift-%EB%B0%B0%EC%97%B4-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EC%84%B8%ED%8A%B8-%EA%B5%B3%EC%9D%B4-%EC%95%8C%ED%95%84%EC%9A%94-%EC%97%86%EB%8B%A4"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄) | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift 고급 개발자를 위한 심화 자료로, 배열, 딕셔너리, 세트의 고급 사용법을 다룹니다. 배열 슬라이싱, 고차 함수 활용, 딕셔너리 병합 및 필터링, 세트 연산 등 다양한 고급 기능과 성능 최적화 방법을 상세히 설명합니다. 비동기 프로그래밍과 컬렉션 타입의 효율적인 활용법도 포함되어 있어 실무에서 유용하게 활용할 수 있습니다. Swift의 컬렉션 타입을 완벽히 이해하고 싶다면 이 가이드를 확인하세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄)"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄)"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-23"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"8fdb9481","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 고급자를 위한 심화 가이드: 배열, 딕셔너리, 세트 완벽 이해"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 애플 생태계에서 강력하고 직관적인 프로그래밍 언어로 자리잡고 있습니다. 고급 개발자라면 배열(Array), 딕셔너리(Dictionary), 세트(Set)와 같은 기본 컬렉션 타입에 대한 기본 지식뿐만 아니라 이들을 효율적으로 활용하고, 고급 기능들을 최대한 활용하는 방법을 알아야 합니다. 이번 가이드에서는 이러한 컬렉션 타입을 더 깊이 이해하고, 실무에서 유용하게 쓸 수 있는 고급 기능들을 소개합니다."}],"\n",["$","h2",null,{"id":"445e43de","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"배열 (Array)"}],"\n",["$","h3",null,{"id":"68563273","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"배열의 고급 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"배열은 동일한 타입의 값들을 순서대로 저장하는 컬렉션 타입입니다. 배열을 더 효율적으로 사용하는 방법을 알아봅시다."}],"\n",["$","h4","h4-0",{"children":"배열 슬라이싱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"배열의 일부를 쉽게 추출할 수 있습니다. 슬라이싱은 데이터 분석 및 부분 배열 조작에 유용합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let numbers = [1, 2, 3, 4, 5, 6]\nlet slice = numbers[2...4] // [3, 4, 5]\n"}],"position":{"start":{"line":16,"column":1,"offset":447},"end":{"line":19,"column":4,"offset":532}}},"children":"let numbers = [1, 2, 3, 4, 5, 6]\nlet slice = numbers[2...4] // [3, 4, 5]\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["슬라이싱된 배열은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ArraySlice","position":{"start":{"line":21,"column":11,"offset":544},"end":{"line":21,"column":23,"offset":556}}}],"position":{"start":{"line":21,"column":11,"offset":544},"end":{"line":21,"column":23,"offset":556}}},"children":"ArraySlice"}}]," 타입을 가지며, 이를 통해 원본 배열의 메모리를 공유합니다. 이 점을 유념하여 메모리 사용을 최적화할 수 있습니다."]}],"\n",["$","h4","h4-1",{"children":"고차 함수 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["고차 함수 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"map","position":{"start":{"line":25,"column":7,"offset":644},"end":{"line":25,"column":12,"offset":649}}}],"position":{"start":{"line":25,"column":7,"offset":644},"end":{"line":25,"column":12,"offset":649}}},"children":"map"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"filter","position":{"start":{"line":25,"column":14,"offset":651},"end":{"line":25,"column":22,"offset":659}}}],"position":{"start":{"line":25,"column":14,"offset":651},"end":{"line":25,"column":22,"offset":659}}},"children":"filter"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce","position":{"start":{"line":25,"column":24,"offset":661},"end":{"line":25,"column":32,"offset":669}}}],"position":{"start":{"line":25,"column":24,"offset":661},"end":{"line":25,"column":32,"offset":669}}},"children":"reduce"}}],"는 배열을 조작하는 데 강력한 도구입니다. 특히 데이터 변환 및 필터링 작업에서 유용합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let doubled = numbers.map { $0 * 2 }\nlet evenNumbers = numbers.filter { $0 % 2 == 0 }\nlet sum = numbers.reduce(0, +)\n"}],"position":{"start":{"line":27,"column":1,"offset":722},"end":{"line":31,"column":4,"offset":851}}},"children":"let doubled = numbers.map { $0 * 2 }\nlet evenNumbers = numbers.filter { $0 % 2 == 0 }\nlet sum = numbers.reduce(0, +)\n"}}]}],"\n",["$","h4","h4-2",{"children":"성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["배열의 성능을 최적화하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reserveCapacity","position":{"start":{"line":35,"column":18,"offset":883},"end":{"line":35,"column":35,"offset":900}}}],"position":{"start":{"line":35,"column":18,"offset":883},"end":{"line":35,"column":35,"offset":900}}},"children":"reserveCapacity"}}]," 메서드를 사용할 수 있습니다. 이는 배열의 크기를 미리 할당하여 추가 작업 시 성능 저하를 방지합니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var dynamicArray: [Int] = []\ndynamicArray.reserveCapacity(1000)\n"}],"position":{"start":{"line":37,"column":1,"offset":960},"end":{"line":40,"column":4,"offset":1036}}},"children":"var dynamicArray: [Int] = []\ndynamicArray.reserveCapacity(1000)\n"}}]}],"\n",["$","h3",null,{"id":"8974f230","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"비동기 작업과 배열"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 비동기 작업을 처리할 때 배열을 효과적으로 사용할 수 있습니다. 예를 들어, 여러 비동기 작업의 결과를 배열에 저장하고, 이를 처리하는 방법을 살펴봅시다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func fetchData(completion: @escaping ([String]) -> Void) {\n    DispatchQueue.global().async {\n        let data = [\"Data1\", \"Data2\", \"Data3\"]\n        completion(data)\n    }\n}\n\nfetchData { data in\n    print(data)\n}\n"}],"position":{"start":{"line":46,"column":1,"offset":1149},"end":{"line":57,"column":4,"offset":1374}}},"children":"func fetchData(completion: @escaping ([String]) -> Void) {\n    DispatchQueue.global().async {\n        let data = [\"Data1\", \"Data2\", \"Data3\"]\n        completion(data)\n    }\n}\n\nfetchData { data in\n    print(data)\n}\n"}}]}],"\n",["$","h2",null,{"id":"49048692","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"딕셔너리 (Dictionary)"}],"\n",["$","h3",null,{"id":"e52b92b8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"딕셔너리의 고급 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"딕셔너리는 키-값 쌍으로 데이터를 저장하는 컬렉션 타입입니다. 딕셔너리를 더 효율적으로 사용하는 방법을 알아봅시다."}],"\n",["$","h4","h4-3",{"children":"딕셔너리 병합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["두 딕셔너리를 병합할 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"merging","position":{"start":{"line":67,"column":15,"offset":1510},"end":{"line":67,"column":24,"offset":1519}}}],"position":{"start":{"line":67,"column":15,"offset":1510},"end":{"line":67,"column":24,"offset":1519}}},"children":"merging"}}]," 메서드를 사용할 수 있습니다. 이는 데이터 소스를 통합하거나, 기본 설정과 사용자 설정을 합칠 때 유용합니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let dict1 = [\"a\": 1, \"b\": 2]\nlet dict2 = [\"b\": 3, \"c\": 4]\nlet mergedDict = dict1.merging(dict2) { (current, new) in new }\n"}],"position":{"start":{"line":69,"column":1,"offset":1583},"end":{"line":73,"column":4,"offset":1717}}},"children":"let dict1 = [\"a\": 1, \"b\": 2]\nlet dict2 = [\"b\": 3, \"c\": 4]\nlet mergedDict = dict1.merging(dict2) { (current, new) in new }\n"}}]}],"\n",["$","h4","h4-4",{"children":"딕셔너리 필터링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"딕셔너리의 특정 조건에 맞는 요소를 필터링 할 수 있습니다. 이는 데이터 클렌징 및 특정 조건에 맞는 데이터 추출에 유용합니다."}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let filteredDict = mergedDict.filter { $0.value > 2 }\n"}],"position":{"start":{"line":79,"column":1,"offset":1807},"end":{"line":81,"column":4,"offset":1873}}},"children":"let filteredDict = mergedDict.filter { $0.value > 2 }\n"}}]}],"\n",["$","h4","h4-5",{"children":"고차 함수 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["딕셔너리에서도 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mapValues","position":{"start":{"line":85,"column":9,"offset":1898},"end":{"line":85,"column":20,"offset":1909}}}],"position":{"start":{"line":85,"column":9,"offset":1898},"end":{"line":85,"column":20,"offset":1909}}},"children":"mapValues"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"compactMapValues","position":{"start":{"line":85,"column":22,"offset":1911},"end":{"line":85,"column":40,"offset":1929}}}],"position":{"start":{"line":85,"column":22,"offset":1911},"end":{"line":85,"column":40,"offset":1929}}},"children":"compactMapValues"}}]," 등의 고차 함수를 사용하여 값을 변환하거나, nil 값을 제거할 수 있습니다."]}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let incrementedValues = mergedDict.mapValues { $0 + 1 }\nlet nonNilValues = mergedDict.compactMapValues { $0 > 2 ? $0 : nil }\n"}],"position":{"start":{"line":87,"column":1,"offset":1975},"end":{"line":90,"column":4,"offset":2112}}},"children":"let incrementedValues = mergedDict.mapValues { $0 + 1 }\nlet nonNilValues = mergedDict.compactMapValues { $0 > 2 ? $0 : nil }\n"}}]}],"\n",["$","h3",null,{"id":"d0b3c807","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["딕셔너리의 성능을 최적화하기 위해 적절한 해시 함수를 사용하는 것이 중요합니다. Swift에서는 커스텀 타입을 딕셔너리의 키로 사용할 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":94,"column":78,"offset":2203},"end":{"line":94,"column":88,"offset":2213}}}],"position":{"start":{"line":94,"column":78,"offset":2203},"end":{"line":94,"column":88,"offset":2213}}},"children":"Hashable"}}]," 프로토콜을 준수해야 합니다."]}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Hashable {\n    let id: Int\n    let name: String\n}\n\nlet peopleDict: [Person: Int] = [Person(id: 1, name: \"John\"): 90]\n"}],"position":{"start":{"line":96,"column":1,"offset":2231},"end":{"line":103,"column":4,"offset":2375}}},"children":"struct Person: Hashable {\n    let id: Int\n    let name: String\n}\n\nlet peopleDict: [Person: Int] = [Person(id: 1, name: \"John\"): 90]\n"}}]}],"\n",["$","h2",null,{"id":"24aeefc3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"세트 (Set)"}],"\n",["$","h3",null,{"id":"bc7b7ca1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"세트의 고급 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"세트는 고유한 값들을 저장하는 컬렉션 타입입니다. 중복된 값을 허용하지 않으며, 효율적인 집합 연산을 지원합니다."}],"\n",["$","h4","h4-6",{"children":"세트 연산"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"세트는 합집합, 교집합, 차집합 등의 집합 연산을 효율적으로 수행할 수 있습니다."}],"\n",["$","pre","pre-8",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let setA: Set = [1, 2, 3, 4]\nlet setB: Set = [3, 4, 5, 6]\n\nlet union = setA.union(setB) // [1, 2, 3, 4, 5, 6]\nlet intersection = setA.intersection(setB) // [3, 4]\nlet difference = setA.subtracting(setB) // [1, 2]\n"}],"position":{"start":{"line":115,"column":1,"offset":2530},"end":{"line":122,"column":4,"offset":2755}}},"children":"let setA: Set = [1, 2, 3, 4]\nlet setB: Set = [3, 4, 5, 6]\n\nlet union = setA.union(setB) // [1, 2, 3, 4, 5, 6]\nlet intersection = setA.intersection(setB) // [3, 4]\nlet difference = setA.subtracting(setB) // [1, 2]\n"}}]}],"\n",["$","h4","h4-7",{"children":"세트 필터링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"세트의 특정 조건에 맞는 요소를 필터링 할 수 있습니다. 이는 데이터의 특정 조건을 만족하는 요소를 쉽게 추출하는 데 유용합니다."}],"\n",["$","pre","pre-9",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let filteredSet = setA.filter { $0 > 2 } // [3, 4]\n"}],"position":{"start":{"line":128,"column":1,"offset":2844},"end":{"line":130,"column":4,"offset":2907}}},"children":"let filteredSet = setA.filter { $0 > 2 } // [3, 4]\n"}}]}],"\n",["$","h3",null,{"id":"d0b3c807","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["세트의 성능을 최적화하기 위해 적절한 해시 함수를 사용하는 것이 중요합니다. Swift에서는 커스텀 타입을 세트의 요소로 사용할 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":134,"column":75,"offset":2995},"end":{"line":134,"column":85,"offset":3005}}}],"position":{"start":{"line":134,"column":75,"offset":2995},"end":{"line":134,"column":85,"offset":3005}}},"children":"Hashable"}}]," 프로토콜을 준수해야 합니다."]}],"\n",["$","pre","pre-10",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct CustomType: Hashable {\n    let id: Int\n}\n\nlet customSet: Set<CustomType> = [CustomType(id: 1), CustomType(id: 2)]\n"}],"position":{"start":{"line":136,"column":1,"offset":3023},"end":{"line":142,"column":4,"offset":3156}}},"children":"struct CustomType: Hashable {\n    let id: Int\n}\n\nlet customSet: Set<CustomType> = [CustomType(id: 1), CustomType(id: 2)]\n"}}]}],"\n",["$","h2",null,{"id":"be5c3107","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"고급 활용 사례"}],"\n",["$","h3",null,{"id":"dd8033a8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 변환"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"배열, 딕셔너리, 세트를 상호 변환하는 방법을 알아봅시다. 이 방법은 데이터 변환 및 정리에 매우 유용합니다."}],"\n",["$","pre","pre-11",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let array = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\nlet dict = Dictionary(uniqueKeysWithValues: array) // [\"a\": 1, \"b\": 2, \"c\": 3]\nlet set = Set(array.map { $0.1 }) // [1, 2, 3]\n"}],"position":{"start":{"line":150,"column":1,"offset":3246},"end":{"line":154,"column":4,"offset":3427}}},"children":"let array = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\nlet dict = Dictionary(uniqueKeysWithValues: array) // [\"a\": 1, \"b\": 2, \"c\": 3]\nlet set = Set(array.map { $0.1 }) // [1, 2, 3]\n"}}]}],"\n",["$","h3",null,{"id":"9be37992","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"배열, 딕셔너리, 세트는 각기 다른 용도와 성능 특성을 가지고 있습니다. 예를 들어, 배열은 순서가 중요할 때 유용하고, 딕셔너리는 키-값 조회가 빠르며, 세트는 고유한 값 관리에 최적화되어 있습니다. 성능을 고려해 적절한 컬렉션 타입을 선택하는 것이 중요합니다."}],"\n",["$","h3",null,{"id":"10b298ca","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"비동기 프로그래밍과 컬렉션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 비동기 작업을 처리할 때 컬렉션 타입을 효과적으로 사용하는 방법도 중요합니다. 예를 들어, 여러 비동기 작업의 결과를 배열에 저장하거나, 비동기 작업 중간에 딕셔너리를 통해 상태를 관리할 수 있습니다."}],"\n",["$","pre","pre-12",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func fetchData(completion: @escaping ([String: Int]) -> Void) {\n    DispatchQueue.global().async {\n        let result = [\"key1\": 1, \"key2\": 2]\n        completion(result)\n    }\n}\n\nfetchData { data in\n    print(data) // [\"key1\": 1, \"key2\": 2]\n}\n"}],"position":{"start":{"line":164,"column":1,"offset":3731},"end":{"line":175,"column":4,"offset":3986}}},"children":"func fetchData(completion: @escaping ([String: Int]) -> Void) {\n    DispatchQueue.global().async {\n        let result = [\"key1\": 1, \"key2\": 2]\n        completion(result)\n    }\n}\n\nfetchData { data in\n    print(data) // [\"key1\": 1, \"key2\": 2]\n}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 배열, 딕셔너리, 세트는 매우 강력한 컬렉션 타입입니다. 고급 개발자는 이러한 컬렉션 타입을 더 효율적으로 사용하기 위해 고급 기능들을 익히고, 성능 최적화 기법을 이해해야 합니다. 이 가이드를 통해 Swift의 컬렉션 타입에 대한 심화 지식을 쌓고, 실무에서 더욱 효율적이고 강력한 코드를 작성할 수 있기를 바랍니다. Swift의 다양한 기능을 활용하여 더욱 높은 수준의 프로그래밍 스킬을 갖추길 바랍니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 이것까지 알아야해? 응 알아야해.(배열, 딕셔너리, 세트 완벽 이해 3탄)","toc":[{"tagName":"h1","title":"Swift 고급자를 위한 심화 가이드: 배열, 딕셔너리, 세트 완벽 이해","id":"8fdb9481"},{"tagName":"h2","title":"배열 (Array)","id":"445e43de"},{"tagName":"h3","title":"배열의 고급 사용법","id":"68563273"},{"tagName":"h3","title":"비동기 작업과 배열","id":"8974f230"},{"tagName":"h2","title":"딕셔너리 (Dictionary)","id":"49048692"},{"tagName":"h3","title":"딕셔너리의 고급 사용법","id":"e52b92b8"},{"tagName":"h3","title":"성능 최적화","id":"d0b3c807"},{"tagName":"h2","title":"세트 (Set)","id":"24aeefc3"},{"tagName":"h3","title":"세트의 고급 사용법","id":"bc7b7ca1"},{"tagName":"h3","title":"성능 최적화","id":"d0b3c807"},{"tagName":"h2","title":"고급 활용 사례","id":"be5c3107"},{"tagName":"h3","title":"데이터 변환","id":"dd8033a8"},{"tagName":"h3","title":"성능 비교","id":"9be37992"},{"tagName":"h3","title":"비동기 프로그래밍과 컬렉션","id":"10b298ca"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
