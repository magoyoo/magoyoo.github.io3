1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","ReactorKit%EA%B3%BC-RxSwift%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%98%B8%EC%B6%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0ReactorKit%EA%B3%BC-RxSwift-%ED%86%B5%ED%95%A9-2caf1a48","d"],{"children":["__PAGE__?{\"slug\":\"ReactorKit과-RxSwift를-활용한-네트워크-호출-구현하기ReactorKit과-RxSwift-통합-2caf1a48\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","ReactorKit%EA%B3%BC-RxSwift%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%98%B8%EC%B6%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0ReactorKit%EA%B3%BC-RxSwift-%ED%86%B5%ED%95%A9-2caf1a48","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"ReactorKit과-RxSwift를-활용한-네트워크-호출-구현하기ReactorKit과-RxSwift-통합-2caf1a48\"}"},"styles":[]}],"segment":["slug","ReactorKit%EA%B3%BC-RxSwift%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%98%B8%EC%B6%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0ReactorKit%EA%B3%BC-RxSwift-%ED%86%B5%ED%95%A9-2caf1a48","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 ReactorKit과 RxSwift를 활용하여 네트워크 호출을 구현하는 방법에 대해 알아봅니다. 이 두 가지 라이브러리를 결합하여 반응형 프로그래밍 패러다임을 활용하는 과정을 단계별로 설명합니다."}],["$","meta","3",{"name":"keywords","content":"ReactorKit,RxSwift,네트워크 호출,반응형 프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/ReactorKit%EA%B3%BC-RxSwift%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%98%B8%EC%B6%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0ReactorKit%EA%B3%BC-RxSwift-%ED%86%B5%ED%95%A9-2caf1a48"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 ReactorKit과 RxSwift를 활용하여 네트워크 호출을 구현하는 방법에 대해 알아봅니다. 이 두 가지 라이브러리를 결합하여 반응형 프로그래밍 패러다임을 활용하는 과정을 단계별로 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/ReactorKit%EA%B3%BC-RxSwift%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%98%B8%EC%B6%9C-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0ReactorKit%EA%B3%BC-RxSwift-%ED%86%B5%ED%95%A9-2caf1a48"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 ReactorKit과 RxSwift를 활용하여 네트워크 호출을 구현하는 방법에 대해 알아봅니다. 이 두 가지 라이브러리를 결합하여 반응형 프로그래밍 패러다임을 활용하는 과정을 단계별로 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T4d3,import ReactorKit
import RxSwift

class NetworkReactor: Reactor {
    // Action 정의
    enum Action {
        case fetchData
    }

    // State 정의
    struct State {
        var data: String?
        var isLoading: Bool = false
    }
    
    let initialState: State
    private let disposeBag = DisposeBag()

    init() {
        self.initialState = State()
    }

    // 각 Action에 대한 처리를 정의
    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .fetchData:
            return Observable.concat([
                Observable.just(Mutation.setLoading(true)),
                fetchNetworkData().map { Mutation.setData($0) },
                Observable.just(Mutation.setLoading(false))
            ])
        }
    }

    // 변화를 정의
    enum Mutation {
        case setLoading(Bool)
        case setData(String)
    }

    // Mutation을 State로 적용
    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case .setLoading(let isLoading):
            newState.isLoading = isLoading
        case .setData(let data):
            newState.data = data
        }
        return newState
    }
}
f:T4d3,import ReactorKit
import RxSwift

class NetworkReactor: Reactor {
    // Action 정의
    enum Action {
        case fetchData
    }

    // State 정의
    struct State {
        var data: String?
        var isLoading: Bool = false
    }
    
    let initialState: State
    private let disposeBag = DisposeBag()

    init() {
        self.initialState = State()
    }

    // 각 Action에 대한 처리를 정의
    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .fetchData:
            return Observable.concat([
                Observable.just(Mutation.setLoading(true)),
                fetchNetworkData().map { Mutation.setData($0) },
                Observable.just(Mutation.setLoading(false))
            ])
        }
    }

    // 변화를 정의
    enum Mutation {
        case setLoading(Bool)
        case setData(String)
    }

    // Mutation을 State로 적용
    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case .setLoading(let isLoading):
            newState.isLoading = isLoading
        case .setData(let data):
            newState.data = data
        }
        return newState
    }
}
10:T45e,import UIKit
import RxSwift
import RxCocoa
import ReactorKit

class NetworkViewController: UIViewController, View {
    var disposeBag = DisposeBag()
    let reactor = NetworkReactor()
    
    // UI 요소들
    let dataLabel = UILabel()
    let activityIndicator = UIActivityIndicatorView()
    let fetchButton = UIButton(type: .system)

    override func viewDidLoad() {
        super.viewDidLoad()
        self.reactor = reactor
        setupUI()
    }

    private func setupUI() {
        // UI 설정 코드 생략
    }

    func bind(reactor: NetworkReactor) {
        // Action 바인딩
        fetchButton.rx.tap
            .map { NetworkReactor.Action.fetchData }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        // State 바인딩
        reactor.state.map { $0.data }
            .distinctUntilChanged()
            .bind(to: dataLabel.rx.text)
            .disposed(by: disposeBag)

        reactor.state.map { $0.isLoading }
            .distinctUntilChanged()
            .bind(to: activityIndicator.rx.isAnimating)
            .disposed(by: disposeBag)
    }
}
11:T45e,import UIKit
import RxSwift
import RxCocoa
import ReactorKit

class NetworkViewController: UIViewController, View {
    var disposeBag = DisposeBag()
    let reactor = NetworkReactor()
    
    // UI 요소들
    let dataLabel = UILabel()
    let activityIndicator = UIActivityIndicatorView()
    let fetchButton = UIButton(type: .system)

    override func viewDidLoad() {
        super.viewDidLoad()
        self.reactor = reactor
        setupUI()
    }

    private func setupUI() {
        // UI 설정 코드 생략
    }

    func bind(reactor: NetworkReactor) {
        // Action 바인딩
        fetchButton.rx.tap
            .map { NetworkReactor.Action.fetchData }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        // State 바인딩
        reactor.state.map { $0.data }
            .distinctUntilChanged()
            .bind(to: dataLabel.rx.text)
            .disposed(by: disposeBag)

        reactor.state.map { $0.isLoading }
            .distinctUntilChanged()
            .bind(to: activityIndicator.rx.isAnimating)
            .disposed(by: disposeBag)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5124df30","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기: ReactorKit과 RxSwift 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"반응형 프로그래밍은 데이터 흐름과 데이터의 변경을 감지하고 이에 반응하는 프로그래밍 패러다임으로, 최근 들어 많은 관심을 받고 있습니다. iOS 개발 분야에서도 RxSwift와 ReactorKit을 통해 이러한 반응형 프로그래밍을 구현할 수 있습니다. 이 글에서는 ReactorKit과 RxSwift를 통합하여 네트워크 호출을 구현하는 방법을 단계별로 설명합니다."}],"\n",["$","h2",null,{"id":"ac058db2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Introduction to ReactorKit와 RxSwift"}],"\n",["$","h3",null,{"id":"60060058","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"ReactorKit이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":10,"column":1,"offset":330},"end":{"line":10,"column":13,"offset":342}}}],"position":{"start":{"line":10,"column":1,"offset":330},"end":{"line":10,"column":13,"offset":342}}},"children":"ReactorKit"}}],"은 iOS 애플리케이션 개발에서 ",["$","strong",null,{"className":"font-black","children":"단방향 데이터 흐름(Unidirectional Data Flow, UDF)"}]," 패턴을 구현하기 위한 프레임워크입니다. 이 패턴은 데이터의 흐름을 한 방향으로 고정시켜 유지보수가 용이하게 하고, 애플리케이션의 상태 관리를 명확히 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":10,"column":165,"offset":494},"end":{"line":10,"column":177,"offset":506}}}],"position":{"start":{"line":10,"column":165,"offset":494},"end":{"line":10,"column":177,"offset":506}}},"children":"ReactorKit"}}],"의 주요 구성요소는 다음과 같습니다:"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":11,"column":3,"offset":529},"end":{"line":11,"column":12,"offset":538}}}],"position":{"start":{"line":11,"column":3,"offset":529},"end":{"line":11,"column":12,"offset":538}}},"children":"Reactor"}}],": 상태 변화를 처리하고, 액션을 받아 상태를 갱신합니다."]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Action","position":{"start":{"line":12,"column":3,"offset":573},"end":{"line":12,"column":11,"offset":581}}}],"position":{"start":{"line":12,"column":3,"offset":573},"end":{"line":12,"column":11,"offset":581}}},"children":"Action"}}],": 사용자의 입력이나 외부 신호를 나타내는 이벤트입니다."]}],"\n",["$","li","li-2",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"State","position":{"start":{"line":13,"column":3,"offset":615},"end":{"line":13,"column":10,"offset":622}}}],"position":{"start":{"line":13,"column":3,"offset":615},"end":{"line":13,"column":10,"offset":622}}},"children":"State"}}],": 애플리케이션의 현재 상태를 나타냅니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"202329a2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"RxSwift란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RxSwift","position":{"start":{"line":17,"column":1,"offset":662},"end":{"line":17,"column":10,"offset":671}}}],"position":{"start":{"line":17,"column":1,"offset":662},"end":{"line":17,"column":10,"offset":671}}},"children":"RxSwift"}}],"는 반응형 프로그래밍을 iOS에 구현하기 위한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactive Extensions","position":{"start":{"line":17,"column":36,"offset":697},"end":{"line":17,"column":57,"offset":718}}}],"position":{"start":{"line":17,"column":36,"offset":697},"end":{"line":17,"column":57,"offset":718}}},"children":"Reactive Extensions"}}]," reactivity 패키지입니다. 데이터를 스트림으로 처리하고, 비동기적인 이벤트를 쉽게 관리할 수 있게 해줍니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Observable","position":{"start":{"line":17,"column":123,"offset":784},"end":{"line":17,"column":135,"offset":796}}}],"position":{"start":{"line":17,"column":123,"offset":784},"end":{"line":17,"column":135,"offset":796}}},"children":"Observable"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Observer","position":{"start":{"line":17,"column":137,"offset":798},"end":{"line":17,"column":147,"offset":808}}}],"position":{"start":{"line":17,"column":137,"offset":798},"end":{"line":17,"column":147,"offset":808}}},"children":"Observer"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Subject","position":{"start":{"line":17,"column":149,"offset":810},"end":{"line":17,"column":158,"offset":819}}}],"position":{"start":{"line":17,"column":149,"offset":810},"end":{"line":17,"column":158,"offset":819}}},"children":"Subject"}}]," 등과 같은 개념을 사용하여 데이터의 흐름을 체계적으로 관리하게 됩니다."]}],"\n",["$","h3",null,{"id":"0debccfe","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"ReactorKit과 RxSwift의 통합 필요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":21,"column":1,"offset":894},"end":{"line":21,"column":13,"offset":906}}}],"position":{"start":{"line":21,"column":1,"offset":894},"end":{"line":21,"column":13,"offset":906}}},"children":"ReactorKit"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RxSwift","position":{"start":{"line":21,"column":15,"offset":908},"end":{"line":21,"column":24,"offset":917}}}],"position":{"start":{"line":21,"column":15,"offset":908},"end":{"line":21,"column":24,"offset":917}}},"children":"RxSwift"}}],"는 서로 보완적인 관계입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":21,"column":41,"offset":934},"end":{"line":21,"column":53,"offset":946}}}],"position":{"start":{"line":21,"column":41,"offset":934},"end":{"line":21,"column":53,"offset":946}}},"children":"ReactorKit"}}],"은 데이터의 흐름과 상태 관리를 책임지며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RxSwift","position":{"start":{"line":21,"column":77,"offset":970},"end":{"line":21,"column":86,"offset":979}}}],"position":{"start":{"line":21,"column":77,"offset":970},"end":{"line":21,"column":86,"offset":979}}},"children":"RxSwift"}}],"는 비동기적 이벤트 처리와 스트림 관리를 신속하게 실행할 수 있습니다. 이 두 프레임워크를 결합하면 견고하고 유지보수가 쉬운 애플리케이션을 개발할 수 있습니다."]}],"\n",["$","h2",null,{"id":"35ce895d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로젝트 설정"}],"\n",["$","h3",null,{"id":"2c960f4a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"종속성 추가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저, Podfile에 필요한 종속성을 추가해야 합니다. 프로젝트 폴더의 루트 디렉토리에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Podfile","position":{"start":{"line":27,"column":51,"offset":1144},"end":{"line":27,"column":60,"offset":1153}}}],"position":{"start":{"line":27,"column":51,"offset":1144},"end":{"line":27,"column":60,"offset":1153}}},"children":"Podfile"}}],"을 생성하거나 수정하여 아래와 같이 추가합니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-ruby","node":{"type":"element","tagName":"code","properties":{"className":["language-ruby"]},"children":[{"type":"text","value":"# Podfile\nplatform :ios, '11.0'\nuse_frameworks!\ntarget 'YourTargetName' do\n  pod 'RxSwift', '~> 6.0'\n  pod 'RxCocoa', '~> 6.0'\n  pod 'ReactorKit', '~> 3.0'\nend\n"}],"position":{"start":{"line":29,"column":1,"offset":1181},"end":{"line":38,"column":4,"offset":1352}}},"children":"# Podfile\nplatform :ios, '11.0'\nuse_frameworks!\ntarget 'YourTargetName' do\n  pod 'RxSwift', '~> 6.0'\n  pod 'RxCocoa', '~> 6.0'\n  pod 'ReactorKit', '~> 3.0'\nend\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음으로, 터미널에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pod install","position":{"start":{"line":40,"column":13,"offset":1366},"end":{"line":40,"column":26,"offset":1379}}}],"position":{"start":{"line":40,"column":13,"offset":1366},"end":{"line":40,"column":26,"offset":1379}}},"children":"pod install"}}],"을 실행하여 종속성을 설치합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"$$ pod install\n"}],"position":{"start":{"line":42,"column":1,"offset":1399},"end":{"line":44,"column":4,"offset":1424}}},"children":"$$ pod install\n"}}]}],"\n",["$","h2",null,{"id":"817789dd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ReactorKit 설정"}],"\n",["$","h3",null,{"id":"d13a3b69","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Reactor 생성하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":50,"column":1,"offset":1462},"end":{"line":50,"column":13,"offset":1474}}}],"position":{"start":{"line":50,"column":1,"offset":1462},"end":{"line":50,"column":13,"offset":1474}}},"children":"ReactorKit"}}],"의 핵심은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":50,"column":19,"offset":1480},"end":{"line":50,"column":28,"offset":1489}}}],"position":{"start":{"line":50,"column":19,"offset":1480},"end":{"line":50,"column":28,"offset":1489}}},"children":"Reactor"}}],"입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":50,"column":33,"offset":1494},"end":{"line":50,"column":42,"offset":1503}}}],"position":{"start":{"line":50,"column":33,"offset":1494},"end":{"line":50,"column":42,"offset":1503}}},"children":"Reactor"}}],"는 상태를 정의하고, 상태를 갱신하며, 외부에서 발생한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Action","position":{"start":{"line":50,"column":73,"offset":1534},"end":{"line":50,"column":81,"offset":1542}}}],"position":{"start":{"line":50,"column":73,"offset":1534},"end":{"line":50,"column":81,"offset":1542}}},"children":"Action"}}],"을 처리합니다. 네트워크 호출을 위한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":50,"column":102,"offset":1563},"end":{"line":50,"column":111,"offset":1572}}}],"position":{"start":{"line":50,"column":102,"offset":1563},"end":{"line":50,"column":111,"offset":1572}}},"children":"Reactor"}}],"를 생성해 보겠습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":52,"column":1,"offset":1586},"end":{"line":105,"column":4,"offset":2789}}},"children":"$f"}}]}],"\n",["$","h3",null,{"id":"79a8d817","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Network Service 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 호출을 처리하기 위해 별도의 서비스를 만들어 보겠습니다. 이 서비스는 비동기적으로 데이터를 가져오고, 결과를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Observable","position":{"start":{"line":109,"column":67,"offset":2883},"end":{"line":109,"column":79,"offset":2895}}}],"position":{"start":{"line":109,"column":67,"offset":2883},"end":{"line":109,"column":79,"offset":2895}}},"children":"Observable"}}],"로 반환합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import RxSwift\n\nclass NetworkService {\n    func fetchNetworkData() -> Observable<String> {\n        return Observable.create { observer in\n            let url = URL(string: \"https://api.example.com/data\")!\n            let task = URLSession.shared.dataTask(with: url) { data, response, error in\n                if let error = error {\n                    observer.onError(error)\n                } else if let data = data, let stringData = String(data: data, encoding: .utf8) {\n                    observer.onNext(stringData)\n                    observer.onCompleted()\n                }\n            }\n            task.resume()\n            return Disposables.create { task.cancel() }\n        }\n    }\n}\n"}],"position":{"start":{"line":111,"column":1,"offset":2905},"end":{"line":131,"column":4,"offset":3614}}},"children":"import RxSwift\n\nclass NetworkService {\n    func fetchNetworkData() -> Observable<String> {\n        return Observable.create { observer in\n            let url = URL(string: \"https://api.example.com/data\")!\n            let task = URLSession.shared.dataTask(with: url) { data, response, error in\n                if let error = error {\n                    observer.onError(error)\n                } else if let data = data, let stringData = String(data: data, encoding: .utf8) {\n                    observer.onNext(stringData)\n                    observer.onCompleted()\n                }\n            }\n            task.resume()\n            return Disposables.create { task.cancel() }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkReactor","position":{"start":{"line":133,"column":1,"offset":3616},"end":{"line":133,"column":17,"offset":3632}}}],"position":{"start":{"line":133,"column":1,"offset":3616},"end":{"line":133,"column":17,"offset":3632}}},"children":"NetworkReactor"}}],"에서 이 서비스를 사용하여 네트워크 데이터를 가져오는 코드를 추가합니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class NetworkReactor: Reactor {\n    // 기존 코드 생략\n    private let networkService = NetworkService()\n\n    private func fetchNetworkData() -> Observable<String> {\n        return networkService.fetchNetworkData()\n    }\n}\n"}],"position":{"start":{"line":135,"column":1,"offset":3674},"end":{"line":144,"column":4,"offset":3902}}},"children":"class NetworkReactor: Reactor {\n    // 기존 코드 생략\n    private let networkService = NetworkService()\n\n    private func fetchNetworkData() -> Observable<String> {\n        return networkService.fetchNetworkData()\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"6ddc66ae","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ViewController 설정"}],"\n",["$","h3",null,{"id":"9da77b36","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UI와 바인딩하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["마지막으로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":150,"column":8,"offset":3948},"end":{"line":150,"column":24,"offset":3964}}}],"position":{"start":{"line":150,"column":8,"offset":3948},"end":{"line":150,"column":24,"offset":3964}}},"children":"ViewController"}}],"에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":150,"column":27,"offset":3967},"end":{"line":150,"column":36,"offset":3976}}}],"position":{"start":{"line":150,"column":27,"offset":3967},"end":{"line":150,"column":36,"offset":3976}}},"children":"Reactor"}}],"를 사용하여 UI를 설정하고 바인딩합니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":152,"column":1,"offset":4001},"end":{"line":196,"column":4,"offset":5101}}},"children":"$11"}}]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RxSwift","position":{"start":{"line":200,"column":4,"offset":5114},"end":{"line":200,"column":13,"offset":5123}}}],"position":{"start":{"line":200,"column":4,"offset":5114},"end":{"line":200,"column":13,"offset":5123}}},"children":"RxSwift"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":200,"column":15,"offset":5125},"end":{"line":200,"column":27,"offset":5137}}}],"position":{"start":{"line":200,"column":15,"offset":5125},"end":{"line":200,"column":27,"offset":5137}}},"children":"ReactorKit"}}],"을 통해 반응형 프로그래밍을 효율적으로 구현할 수 있는 셋업을 완료했습니다. 이를 통해 네트워크 호출과 같은 비동기 작업을 더욱 효율적이고 이해하기 쉽게 처리할 수 있습니다. 이러한 접근 방식은 유지보수성, 확장성, 그리고 코드의 가독성을 대폭 향상시킵니다. 실무에서도 이러한 기술을 활용하여 복잡한 애플리케이션 상태 관리를 단순화해 보세요."]}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기:ReactorKit과 RxSwift 통합","toc":[{"tagName":"h1","title":"ReactorKit과 RxSwift를 활용한 네트워크 호출 구현하기: ReactorKit과 RxSwift 통합","id":"5124df30"},{"tagName":"h2","title":"Introduction to ReactorKit와 RxSwift","id":"ac058db2"},{"tagName":"h3","title":"ReactorKit이란?","id":"60060058"},{"tagName":"h3","title":"RxSwift란?","id":"202329a2"},{"tagName":"h3","title":"ReactorKit과 RxSwift의 통합 필요성","id":"0debccfe"},{"tagName":"h2","title":"프로젝트 설정","id":"35ce895d"},{"tagName":"h3","title":"종속성 추가","id":"2c960f4a"},{"tagName":"h2","title":"ReactorKit 설정","id":"817789dd"},{"tagName":"h3","title":"Reactor 생성하기","id":"d13a3b69"},{"tagName":"h3","title":"Network Service 구현하기","id":"79a8d817"},{"tagName":"h2","title":"ViewController 설정","id":"6ddc66ae"},{"tagName":"h3","title":"UI와 바인딩하기","id":"9da77b36"},{"tagName":"h3","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
