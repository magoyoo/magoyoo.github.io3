1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-Swift%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%8D%94-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-3d0690fc","d"],{"children":["__PAGE__?{\"slug\":\"프로토콜-지향-프로그래밍과-Swift의-활용-더-유연하고-재사용-가능한-코드-작성-3d0690fc\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-Swift%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%8D%94-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-3d0690fc","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"프로토콜-지향-프로그래밍과-Swift의-활용-더-유연하고-재사용-가능한-코드-작성-3d0690fc\"}"},"styles":[]}],"segment":["slug","%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-Swift%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%8D%94-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-3d0690fc","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift의 프로토콜 지향 프로그래밍(PGP)에 대해 알아보고, 이를 통해 더 유연하고 재사용 가능한 코드를 작성하는 방법을 설명합니다. PGP의 개념, 이점, 그리고 Swift에서의 활용 방법을 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Swift,프로토콜 지향 프로그래밍,PGP,소프트웨어 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-Swift%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%8D%94-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-3d0690fc"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift의 프로토콜 지향 프로그래밍(PGP)에 대해 알아보고, 이를 통해 더 유연하고 재사용 가능한 코드를 작성하는 방법을 설명합니다. PGP의 개념, 이점, 그리고 Swift에서의 활용 방법을 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC-Swift%EC%9D%98-%ED%99%9C%EC%9A%A9-%EB%8D%94-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B3%A0-%EC%9E%AC%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-3d0690fc"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift의 프로토콜 지향 프로그래밍(PGP)에 대해 알아보고, 이를 통해 더 유연하고 재사용 가능한 코드를 작성하는 방법을 설명합니다. PGP의 개념, 이점, 그리고 Swift에서의 활용 방법을 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-05"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"6cd74790","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"프로토콜 지향 프로그래밍(Protocol-Oriented Programming, PGP)","position":{"start":{"line":4,"column":8,"offset":58},"end":{"line":4,"column":59,"offset":109}}}],"position":{"start":{"line":4,"column":8,"offset":58},"end":{"line":4,"column":59,"offset":109}}},"children":"프로토콜 지향 프로그래밍(Protocol-Oriented Programming, PGP)"}}],"은 객체 지향 프로그래밍(Object-Oriented Programming, OOP)과는 다른 접근 방식을 제공합니다. 프로토콜을 중심으로 코드를 설계하면 더 유연하고 재사용 가능한 코드 작성이 가능해집니다. 이번 글에서는 PGP의 개념, 장점, 그리고 Swift에서 이를 어떻게 활용할 수 있는지를 탐구해보겠습니다."]}],"\n",["$","h2",null,{"id":"fd494856","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜 지향 프로그래밍이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜 지향 프로그래밍(Protocol-Oriented Programming)은 객체 지향 프로그래밍(OOP)의 몇 가지 단점(예: 다중 상속의 어려움)과 관련된 문제를 해결하기 위해 등장한 패러다임입니다. PGP는 프로토콜을 통해 코드의 재사용성과 유연성을 높이는 것을 목표로 합니다."}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"프로토콜의 역할"}],": 프로토콜은 특정 기능을 구현하기 위한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"청사진","position":{"start":{"line":10,"column":38,"offset":509},"end":{"line":10,"column":43,"offset":514}}}],"position":{"start":{"line":10,"column":38,"offset":509},"end":{"line":10,"column":43,"offset":514}}},"children":"청사진"}}],"을 제공합니다. 프로토콜을 채택한 클래스나 구조체는 해당 프로토콜이 요구하는 속성이나 메서드를 구현해야 합니다."]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"프로토콜을 통한 다형성"}],": 클래스 상속 대신 프로토콜을 통해 다형성을 구현할 수 있습니다. 이를 통해 코드의 복잡성을 줄이고 더 쉽게 유지보수할 수 있습니다."]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"id":"9fa92747","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜 지향 프로그래밍의 이점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 프로토콜 지향 프로그래밍이 제공하는 주요 장점은 다음과 같습니다:"}],"\n",["$","h3",null,{"id":"877c01a2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"코드 재사용성 증가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜은 특정 종류의 기능을 일반화하여, 이 기능을 다양한 클래스나 구조체에서 구현할 수 있게 도와줍니다. 이를 통해 코드 재사용성이 높아지며, 중복 코드 작성을 피할 수 있습니다."}],"\n",["$","h3",null,{"id":"289d2188","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"유연한 아키텍처"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜을 사용하면 더 유연한 설계가 가능해집니다. 클래스와 구조체가 서로 간섭하지 않고도 동일한 프로토콜을 구현할 수 있으며, 이를 통해 더 유연한 아키텍처를 만들 수 있습니다."}],"\n",["$","h3",null,{"id":"4c914647","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"다중 상속 문제 해결"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"객체 지향 프로그래밍에서는 다중 상속의 문제가 자주 발생합니다. 그러나 프로토콜을 사용하면 다중 프로토콜 채택이 가능하므로, 다중 상속의 문제를 해결할 수 있습니다."}],"\n",["$","h3",null,{"id":"b1c85eae","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"코드 테스트 용이성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜을 사용하면 특정 기능을 테스트할 때 실제 구현이 아닌 가짜(Mock) 객체를 사용할 수 있습니다. 이를 통해 유닛 테스트 작성이 더 쉬워지고, 테스트 코드의 유연성도 높아집니다."}],"\n",["$","h2",null,{"id":"bb1edb22","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 프로토콜 지향 프로그래밍 활용 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 프로토콜 지향 프로그래밍을 활용하기 위한 기본적인 방법과 예제를 알아보겠습니다."}],"\n",["$","h3",null,{"id":"a19ef20b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로토콜 정의하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, 프로토콜을 정의하는 방법을 살펴보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Drivable {\n    var speed: Double { get }\n    func drive()\n}\n"}],"position":{"start":{"line":42,"column":1,"offset":1339},"end":{"line":47,"column":4,"offset":1420}}},"children":"protocol Drivable {\n    var speed: Double { get }\n    func drive()\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":49,"column":8,"offset":1429},"end":{"line":49,"column":18,"offset":1439}}}],"position":{"start":{"line":49,"column":8,"offset":1429},"end":{"line":49,"column":18,"offset":1439}}},"children":"Drivable"}}]," 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"speed","position":{"start":{"line":49,"column":25,"offset":1446},"end":{"line":49,"column":32,"offset":1453}}}],"position":{"start":{"line":49,"column":25,"offset":1446},"end":{"line":49,"column":32,"offset":1453}}},"children":"speed"}}],"라는 속성과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"drive","position":{"start":{"line":49,"column":39,"offset":1460},"end":{"line":49,"column":46,"offset":1467}}}],"position":{"start":{"line":49,"column":39,"offset":1460},"end":{"line":49,"column":46,"offset":1467}}},"children":"drive"}}],"라는 메서드를 요구하고 있습니다. 이제 이 프로토콜을 다양한 클래스나 구조체에서 채택할 수 있습니다."]}],"\n",["$","h3",null,{"id":"5550147c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로토콜 채택하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜을 채택하는 방법입니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Car: Drivable {\n    var speed: Double = 0.0\n    \n    func drive() {\n        print(\"Driving at \\(speed) km/h\")\n    }\n}\n\nclass Bicycle: Drivable {\n    var speed: Double = 0.0\n    \n    func drive() {\n        print(\"Pedaling at \\(speed) km/h\")\n    }\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1559},"end":{"line":71,"column":4,"offset":1826}}},"children":"struct Car: Drivable {\n    var speed: Double = 0.0\n    \n    func drive() {\n        print(\"Driving at \\(speed) km/h\")\n    }\n}\n\nclass Bicycle: Drivable {\n    var speed: Double = 0.0\n    \n    func drive() {\n        print(\"Pedaling at \\(speed) km/h\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Car","position":{"start":{"line":73,"column":1,"offset":1828},"end":{"line":73,"column":6,"offset":1833}}}],"position":{"start":{"line":73,"column":1,"offset":1828},"end":{"line":73,"column":6,"offset":1833}}},"children":"Car"}}]," 구조체와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Bicycle","position":{"start":{"line":73,"column":12,"offset":1839},"end":{"line":73,"column":21,"offset":1848}}}],"position":{"start":{"line":73,"column":12,"offset":1839},"end":{"line":73,"column":21,"offset":1848}}},"children":"Bicycle"}}]," 클래스는 각각 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":73,"column":30,"offset":1857},"end":{"line":73,"column":40,"offset":1867}}}],"position":{"start":{"line":73,"column":30,"offset":1857},"end":{"line":73,"column":40,"offset":1867}}},"children":"Drivable"}}]," 프로토콜을 채택하고 있습니다. 이때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"speed","position":{"start":{"line":73,"column":61,"offset":1888},"end":{"line":73,"column":68,"offset":1895}}}],"position":{"start":{"line":73,"column":61,"offset":1888},"end":{"line":73,"column":68,"offset":1895}}},"children":"speed"}}]," 속성과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"drive","position":{"start":{"line":73,"column":73,"offset":1900},"end":{"line":73,"column":80,"offset":1907}}}],"position":{"start":{"line":73,"column":73,"offset":1900},"end":{"line":73,"column":80,"offset":1907}}},"children":"drive"}}]," 메서드를 구현해야 합니다."]}],"\n",["$","h3",null,{"id":"ddf24a47","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로토콜 확장(Extension)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜 확장(Extension)은 프로토콜에 기본 구현을 제공할 수 있는 강력한 기능입니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"extension Drivable {\n    func startEngine() {\n        print(\"Engine started\")\n    }\n}\n"}],"position":{"start":{"line":79,"column":1,"offset":2002},"end":{"line":85,"column":4,"offset":2100}}},"children":"extension Drivable {\n    func startEngine() {\n        print(\"Engine started\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":87,"column":9,"offset":2110},"end":{"line":87,"column":19,"offset":2120}}}],"position":{"start":{"line":87,"column":9,"offset":2110},"end":{"line":87,"column":19,"offset":2120}}},"children":"Drivable"}}]," 프로토콜에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"startEngine","position":{"start":{"line":87,"column":26,"offset":2127},"end":{"line":87,"column":39,"offset":2140}}}],"position":{"start":{"line":87,"column":26,"offset":2127},"end":{"line":87,"column":39,"offset":2140}}},"children":"startEngine"}}]," 메서드를 추가했습니다. 이를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":87,"column":59,"offset":2160},"end":{"line":87,"column":69,"offset":2170}}}],"position":{"start":{"line":87,"column":59,"offset":2160},"end":{"line":87,"column":69,"offset":2170}}},"children":"Drivable"}}]," 프로토콜을 채택한 모든 클래스와 구조체가 해당 메서드를 사용할 수 있습니다."]}],"\n",["$","h3",null,{"id":"282d85b0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프로토콜 조합(Composition)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜 조합을 통해 다양한 기능을 모듈화할 수 있습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Flyable {\n    var altitude: Double { get }\n    func fly()\n}\n\nstruct Drone: Drivable, Flyable {\n    var speed: Double = 0.0\n    var altitude: Double = 0.0\n    \n    func drive() {\n        print(\"Driving at \\(speed) km/h\")\n    }\n    \n    func fly() {\n        print(\"Flying at \\(altitude) meters\")\n    }\n}\n"}],"position":{"start":{"line":93,"column":1,"offset":2275},"end":{"line":111,"column":4,"offset":2598}}},"children":"protocol Flyable {\n    var altitude: Double { get }\n    func fly()\n}\n\nstruct Drone: Drivable, Flyable {\n    var speed: Double = 0.0\n    var altitude: Double = 0.0\n    \n    func drive() {\n        print(\"Driving at \\(speed) km/h\")\n    }\n    \n    func fly() {\n        print(\"Flying at \\(altitude) meters\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["드론은 동시에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Drivable","position":{"start":{"line":113,"column":9,"offset":2608},"end":{"line":113,"column":19,"offset":2618}}}],"position":{"start":{"line":113,"column":9,"offset":2608},"end":{"line":113,"column":19,"offset":2618}}},"children":"Drivable"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Flyable","position":{"start":{"line":113,"column":21,"offset":2620},"end":{"line":113,"column":30,"offset":2629}}}],"position":{"start":{"line":113,"column":21,"offset":2620},"end":{"line":113,"column":30,"offset":2629}}},"children":"Flyable"}}]," 프로토콜을 채택함으로써, 두 가지 기능을 모두 채택할 수 있습니다. 이를 통해 코드의 재사용성과 유연성을 극대화할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift의 프로토콜 지향 프로그래밍은 객체 지향 프로그래밍의 몇몇 단점을 보완하면서도, 더 유연하고 재사용 가능한 코드를 작성할 수 있게 도와줍니다. 코드를 더욱 효율적이고 유지 보수 가능한 형태로 만들기 위해서는 프로토콜 지향 프로그래밍의 적극적인 활용이 필요합니다. 이를 통해 보다 견고하고 확장 가능하며 유지 보수하기 쉬운 소프트웨어를 개발할 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성.","toc":[{"tagName":"h1","title":"프로토콜 지향 프로그래밍과 Swift의 활용: 더 유연하고 재사용 가능한 코드 작성","id":"6cd74790"},{"tagName":"h2","title":"프로토콜 지향 프로그래밍이란?","id":"fd494856"},{"tagName":"h2","title":"프로토콜 지향 프로그래밍의 이점","id":"9fa92747"},{"tagName":"h3","title":"코드 재사용성 증가","id":"877c01a2"},{"tagName":"h3","title":"유연한 아키텍처","id":"289d2188"},{"tagName":"h3","title":"다중 상속 문제 해결","id":"4c914647"},{"tagName":"h3","title":"코드 테스트 용이성","id":"b1c85eae"},{"tagName":"h2","title":"Swift에서 프로토콜 지향 프로그래밍 활용 방법","id":"bb1edb22"},{"tagName":"h3","title":"프로토콜 정의하기","id":"a19ef20b"},{"tagName":"h3","title":"프로토콜 채택하기","id":"5550147c"},{"tagName":"h3","title":"프로토콜 확장(Extension)","id":"ddf24a47"},{"tagName":"h3","title":"프로토콜 조합(Composition)","id":"282d85b0"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
