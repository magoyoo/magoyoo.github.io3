1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EA%B8%B0%EC%A1%B4-UIKit-%EC%95%B1%EC%97%90-SwiftUI-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-SwiftUI-gradual-adoption-d1df6ef9","d"],{"children":["__PAGE__?{\"slug\":\"기존-UIKit-앱에-SwiftUI-통합하기-기존-코드베이스에-SwiftUI-gradual-adoption-d1df6ef9\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EA%B8%B0%EC%A1%B4-UIKit-%EC%95%B1%EC%97%90-SwiftUI-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-SwiftUI-gradual-adoption-d1df6ef9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"기존-UIKit-앱에-SwiftUI-통합하기-기존-코드베이스에-SwiftUI-gradual-adoption-d1df6ef9\"}"},"styles":[]}],"segment":["slug","%EA%B8%B0%EC%A1%B4-UIKit-%EC%95%B1%EC%97%90-SwiftUI-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-SwiftUI-gradual-adoption-d1df6ef9","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI는 Apple이 제시한 새로운 사용자 인터페이스 프레임워크로, 기존 UIKit 앱에 점진적으로 통합할 수 있습니다. 이 글은 SwiftUI와 UIKit을 함께 사용하여 기존 코드베이스에 SwiftUI을 천천히 도입하는 방법을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,UIKit,iOS 개발,코드 통합"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EA%B8%B0%EC%A1%B4-UIKit-%EC%95%B1%EC%97%90-SwiftUI-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-SwiftUI-gradual-adoption-d1df6ef9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI는 Apple이 제시한 새로운 사용자 인터페이스 프레임워크로, 기존 UIKit 앱에 점진적으로 통합할 수 있습니다. 이 글은 SwiftUI와 UIKit을 함께 사용하여 기존 코드베이스에 SwiftUI을 천천히 도입하는 방법을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EA%B8%B0%EC%A1%B4-UIKit-%EC%95%B1%EC%97%90-SwiftUI-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-%EA%B8%B0%EC%A1%B4-%EC%BD%94%EB%93%9C%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%97%90-SwiftUI-gradual-adoption-d1df6ef9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI는 Apple이 제시한 새로운 사용자 인터페이스 프레임워크로, 기존 UIKit 앱에 점진적으로 통합할 수 있습니다. 이 글은 SwiftUI와 UIKit을 함께 사용하여 기존 코드베이스에 SwiftUI을 천천히 도입하는 방법을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T43c,import SwiftUI
import UIKit

class MyViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()

        // SwiftUI 뷰 생성
        let swiftUIView = Text("Hello, SwiftUI!")

        // UIHostingController로 SwiftUI 뷰 감싸기
        let hostingController = UIHostingController(rootView: swiftUIView)

        // UIHostingController를 자식 뷰 컨트롤러로 추가
        addChild(hostingController)
        view.addSubview(hostingController.view)

        // Auto Layout으로 위치 지정
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        hostingController.didMove(toParent: self)
    }
}
f:T43c,import SwiftUI
import UIKit

class MyViewController: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()

        // SwiftUI 뷰 생성
        let swiftUIView = Text("Hello, SwiftUI!")

        // UIHostingController로 SwiftUI 뷰 감싸기
        let hostingController = UIHostingController(rootView: swiftUIView)

        // UIHostingController를 자식 뷰 컨트롤러로 추가
        addChild(hostingController)
        view.addSubview(hostingController.view)

        // Auto Layout으로 위치 지정
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        hostingController.didMove(toParent: self)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-28"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"2af6bdb9","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 Apple이 제공하는 최신 사용자 인터페이스 프레임워크로, 단순하고 선언적인 방식으로 UI를 구성할 수 있습니다. 많은 개발자가 SwiftUI의 잠재력을 실험하고 있지만, 기존에 대규모 UIKit 앱을 가지고 있는 경우 SwiftUI를 즉시 전환하기 어려울 수 있습니다. 이 글에서는 SwiftUI를 기존 UIKit 앱에 통합하는 법을 단계별로 안내드립니다."}],"\n",["$","h2",null,{"id":"b3964a59","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI와 UIKit 간의 브리징 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI를 기존 UIKit 프로젝트에 통합하기 위한 첫 번째 단계는 두 프레임워크 간의 상호 작용을 이해하는 것입니다. SwiftUI 뷰를 UIKit에서 사용하거나, UIKit 뷰를 SwiftUI에서 사용하는 두 가지 방법이 있습니다."}],"\n",["$","h3",null,{"id":"1ab3f172","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"SwiftUI를 UIKit에 포함하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI 뷰를 기존 UIKit 앱에 추가하려면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIHostingController","position":{"start":{"line":12,"column":30,"offset":498},"end":{"line":12,"column":51,"offset":519}}}],"position":{"start":{"line":12,"column":30,"offset":498},"end":{"line":12,"column":51,"offset":519}}},"children":"UIHostingController"}}],"를 사용합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIHostingController","position":{"start":{"line":12,"column":60,"offset":528},"end":{"line":12,"column":81,"offset":549}}}],"position":{"start":{"line":12,"column":60,"offset":528},"end":{"line":12,"column":81,"offset":549}}},"children":"UIHostingController"}}],"는 SwiftUI 뷰를 포함할 수 있는 UIKit 뷰 컨트롤러입니다. 아래 예제를 통해 간단히 설명하겠습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":14,"column":1,"offset":612},"end":{"line":44,"column":4,"offset":1658}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 SwiftUI의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Text","position":{"start":{"line":46,"column":18,"offset":1677},"end":{"line":46,"column":24,"offset":1683}}}],"position":{"start":{"line":46,"column":18,"offset":1677},"end":{"line":46,"column":24,"offset":1683}}},"children":"Text"}}]," 뷰를 생성하고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIHostingController","position":{"start":{"line":46,"column":33,"offset":1692},"end":{"line":46,"column":54,"offset":1713}}}],"position":{"start":{"line":46,"column":33,"offset":1692},"end":{"line":46,"column":54,"offset":1713}}},"children":"UIHostingController"}}],"를 사용하여 이를 포함한 후, 자식 뷰 컨트롤러로 추가합니다. 이는 SwiftUI 뷰를 UIKit의 뷰 계층 구조에 통합할 수 있는 기본적인 방법입니다."]}],"\n",["$","h3",null,{"id":"e25ddfb0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UIKit을 SwiftUI로 래핑하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서 기존 UIKit 뷰를 사용해야 할 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIViewRepresentable","position":{"start":{"line":50,"column":34,"offset":1859},"end":{"line":50,"column":55,"offset":1880}}}],"position":{"start":{"line":50,"column":34,"offset":1859},"end":{"line":50,"column":55,"offset":1880}}},"children":"UIViewRepresentable"}}]," 프로토콜을 준수하여 래핑할 수 있습니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIImageView","position":{"start":{"line":50,"column":86,"offset":1911},"end":{"line":50,"column":99,"offset":1924}}}],"position":{"start":{"line":50,"column":86,"offset":1911},"end":{"line":50,"column":99,"offset":1924}}},"children":"UIImageView"}}],"를 SwiftUI에서 사용하고자 하는 경우 다음과 같이 구현할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\nimport UIKit\n\nstruct UIKitImageView: UIViewRepresentable {\n    let imageName: String\n\n    func makeUIView(context: Context) -> UIImageView {\n        return UIImageView()\n    }\n\n    func updateUIView(_ uiView: UIImageView, context: Context) {\n        uiView.image = UIImage(named: imageName)\n    }\n}\n"}],"position":{"start":{"line":52,"column":1,"offset":1968},"end":{"line":67,"column":4,"offset":2294}}},"children":"import SwiftUI\nimport UIKit\n\nstruct UIKitImageView: UIViewRepresentable {\n    let imageName: String\n\n    func makeUIView(context: Context) -> UIImageView {\n        return UIImageView()\n    }\n\n    func updateUIView(_ uiView: UIImageView, context: Context) {\n        uiView.image = UIImage(named: imageName)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIKitImageView","position":{"start":{"line":69,"column":4,"offset":2299},"end":{"line":69,"column":20,"offset":2315}}}],"position":{"start":{"line":69,"column":4,"offset":2299},"end":{"line":69,"column":20,"offset":2315}}},"children":"UIKitImageView"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIViewRepresentable","position":{"start":{"line":69,"column":22,"offset":2317},"end":{"line":69,"column":43,"offset":2338}}}],"position":{"start":{"line":69,"column":22,"offset":2317},"end":{"line":69,"column":43,"offset":2338}}},"children":"UIViewRepresentable"}}]," 프로토콜을 구현하여, SwiftUI에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIImageView","position":{"start":{"line":69,"column":66,"offset":2361},"end":{"line":69,"column":79,"offset":2374}}}],"position":{"start":{"line":69,"column":66,"offset":2361},"end":{"line":69,"column":79,"offset":2374}}},"children":"UIImageView"}}],"를 사용할 수 있게 합니다. 이후 SwiftUI 코드에서 다음과 같이 사용할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    var body: some View {\n        VStack {\n            Text(\"UIKit 이미지 뷰 사용 예제\")\n            UIKitImageView(imageName: \"example_image\")\n        }\n    }\n}\n"}],"position":{"start":{"line":71,"column":1,"offset":2426},"end":{"line":80,"column":4,"offset":2619}}},"children":"struct ContentView: View {\n    var body: some View {\n        VStack {\n            Text(\"UIKit 이미지 뷰 사용 예제\")\n            UIKitImageView(imageName: \"example_image\")\n        }\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"76121ec4","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"점진적 통합: 단계별 접근법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기존 UIKit 앱에 SwiftUI를 통합하는 가장 효율적인 방법은 점진적인 접근법을 취하는 것입니다. 이를 통해 처음부터 모든 코드를 변경하지 않고, 일부 화면이나 기능부터 시작하며 점진적으로 SwiftUI로 전환할 수 있습니다."}],"\n",["$","h3",null,{"id":"b0e565ee","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1단계: 개별 화면 또는 컴포넌트 변경"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"가장 간단한 방식은 앱의 특정 화면이나 컴포넌트를 SwiftUI로 변경하는 것입니다. 예를 들어, 앱의 설정 화면이나 메인 화면의 일부를 먼저 SwiftUI로 전환할 수 있습니다. 이를 통해 SwiftUI의 장점을 체감하면서도 앱의 기존 동작을 크게 변경하지 않습니다."}],"\n",["$","h3",null,{"id":"10679b58","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2단계: 뷰 컨트롤러 단위로 전환"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["한두 개의 화면이나 컴포넌트를 성공적으로 전환한 후에는 전체 뷰 컨트롤러를 SwiftUI로 전환할 수 있습니다. 이는 기존 UIKit 뷰 컨트롤러를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIHostingController","position":{"start":{"line":92,"column":84,"offset":3058},"end":{"line":92,"column":105,"offset":3079}}}],"position":{"start":{"line":92,"column":84,"offset":3058},"end":{"line":92,"column":105,"offset":3079}}},"children":"UIHostingController"}}],"로 대체하는 방식으로 이루어질 수 있습니다. 이렇게 하면 해당 뷰 컨트롤러 내의 뷰 로직을 더 간단하게 만들 수 있습니다."]}],"\n",["$","h3",null,{"id":"44594680","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3단계: 앱 전반에 걸쳐 적용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"마지막 단계에서는 앱의 대부분 또는 전체를 SwiftUI로 전환합니다. 이 과정에서는 다양한 SwiftUI 기능과 레이아웃을 사용하여 앱의 모든 화면을 재작성하게 됩니다. 이 단계에 도달하기 위해서는 충분한 테스트와 업데이트 과정이 필요합니다."}],"\n",["$","h2",null,{"id":"521ba7e0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"효율적인 테스트와 디버깅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI와 UIKit을 함께 사용할 때 디버깅이나 테스트가 어려워질 수 있습니다. 이를 해결하기 위해 다음과 같은 방법을 활용할 수 있습니다."}],"\n",["$","h3",null,{"id":"852ab08c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"프리뷰 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Xcode","position":{"start":{"line":104,"column":1,"offset":3425},"end":{"line":104,"column":8,"offset":3432}}}],"position":{"start":{"line":104,"column":1,"offset":3425},"end":{"line":104,"column":8,"offset":3432}}},"children":"Xcode"}}],"의 프리뷰 기능을 사용하면 SwiftUI 뷰를 실시간으로 확인하고 디버깅할 수 있습니다. 이를 통해 코드를 작성하면서 즉시 결과를 확인할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n"}],"position":{"start":{"line":106,"column":1,"offset":3518},"end":{"line":112,"column":4,"offset":3644}}},"children":"struct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"ca6099ac","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"테스트 코드 작성하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI와 UIKit 통합 후, 일반적인 유닛 테스트와 UI 테스트를 작성하여 주요 기능이 정상적으로 작동하는지 확인해야 합니다. 예를 들어, SwiftUI 뷰에서 특정 동작을 테스트하려면 별도의 유닛 테스트 케이스를 작성할 수 있습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import XCTest\n@testable import YourApp\n\nclass ContentViewTests: XCTestCase {\n    func testExample() {\n        // Your test code here\n    }\n}\n"}],"position":{"start":{"line":118,"column":1,"offset":3801},"end":{"line":127,"column":4,"offset":3954}}},"children":"import XCTest\n@testable import YourApp\n\nclass ContentViewTests: XCTestCase {\n    func testExample() {\n        // Your test code here\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 효율적이고 모던한 사용자 인터페이스 개발 도구를 제공합니다. 기존 UIKit 앱에 SwiftUI를 점진적으로 통합함으로써 새로운 기능을 빠르게 도입하고, 코드베이스를 최신화할 수 있습니다. 점진적 접근법을 통해 앱의 안정성을 유지하면서도 SwiftUI의 이점을 최대한 활용할 수 있습니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption.","toc":[{"tagName":"h1","title":"기존 UIKit 앱에 SwiftUI 통합하기: 기존 코드베이스에 SwiftUI gradual adoption","id":"2af6bdb9"},{"tagName":"h2","title":"SwiftUI와 UIKit 간의 브리징 이해하기","id":"b3964a59"},{"tagName":"h3","title":"SwiftUI를 UIKit에 포함하기","id":"1ab3f172"},{"tagName":"h3","title":"UIKit을 SwiftUI로 래핑하기","id":"e25ddfb0"},{"tagName":"h2","title":"점진적 통합: 단계별 접근법","id":"76121ec4"},{"tagName":"h3","title":"1단계: 개별 화면 또는 컴포넌트 변경","id":"b0e565ee"},{"tagName":"h3","title":"2단계: 뷰 컨트롤러 단위로 전환","id":"10679b58"},{"tagName":"h3","title":"3단계: 앱 전반에 걸쳐 적용","id":"44594680"},{"tagName":"h2","title":"효율적인 테스트와 디버깅","id":"521ba7e0"},{"tagName":"h3","title":"프리뷰 사용하기","id":"852ab08c"},{"tagName":"h3","title":"테스트 코드 작성하기","id":"ca6099ac"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
