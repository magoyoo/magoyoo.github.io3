1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%86%B5%EC%8B%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EA%B5%AC%EC%B6%95-b23455c5","d"],{"children":["__PAGE__?{\"slug\":\"Swift-네트워크-레이어-설계-URLSession과-Codable을-사용하여-API-통신을-위한-견고한-네트워크-레이어-구축-b23455c5\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%86%B5%EC%8B%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EA%B5%AC%EC%B6%95-b23455c5","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-네트워크-레이어-설계-URLSession과-Codable을-사용하여-API-통신을-위한-견고한-네트워크-레이어-구축-b23455c5\"}"},"styles":[]}],"segment":["slug","Swift-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%86%B5%EC%8B%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EA%B5%AC%EC%B6%95-b23455c5","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift를 사용하여 URLSession과 Codable을 활용해 API 통신을 위한 견고한 네트워크 레이어를 설계하는 방법을 다룹니다. 이 글에서는 기본 개념, 설계 패턴, 예제 코드 및 모범 사례를 포함합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,URLSession,Codable,네트워크 레이어"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%86%B5%EC%8B%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EA%B5%AC%EC%B6%95-b23455c5"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift를 사용하여 URLSession과 Codable을 활용해 API 통신을 위한 견고한 네트워크 레이어를 설계하는 방법을 다룹니다. 이 글에서는 기본 개념, 설계 패턴, 예제 코드 및 모범 사례를 포함합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EC%84%A4%EA%B3%84-URLSession%EA%B3%BC-Codable%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-API-%ED%86%B5%EC%8B%A0%EC%9D%84-%EC%9C%84%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EB%A0%88%EC%9D%B4%EC%96%B4-%EA%B5%AC%EC%B6%95-b23455c5"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift를 사용하여 URLSession과 Codable을 활용해 API 통신을 위한 견고한 네트워크 레이어를 설계하는 방법을 다룹니다. 이 글에서는 기본 개념, 설계 패턴, 예제 코드 및 모범 사례를 포함합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T5ee,// User 모델 정의
struct User: Codable {
    let id: Int
    let name: String
    let email: String
}

// NetworkManager 클래스 정의
class NetworkManager {
    static let shared = NetworkManager()
    private let session = URLSession(configuration: .default)
    private init() {}

    func fetchData<T: Codable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {
        let task = session.dataTask(with: url) { data, response, error in
            guard let data = data, error == nil else {
                completion(.failure(error!))
                return
            }
            let decoder = JSONDecoder()
            do {
                let result = try decoder.decode(T.self, from: data)
                completion(.success(result))
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
}

// APIService 클래스 정의
class APIService {
    func fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {
        let url = URL(string: "https://api.example.com/users")!
        NetworkManager.shared.fetchData(from: url, completion: completion)
    }
}

// 사용자 데이터를 가져오기 위해 APIService 사용
let apiService = APIService()
apiService.fetchUsers { result in
    switch result {
    case .success(let users):
        for user in users {
            print(user.name)
        }
    case .failure(let error):
        print("Error fetching users: \(error.localizedDescription)")
    }
}
f:T5ee,// User 모델 정의
struct User: Codable {
    let id: Int
    let name: String
    let email: String
}

// NetworkManager 클래스 정의
class NetworkManager {
    static let shared = NetworkManager()
    private let session = URLSession(configuration: .default)
    private init() {}

    func fetchData<T: Codable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {
        let task = session.dataTask(with: url) { data, response, error in
            guard let data = data, error == nil else {
                completion(.failure(error!))
                return
            }
            let decoder = JSONDecoder()
            do {
                let result = try decoder.decode(T.self, from: data)
                completion(.success(result))
            } catch {
                completion(.failure(error))
            }
        }
        task.resume()
    }
}

// APIService 클래스 정의
class APIService {
    func fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {
        let url = URL(string: "https://api.example.com/users")!
        NetworkManager.shared.fetchData(from: url, completion: completion)
    }
}

// 사용자 데이터를 가져오기 위해 APIService 사용
let apiService = APIService()
apiService.fetchUsers { result in
    switch result {
    case .success(let users):
        for user in users {
            print(user.name)
        }
    case .failure(let error):
        print("Error fetching users: \(error.localizedDescription)")
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-02"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"1bfe0841","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["API 통신은 현대 모바일 애플리케이션에서 필수적인 요소입니다. Swift에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":4,"column":46,"offset":121},"end":{"line":4,"column":58,"offset":133}}}],"position":{"start":{"line":4,"column":46,"offset":121},"end":{"line":4,"column":58,"offset":133}}},"children":"URLSession"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":4,"column":60,"offset":135},"end":{"line":4,"column":69,"offset":144}}}],"position":{"start":{"line":4,"column":60,"offset":135},"end":{"line":4,"column":69,"offset":144}}},"children":"Codable"}}],"을 사용하여 효율적이고 신뢰성 있는 네트워크 레이어를 구축할 수 있습니다. 이 글에서는 이러한 네트워크 레이어를 설계하고 구현하는 방법을 단계별로 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"661e173b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 레이어 설계는 몇 가지 주요 개념을 이해하는 것에서 시작됩니다. 첫 번째는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":8,"column":48,"offset":296},"end":{"line":8,"column":60,"offset":308}}}],"position":{"start":{"line":8,"column":48,"offset":296},"end":{"line":8,"column":60,"offset":308}}},"children":"URLSession"}}],"입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":8,"column":65,"offset":313},"end":{"line":8,"column":77,"offset":325}}}],"position":{"start":{"line":8,"column":65,"offset":313},"end":{"line":8,"column":77,"offset":325}}},"children":"URLSession"}}],"은 네트워크 요청을 처리하는 데 사용되는 클래스입니다. 두 번째는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":8,"column":114,"offset":362},"end":{"line":8,"column":123,"offset":371}}}],"position":{"start":{"line":8,"column":114,"offset":362},"end":{"line":8,"column":123,"offset":371}}},"children":"Codable"}}],"입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":8,"column":128,"offset":376},"end":{"line":8,"column":137,"offset":385}}}],"position":{"start":{"line":8,"column":128,"offset":376},"end":{"line":8,"column":137,"offset":385}}},"children":"Codable"}}]," 프로토콜은 JSON 데이터를 Swift 객체로 변환하거나 그 반대로 변환하는 데 사용됩니다."]}],"\n",["$","h2",null,{"id":"3e0a6342","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. URLSession 사용법"}],"\n",["$","h3",null,{"id":"cd0e9e47","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2.1. URLSession 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":14,"column":1,"offset":485},"end":{"line":14,"column":13,"offset":497}}}],"position":{"start":{"line":14,"column":1,"offset":485},"end":{"line":14,"column":13,"offset":497}}},"children":"URLSession"}}]," 설정은 매우 간단합니다. 기본적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession.shared","position":{"start":{"line":14,"column":34,"offset":518},"end":{"line":14,"column":53,"offset":537}}}],"position":{"start":{"line":14,"column":34,"offset":518},"end":{"line":14,"column":53,"offset":537}}},"children":"URLSession.shared"}}],"를 사용할 수 있지만, 사용자 정의 구성을 원한다면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSessionConfiguration","position":{"start":{"line":14,"column":82,"offset":566},"end":{"line":14,"column":107,"offset":591}}}],"position":{"start":{"line":14,"column":82,"offset":566},"end":{"line":14,"column":107,"offset":591}}},"children":"URLSessionConfiguration"}}],"을 사용할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let config = URLSessionConfiguration.default\nlet session = URLSession(configuration: config)\n"}],"position":{"start":{"line":16,"column":1,"offset":606},"end":{"line":19,"column":4,"offset":711}}},"children":"let config = URLSessionConfiguration.default\nlet session = URLSession(configuration: config)\n"}}]}],"\n",["$","h3",null,{"id":"30b0dbcf","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2.2. 데이터 요청"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["데이터 요청은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":23,"column":9,"offset":738},"end":{"line":23,"column":21,"offset":750}}}],"position":{"start":{"line":23,"column":9,"offset":738},"end":{"line":23,"column":21,"offset":750}}},"children":"URLSession"}}],"의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"dataTask","position":{"start":{"line":23,"column":23,"offset":752},"end":{"line":23,"column":33,"offset":762}}}],"position":{"start":{"line":23,"column":23,"offset":752},"end":{"line":23,"column":33,"offset":762}}},"children":"dataTask"}}]," 메서드를 사용하여 수행할 수 있습니다. 이 메서드는 요청을 만들고, 응답 데이터를 받아서 처리할 수 있는 클로저를 제공합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let url = URL(string: \"https://api.example.com/data\")!\nlet task = session.dataTask(with: url) { data, response, error in\n    guard let data = data, error == nil else {\n        print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n        return\n    }\n    // Handle the response data\n}\ntask.resume()\n"}],"position":{"start":{"line":25,"column":1,"offset":835},"end":{"line":35,"column":4,"offset":1158}}},"children":"let url = URL(string: \"https://api.example.com/data\")!\nlet task = session.dataTask(with: url) { data, response, error in\n    guard let data = data, error == nil else {\n        print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n        return\n    }\n    // Handle the response data\n}\ntask.resume()\n"}}]}],"\n",["$","h2",null,{"id":"8943e0f3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. Codable 사용법"}],"\n",["$","h3",null,{"id":"829ab5f0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.1. Codable 프로토콜"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":41,"column":1,"offset":1202},"end":{"line":41,"column":10,"offset":1211}}}],"position":{"start":{"line":41,"column":1,"offset":1202},"end":{"line":41,"column":10,"offset":1211}}},"children":"Codable"}}]," 프로토콜은 Swift 객체를 JSON 데이터로 인코딩하거나 JSON 데이터를 Swift 객체로 디코드하는 데 사용됩니다. 사용하려면 Swift 구조체나 클래스를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":41,"column":101,"offset":1302},"end":{"line":41,"column":110,"offset":1311}}}],"position":{"start":{"line":41,"column":101,"offset":1302},"end":{"line":41,"column":110,"offset":1311}}},"children":"Codable"}}],"로 선언하면 됩니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n"}],"position":{"start":{"line":43,"column":1,"offset":1324},"end":{"line":49,"column":4,"offset":1420}}},"children":"struct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n"}}]}],"\n",["$","h3",null,{"id":"3451739e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3.2. JSON 데이터 디코딩"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 응답 데이터를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":53,"column":14,"offset":1458},"end":{"line":53,"column":23,"offset":1467}}}],"position":{"start":{"line":53,"column":14,"offset":1458},"end":{"line":53,"column":23,"offset":1467}}},"children":"Codable"}}],"을 사용하여 디코딩할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let decoder = JSONDecoder()\nif let userData = try? decoder.decode(User.self, from: data) {\n    print(userData.name)\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1488},"end":{"line":60,"column":4,"offset":1618}}},"children":"let decoder = JSONDecoder()\nif let userData = try? decoder.decode(User.self, from: data) {\n    print(userData.name)\n}\n"}}]}],"\n",["$","h2",null,{"id":"ef02738d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. 네트워크 레이어 설계 패턴"}],"\n",["$","h3",null,{"id":"a25dc273","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4.1. 네트워크 매니저 클래스"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"네트워크 레이어를 관리하기 위해 별도의 클래스를 생성하는 것이 좋습니다. 이 클래스는 모든 네트워크 요청을 중앙에서 관리합니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class NetworkManager {\n    static let shared = NetworkManager()\n    private let session = URLSession(configuration: .default)\n\n    private init() {}\n\n    func fetchData<T: Codable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n        let task = session.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(.failure(error!))\n                return\n            }\n            let decoder = JSONDecoder()\n            do {\n                let result = try decoder.decode(T.self, from: data)\n                completion(.success(result))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}\n"}],"position":{"start":{"line":68,"column":1,"offset":1738},"end":{"line":92,"column":4,"offset":2499}}},"children":"class NetworkManager {\n    static let shared = NetworkManager()\n    private let session = URLSession(configuration: .default)\n\n    private init() {}\n\n    func fetchData<T: Codable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n        let task = session.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(.failure(error!))\n                return\n            }\n            let decoder = JSONDecoder()\n            do {\n                let result = try decoder.decode(T.self, from: data)\n                completion(.success(result))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"7b3827ea","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4.2. API 서비스 클래스"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"또한, 각 API 엔드포인트에 대한 서비스를 생성할 수 있습니다. 이를 통해 네트워크 요청을 더욱 체계적으로 관리할 수 있습니다."}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class APIService {\n    func fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {\n        let url = URL(string: \"https://api.example.com/users\")!\n        NetworkManager.shared.fetchData(from: url, completion: completion)\n    }\n}\n"}],"position":{"start":{"line":98,"column":1,"offset":2597},"end":{"line":105,"column":4,"offset":2852}}},"children":"class APIService {\n    func fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {\n        let url = URL(string: \"https://api.example.com/users\")!\n        NetworkManager.shared.fetchData(from: url, completion: completion)\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"09206464","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. 예제 코드"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이를 종합하여 사용자 데이터를 가져오는 전체 예제 코드를 살펴보겠습니다."}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":111,"column":1,"offset":2909},"end":{"line":163,"column":4,"offset":4381}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Codable","position":{"start":{"line":165,"column":7,"offset":4389},"end":{"line":165,"column":16,"offset":4398}}}],"position":{"start":{"line":165,"column":7,"offset":4389},"end":{"line":165,"column":16,"offset":4398}}},"children":"Codable"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":165,"column":18,"offset":4400},"end":{"line":165,"column":30,"offset":4412}}}],"position":{"start":{"line":165,"column":18,"offset":4400},"end":{"line":165,"column":30,"offset":4412}}},"children":"URLSession"}}],"을 사용하여 API에서 사용자 데이터를 가져오는 간단하면서도 견고한 네트워크 레이어를 설계하는 방법을 보여줍니다. 이 패턴은 유지보수성과 확장성을 높이는 데 큰 도움이 될 것입니다."]}],"\n",["$","h2",null,{"id":"3102a07c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"6. 모범 사례"}],"\n",["$","h3",null,{"id":"2b8e2806","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"6.1. 에러 핸들링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"네트워크 요청은 실패할 가능성이 항상 존재합니다. 따라서 철저한 에러 핸들링이 필요합니다. 에러 메시지를 사용자에게 표시할 수 있도록 해야 합니다."}],"\n",["$","h3",null,{"id":"93c67c6c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"6.2. 유닛 테스트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 레이어의 각 부분은 테스트 가능해야 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":175,"column":31,"offset":4676},"end":{"line":175,"column":43,"offset":4688}}}],"position":{"start":{"line":175,"column":31,"offset":4676},"end":{"line":175,"column":43,"offset":4688}}},"children":"URLSession"}}],"을 모킹하여 다양한 시나리오에서 동작을 테스트할 수 있습니다."]}],"\n",["$","h3",null,{"id":"f323198e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"6.3. 보안"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"API 키와 같은 민감한 정보는 코드에 직접 작성하지 말고 안전하게 관리해야 합니다. 예를 들어, iOS의 키체인 또는 환경 변수를 사용하는 것이 좋습니다."}],"\n",["$","h3",null,{"id":"a63741e5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"6.4. 성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"불필요한 네트워크 호출을 피하는 것이 중요합니다. 캐싱을 사용하여 자주 변경되지 않는 데이터를 저장하고 필요할 때만 새로 요청하는 방법도 고려해볼 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서 설명한 네트워크 레이어 설계 패턴과 모범 사례를 따르면, 효율적이고 유지보수성이 높은 API 통신을 구현할 수 있을 것입니다. Happy Coding!"}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축.","toc":[{"tagName":"h1","title":"Swift 네트워크 레이어 설계: URLSession과 Codable을 사용하여 API 통신을 위한 견고한 네트워크 레이어 구축","id":"1bfe0841"},{"tagName":"h2","title":"1. 기본 개념","id":"661e173b"},{"tagName":"h2","title":"2. URLSession 사용법","id":"3e0a6342"},{"tagName":"h3","title":"2.1. URLSession 설정","id":"cd0e9e47"},{"tagName":"h3","title":"2.2. 데이터 요청","id":"30b0dbcf"},{"tagName":"h2","title":"3. Codable 사용법","id":"8943e0f3"},{"tagName":"h3","title":"3.1. Codable 프로토콜","id":"829ab5f0"},{"tagName":"h3","title":"3.2. JSON 데이터 디코딩","id":"3451739e"},{"tagName":"h2","title":"4. 네트워크 레이어 설계 패턴","id":"ef02738d"},{"tagName":"h3","title":"4.1. 네트워크 매니저 클래스","id":"a25dc273"},{"tagName":"h3","title":"4.2. API 서비스 클래스","id":"7b3827ea"},{"tagName":"h2","title":"5. 예제 코드","id":"09206464"},{"tagName":"h2","title":"6. 모범 사례","id":"3102a07c"},{"tagName":"h3","title":"6.1. 에러 핸들링","id":"2b8e2806"},{"tagName":"h3","title":"6.2. 유닛 테스트","id":"93c67c6c"},{"tagName":"h3","title":"6.3. 보안","id":"f323198e"},{"tagName":"h3","title":"6.4. 성능 최적화","id":"a63741e5"}],"language":"kr"}]}]]}]]
8:null
