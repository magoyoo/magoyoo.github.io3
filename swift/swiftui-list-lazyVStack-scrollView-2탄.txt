1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","swiftui-list-lazyVStack-scrollView-2%ED%83%84","d"],{"children":["__PAGE__?{\"slug\":\"swiftui-list-lazyVStack-scrollView-2탄\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","swiftui-list-lazyVStack-scrollView-2%ED%83%84","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"swiftui-list-lazyVStack-scrollView-2탄\"}"},"styles":[]}],"segment":["slug","swiftui-list-lazyVStack-scrollView-2%ED%83%84","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 성능 최적화, 비동기 데이터 로딩, 필터링된 리스트 구현 및 네비게이션 기능을 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"swift,swiftUI"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/swiftui-list-lazyVStack-scrollView-2%ED%83%84"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 성능 최적화, 비동기 데이터 로딩, 필터링된 리스트 구현 및 네비게이션 기능을 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/swiftui-list-lazyVStack-scrollView-2%ED%83%84"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 성능 최적화, 비동기 데이터 로딩, 필터링된 리스트 구현 및 네비게이션 기능을 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
14:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
15:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T4f5,struct FilteredListView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
f:T4f5,struct FilteredListView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
11:T1f41,
## SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법

이 글에서는 SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 이를 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다.

### 1. 성능 비교

**메모리 사용**

LazyVStack의 지연 로딩(Lazy Loading)은 성능 최적화에 큰 장점이 있습니다. 이는 스크롤하는 동안 필요한 뷰만 메모리에 로드하므로, 초기 로딩 시간이 짧고 메모리 사용량이 적습니다. 반면, List는 셀 재사용 메커니즘을 통해 메모리 사용을 최적화하지만, 많은 데이터가 한 번에 로드될 때 성능 저하가 발생할 수 있습니다.

```swift
struct LazyListView: View {
    let items = Array(1...1000).map { "Item \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(items, id: \.self) { item in
                    Text(item)
                }
            }
        }
    }
}
```

**큰 데이터 세트에서의 성능**

큰 데이터 세트를 처리할 때는 ScrollView + LazyVStack이 더 유리합니다. LazyVStack은 필요한 아이템만 로드하므로, 스크롤이 부드럽고 메모리 사용이 최적화됩니다. List는 데이터가 많을수록 셀 재사용을 통해 성능을 개선하지만, LazyVStack만큼 효율적이지는 않습니다.

```swift
struct ListView: View {
    let items = Array(1...1000).map { "Item \($0)" }

    var body: some View {
        List(items, id: \.self) { item in
            Text(item)
        }
    }
}
```

### 2. 사용 사례

**List 사용 사례**

List는 간단한 데이터 리스트와 정형화된 인터랙션이 필요한 경우에 적합합니다. 예를 들어, 연락처 목록, 할 일 목록, 설정 목록 등을 구현할 때 유용합니다.

```swift
struct ContactListView: View {
    let contacts = ["John Doe", "Jane Smith", "Paul Brown"]

    var body: some View {
        List(contacts, id: \.self) { contact in
            Text(contact)
        }
    }
}
```

**ScrollView + LazyVStack 사용 사례**

ScrollView + LazyVStack은 복잡한 커스텀 레이아웃이 필요한 경우에 적합합니다. 예를 들어, 소셜 미디어 피드, 사진 갤러리, 상품 목록 등 다양한 레이아웃을 요구하는 경우 유용합니다.

```swift
struct PhotoGalleryView: View {
    let photos = Array(1...100).map { "Photo \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(photos, id: \.self) { photo in
                    Image(photo)
                        .resizable()
                        .scaledToFit()
                }
            }
        }
    }
}
```

### 3. 코드 예제 비교

**동일한 데이터를 List와 ScrollView + LazyVStack으로 구현**

아래는 동일한 데이터를 List와 ScrollView + LazyVStack으로 구현한 예제입니다. 이를 통해 두 방법의 차이점을 명확히 이해할 수 있습니다.

**List 예제**

```swift
struct ItemsListView: View {
    let items = Array(1...20).map { "Item \($0)" }

    var body: some View {
        List(items, id: \.self) { item in
            Text(item)
        }
    }
}
```

**ScrollView + LazyVStack 예제**

```swift
struct ItemsScrollView: View {
    let items = Array(1...20).map { "Item \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(items, id: \.self) { item in
                    Text(item)
                }
            }
        }
    }
}
```

### 4. 고급 사용법

**비동기 데이터 로딩**

비동기 데이터 로딩은 네트워크 요청이나 큰 데이터 세트를 처리할 때 매우 유용합니다. Combine 프레임워크와 함께 사용하여 비동기 데이터를 로드하고, 이를 리스트에 반영할 수 있습니다.

```swift
class ViewModel: ObservableObject {
    @Published var items: [String] = []

    func fetchData() {
        let url = URL(string: "https://api.example.com/items")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                let items = try? JSONDecoder().decode([String].self, from: data)
                DispatchQueue.main.async {
                    self.items = items ?? []
                }
            }
        }.resume()
    }
}

struct AsyncListView: View {
    @StateObject private var viewModel = ViewModel()

    var body: some View {
        List(viewModel.items, id: \.self) { item in
            Text(item)
        }
        .onAppear {
            viewModel.fetchData()
        }
    }
}
```

**필터링된 리스트 구현**

사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. SearchBar를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:

```swift
struct FilteredListView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
```

**리스트 내비게이션**

리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. NavigationView와 NavigationLink를 사용하여 다음과 같이 할 수 있습니다:

```swift
struct NavigationListView: View {
    let items = ["Item 1", "Item 2", "Item 3"]

    var body: some View {
        NavigationView {
            List(items, id: \.self) { item in
                NavigationLink(destination: DetailView(item: item)) {
                    Text(item)
                }
            }
            .navigationTitle("Items")
        }
    }
}

struct DetailView: View {
    let item: String

    var body: some View {
        Text("Detail for \(item)")
            .navigationTitle(item)
    }
}
```

### 결론

SwiftUI의 List와 ScrollView + LazyVStack은 각각 고유의 장단점을 가지고 있으며, 특정 상황에서 더 적합한 방법을 선택할 수 있습니다. 성능 최적화와 커스텀 레이아웃이 필요할 때는 ScrollView + LazyVStack이 유리하며, 간단한 리스트와 기본적인 인터랙션이 필요할 때는 List가 유리합니다. 이 글을 통해 두 방법의 차이점을 명확히 이해하고, 자신의 필요에 맞는 적절한 방법을 선택할 수 있기를 바랍니다.

### 추가 자료

자세한 예제와 고급 사용법은 아래 자료를 참조하세요:

- [Apple 개발자 문서](https://developer.apple.com/documentation/swiftui/list)
- [SwiftUI LazyVStack 문서](https://developer.apple.com/documentation/swiftui/lazyvstack)
- [Combine 프레임워크 소개](https://developer.apple.com/documentation/combine)
12:T1f41,
## SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법

이 글에서는 SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 이를 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다.

### 1. 성능 비교

**메모리 사용**

LazyVStack의 지연 로딩(Lazy Loading)은 성능 최적화에 큰 장점이 있습니다. 이는 스크롤하는 동안 필요한 뷰만 메모리에 로드하므로, 초기 로딩 시간이 짧고 메모리 사용량이 적습니다. 반면, List는 셀 재사용 메커니즘을 통해 메모리 사용을 최적화하지만, 많은 데이터가 한 번에 로드될 때 성능 저하가 발생할 수 있습니다.

```swift
struct LazyListView: View {
    let items = Array(1...1000).map { "Item \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(items, id: \.self) { item in
                    Text(item)
                }
            }
        }
    }
}
```

**큰 데이터 세트에서의 성능**

큰 데이터 세트를 처리할 때는 ScrollView + LazyVStack이 더 유리합니다. LazyVStack은 필요한 아이템만 로드하므로, 스크롤이 부드럽고 메모리 사용이 최적화됩니다. List는 데이터가 많을수록 셀 재사용을 통해 성능을 개선하지만, LazyVStack만큼 효율적이지는 않습니다.

```swift
struct ListView: View {
    let items = Array(1...1000).map { "Item \($0)" }

    var body: some View {
        List(items, id: \.self) { item in
            Text(item)
        }
    }
}
```

### 2. 사용 사례

**List 사용 사례**

List는 간단한 데이터 리스트와 정형화된 인터랙션이 필요한 경우에 적합합니다. 예를 들어, 연락처 목록, 할 일 목록, 설정 목록 등을 구현할 때 유용합니다.

```swift
struct ContactListView: View {
    let contacts = ["John Doe", "Jane Smith", "Paul Brown"]

    var body: some View {
        List(contacts, id: \.self) { contact in
            Text(contact)
        }
    }
}
```

**ScrollView + LazyVStack 사용 사례**

ScrollView + LazyVStack은 복잡한 커스텀 레이아웃이 필요한 경우에 적합합니다. 예를 들어, 소셜 미디어 피드, 사진 갤러리, 상품 목록 등 다양한 레이아웃을 요구하는 경우 유용합니다.

```swift
struct PhotoGalleryView: View {
    let photos = Array(1...100).map { "Photo \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(photos, id: \.self) { photo in
                    Image(photo)
                        .resizable()
                        .scaledToFit()
                }
            }
        }
    }
}
```

### 3. 코드 예제 비교

**동일한 데이터를 List와 ScrollView + LazyVStack으로 구현**

아래는 동일한 데이터를 List와 ScrollView + LazyVStack으로 구현한 예제입니다. 이를 통해 두 방법의 차이점을 명확히 이해할 수 있습니다.

**List 예제**

```swift
struct ItemsListView: View {
    let items = Array(1...20).map { "Item \($0)" }

    var body: some View {
        List(items, id: \.self) { item in
            Text(item)
        }
    }
}
```

**ScrollView + LazyVStack 예제**

```swift
struct ItemsScrollView: View {
    let items = Array(1...20).map { "Item \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(items, id: \.self) { item in
                    Text(item)
                }
            }
        }
    }
}
```

### 4. 고급 사용법

**비동기 데이터 로딩**

비동기 데이터 로딩은 네트워크 요청이나 큰 데이터 세트를 처리할 때 매우 유용합니다. Combine 프레임워크와 함께 사용하여 비동기 데이터를 로드하고, 이를 리스트에 반영할 수 있습니다.

```swift
class ViewModel: ObservableObject {
    @Published var items: [String] = []

    func fetchData() {
        let url = URL(string: "https://api.example.com/items")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                let items = try? JSONDecoder().decode([String].self, from: data)
                DispatchQueue.main.async {
                    self.items = items ?? []
                }
            }
        }.resume()
    }
}

struct AsyncListView: View {
    @StateObject private var viewModel = ViewModel()

    var body: some View {
        List(viewModel.items, id: \.self) { item in
            Text(item)
        }
        .onAppear {
            viewModel.fetchData()
        }
    }
}
```

**필터링된 리스트 구현**

사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. SearchBar를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:

```swift
struct FilteredListView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
```

**리스트 내비게이션**

리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. NavigationView와 NavigationLink를 사용하여 다음과 같이 할 수 있습니다:

```swift
struct NavigationListView: View {
    let items = ["Item 1", "Item 2", "Item 3"]

    var body: some View {
        NavigationView {
            List(items, id: \.self) { item in
                NavigationLink(destination: DetailView(item: item)) {
                    Text(item)
                }
            }
            .navigationTitle("Items")
        }
    }
}

struct DetailView: View {
    let item: String

    var body: some View {
        Text("Detail for \(item)")
            .navigationTitle(item)
    }
}
```

### 결론

SwiftUI의 List와 ScrollView + LazyVStack은 각각 고유의 장단점을 가지고 있으며, 특정 상황에서 더 적합한 방법을 선택할 수 있습니다. 성능 최적화와 커스텀 레이아웃이 필요할 때는 ScrollView + LazyVStack이 유리하며, 간단한 리스트와 기본적인 인터랙션이 필요할 때는 List가 유리합니다. 이 글을 통해 두 방법의 차이점을 명확히 이해하고, 자신의 필요에 맞는 적절한 방법을 선택할 수 있기를 바랍니다.

### 추가 자료

자세한 예제와 고급 사용법은 아래 자료를 참조하세요:

- [Apple 개발자 문서](https://developer.apple.com/documentation/swiftui/list)
- [SwiftUI LazyVStack 문서](https://developer.apple.com/documentation/swiftui/lazyvstack)
- [Combine 프레임워크 소개](https://developer.apple.com/documentation/combine)
13:T1f41,
## SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법

이 글에서는 SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 이를 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다.

### 1. 성능 비교

**메모리 사용**

LazyVStack의 지연 로딩(Lazy Loading)은 성능 최적화에 큰 장점이 있습니다. 이는 스크롤하는 동안 필요한 뷰만 메모리에 로드하므로, 초기 로딩 시간이 짧고 메모리 사용량이 적습니다. 반면, List는 셀 재사용 메커니즘을 통해 메모리 사용을 최적화하지만, 많은 데이터가 한 번에 로드될 때 성능 저하가 발생할 수 있습니다.

```swift
struct LazyListView: View {
    let items = Array(1...1000).map { "Item \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(items, id: \.self) { item in
                    Text(item)
                }
            }
        }
    }
}
```

**큰 데이터 세트에서의 성능**

큰 데이터 세트를 처리할 때는 ScrollView + LazyVStack이 더 유리합니다. LazyVStack은 필요한 아이템만 로드하므로, 스크롤이 부드럽고 메모리 사용이 최적화됩니다. List는 데이터가 많을수록 셀 재사용을 통해 성능을 개선하지만, LazyVStack만큼 효율적이지는 않습니다.

```swift
struct ListView: View {
    let items = Array(1...1000).map { "Item \($0)" }

    var body: some View {
        List(items, id: \.self) { item in
            Text(item)
        }
    }
}
```

### 2. 사용 사례

**List 사용 사례**

List는 간단한 데이터 리스트와 정형화된 인터랙션이 필요한 경우에 적합합니다. 예를 들어, 연락처 목록, 할 일 목록, 설정 목록 등을 구현할 때 유용합니다.

```swift
struct ContactListView: View {
    let contacts = ["John Doe", "Jane Smith", "Paul Brown"]

    var body: some View {
        List(contacts, id: \.self) { contact in
            Text(contact)
        }
    }
}
```

**ScrollView + LazyVStack 사용 사례**

ScrollView + LazyVStack은 복잡한 커스텀 레이아웃이 필요한 경우에 적합합니다. 예를 들어, 소셜 미디어 피드, 사진 갤러리, 상품 목록 등 다양한 레이아웃을 요구하는 경우 유용합니다.

```swift
struct PhotoGalleryView: View {
    let photos = Array(1...100).map { "Photo \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(photos, id: \.self) { photo in
                    Image(photo)
                        .resizable()
                        .scaledToFit()
                }
            }
        }
    }
}
```

### 3. 코드 예제 비교

**동일한 데이터를 List와 ScrollView + LazyVStack으로 구현**

아래는 동일한 데이터를 List와 ScrollView + LazyVStack으로 구현한 예제입니다. 이를 통해 두 방법의 차이점을 명확히 이해할 수 있습니다.

**List 예제**

```swift
struct ItemsListView: View {
    let items = Array(1...20).map { "Item \($0)" }

    var body: some View {
        List(items, id: \.self) { item in
            Text(item)
        }
    }
}
```

**ScrollView + LazyVStack 예제**

```swift
struct ItemsScrollView: View {
    let items = Array(1...20).map { "Item \($0)" }

    var body: some View {
        ScrollView {
            LazyVStack {
                ForEach(items, id: \.self) { item in
                    Text(item)
                }
            }
        }
    }
}
```

### 4. 고급 사용법

**비동기 데이터 로딩**

비동기 데이터 로딩은 네트워크 요청이나 큰 데이터 세트를 처리할 때 매우 유용합니다. Combine 프레임워크와 함께 사용하여 비동기 데이터를 로드하고, 이를 리스트에 반영할 수 있습니다.

```swift
class ViewModel: ObservableObject {
    @Published var items: [String] = []

    func fetchData() {
        let url = URL(string: "https://api.example.com/items")!
        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                let items = try? JSONDecoder().decode([String].self, from: data)
                DispatchQueue.main.async {
                    self.items = items ?? []
                }
            }
        }.resume()
    }
}

struct AsyncListView: View {
    @StateObject private var viewModel = ViewModel()

    var body: some View {
        List(viewModel.items, id: \.self) { item in
            Text(item)
        }
        .onAppear {
            viewModel.fetchData()
        }
    }
}
```

**필터링된 리스트 구현**

사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. SearchBar를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:

```swift
struct FilteredListView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
```

**리스트 내비게이션**

리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. NavigationView와 NavigationLink를 사용하여 다음과 같이 할 수 있습니다:

```swift
struct NavigationListView: View {
    let items = ["Item 1", "Item 2", "Item 3"]

    var body: some View {
        NavigationView {
            List(items, id: \.self) { item in
                NavigationLink(destination: DetailView(item: item)) {
                    Text(item)
                }
            }
            .navigationTitle("Items")
        }
    }
}

struct DetailView: View {
    let item: String

    var body: some View {
        Text("Detail for \(item)")
            .navigationTitle(item)
    }
}
```

### 결론

SwiftUI의 List와 ScrollView + LazyVStack은 각각 고유의 장단점을 가지고 있으며, 특정 상황에서 더 적합한 방법을 선택할 수 있습니다. 성능 최적화와 커스텀 레이아웃이 필요할 때는 ScrollView + LazyVStack이 유리하며, 간단한 리스트와 기본적인 인터랙션이 필요할 때는 List가 유리합니다. 이 글을 통해 두 방법의 차이점을 명확히 이해하고, 자신의 필요에 맞는 적절한 방법을 선택할 수 있기를 바랍니다.

### 추가 자료

자세한 예제와 고급 사용법은 아래 자료를 참조하세요:

- [Apple 개발자 문서](https://developer.apple.com/documentation/swiftui/list)
- [SwiftUI LazyVStack 문서](https://developer.apple.com/documentation/swiftui/lazyvstack)
- [Combine 프레임워크 소개](https://developer.apple.com/documentation/combine)
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-25"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"ea82790f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 이를 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다."}],"\n",["$","h3",null,{"id":"8955045d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. 성능 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"메모리 사용"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"LazyVStack의 지연 로딩(Lazy Loading)은 성능 최적화에 큰 장점이 있습니다. 이는 스크롤하는 동안 필요한 뷰만 메모리에 로드하므로, 초기 로딩 시간이 짧고 메모리 사용량이 적습니다. 반면, List는 셀 재사용 메커니즘을 통해 메모리 사용을 최적화하지만, 많은 데이터가 한 번에 로드될 때 성능 저하가 발생할 수 있습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct LazyListView: View {\n    let items = Array(1...1000).map { \"Item \\($0)\" }\n\n    var body: some View {\n        ScrollView {\n            LazyVStack {\n                ForEach(items, id: \\.self) { item in\n                    Text(item)\n                }\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":424},"end":{"line":26,"column":4,"offset":724}}},"children":"struct LazyListView: View {\n    let items = Array(1...1000).map { \"Item \\($0)\" }\n\n    var body: some View {\n        ScrollView {\n            LazyVStack {\n                ForEach(items, id: \\.self) { item in\n                    Text(item)\n                }\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"큰 데이터 세트에서의 성능"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"큰 데이터 세트를 처리할 때는 ScrollView + LazyVStack이 더 유리합니다. LazyVStack은 필요한 아이템만 로드하므로, 스크롤이 부드럽고 메모리 사용이 최적화됩니다. List는 데이터가 많을수록 셀 재사용을 통해 성능을 개선하지만, LazyVStack만큼 효율적이지는 않습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ListView: View {\n    let items = Array(1...1000).map { \"Item \\($0)\" }\n\n    var body: some View {\n        List(items, id: \\.self) { item in\n            Text(item)\n        }\n    }\n}\n"}],"position":{"start":{"line":32,"column":1,"offset":915},"end":{"line":42,"column":4,"offset":1114}}},"children":"struct ListView: View {\n    let items = Array(1...1000).map { \"Item \\($0)\" }\n\n    var body: some View {\n        List(items, id: \\.self) { item in\n            Text(item)\n        }\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"0ed2bd07","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. 사용 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"List 사용 사례"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"List는 간단한 데이터 리스트와 정형화된 인터랙션이 필요한 경우에 적합합니다. 예를 들어, 연락처 목록, 할 일 목록, 설정 목록 등을 구현할 때 유용합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContactListView: View {\n    let contacts = [\"John Doe\", \"Jane Smith\", \"Paul Brown\"]\n\n    var body: some View {\n        List(contacts, id: \\.self) { contact in\n            Text(contact)\n        }\n    }\n}\n"}],"position":{"start":{"line":50,"column":1,"offset":1237},"end":{"line":60,"column":4,"offset":1459}}},"children":"struct ContactListView: View {\n    let contacts = [\"John Doe\", \"Jane Smith\", \"Paul Brown\"]\n\n    var body: some View {\n        List(contacts, id: \\.self) { contact in\n            Text(contact)\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"ScrollView + LazyVStack 사용 사례"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ScrollView + LazyVStack은 복잡한 커스텀 레이아웃이 필요한 경우에 적합합니다. 예를 들어, 소셜 미디어 피드, 사진 갤러리, 상품 목록 등 다양한 레이아웃을 요구하는 경우 유용합니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct PhotoGalleryView: View {\n    let photos = Array(1...100).map { \"Photo \\($0)\" }\n\n    var body: some View {\n        ScrollView {\n            LazyVStack {\n                ForEach(photos, id: \\.self) { photo in\n                    Image(photo)\n                        .resizable()\n                        .scaledToFit()\n                }\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":66,"column":1,"offset":1610},"end":{"line":82,"column":4,"offset":1995}}},"children":"struct PhotoGalleryView: View {\n    let photos = Array(1...100).map { \"Photo \\($0)\" }\n\n    var body: some View {\n        ScrollView {\n            LazyVStack {\n                ForEach(photos, id: \\.self) { photo in\n                    Image(photo)\n                        .resizable()\n                        .scaledToFit()\n                }\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"c79c052f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. 코드 예제 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"동일한 데이터를 List와 ScrollView + LazyVStack으로 구현"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"아래는 동일한 데이터를 List와 ScrollView + LazyVStack으로 구현한 예제입니다. 이를 통해 두 방법의 차이점을 명확히 이해할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"List 예제"}]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ItemsListView: View {\n    let items = Array(1...20).map { \"Item \\($0)\" }\n\n    var body: some View {\n        List(items, id: \\.self) { item in\n            Text(item)\n        }\n    }\n}\n"}],"position":{"start":{"line":92,"column":1,"offset":2166},"end":{"line":102,"column":4,"offset":2368}}},"children":"struct ItemsListView: View {\n    let items = Array(1...20).map { \"Item \\($0)\" }\n\n    var body: some View {\n        List(items, id: \\.self) { item in\n            Text(item)\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"ScrollView + LazyVStack 예제"}]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ItemsScrollView: View {\n    let items = Array(1...20).map { \"Item \\($0)\" }\n\n    var body: some View {\n        ScrollView {\n            LazyVStack {\n                ForEach(items, id: \\.self) { item in\n                    Text(item)\n                }\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":106,"column":1,"offset":2402},"end":{"line":120,"column":4,"offset":2703}}},"children":"struct ItemsScrollView: View {\n    let items = Array(1...20).map { \"Item \\($0)\" }\n\n    var body: some View {\n        ScrollView {\n            LazyVStack {\n                ForEach(items, id: \\.self) { item in\n                    Text(item)\n                }\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"c1ba6cc6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4. 고급 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"비동기 데이터 로딩"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"비동기 데이터 로딩은 네트워크 요청이나 큰 데이터 세트를 처리할 때 매우 유용합니다. Combine 프레임워크와 함께 사용하여 비동기 데이터를 로드하고, 이를 리스트에 반영할 수 있습니다."}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewModel: ObservableObject {\n    @Published var items: [String] = []\n\n    func fetchData() {\n        let url = URL(string: \"https://api.example.com/items\")!\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let data = data {\n                let items = try? JSONDecoder().decode([String].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = items ?? []\n                }\n            }\n        }.resume()\n    }\n}\n\nstruct AsyncListView: View {\n    @StateObject private var viewModel = ViewModel()\n\n    var body: some View {\n        List(viewModel.items, id: \\.self) { item in\n            Text(item)\n        }\n        .onAppear {\n            viewModel.fetchData()\n        }\n    }\n}\n"}],"position":{"start":{"line":128,"column":1,"offset":2843},"end":{"line":157,"column":4,"offset":3620}}},"children":"class ViewModel: ObservableObject {\n    @Published var items: [String] = []\n\n    func fetchData() {\n        let url = URL(string: \"https://api.example.com/items\")!\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let data = data {\n                let items = try? JSONDecoder().decode([String].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = items ?? []\n                }\n            }\n        }.resume()\n    }\n}\n\nstruct AsyncListView: View {\n    @StateObject private var viewModel = ViewModel()\n\n    var body: some View {\n        List(viewModel.items, id: \\.self) { item in\n            Text(item)\n        }\n        .onAppear {\n            viewModel.fetchData()\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"필터링된 리스트 구현"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. SearchBar를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:"}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":163,"column":1,"offset":3728},"end":{"line":215,"column":4,"offset":5009}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["$","strong",null,{"className":"font-black","children":"리스트 내비게이션"}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. NavigationView와 NavigationLink를 사용하여 다음과 같이 할 수 있습니다:"}],"\n",["$","pre","pre-8",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct NavigationListView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) { item in\n                NavigationLink(destination: DetailView(item: item)) {\n                    Text(item)\n                }\n            }\n            .navigationTitle(\"Items\")\n        }\n    }\n}\n\nstruct DetailView: View {\n    let item: String\n\n    var body: some View {\n        Text(\"Detail for \\(item)\")\n            .navigationTitle(item)\n    }\n}\n"}],"position":{"start":{"line":221,"column":1,"offset":5127},"end":{"line":245,"column":4,"offset":5660}}},"children":"struct NavigationListView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) { item in\n                NavigationLink(destination: DetailView(item: item)) {\n                    Text(item)\n                }\n            }\n            .navigationTitle(\"Items\")\n        }\n    }\n}\n\nstruct DetailView: View {\n    let item: String\n\n    var body: some View {\n        Text(\"Detail for \\(item)\")\n            .navigationTitle(item)\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI의 List와 ScrollView + LazyVStack은 각각 고유의 장단점을 가지고 있으며, 특정 상황에서 더 적합한 방법을 선택할 수 있습니다. 성능 최적화와 커스텀 레이아웃이 필요할 때는 ScrollView + LazyVStack이 유리하며, 간단한 리스트와 기본적인 인터랙션이 필요할 때는 List가 유리합니다. 이 글을 통해 두 방법의 차이점을 명확히 이해하고, 자신의 필요에 맞는 적절한 방법을 선택할 수 있기를 바랍니다."}],"\n",["$","h3",null,{"id":"056a8b51","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"추가 자료"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"자세한 예제와 고급 사용법은 아래 자료를 참조하세요:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["$","$L10",null,{"props":{"href":"https://developer.apple.com/documentation/swiftui/list","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swiftui/list"},"children":[{"type":"text","value":"Apple 개발자 문서","position":{"start":{"line":255,"column":4,"offset":5967},"end":{"line":255,"column":16,"offset":5979}}}],"position":{"start":{"line":255,"column":3,"offset":5966},"end":{"line":255,"column":73,"offset":6036}}},"children":"Apple 개발자 문서"},"post":{"title":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법","description":"SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 성능 최적화, 비동기 데이터 로딩, 필터링된 리스트 구현 및 네비게이션 기능을 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다.","date":"2024-05-25T13:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"swiftUI","path":"/tags/swiftui","id":"swiftui"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift ","readMin":"8.2","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"swiftui-list-lazyVStack-scrollView-2탄","content":"$11","category":"swift"},"language":"kr"}]}],"\n",["$","li","li-1",{"children":["$","$L10",null,{"props":{"href":"https://developer.apple.com/documentation/swiftui/lazyvstack","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swiftui/lazyvstack"},"children":[{"type":"text","value":"SwiftUI LazyVStack 문서","position":{"start":{"line":256,"column":4,"offset":6040},"end":{"line":256,"column":25,"offset":6061}}}],"position":{"start":{"line":256,"column":3,"offset":6039},"end":{"line":256,"column":88,"offset":6124}}},"children":"SwiftUI LazyVStack 문서"},"post":{"title":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법","description":"SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 성능 최적화, 비동기 데이터 로딩, 필터링된 리스트 구현 및 네비게이션 기능을 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다.","date":"2024-05-25T13:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"swiftUI","path":"/tags/swiftui","id":"swiftui"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift ","readMin":"8.2","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"swiftui-list-lazyVStack-scrollView-2탄","content":"$12","category":"swift"},"language":"kr"}]}],"\n",["$","li","li-2",{"children":["$","$L10",null,{"props":{"href":"https://developer.apple.com/documentation/combine","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/combine"},"children":[{"type":"text","value":"Combine 프레임워크 소개","position":{"start":{"line":257,"column":4,"offset":6128},"end":{"line":257,"column":20,"offset":6144}}}],"position":{"start":{"line":257,"column":3,"offset":6127},"end":{"line":257,"column":72,"offset":6196}}},"children":"Combine 프레임워크 소개"},"post":{"title":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법","description":"SwiftUI List와 ScrollView + LazyVStack의 성능 비교, 고급 사용법, 그리고 실용적인 예제를 통해 각 방법의 장단점을 심도 있게 분석합니다. 성능 최적화, 비동기 데이터 로딩, 필터링된 리스트 구현 및 네비게이션 기능을 통해 어떤 상황에서 어떤 방법을 선택해야 할지 명확하게 이해할 수 있습니다.","date":"2024-05-25T13:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"swiftUI","path":"/tags/swiftui","id":"swiftui"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift ","readMin":"8.2","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"swiftui-list-lazyVStack-scrollView-2탄","content":"$13","category":"swift"},"language":"kr"}]}],"\n"]}]]}]}],["$","$L14",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L15",null,{"articleTitle":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법","toc":[{"tagName":"h2","title":"SwiftUI List와 ScrollView + LazyVStack 심화 비교 및 고급 사용법","id":"ea82790f"},{"tagName":"h3","title":"1. 성능 비교","id":"8955045d"},{"tagName":"h3","title":"2. 사용 사례","id":"0ed2bd07"},{"tagName":"h3","title":"3. 코드 예제 비교","id":"c79c052f"},{"tagName":"h3","title":"4. 고급 사용법","id":"c1ba6cc6"},{"tagName":"h3","title":"결론","id":"5b12bcf2"},{"tagName":"h3","title":"추가 자료","id":"056a8b51"}],"language":"kr"}]}]]}]]
8:null
