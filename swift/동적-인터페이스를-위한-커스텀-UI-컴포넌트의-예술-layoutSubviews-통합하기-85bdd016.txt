1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EB%8F%99%EC%A0%81-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%98%88%EC%88%A0-layoutSubviews-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-85bdd016","d"],{"children":["__PAGE__?{\"slug\":\"동적-인터페이스를-위한-커스텀-UI-컴포넌트의-예술-layoutSubviews-통합하기-85bdd016\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EB%8F%99%EC%A0%81-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%98%88%EC%88%A0-layoutSubviews-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-85bdd016","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"동적-인터페이스를-위한-커스텀-UI-컴포넌트의-예술-layoutSubviews-통합하기-85bdd016\"}"},"styles":[]}],"segment":["slug","%EB%8F%99%EC%A0%81-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%98%88%EC%88%A0-layoutSubviews-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-85bdd016","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 iOS 개발에서 많이 사용하는 Swift 언어로 동적 인터페이스를 만드는 방법, 특히 `layoutSubviews` 메서드를 통합하여 커스텀 UI 컴포넌트를 만드는 예술에 대해 다룹니다. `layoutSubviews` 메서드는 뷰의 레이아웃을 맞추는 위치와 크기를 계산하기 위한 중요한 메서드입니다."}],["$","meta","3",{"name":"keywords","content":"Swift,iOS,UI Components,layoutSubviews"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EB%8F%99%EC%A0%81-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%98%88%EC%88%A0-layoutSubviews-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-85bdd016"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 iOS 개발에서 많이 사용하는 Swift 언어로 동적 인터페이스를 만드는 방법, 특히 `layoutSubviews` 메서드를 통합하여 커스텀 UI 컴포넌트를 만드는 예술에 대해 다룹니다. `layoutSubviews` 메서드는 뷰의 레이아웃을 맞추는 위치와 크기를 계산하기 위한 중요한 메서드입니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EB%8F%99%EC%A0%81-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%BB%A4%EC%8A%A4%ED%85%80-UI-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EC%98%88%EC%88%A0-layoutSubviews-%ED%86%B5%ED%95%A9%ED%95%98%EA%B8%B0-85bdd016"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 iOS 개발에서 많이 사용하는 Swift 언어로 동적 인터페이스를 만드는 방법, 특히 `layoutSubviews` 메서드를 통합하여 커스텀 UI 컴포넌트를 만드는 예술에 대해 다룹니다. `layoutSubviews` 메서드는 뷰의 레이아웃을 맞추는 위치와 크기를 계산하기 위한 중요한 메서드입니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T44a,class ComplexLayoutView: UIView {
    private let headerView = UIView()
    private let contentView = UIView()
    private let footerView = UIView()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupViews()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupViews()
    }

    private func setupViews() {
        headerView.backgroundColor = .red
        contentView.backgroundColor = .green
        footerView.backgroundColor = .blue
        addSubview(headerView)
        addSubview(contentView)
        addSubview(footerView)
    }

    override func layoutSubviews() {
        super.layoutSubviews()
        let headerHeight: CGFloat = 50
        let footerHeight: CGFloat = 50
        headerView.frame = CGRect(x: 0, y: 0, width: bounds.width, height: headerHeight)
        contentView.frame = CGRect(x: 0, y: headerHeight, width: bounds.width, height: bounds.height - headerHeight - footerHeight)
        footerView.frame = CGRect(x: 0, y: bounds.height - footerHeight, width: bounds.width, height: footerHeight)
    }
}
f:T44a,class ComplexLayoutView: UIView {
    private let headerView = UIView()
    private let contentView = UIView()
    private let footerView = UIView()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupViews()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupViews()
    }

    private func setupViews() {
        headerView.backgroundColor = .red
        contentView.backgroundColor = .green
        footerView.backgroundColor = .blue
        addSubview(headerView)
        addSubview(contentView)
        addSubview(footerView)
    }

    override func layoutSubviews() {
        super.layoutSubviews()
        let headerHeight: CGFloat = 50
        let footerHeight: CGFloat = 50
        headerView.frame = CGRect(x: 0, y: 0, width: bounds.width, height: headerHeight)
        contentView.frame = CGRect(x: 0, y: headerHeight, width: bounds.width, height: bounds.height - headerHeight - footerHeight)
        footerView.frame = CGRect(x: 0, y: bounds.height - footerHeight, width: bounds.width, height: footerHeight)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-01"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"42914239","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 개발에서는 사용자 경험을 극대화하기 위해 인터페이스를 동적으로 만드는 것이 중요합니다. 이를 위해 Swift는 강력한 도구와 메서드를 제공합니다. 그중에서도 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":4,"column":93,"offset":146},"end":{"line":4,"column":109,"offset":162}}}],"position":{"start":{"line":4,"column":93,"offset":146},"end":{"line":4,"column":109,"offset":162}}},"children":"layoutSubviews"}}],"는 커스텀 UI 컴포넌트를 만드는 데 중요한 역할을 합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":4,"column":150,"offset":203},"end":{"line":4,"column":166,"offset":219}}}],"position":{"start":{"line":4,"column":150,"offset":203},"end":{"line":4,"column":166,"offset":219}}},"children":"layoutSubviews"}}]," 메서드를 이용해 커스텀 UI를 설계하는 방법에 대해 다루고자 합니다."]}],"\n",["$","h2",null,{"id":"a0d06ac3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews 메서드란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":8,"column":1,"offset":285},"end":{"line":8,"column":17,"offset":301}}}],"position":{"start":{"line":8,"column":1,"offset":285},"end":{"line":8,"column":17,"offset":301}}},"children":"layoutSubviews"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":8,"column":19,"offset":303},"end":{"line":8,"column":27,"offset":311}}}],"position":{"start":{"line":8,"column":19,"offset":303},"end":{"line":8,"column":27,"offset":311}}},"children":"UIView"}}],"의 메서드로써, 서브 뷰의 배열을 조정하는 방식으로 자식 뷰의 위치와 크기를 재조정합니다. 기본적으로 iOS는 뷰 계층을 관리할 때 이 메서드를 호출합니다. 하지만 커스텀 뷰를 만들 때는 이 메서드를 오버라이드하여 원하는 레이아웃을 설정할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class CustomView: UIView {\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        // 커스텀 레이아웃 코드\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":454},"end":{"line":17,"column":4,"offset":592}}},"children":"class CustomView: UIView {\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        // 커스텀 레이아웃 코드\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CustomView","position":{"start":{"line":19,"column":11,"offset":604},"end":{"line":19,"column":23,"offset":616}}}],"position":{"start":{"line":19,"column":11,"offset":604},"end":{"line":19,"column":23,"offset":616}}},"children":"CustomView"}}]," 클래스의 기본 골격을 보여줍니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":19,"column":43,"offset":636},"end":{"line":19,"column":59,"offset":652}}}],"position":{"start":{"line":19,"column":43,"offset":636},"end":{"line":19,"column":59,"offset":652}}},"children":"layoutSubviews"}}]," 메서드를 오버라이드하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super.layoutSubviews()","position":{"start":{"line":19,"column":74,"offset":667},"end":{"line":19,"column":98,"offset":691}}}],"position":{"start":{"line":19,"column":74,"offset":667},"end":{"line":19,"column":98,"offset":691}}},"children":"super.layoutSubviews()"}}],"를 먼저 호출한 후, 커스텀 레이아웃 코드를 작성합니다."]}],"\n",["$","h2",null,{"id":"8af61905","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews의 활용 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":23,"column":1,"offset":750},"end":{"line":23,"column":17,"offset":766}}}],"position":{"start":{"line":23,"column":1,"offset":750},"end":{"line":23,"column":17,"offset":766}}},"children":"layoutSubviews"}}],"는 다양한 상황에서 사용될 수 있습니다. 여기 몇 가지 주요 사례를 다뤄보겠습니다."]}],"\n",["$","h3",null,{"id":"e6c0605c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사례 1: 동적 크기 조정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"동으로 변하는 뷰의 크기에 따라 자식 뷰의 크기를 조정할 수 있습니다. 예를 들어 부모 뷰의 크기가 변할 때 버튼이나 레이블의 크기도 이에 맞춰 자동으로 변하도록 설정할 수 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ResizableCustomView: UIView {\n    private let button = UIButton()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        button.setTitle(\"Click Me\", for: .normal)\n        button.backgroundColor = .systemBlue\n        addSubview(button)\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        button.frame = CGRect(x: 0, y: 0, width: bounds.width / 2, height: bounds.height / 2)\n    }\n}\n"}],"position":{"start":{"line":29,"column":1,"offset":938},"end":{"line":54,"column":4,"offset":1551}}},"children":"class ResizableCustomView: UIView {\n    private let button = UIButton()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        button.setTitle(\"Click Me\", for: .normal)\n        button.backgroundColor = .systemBlue\n        addSubview(button)\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        button.frame = CGRect(x: 0, y: 0, width: bounds.width / 2, height: bounds.height / 2)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ResizableCustomView","position":{"start":{"line":56,"column":9,"offset":1561},"end":{"line":56,"column":30,"offset":1582}}}],"position":{"start":{"line":56,"column":9,"offset":1561},"end":{"line":56,"column":30,"offset":1582}}},"children":"ResizableCustomView"}}],"는 버튼을 중앙에 배치하고, 자신의 크기에 따라 버튼의 크기를 절반으로 설정합니다."]}],"\n",["$","h3",null,{"id":"15023962","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사례 2: 복잡한 레이아웃 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["뷰 계층 구조가 복잡해질 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":60,"column":19,"offset":1671},"end":{"line":60,"column":35,"offset":1687}}}],"position":{"start":{"line":60,"column":19,"offset":1671},"end":{"line":60,"column":35,"offset":1687}}},"children":"layoutSubviews"}}],"를 이용해 뷰들의 위치와 크기를 체계적으로 관리할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":62,"column":1,"offset":1724},"end":{"line":96,"column":4,"offset":2834}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComplexLayoutView","position":{"start":{"line":98,"column":8,"offset":2843},"end":{"line":98,"column":27,"offset":2862}}}],"position":{"start":{"line":98,"column":8,"offset":2843},"end":{"line":98,"column":27,"offset":2862}}},"children":"ComplexLayoutView"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"headerView","position":{"start":{"line":98,"column":29,"offset":2864},"end":{"line":98,"column":41,"offset":2876}}}],"position":{"start":{"line":98,"column":29,"offset":2864},"end":{"line":98,"column":41,"offset":2876}}},"children":"headerView"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"contentView","position":{"start":{"line":98,"column":43,"offset":2878},"end":{"line":98,"column":56,"offset":2891}}}],"position":{"start":{"line":98,"column":43,"offset":2878},"end":{"line":98,"column":56,"offset":2891}}},"children":"contentView"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"footerView","position":{"start":{"line":98,"column":58,"offset":2893},"end":{"line":98,"column":70,"offset":2905}}}],"position":{"start":{"line":98,"column":58,"offset":2893},"end":{"line":98,"column":70,"offset":2905}}},"children":"footerView"}}]," 세 개의 자식 뷰로 구성되어 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":98,"column":93,"offset":2928},"end":{"line":98,"column":109,"offset":2944}}}],"position":{"start":{"line":98,"column":93,"offset":2928},"end":{"line":98,"column":109,"offset":2944}}},"children":"layoutSubviews"}}]," 메서드를 통해 각각의 뷰를 적절한 위치와 크기로 배치합니다."]}],"\n",["$","h2",null,{"id":"0ce4e8cf","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"layoutSubviews 주의사항"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":102,"column":1,"offset":3004},"end":{"line":102,"column":17,"offset":3020}}}],"position":{"start":{"line":102,"column":1,"offset":3004},"end":{"line":102,"column":17,"offset":3020}}},"children":"layoutSubviews"}}],"를 사용할 때는 몇 가지 주의사항이 있습니다."]}],"\n",["$","h3",null,{"id":"0d912fd2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능 문제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":106,"column":1,"offset":3058},"end":{"line":106,"column":17,"offset":3074}}}],"position":{"start":{"line":106,"column":1,"offset":3058},"end":{"line":106,"column":17,"offset":3074}}},"children":"layoutSubviews"}}],"는 여러 번 호출될 수 있습니다. 따라서 불필요한 연산을 최소화하고, 꼭 필요한 경우에만 레이아웃을 재조정해야 합니다. 그렇지 않으면 앱의 성능 저하를 초래할 수 있습니다."]}],"\n",["$","h3",null,{"id":"abe4f1ff","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Auto Layout과의 상호작용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Auto Layout 제약 조건을 사용하는 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":110,"column":29,"offset":3224},"end":{"line":110,"column":45,"offset":3240}}}],"position":{"start":{"line":110,"column":29,"offset":3224},"end":{"line":110,"column":45,"offset":3240}}},"children":"layoutSubviews"}}],"는 충돌을 일으킬 수 있습니다. Auto Layout을 사용할 때 변경해야 할 경우 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutIfNeeded()","position":{"start":{"line":110,"column":92,"offset":3287},"end":{"line":110,"column":110,"offset":3305}}}],"position":{"start":{"line":110,"column":92,"offset":3287},"end":{"line":110,"column":110,"offset":3305}}},"children":"layoutIfNeeded()"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setNeedsLayout()","position":{"start":{"line":110,"column":112,"offset":3307},"end":{"line":110,"column":130,"offset":3325}}}],"position":{"start":{"line":110,"column":112,"offset":3307},"end":{"line":110,"column":130,"offset":3325}}},"children":"setNeedsLayout()"}}]," 메서드를 사용하는 것이 좋습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"layoutSubviews","position":{"start":{"line":114,"column":1,"offset":3353},"end":{"line":114,"column":17,"offset":3369}}}],"position":{"start":{"line":114,"column":1,"offset":3353},"end":{"line":114,"column":17,"offset":3369}}},"children":"layoutSubviews"}}]," 메서드는 iOS 개발에서 커스텀 UI 컴포넌트를 만들 때 매우 유용한 도구입니다. 이를 통해 동적 UI를 구현하면 사용자 경험을 크게 향상시킬 수 있습니다. 다만, 성능 최적화와 Auto Layout과의 상호작용을 주의해야 합니다. 올바른 사용법을 익히고 적용한다면, 더욱 세련되고 유연한 인터페이스를 만들 수 있을 것입니다."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기","toc":[{"tagName":"h1","title":"동적 인터페이스를 위한 커스텀 UI 컴포넌트의 예술: layoutSubviews 통합하기","id":"42914239"},{"tagName":"h2","title":"layoutSubviews 메서드란?","id":"a0d06ac3"},{"tagName":"h2","title":"layoutSubviews의 활용 사례","id":"8af61905"},{"tagName":"h3","title":"사례 1: 동적 크기 조정","id":"e6c0605c"},{"tagName":"h3","title":"사례 2: 복잡한 레이아웃 관리","id":"15023962"},{"tagName":"h2","title":"layoutSubviews 주의사항","id":"0ce4e8cf"},{"tagName":"h3","title":"성능 문제","id":"0d912fd2"},{"tagName":"h3","title":"Auto Layout과의 상호작용","id":"abe4f1ff"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
