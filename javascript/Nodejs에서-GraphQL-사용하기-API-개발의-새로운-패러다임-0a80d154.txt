1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs%EC%97%90%EC%84%9C-GraphQL-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-API-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-0a80d154","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs에서-GraphQL-사용하기-API-개발의-새로운-패러다임-0a80d154\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs%EC%97%90%EC%84%9C-GraphQL-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-API-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-0a80d154","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs에서-GraphQL-사용하기-API-개발의-새로운-패러다임-0a80d154\"}"},"styles":[]}],"segment":["slug","Nodejs%EC%97%90%EC%84%9C-GraphQL-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-API-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-0a80d154","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Node.js와 GraphQL을 사용하여 API를 개발하는 방법을 설명합니다. 이 글에서는 GraphQL의 기본 개념부터 Node.js와의 통합 과정, 실제 프로젝트에서 API를 구현하는 단계까지 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,GraphQL,API 개발,JavaScript"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs%EC%97%90%EC%84%9C-GraphQL-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-API-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-0a80d154"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Node.js와 GraphQL을 사용하여 API를 개발하는 방법을 설명합니다. 이 글에서는 GraphQL의 기본 개념부터 Node.js와의 통합 과정, 실제 프로젝트에서 API를 구현하는 단계까지 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs%EC%97%90%EC%84%9C-GraphQL-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-API-%EA%B0%9C%EB%B0%9C%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84-0a80d154"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Node.js와 GraphQL을 사용하여 API를 개발하는 방법을 설명합니다. 이 글에서는 GraphQL의 기본 개념부터 Node.js와의 통합 과정, 실제 프로젝트에서 API를 구현하는 단계까지 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-17"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"be549d98","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["현대의 웹 애플리케이션 개발에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"API","position":{"start":{"line":4,"column":19,"offset":63},"end":{"line":4,"column":24,"offset":68}}}],"position":{"start":{"line":4,"column":19,"offset":63},"end":{"line":4,"column":24,"offset":68}}},"children":"API"}}],"는 핵심적인 역할을 합니다. RESTful API가 오랜 기간 동안 주류를 이루었지만, 최근에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GraphQL","position":{"start":{"line":4,"column":78,"offset":122},"end":{"line":4,"column":87,"offset":131}}}],"position":{"start":{"line":4,"column":78,"offset":122},"end":{"line":4,"column":87,"offset":131}}},"children":"GraphQL"}}],"이 점차 그 자리를 차지하고 있습니다. 이 글에서는 Node.js 환경에서 GraphQL을 사용하여 효율적인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"API","position":{"start":{"line":4,"column":148,"offset":192},"end":{"line":4,"column":153,"offset":197}}}],"position":{"start":{"line":4,"column":148,"offset":192},"end":{"line":4,"column":153,"offset":197}}},"children":"API"}}],"를 개발하는 방법을 다루어 보겠습니다."]}],"\n",["$","h2",null,{"id":"2f022e59","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"GraphQL의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["GraphQL은 Facebook에서 개발한 쿼리 언어로, 클라이언트가 필요한 데이터만 요청하고 받을 수 있도록 설계되었습니다. 이는 과도한 데이터 전송을 피하고 클라이언트와 서버 사이의 통신을 최적화하는 데 큰 장점을 제공합니다. 주요 개념으로는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"스키마","position":{"start":{"line":8,"column":139,"offset":377},"end":{"line":8,"column":144,"offset":382}}}],"position":{"start":{"line":8,"column":139,"offset":377},"end":{"line":8,"column":144,"offset":382}}},"children":"스키마"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"쿼리","position":{"start":{"line":8,"column":146,"offset":384},"end":{"line":8,"column":150,"offset":388}}}],"position":{"start":{"line":8,"column":146,"offset":384},"end":{"line":8,"column":150,"offset":388}}},"children":"쿼리"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"뮤테이션","position":{"start":{"line":8,"column":152,"offset":390},"end":{"line":8,"column":158,"offset":396}}}],"position":{"start":{"line":8,"column":152,"offset":390},"end":{"line":8,"column":158,"offset":396}}},"children":"뮤테이션"}}],"이 있습니다."]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"스키마"}],": 데이터 구조를 정의합니다. 스키마는 어떤 타입이 있고, 각 타입이 어떤 필드를 가지는지 명시합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"쿼리"}],": 클라이언트가 서버에서 데이터를 가져오는 요청을 말합니다. RESTful API의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GET","position":{"start":{"line":11,"column":56,"offset":527},"end":{"line":11,"column":61,"offset":532}}}],"position":{"start":{"line":11,"column":56,"offset":527},"end":{"line":11,"column":61,"offset":532}}},"children":"GET"}}]," 요청에 해당합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"뮤테이션"}],": 서버의 데이터를 변경하는 요청을 의미합니다. RESTful API의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"POST","position":{"start":{"line":12,"column":51,"offset":594},"end":{"line":12,"column":57,"offset":600}}}],"position":{"start":{"line":12,"column":51,"offset":594},"end":{"line":12,"column":57,"offset":600}}},"children":"POST"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PUT","position":{"start":{"line":12,"column":59,"offset":602},"end":{"line":12,"column":64,"offset":607}}}],"position":{"start":{"line":12,"column":59,"offset":602},"end":{"line":12,"column":64,"offset":607}}},"children":"PUT"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DELETE","position":{"start":{"line":12,"column":66,"offset":609},"end":{"line":12,"column":74,"offset":617}}}],"position":{"start":{"line":12,"column":66,"offset":609},"end":{"line":12,"column":74,"offset":617}}},"children":"DELETE"}}]," 요청에 해당합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"159437ba","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Node.js와 GraphQL 통합하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js를 통해 GraphQL을 사용하려면 몇 가지 필수 npm 패키지를 설치해야 합니다. 이를 통해 서버를 설정하고 스키마를 정의할 수 있습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"npm install express express-graphql graphql\n"}],"position":{"start":{"line":18,"column":1,"offset":743},"end":{"line":20,"column":4,"offset":798}}},"children":"npm install express express-graphql graphql\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 명령어로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"express","position":{"start":{"line":22,"column":8,"offset":807},"end":{"line":22,"column":17,"offset":816}}}],"position":{"start":{"line":22,"column":8,"offset":807},"end":{"line":22,"column":17,"offset":816}}},"children":"express"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"express-graphql","position":{"start":{"line":22,"column":19,"offset":818},"end":{"line":22,"column":36,"offset":835}}}],"position":{"start":{"line":22,"column":19,"offset":818},"end":{"line":22,"column":36,"offset":835}}},"children":"express-graphql"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"graphql","position":{"start":{"line":22,"column":38,"offset":837},"end":{"line":22,"column":47,"offset":846}}}],"position":{"start":{"line":22,"column":38,"offset":837},"end":{"line":22,"column":47,"offset":846}}},"children":"graphql"}}]," 패키지를 설치합니다. 그 다음, 간단한 Express 서버를 설정해 보겠습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\n// 간단한 스키마 정의\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\n// 루트 리졸버 정의\nconst root = {\n  hello: () => {\n    return 'Hello, world!';\n  },\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\n\napp.listen(4000, () => console.log('Now browse to localhost:4000/graphql'));\n"}],"position":{"start":{"line":24,"column":1,"offset":893},"end":{"line":51,"column":4,"offset":1405}}},"children":"const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\n// 간단한 스키마 정의\nconst schema = buildSchema(`\n  type Query {\n    hello: String\n  }\n`);\n\n// 루트 리졸버 정의\nconst root = {\n  hello: () => {\n    return 'Hello, world!';\n  },\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\n\napp.listen(4000, () => console.log('Now browse to localhost:4000/graphql'));\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 브라우저에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"http://localhost:4000/graphql","position":{"start":{"line":53,"column":11,"offset":1417},"end":{"line":53,"column":42,"offset":1448}}}],"position":{"start":{"line":53,"column":11,"offset":1417},"end":{"line":53,"column":42,"offset":1448}}},"children":"http://localhost:4000/graphql"}}],"에 접속하면 GraphiQL 인터페이스가 나타납니다. 여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hello","position":{"start":{"line":53,"column":76,"offset":1482},"end":{"line":53,"column":83,"offset":1489}}}],"position":{"start":{"line":53,"column":76,"offset":1482},"end":{"line":53,"column":83,"offset":1489}}},"children":"hello"}}]," 쿼리를 실행해보면 'Hello, world!'라는 응답을 받을 수 있습니다."]}],"\n",["$","h2",null,{"id":"237a6bc0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실습: 간단한 GraphQL API 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"더 복잡한 예제로서 사용자 정보와 관련된 GraphQL API를 만들어 보겠습니다. 먼저 사용자 데이터를 관리하기 위한 기본 스키마를 정의합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n    age: Int\n  }\n\n  type Query {\n    user(id: ID!): User\n    users: [User]\n  }\n\n  type Mutation {\n    addUser(name: String!, age: Int): User\n  }\n`);\n"}],"position":{"start":{"line":59,"column":1,"offset":1644},"end":{"line":76,"column":4,"offset":1883}}},"children":"const schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n    age: Int\n  }\n\n  type Query {\n    user(id: ID!): User\n    users: [User]\n  }\n\n  type Mutation {\n    addUser(name: String!, age: Int): User\n  }\n`);\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 스키마에서는 사용자 타입(User)과 사용자 정보를 가져오는 쿼리(user와 users), 그리고 사용자를 추가하는 뮤테이션(addUser)을 정의했습니다. 이제 해당 스키마의 리졸버를 구현해 보겠습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"let users = [];\n\nconst root = {\n  user: ({ id }) => {\n    return users.find(user => user.id === id);\n  },\n  users: () => {\n    return users;\n  },\n  addUser: ({ name, age }) => {\n    const user = { id: users.length + 1, name, age };\n    users.push(user);\n    return user;\n  },\n};\n"}],"position":{"start":{"line":80,"column":1,"offset":2003},"end":{"line":96,"column":4,"offset":2299}}},"children":"let users = [];\n\nconst root = {\n  user: ({ id }) => {\n    return users.find(user => user.id === id);\n  },\n  users: () => {\n    return users;\n  },\n  addUser: ({ name, age }) => {\n    const user = { id: users.length + 1, name, age };\n    users.push(user);\n    return user;\n  },\n};\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 전체 코드를 결합한 완성된 서버 코드는 다음과 같습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\nconst schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n    age: Int\n  }\n  type Query {\n    user(id: ID!): User\n    users: [User]\n  }\n  type Mutation {\n    addUser(name: String!, age: Int): User\n  }\n`);\n\nlet users = [];\n\nconst root = {\n  user: ({ id }) => {\n    return users.find(user => user.id === id);\n  },\n  users: () => {\n    return users;\n  },\n  addUser: ({ name, age }) => {\n    const user = { id: users.length + 1, name, age };\n    users.push(user);\n    return user;\n  },\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\n\napp.listen(4000, () => console.log('Now browse to localhost:4000/graphql'));\n"}],"position":{"start":{"line":100,"column":1,"offset":2337},"end":{"line":144,"column":4,"offset":3183}}},"children":"const express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\nconst schema = buildSchema(`\n  type User {\n    id: ID!\n    name: String!\n    age: Int\n  }\n  type Query {\n    user(id: ID!): User\n    users: [User]\n  }\n  type Mutation {\n    addUser(name: String!, age: Int): User\n  }\n`);\n\nlet users = [];\n\nconst root = {\n  user: ({ id }) => {\n    return users.find(user => user.id === id);\n  },\n  users: () => {\n    return users;\n  },\n  addUser: ({ name, age }) => {\n    const user = { id: users.length + 1, name, age };\n    users.push(user);\n    return user;\n  },\n};\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema: schema,\n  rootValue: root,\n  graphiql: true,\n}));\n\napp.listen(4000, () => console.log('Now browse to localhost:4000/graphql'));\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"http://localhost:4000/graphql","position":{"start":{"line":146,"column":4,"offset":3188},"end":{"line":146,"column":35,"offset":3219}}}],"position":{"start":{"line":146,"column":4,"offset":3188},"end":{"line":146,"column":35,"offset":3219}}},"children":"http://localhost:4000/graphql"}}],"에 접속한 후 GraphiQL 인터페이스에서 다음의 쿼리를 실행하여 사용자를 추가하고 가져올 수 있습니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-graphql","node":{"type":"element","tagName":"code","properties":{"className":["language-graphql"]},"children":[{"type":"text","value":"mutation {\n  addUser(name: \"John Doe\", age: 28) {\n    id\n    name\n    age\n  }\n}\n\nquery {\n  users {\n    id\n    name\n    age\n  }\n}\n"}],"position":{"start":{"line":148,"column":1,"offset":3280},"end":{"line":164,"column":4,"offset":3423}}},"children":"mutation {\n  addUser(name: \"John Doe\", age: 28) {\n    id\n    name\n    age\n  }\n}\n\nquery {\n  users {\n    id\n    name\n    age\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 Node.js와 GraphQL을 사용하여 매우 간단한 사용자 관리 API를 구현했습니다. 이를 통해 GraphQL의 기본 개념과 Node.js와의 통합 방법을 이해할 수 있었습니다. 실제 프로젝트에서는 보다 복잡한 스키마와 리졸버, 데이터베이스 연계 등을 고려해야 합니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GraphQL","position":{"start":{"line":170,"column":1,"offset":3594},"end":{"line":170,"column":10,"offset":3603}}}],"position":{"start":{"line":170,"column":1,"offset":3594},"end":{"line":170,"column":10,"offset":3603}}},"children":"GraphQL"}}],"은 API 개발에 혁신적인 접근 방식을 제공합니다. 데이터를 효율적으로 전송하고, 클라이언트와 서버 간의 통신을 최적화할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Node.js","position":{"start":{"line":170,"column":86,"offset":3679},"end":{"line":170,"column":95,"offset":3688}}}],"position":{"start":{"line":170,"column":86,"offset":3679},"end":{"line":170,"column":95,"offset":3688}}},"children":"Node.js"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GraphQL","position":{"start":{"line":170,"column":97,"offset":3690},"end":{"line":170,"column":106,"offset":3699}}}],"position":{"start":{"line":170,"column":97,"offset":3690},"end":{"line":170,"column":106,"offset":3699}}},"children":"GraphQL"}}],"의 결합은 현대 웹 애플리케이션 개발에서 매우 강력한 도구가 될 수 있습니다. 이를 통해 개발자는 보다 유연하고 효율적인 API를 구축할 수 있습니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임","toc":[{"tagName":"h1","title":"Node.js에서 GraphQL 사용하기: API 개발의 새로운 패러다임","id":"be549d98"},{"tagName":"h2","title":"GraphQL의 기본 개념","id":"2f022e59"},{"tagName":"h2","title":"Node.js와 GraphQL 통합하기","id":"159437ba"},{"tagName":"h2","title":"실습: 간단한 GraphQL API 구현","id":"237a6bc0"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
