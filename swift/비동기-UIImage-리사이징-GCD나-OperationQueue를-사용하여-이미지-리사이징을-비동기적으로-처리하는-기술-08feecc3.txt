1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EB%B9%84%EB%8F%99%EA%B8%B0-UIImage-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-GCD%EB%82%98-OperationQueue%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95%EC%9D%84-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0-08feecc3","d"],{"children":["__PAGE__?{\"slug\":\"비동기-UIImage-리사이징-GCD나-OperationQueue를-사용하여-이미지-리사이징을-비동기적으로-처리하는-기술-08feecc3\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EB%B9%84%EB%8F%99%EA%B8%B0-UIImage-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-GCD%EB%82%98-OperationQueue%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95%EC%9D%84-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0-08feecc3","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"비동기-UIImage-리사이징-GCD나-OperationQueue를-사용하여-이미지-리사이징을-비동기적으로-처리하는-기술-08feecc3\"}"},"styles":[]}],"segment":["slug","%EB%B9%84%EB%8F%99%EA%B8%B0-UIImage-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-GCD%EB%82%98-OperationQueue%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95%EC%9D%84-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0-08feecc3","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift에서 GCD나 OperationQueue를 사용하여 UIImage 리사이징을 비동기적으로 처리하는 방법을 설명합니다. 비동기 작업을 통해 메인 스레드에서 진행되는 작업을 방해하지 않고 효율적으로 이미지를 처리하는 기술에 대해 알아봅니다."}],["$","meta","3",{"name":"keywords","content":"Swift,비동기,UIImage,GCD"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EB%B9%84%EB%8F%99%EA%B8%B0-UIImage-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-GCD%EB%82%98-OperationQueue%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95%EC%9D%84-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0-08feecc3"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift에서 GCD나 OperationQueue를 사용하여 UIImage 리사이징을 비동기적으로 처리하는 방법을 설명합니다. 비동기 작업을 통해 메인 스레드에서 진행되는 작업을 방해하지 않고 효율적으로 이미지를 처리하는 기술에 대해 알아봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EB%B9%84%EB%8F%99%EA%B8%B0-UIImage-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95-GCD%EB%82%98-OperationQueue%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A6%AC%EC%82%AC%EC%9D%B4%EC%A7%95%EC%9D%84-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B2%98%EB%A6%AC%ED%95%98%EB%8A%94-%EA%B8%B0%EC%88%A0-08feecc3"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift에서 GCD나 OperationQueue를 사용하여 UIImage 리사이징을 비동기적으로 처리하는 방법을 설명합니다. 비동기 작업을 통해 메인 스레드에서 진행되는 작업을 방해하지 않고 효율적으로 이미지를 처리하는 기술에 대해 알아봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T56d,import UIKit

class ImageResizeOperation: Operation {
    let inputImage: UIImage
    let targetSize: CGSize
    var outputImage: UIImage?

    init(image: UIImage, targetSize: CGSize) {
        self.inputImage = image
        self.targetSize = targetSize
    }

    override func main() {
        if isCancelled { return }
        let size = inputImage.size
        let widthRatio  = targetSize.width  / size.width
        let heightRatio = targetSize.height / size.height
        let newSize = widthRatio > heightRatio
            ? CGSize(width: size.width * heightRatio, height: size.height * heightRatio)
            : CGSize(width: size.width * widthRatio, height: size.height * widthRatio)
        let rect = CGRect(origin: .zero, size: newSize)
        UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)
        inputImage.draw(in: rect)
        outputImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
    }
}

func asyncResizeImage(image: UIImage, targetSize: CGSize, completion: @escaping (UIImage?) -> Void) {
    let operationQueue = OperationQueue()
    let resizeOperation = ImageResizeOperation(image: image, targetSize: targetSize)
    resizeOperation.completionBlock = {
        DispatchQueue.main.async {
            completion(resizeOperation.outputImage)
        }
    }
    operationQueue.addOperation(resizeOperation)
}
f:T56d,import UIKit

class ImageResizeOperation: Operation {
    let inputImage: UIImage
    let targetSize: CGSize
    var outputImage: UIImage?

    init(image: UIImage, targetSize: CGSize) {
        self.inputImage = image
        self.targetSize = targetSize
    }

    override func main() {
        if isCancelled { return }
        let size = inputImage.size
        let widthRatio  = targetSize.width  / size.width
        let heightRatio = targetSize.height / size.height
        let newSize = widthRatio > heightRatio
            ? CGSize(width: size.width * heightRatio, height: size.height * heightRatio)
            : CGSize(width: size.width * widthRatio, height: size.height * widthRatio)
        let rect = CGRect(origin: .zero, size: newSize)
        UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)
        inputImage.draw(in: rect)
        outputImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
    }
}

func asyncResizeImage(image: UIImage, targetSize: CGSize, completion: @escaping (UIImage?) -> Void) {
    let operationQueue = OperationQueue()
    let resizeOperation = ImageResizeOperation(image: image, targetSize: targetSize)
    resizeOperation.completionBlock = {
        DispatchQueue.main.async {
            completion(resizeOperation.outputImage)
        }
    }
    operationQueue.addOperation(resizeOperation)
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-22"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"75f9b743","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 비동기 UIImage 리사이징"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이미지를 효과적으로 처리하는 것은 많은 iOS 애플리케이션에서 중요한 요구 사항입니다. 대용량 이미지를 처리하는 동안 메인 스레드의 부하를 줄이고 사용자 경험을 향상시키기 위해 비동기적으로 작업을 수행하는 것이 필수적입니다. Swift에서는 GCD(Grand Central Dispatch)와 OperationQueue를 사용하여 이러한 비동기 작업을 쉽게 구현할 수 있습니다. 이 글에서는 GCD와 OperationQueue를 활용하여 비동기적으로 UIImage를 리사이징하는 방법을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"9ab3c8f2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"GCD를 사용한 비동기 이미지 리사이징"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GCD는 비동기 작업을 효율적으로 처리할 수 있는 강력한 도구입니다. GCD를 사용하면 작업을 전역 큐 또는 사용자 정의 큐에서 비동기적으로 실행할 수 있습니다. 아래는 GCD를 사용하여 이미지를 비동기적으로 리사이징하는 예제입니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nfunc resizeImage(image: UIImage, targetSize: CGSize, completion: @escaping (UIImage?) -> Void) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        let size = image.size\n        let widthRatio  = targetSize.width  / size.width\n        let heightRatio = targetSize.height / size.height\n        let newSize = widthRatio > heightRatio\n            ? CGSize(width: size.width * heightRatio, height: size.height * heightRatio)\n            : CGSize(width: size.width * widthRatio, height: size.height * widthRatio)\n        let rect = CGRect(origin: .zero, size: newSize)\n        UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)\n        image.draw(in: rect)\n        let newImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        DispatchQueue.main.async {\n            completion(newImage)\n        }\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":469},"end":{"line":31,"column":4,"offset":1356}}},"children":"import UIKit\n\nfunc resizeImage(image: UIImage, targetSize: CGSize, completion: @escaping (UIImage?) -> Void) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        let size = image.size\n        let widthRatio  = targetSize.width  / size.width\n        let heightRatio = targetSize.height / size.height\n        let newSize = widthRatio > heightRatio\n            ? CGSize(width: size.width * heightRatio, height: size.height * heightRatio)\n            : CGSize(width: size.width * widthRatio, height: size.height * widthRatio)\n        let rect = CGRect(origin: .zero, size: newSize)\n        UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)\n        image.draw(in: rect)\n        let newImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        DispatchQueue.main.async {\n            completion(newImage)\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"resizeImage","position":{"start":{"line":33,"column":8,"offset":1365},"end":{"line":33,"column":21,"offset":1378}}}],"position":{"start":{"line":33,"column":8,"offset":1365},"end":{"line":33,"column":21,"offset":1378}}},"children":"resizeImage"}}]," 함수는 비동기로 이미지를 리사이징합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue.global","position":{"start":{"line":33,"column":45,"offset":1402},"end":{"line":33,"column":67,"offset":1424}}}],"position":{"start":{"line":33,"column":45,"offset":1402},"end":{"line":33,"column":67,"offset":1424}}},"children":"DispatchQueue.global"}}],"을 사용하여 작업을 백그라운드 큐에서 실행하고, 완료된 후 메인 큐에서 결과를 반환합니다."]}],"\n",["$","h2",null,{"id":"610eadcb","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"OperationQueue를 사용한 비동기 이미지 리사이징"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"OperationQueue는 GCD보다 더 고급의 작업 관리 기능을 제공합니다. 작업의 우선 순위를 설정하거나 작업 간의 종속성을 관리하는 데 유용합니다. 다음 예제는 OperationQueue를 사용하여 이미지를 비동기적으로 리사이징하는 방법을 보여줍니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":39,"column":1,"offset":1659},"end":{"line":78,"column":4,"offset":3060}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ImageResizeOperation","position":{"start":{"line":80,"column":1,"offset":3062},"end":{"line":80,"column":23,"offset":3084}}}],"position":{"start":{"line":80,"column":1,"offset":3062},"end":{"line":80,"column":23,"offset":3084}}},"children":"ImageResizeOperation"}}]," 클래스는 Operation을 상속받아 비동기적으로 이미지를 리사이징할 수 있는 커스텀 작업을 정의합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"asyncResizeImage","position":{"start":{"line":80,"column":83,"offset":3144},"end":{"line":80,"column":101,"offset":3162}}}],"position":{"start":{"line":80,"column":83,"offset":3144},"end":{"line":80,"column":101,"offset":3162}}},"children":"asyncResizeImage"}}]," 함수는 이 작업을 OperationQueue에 추가하고 작업이 완료되면 메인 큐에서 결과를 처리합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 GCD와 OperationQueue를 사용하여 비동기적으로 UIImage를 리사이징하는 방법에 대해 살펴보았습니다. GCD는 간단한 비동기 작업에 적합하며, OperationQueue는 더 복잡한 작업 관리를 필요로 할 때 유리합니다. 이 두 가지 방식을 잘 활용하면 애플리케이션의 성능을 최적화하고 사용자 경험을 향상시킬 수 있습니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"비동기 UIImage 리사이징: GCD나 OperationQueue를 사용하여 이미지 리사이징을 비동기적으로 처리하는 기술.","toc":[{"tagName":"h1","title":"Swift에서 비동기 UIImage 리사이징","id":"75f9b743"},{"tagName":"h2","title":"GCD를 사용한 비동기 이미지 리사이징","id":"9ab3c8f2"},{"tagName":"h2","title":"OperationQueue를 사용한 비동기 이미지 리사이징","id":"610eadcb"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
