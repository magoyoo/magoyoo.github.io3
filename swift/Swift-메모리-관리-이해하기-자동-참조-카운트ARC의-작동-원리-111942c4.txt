1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99-%EC%B0%B8%EC%A1%B0-%EC%B9%B4%EC%9A%B4%ED%8A%B8ARC%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC-111942c4","d"],{"children":["__PAGE__?{\"slug\":\"Swift-메모리-관리-이해하기-자동-참조-카운트ARC의-작동-원리-111942c4\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99-%EC%B0%B8%EC%A1%B0-%EC%B9%B4%EC%9A%B4%ED%8A%B8ARC%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC-111942c4","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-메모리-관리-이해하기-자동-참조-카운트ARC의-작동-원리-111942c4\"}"},"styles":[]}],"segment":["slug","Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99-%EC%B0%B8%EC%A1%B0-%EC%B9%B4%EC%9A%B4%ED%8A%B8ARC%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC-111942c4","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift 언어에서 메모리 관리를 담당하는 자동 참조 카운트(ARC)에 대해 설명합니다. ARC의 기본 개념과 작동 원리를 이해함으로써 안전하고 효율적인 Swift 코드를 작성하는 데 도움이 됩니다."}],["$","meta","3",{"name":"keywords","content":"Swift,ARC,메모리 관리,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99-%EC%B0%B8%EC%A1%B0-%EC%B9%B4%EC%9A%B4%ED%8A%B8ARC%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC-111942c4"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift 언어에서 메모리 관리를 담당하는 자동 참조 카운트(ARC)에 대해 설명합니다. ARC의 기본 개념과 작동 원리를 이해함으로써 안전하고 효율적인 Swift 코드를 작성하는 데 도움이 됩니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%9E%90%EB%8F%99-%EC%B0%B8%EC%A1%B0-%EC%B9%B4%EC%9A%B4%ED%8A%B8ARC%EC%9D%98-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC-111942c4"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift 언어에서 메모리 관리를 담당하는 자동 참조 카운트(ARC)에 대해 설명합니다. ARC의 기본 개념과 작동 원리를 이해함으로써 안전하고 효율적인 Swift 코드를 작성하는 데 도움이 됩니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-27"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"68a51b97","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 메모리 관리를 쉽게 하기 위해 자동 참조 카운트(Automatic Reference Counting, ARC)라는 메커니즘을 도입했습니다. 이 글에서는 ARC의 기초 개념부터 작동 원리, 그리고 관련된 현대적인 메모리 관리 기술까지 다루어 보겠습니다. Swift의 메모리 관리 방법론을 이해하면 메모리와 관련된 문제를 예방하고 더 효율적인 코드를 작성할 수 있습니다."}],"\n",["$","h2",null,{"id":"84a249df","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ARC의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"자동 참조 카운트(ARC)은 Swift에서 인스턴스의 메모리 생명 주기를 관리하는 주요 메커니즘입니다. 이 메커니즘은 객체가 더 이상 사용되지 않을 때 자동으로 메모리를 해제하여 메모리 누수를 방지합니다. ARC는 객체의 참조 카운트를 추적하여 객체가 필요한 동안 메모리에 상주하도록 하고, 필요 없을 때 메모리에서 제거합니다."}],"\n",["$","h3",null,{"id":"40313837","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"ARC 작동 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC는 객체의 참조 카운트를 추적함으로써 작동합니다. 객체의 참조 카운트는 다음과 같은 경우 변경됩니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"증가"}],": 변수가 객체를 참조할 때마다 객체의 참조 카운트가 증가합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"감소"}],": 변수가 더 이상 객체를 참조하지 않을 때마다 객체의 참조 카운트가 감소합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ARC를 통해 메모리가 해제되는 주요 상황은 다음과 같습니다:"}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":"참조 카운트가 0이 되는 경우: 객체가 더 이상 참조되지 않을 때 메모리가 해제됩니다."}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n\n    init(name: String) {\n        self.name = name\n        print(\"\n        (name) is being initialized\")\n    }\n    \ndeinit {\n        print(\"\n        (name) is being deinitialized\")\n    }\n}\n\nvar reference1: Person?\nvar reference2: Person?\nvar reference3: Person?\n\n\nreference1 = Person(name: \"John\nDoe\")\n// 참조 카운트: 1\n\nreference2 = reference1\n// 참조 카운트: 2\n\nreference3 = reference1\n// 참조 카운트: 3\n\nreference1 = nil\n// 참조 카운트: 2\n\nreference2 = nil\n// 참조 카운트: 1\n\nreference3 = nil\n// 참조 카운트: 0\n// 메모리 해제\n"}],"position":{"start":{"line":21,"column":1,"offset":723},"end":{"line":61,"column":4,"offset":1265}}},"children":"class Person {\n    let name: String\n\n    init(name: String) {\n        self.name = name\n        print(\"\n        (name) is being initialized\")\n    }\n    \ndeinit {\n        print(\"\n        (name) is being deinitialized\")\n    }\n}\n\nvar reference1: Person?\nvar reference2: Person?\nvar reference3: Person?\n\n\nreference1 = Person(name: \"John\nDoe\")\n// 참조 카운트: 1\n\nreference2 = reference1\n// 참조 카운트: 2\n\nreference3 = reference1\n// 참조 카운트: 3\n\nreference1 = nil\n// 참조 카운트: 2\n\nreference2 = nil\n// 참조 카운트: 1\n\nreference3 = nil\n// 참조 카운트: 0\n// 메모리 해제\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":63,"column":7,"offset":1273},"end":{"line":63,"column":15,"offset":1281}}}],"position":{"start":{"line":63,"column":7,"offset":1273},"end":{"line":63,"column":15,"offset":1281}}},"children":"Person"}}]," 객체의 생명 주기를 잘 보여줍니다. 객체의 참조가 모두 해제될 때, 메모리도 해제됩니다."]}],"\n",["$","h2",null,{"id":"f4cc48f9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"강한 참조 사이클 방지하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["때로는 두 객체가 서로를 강하게 참조하여 강한 참조 사이클(strong reference cycle)이 발생할 수 있습니다. 이는 메모리 누수를 일으킬 수 있기 때문에 이를 방지하는 것이 중요합니다. 강한 참조 사이클을 방지하기 위해 Swift에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"약한 참조(weak reference)","position":{"start":{"line":67,"column":141,"offset":1492},"end":{"line":67,"column":164,"offset":1515}}}],"position":{"start":{"line":67,"column":141,"offset":1492},"end":{"line":67,"column":164,"offset":1515}}},"children":"약한 참조(weak reference)"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"미소유 참조(unowned reference)","position":{"start":{"line":67,"column":166,"offset":1517},"end":{"line":67,"column":193,"offset":1544}}}],"position":{"start":{"line":67,"column":166,"offset":1517},"end":{"line":67,"column":193,"offset":1544}}},"children":"미소유 참조(unowned reference)"}}],"를 사용합니다."]}],"\n",["$","h3",null,{"id":"103a99ae","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"약한 참조 (weak reference)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["약한 참조는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"weak","position":{"start":{"line":71,"column":8,"offset":1589},"end":{"line":71,"column":14,"offset":1595}}}],"position":{"start":{"line":71,"column":8,"offset":1589},"end":{"line":71,"column":14,"offset":1595}}},"children":"weak"}}]," 키워드를 사용합니다. 약한 참조는 참조하고 있는 객체의 참조 카운트를 증가시키지 않으며, 참조하고 있는 객체가 해제되면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nil","position":{"start":{"line":71,"column":82,"offset":1663},"end":{"line":71,"column":87,"offset":1668}}}],"position":{"start":{"line":71,"column":82,"offset":1663},"end":{"line":71,"column":87,"offset":1668}}},"children":"nil"}}],"로 설정됩니다. 따라서 약한 참조는 항상 옵셔널이어야 합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Person {\n    let name: String\n\n    init(name: String) {\n        self.name = name\n    }\n\n    var apartment: Apartment?\n}\n\nclass Apartment {\n    let unit: String\n\n    init(unit: String) {\n        self.unit = unit\n    }\n\n    weak var tenant: Person?\n}\n\nvar john: Person?\nvar unit4A: Apartment?\n\njohn = Person(name: \"John Doe\")\nunit4A = \nApartment(unit: \"4A\")\n\njohn!.apartment = unit4A\nunit4A!.tenant = john\n\njohn = nil\n// Person 객체 메모리 해제\n\nprint(unit4A!.tenant) // nil\n"}],"position":{"start":{"line":73,"column":1,"offset":1704},"end":{"line":108,"column":4,"offset":2188}}},"children":"class Person {\n    let name: String\n\n    init(name: String) {\n        self.name = name\n    }\n\n    var apartment: Apartment?\n}\n\nclass Apartment {\n    let unit: String\n\n    init(unit: String) {\n        self.unit = unit\n    }\n\n    weak var tenant: Person?\n}\n\nvar john: Person?\nvar unit4A: Apartment?\n\njohn = Person(name: \"John Doe\")\nunit4A = \nApartment(unit: \"4A\")\n\njohn!.apartment = unit4A\nunit4A!.tenant = john\n\njohn = nil\n// Person 객체 메모리 해제\n\nprint(unit4A!.tenant) // nil\n"}}]}],"\n",["$","h3",null,{"id":"7ce7954d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"미소유 참조 (unowned reference)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["미소유 참조는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"unowned","position":{"start":{"line":112,"column":9,"offset":2230},"end":{"line":112,"column":18,"offset":2239}}}],"position":{"start":{"line":112,"column":9,"offset":2230},"end":{"line":112,"column":18,"offset":2239}}},"children":"unowned"}}]," 키워드를 사용합니다. 미소유 참조는 참조하고 있는 객체의 참조 카운트를 증가시키지 않으며, 참조하고 있는 객체가 해제되어도 nil로 설정되지 않습니다. 따라서 미소유 참조는 옵셔널이 아니며, 참조하고 있는 객체가 해제되면 접근할 때 크래시가 발생할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Customer {\n    let name: String\n    var card: CreditCard?\n\n    init(name: String) {\n        self.name = name\n    }\n\ndeinit {\n        print(\"\n        (name) is being deinitialized\")\n    }\n}\n\nclass CreditCard {\n    let number: UInt64\n    unowned let customer: Customer\n\n    \ninit(number: UInt64, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n\ninit {\n        print(\"\n        Card #\n        (number) is being deinitialized\")\n    }\n\nvar alice: Customer?\nalice = Customer(name: \"Alice\nSmith\")\n\nalice!.card = CreditCard(number: 1234_5678_9012_3456,\nalice)\n\nalice = nil\n// Customer와 CreditCard 객체 메모리 해제\n"}],"position":{"start":{"line":114,"column":1,"offset":2388},"end":{"line":154,"column":4,"offset":3046}}},"children":"class Customer {\n    let name: String\n    var card: CreditCard?\n\n    init(name: String) {\n        self.name = name\n    }\n\ndeinit {\n        print(\"\n        (name) is being deinitialized\")\n    }\n}\n\nclass CreditCard {\n    let number: UInt64\n    unowned let customer: Customer\n\n    \ninit(number: UInt64, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n\ninit {\n        print(\"\n        Card #\n        (number) is being deinitialized\")\n    }\n\nvar alice: Customer?\nalice = Customer(name: \"Alice\nSmith\")\n\nalice!.card = CreditCard(number: 1234_5678_9012_3456,\nalice)\n\nalice = nil\n// Customer와 CreditCard 객체 메모리 해제\n"}}]}],"\n",["$","h3",null,{"id":"d8a81dfd","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"폐웨어와 강한 참조 사이클 방지하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["강한 참조 사이클은 Swift의 선거처리계와 비동기 클로저에서도 발생할 수 있습니다. 비동기 클로저 내부에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self","position":{"start":{"line":158,"column":62,"offset":3134},"end":{"line":158,"column":68,"offset":3140}}}],"position":{"start":{"line":158,"column":62,"offset":3134},"end":{"line":158,"column":68,"offset":3140}}},"children":"self"}}],"를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"강하게 참조","position":{"start":{"line":158,"column":70,"offset":3142},"end":{"line":158,"column":78,"offset":3150}}}],"position":{"start":{"line":158,"column":70,"offset":3142},"end":{"line":158,"column":78,"offset":3150}}},"children":"강하게 참조"}}],"할 경우, 이를 회피하기 위해 클로저 참조를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"핀다","position":{"start":{"line":158,"column":103,"offset":3175},"end":{"line":158,"column":107,"offset":3179}}}],"position":{"start":{"line":158,"column":103,"offset":3175},"end":{"line":158,"column":107,"offset":3179}}},"children":"핀다"}}]," 웨서 파질리 되고 강환참 구조를 방지하는 방 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class HTMLElement {\n    let name: String\n    let text: String?\n\n    lazy var asHTML: () -> String = {\n        [unowned self] in\n        if let text = self.text {\n            return \"<\n            self.name>\n            < \n            self.text!>\n\n        } else {\n            return \"<\n            self.name>\"\n        }\n    }\n\ninit(name: String, text: String? = null) {\n        self.name = name\n        self.text = text\n    }\n\ndeinit {\n        print(\"\n        (name) is being deinitialized\")\n    }\n}\n\nvar paragraph: HTMLElement? = HTMLElement(name \"p\", text: \"hello\")\nprint(paragraph!.asHTML())\nparagraph = nil\n// HTMLElement 객체 메모리 해제\n"}],"position":{"start":{"line":160,"column":1,"offset":3214},"end":{"line":194,"column":4,"offset":3862}}},"children":"class HTMLElement {\n    let name: String\n    let text: String?\n\n    lazy var asHTML: () -> String = {\n        [unowned self] in\n        if let text = self.text {\n            return \"<\n            self.name>\n            < \n            self.text!>\n\n        } else {\n            return \"<\n            self.name>\"\n        }\n    }\n\ninit(name: String, text: String? = null) {\n        self.name = name\n        self.text = text\n    }\n\ndeinit {\n        print(\"\n        (name) is being deinitialized\")\n    }\n}\n\nvar paragraph: HTMLElement? = HTMLElement(name \"p\", text: \"hello\")\nprint(paragraph!.asHTML())\nparagraph = nil\n// HTMLElement 객체 메모리 해제\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 자동 참조 카운트(ARC)는 메모리 관리를 간결하고 안전하게 해 주지만, 원치 않은 강한 참조 사이클은 예기치 않은 메모리 문제를 일으킬 수 있습니다. 강한 참조 사이클을 피하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"약한 참조(weak reference)","position":{"start":{"line":198,"column":111,"offset":3981},"end":{"line":198,"column":134,"offset":4004}}}],"position":{"start":{"line":198,"column":111,"offset":3981},"end":{"line":198,"column":134,"offset":4004}}},"children":"약한 참조(weak reference)"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"미소유 참조(unowned reference)","position":{"start":{"line":198,"column":136,"offset":4006},"end":{"line":198,"column":163,"offset":4033}}}],"position":{"start":{"line":198,"column":136,"offset":4006},"end":{"line":198,"column":163,"offset":4033}}},"children":"미소유 참조(unowned reference)"}}],"를 잘 활용하고, 특히 클로저를 사용할 때 주의해야 합니다. 이러한 개념들을 확실히 이해하고 적용하면 더 안전하고 효율적인 Swift 코드를 작성할 수 있습니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리","toc":[{"tagName":"h1","title":"Swift 메모리 관리 이해하기: 자동 참조 카운트(ARC)의 작동 원리","id":"68a51b97"},{"tagName":"h2","title":"ARC의 기본 개념","id":"84a249df"},{"tagName":"h3","title":"ARC 작동 원리","id":"40313837"},{"tagName":"h2","title":"강한 참조 사이클 방지하기","id":"f4cc48f9"},{"tagName":"h3","title":"약한 참조 (weak reference)","id":"103a99ae"},{"tagName":"h3","title":"미소유 참조 (unowned reference)","id":"7ce7954d"},{"tagName":"h3","title":"폐웨어와 강한 참조 사이클 방지하기","id":"d8a81dfd"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
