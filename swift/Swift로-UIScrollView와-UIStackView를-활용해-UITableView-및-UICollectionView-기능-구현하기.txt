1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EB%A1%9C-UIScrollView%EC%99%80-UIStackView%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4-UITableView-%EB%B0%8F-UICollectionView-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0","d"],{"children":["__PAGE__?{\"slug\":\"Swift로-UIScrollView와-UIStackView를-활용해-UITableView-및-UICollectionView-기능-구현하기\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EB%A1%9C-UIScrollView%EC%99%80-UIStackView%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4-UITableView-%EB%B0%8F-UICollectionView-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift로-UIScrollView와-UIStackView를-활용해-UITableView-및-UICollectionView-기능-구현하기\"}"},"styles":[]}],"segment":["slug","Swift%EB%A1%9C-UIScrollView%EC%99%80-UIStackView%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4-UITableView-%EB%B0%8F-UICollectionView-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함) | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift로 UIScrollView와 UIStackView를 사용해 UITableView와 UICollectionView의 기능을 구현하는 방법을 알아보세요. 재사용 가능한 커스텀 뷰와 뷰 태그 활용 방법도 포함되어 있습니다."}],["$","meta","3",{"name":"keywords","content":"swift,UIScrollView,UIStackView\"\""}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EB%A1%9C-UIScrollView%EC%99%80-UIStackView%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4-UITableView-%EB%B0%8F-UICollectionView-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함) | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함) | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift로 UIScrollView와 UIStackView를 사용해 UITableView와 UICollectionView의 기능을 구현하는 방법을 알아보세요. 재사용 가능한 커스텀 뷰와 뷰 태그 활용 방법도 포함되어 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EB%A1%9C-UIScrollView%EC%99%80-UIStackView%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%B4-UITableView-%EB%B0%8F-UICollectionView-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함) | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift로 UIScrollView와 UIStackView를 사용해 UITableView와 UICollectionView의 기능을 구현하는 방법을 알아보세요. 재사용 가능한 커스텀 뷰와 뷰 태그 활용 방법도 포함되어 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
16:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
17:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T6ed,import UIKit

class ViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        // ScrollView 설정
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        // StackView 설정
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])

        // 샘플 데이터 추가
        for i in 1...20 {
            let label = UILabel()
            label.text = "Item \(i)"
            label.textAlignment = .center
            label.backgroundColor = .lightGray
            label.heightAnchor.constraint(equalToConstant: 50).isActive = true
            stackView.addArrangedSubview(label)
        }
    }
}
f:T6ed,import UIKit

class ViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        // ScrollView 설정
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])

        // StackView 설정
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])

        // 샘플 데이터 추가
        for i in 1...20 {
            let label = UILabel()
            label.text = "Item \(i)"
            label.textAlignment = .center
            label.backgroundColor = .lightGray
            label.heightAnchor.constraint(equalToConstant: 50).isActive = true
            stackView.addArrangedSubview(label)
        }
    }
}
10:T723,import UIKit

class ViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        setupScrollView()
        setupStackView()
        addSampleData()
    }

    private func setupScrollView() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }

    private func setupStackView() {
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])
    }

    private func addSampleData() {
        for i in 1...20 {
            let customView = CustomView()
            customView.configure(text: "Item \(i)")
            customView.heightAnchor.constraint(equalToConstant: 50).isActive = true
            stackView.addArrangedSubview(customView)
        }
    }
}
11:T723,import UIKit

class ViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        setupScrollView()
        setupStackView()
        addSampleData()
    }

    private func setupScrollView() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }

    private func setupStackView() {
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])
    }

    private func addSampleData() {
        for i in 1...20 {
            let customView = CustomView()
            customView.configure(text: "Item \(i)")
            customView.heightAnchor.constraint(equalToConstant: 50).isActive = true
            stackView.addArrangedSubview(customView)
        }
    }
}
12:T7ca,import UIKit

class HorizontalViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        setupScrollView()
        setupStackView()
        addSampleData()
    }

    private func setupScrollView() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        scrollView.showsHorizontalScrollIndicator = true
        scrollView.contentSize = CGSize(width: view.frame.width * 2, height: view.frame.height)
    }

    private func setupStackView() {
        stackView.axis = .horizontal
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.heightAnchor.constraint(equalTo: scrollView.heightAnchor)
        ])
    }

    private func addSampleData() {
        for i in 1...10 {
            let customView = CustomView()
            customView.configure(text: "Item \(i)")
            customView.widthAnchor.constraint(equalToConstant: 150).isActive = true
            stackView.addArrangedSubview(customView)
        }
    }
}
13:T7ca,import UIKit

class HorizontalViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        setupScrollView()
        setupStackView()
        addSampleData()
    }

    private func setupScrollView() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        scrollView.showsHorizontalScrollIndicator = true
        scrollView.contentSize = CGSize(width: view.frame.width * 2, height: view.frame.height)
    }

    private func setupStackView() {
        stackView.axis = .horizontal
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.heightAnchor.constraint(equalTo: scrollView.heightAnchor)
        ])
    }

    private func addSampleData() {
        for i in 1...10 {
            let customView = CustomView()
            customView.configure(text: "Item \(i)")
            customView.widthAnchor.constraint(equalToConstant: 150).isActive = true
            stackView.addArrangedSubview(customView)
        }
    }
}
14:T7bf,class ViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        setupScrollView()
        setupStackView()
        addSampleData()
    }

    private func setupScrollView() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }

    private func setupStackView() {
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])
    }

    private func addSampleData() {
        for i in 1...20 {
            let customView = CustomView()
            customView.configure(text: "Item \(i)")
            custom

View.heightAnchor.constraint(equalToConstant: 50).isActive = true
            customView.tag = i
            stackView.addArrangedSubview(customView)
        }
    }

    func getViewByTag(tag: Int) -> CustomView? {
        return stackView.arrangedSubviews.first { $0.tag == tag } as? CustomView
    }
}
15:T7bf,class ViewController: UIViewController {

    let scrollView = UIScrollView()
    let stackView = UIStackView()

    override func viewDidLoad() {
        super.viewDidLoad()

        setupScrollView()
        setupStackView()
        addSampleData()
    }

    private func setupScrollView() {
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: view.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }

    private func setupStackView() {
        stackView.axis = .vertical
        stackView.distribution = .fill
        stackView.alignment = .fill
        stackView.spacing = 10
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)
        ])
    }

    private func addSampleData() {
        for i in 1...20 {
            let customView = CustomView()
            customView.configure(text: "Item \(i)")
            custom

View.heightAnchor.constraint(equalToConstant: 50).isActive = true
            customView.tag = i
            stackView.addArrangedSubview(customView)
        }
    }

    func getViewByTag(tag: Int) -> CustomView? {
        return stackView.arrangedSubviews.first { $0.tag == tag } as? CustomView
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함)"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함)"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-07"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"6385a669","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"iOS 개발에서는 UITableView와 UICollectionView가 자주 사용되지만, 특정 상황에서는 UIScrollView와 UIStackView를 조합하여 이들 기능을 직접 구현해야 할 때가 있습니다. 이 글에서는 Swift를 사용해 UIScrollView와 UIStackView를 이용하여 UITableView와 UICollectionView와 유사한 기능을 어떻게 구현할 수 있는지 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"80b6855c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. 프로젝트 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, Xcode에서 새로운 프로젝트를 생성하고, Single View App 템플릿을 선택합니다. 프로젝트가 생성되면, Main.storyboard를 열고 ViewController에 UIScrollView와 UIStackView를 추가합니다."}],"\n",["$","h3",null,{"id":"7aa939b0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. UIScrollView와 UIStackView 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIScrollView는 콘텐츠가 화면을 벗어날 때 스크롤할 수 있도록 해주는 컨테이너 뷰입니다. UIStackView는 여러 뷰를 수직 또는 수평으로 정렬할 수 있도록 도와줍니다. 이번 예제에서는 UIStackView를 UIScrollView의 자식으로 추가하여, 스크롤 가능한 콘텐츠를 만듭니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":14,"column":1,"offset":692},"end":{"line":61,"column":4,"offset":2455}}},"children":"$f"}}]}],"\n",["$","h3",null,{"id":"8f787319","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. UITableView와 유사한 기능 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UITableView의 대표적인 기능 중 하나는 셀을 재사용할 수 있다는 점입니다. 이를 구현하기 위해 재사용 가능한 커스텀 뷰를 만들어야 합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nclass CustomView: UIView {\n\n    let label = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupView() {\n        label.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 10),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -10),\n            label.topAnchor.constraint(equalTo: topAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n        label.textAlignment = .center\n        backgroundColor = .lightGray\n    }\n\n    func configure(text: String) {\n        label.text = text\n    }\n}\n"}],"position":{"start":{"line":67,"column":1,"offset":2572},"end":{"line":100,"column":4,"offset":3465}}},"children":"import UIKit\n\nclass CustomView: UIView {\n\n    let label = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupView() {\n        label.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 10),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -10),\n            label.topAnchor.constraint(equalTo: topAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n        label.textAlignment = .center\n        backgroundColor = .lightGray\n    }\n\n    func configure(text: String) {\n        label.text = text\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 CustomView를 사용하여 UIStackView에 추가해 보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":104,"column":1,"offset":3512},"end":{"line":156,"column":4,"offset":5351}}},"children":"$11"}}]}],"\n",["$","h3",null,{"id":"48569841","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4. UICollectionView와 유사한 기능 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UICollectionView는 수평 및 수직 스크롤이 가능합니다. 이를 구현하기 위해 UIScrollView의 contentSize를 조정하고, 가로 방향으로 UIStackView를 구성합니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$12"}],"position":{"start":{"line":162,"column":1,"offset":5500},"end":{"line":216,"column":4,"offset":7506}}},"children":"$13"}}]}],"\n",["$","h3",null,{"id":"b33c7e49","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"5. 태그를 사용한 뷰 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"뷰 태그를 사용하여 특정 뷰를 관리할 수 있습니다. 예를 들어, 특정 아이템을 선택할 때 태그를 이용해 쉽게 접근할 수 있습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$14"}],"position":{"start":{"line":222,"column":1,"offset":7603},"end":{"line":279,"column":4,"offset":9598}}},"children":"$15"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"getViewByTag","position":{"start":{"line":281,"column":9,"offset":9608},"end":{"line":281,"column":23,"offset":9622}}}],"position":{"start":{"line":281,"column":9,"offset":9608},"end":{"line":281,"column":23,"offset":9622}}},"children":"getViewByTag"}}]," 메소드를 사용하여 특정 태그를 가진 뷰를 쉽게 가져올 수 있습니다."]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIScrollView와 UIStackView를 사용하여 UITableView와 UICollectionView와 같은 기능을 구현하는 방법을 살펴보았습니다. 이 접근 방식은 재사용 가능한 커스텀 뷰와 뷰 태그를 활용하여 효율적인 스크롤과 뷰 관리를 가능하게 합니다. 이 방법을 통해 유연하게 사용자 인터페이스를 구성하고, 다양한 스크롤 뷰를 구현할 수 있습니다."}]]}]}],["$","$L16",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L17",null,{"articleTitle":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함)","toc":[{"tagName":"h2","title":"Swift로 UIScrollView와 UIStackView를 활용해 UITableView 및 UICollectionView 기능 구현하기 (뷰 태그와 가로 스크롤 포함)","id":"6385a669"},{"tagName":"h3","title":"1. 프로젝트 설정","id":"80b6855c"},{"tagName":"h3","title":"2. UIScrollView와 UIStackView 설정","id":"7aa939b0"},{"tagName":"h3","title":"3. UITableView와 유사한 기능 구현","id":"8f787319"},{"tagName":"h3","title":"4. UICollectionView와 유사한 기능 구현","id":"48569841"},{"tagName":"h3","title":"5. 태그를 사용한 뷰 관리","id":"b33c7e49"},{"tagName":"h3","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
