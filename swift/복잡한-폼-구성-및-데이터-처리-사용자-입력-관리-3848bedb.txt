1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8F%BC-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9E%85%EB%A0%A5-%EA%B4%80%EB%A6%AC-3848bedb","d"],{"children":["__PAGE__?{\"slug\":\"복잡한-폼-구성-및-데이터-처리-사용자-입력-관리-3848bedb\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8F%BC-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9E%85%EB%A0%A5-%EA%B4%80%EB%A6%AC-3848bedb","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"복잡한-폼-구성-및-데이터-처리-사용자-입력-관리-3848bedb\"}"},"styles":[]}],"segment":["slug","%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8F%BC-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9E%85%EB%A0%A5-%EA%B4%80%EB%A6%AC-3848bedb","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift를 통한 복잡한 폼 구성 및 데이터 처리 방법에 대해 다룹니다. 사용자 입력 관리를 효과적으로 할 수 있는 테크닉과 예제를 포함한 자세한 설명을 제공합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Form Handling,Data Processing,User Input"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8F%BC-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9E%85%EB%A0%A5-%EA%B4%80%EB%A6%AC-3848bedb"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift를 통한 복잡한 폼 구성 및 데이터 처리 방법에 대해 다룹니다. 사용자 입력 관리를 효과적으로 할 수 있는 테크닉과 예제를 포함한 자세한 설명을 제공합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EB%B3%B5%EC%9E%A1%ED%95%9C-%ED%8F%BC-%EA%B5%AC%EC%84%B1-%EB%B0%8F-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9E%85%EB%A0%A5-%EA%B4%80%EB%A6%AC-3848bedb"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift를 통한 복잡한 폼 구성 및 데이터 처리 방법에 대해 다룹니다. 사용자 입력 관리를 효과적으로 할 수 있는 테크닉과 예제를 포함한 자세한 설명을 제공합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T671,struct SimpleForm: View {
    @State private var name: String = ""
    @State private var age: String = ""
    @State private var email: String = ""
    @State private var errorMessage: String? = nil

    var body: some View {
        Form {
            Section(header: Text("Personal Information")) {
                TextField("Name", text: $name)
                TextField("Age", text: $age)
                TextField("Email", text: $email)
            }
            if let errorMessage = errorMessage {
                Text(errorMessage).foregroundColor(.red)
            }
            Button("Submit") {
                if validateForm() {
                    submitForm()
                }
            }
        }
    }

    private func validateForm() -> Bool {
        guard !name.isEmpty else {
            errorMessage = "Name is required."
            return false
        }
        guard let ageNumber = Int(age), ageNumber > 0 else {
            errorMessage = "Age must be a positive number."
            return false
        }
        guard isValidEmail(email) else {
            errorMessage = "Invalid email format."
            return false
        }
        errorMessage = nil
        return true
    }

    private func isValidEmail(_ email: String) -> Bool {
        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}" // 이메일 정규식
        let emailPredicate = NSPredicate(format: "SELF MATCHES %@", emailRegex)
        return emailPredicate.evaluate(with: email)
    }

    private func submitForm() {
        print("Name: \(name)")
        print("Age: \(age)")
        print("Email: \(email)")
    }
}
f:T671,struct SimpleForm: View {
    @State private var name: String = ""
    @State private var age: String = ""
    @State private var email: String = ""
    @State private var errorMessage: String? = nil

    var body: some View {
        Form {
            Section(header: Text("Personal Information")) {
                TextField("Name", text: $name)
                TextField("Age", text: $age)
                TextField("Email", text: $email)
            }
            if let errorMessage = errorMessage {
                Text(errorMessage).foregroundColor(.red)
            }
            Button("Submit") {
                if validateForm() {
                    submitForm()
                }
            }
        }
    }

    private func validateForm() -> Bool {
        guard !name.isEmpty else {
            errorMessage = "Name is required."
            return false
        }
        guard let ageNumber = Int(age), ageNumber > 0 else {
            errorMessage = "Age must be a positive number."
            return false
        }
        guard isValidEmail(email) else {
            errorMessage = "Invalid email format."
            return false
        }
        errorMessage = nil
        return true
    }

    private func isValidEmail(_ email: String) -> Bool {
        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}" // 이메일 정규식
        let emailPredicate = NSPredicate(format: "SELF MATCHES %@", emailRegex)
        return emailPredicate.evaluate(with: email)
    }

    private func submitForm() {
        print("Name: \(name)")
        print("Age: \(age)")
        print("Email: \(email)")
    }
}
10:T7f5,struct SimpleForm: View {
    @State private var name: String = UserDefaults.standard.string(forKey: "name") ?? ""
    @State private var age: String = UserDefaults.standard.string(forKey: "age") ?? ""
    @State private var email: String = UserDefaults.standard.string(forKey: "email") ?? ""
    @State private var errorMessage: String? = nil

    var body: some View {
        Form {
            Section(header: Text("Personal Information")) {
                TextField("Name", text: $name)
                TextField("Age", text: $age)
                TextField("Email", text: $email)
            }
            if let errorMessage = errorMessage {
                Text(errorMessage).foregroundColor(.red)
            }
            Button("Submit") {
                if validateForm() {
                    saveFormData()
                    submitForm()
                }
            }
        }
    }

    private func validateForm() -> Bool {
        guard !name.isEmpty else {
            errorMessage = "Name is required."
            return false
        }
        guard let ageNumber = Int(age), ageNumber > 0 else {
            errorMessage = "Age must be a positive number."
            return false
        }
        guard isValidEmail(email) else {
            errorMessage = "Invalid email format."
            return false
        }
        errorMessage = nil
        return true
    }

    private func isValidEmail(_ email: String) -> Bool {
        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}" // 이메일 정규식
        let emailPredicate = NSPredicate(format: "SELF MATCHES %@", emailRegex)
        return emailPredicate.evaluate(with: email)
    }

    private func saveFormData() {
        UserDefaults.standard.set(name, forKey: "name")
        UserDefaults.standard.set(age, forKey: "age")
        UserDefaults.standard.set(email, forKey: "email")
    }

    private func submitForm() {
        print("Name: \(name)")
        print("Age: \(age)")
        print("Email: \(email)")
    }
}
11:T7f5,struct SimpleForm: View {
    @State private var name: String = UserDefaults.standard.string(forKey: "name") ?? ""
    @State private var age: String = UserDefaults.standard.string(forKey: "age") ?? ""
    @State private var email: String = UserDefaults.standard.string(forKey: "email") ?? ""
    @State private var errorMessage: String? = nil

    var body: some View {
        Form {
            Section(header: Text("Personal Information")) {
                TextField("Name", text: $name)
                TextField("Age", text: $age)
                TextField("Email", text: $email)
            }
            if let errorMessage = errorMessage {
                Text(errorMessage).foregroundColor(.red)
            }
            Button("Submit") {
                if validateForm() {
                    saveFormData()
                    submitForm()
                }
            }
        }
    }

    private func validateForm() -> Bool {
        guard !name.isEmpty else {
            errorMessage = "Name is required."
            return false
        }
        guard let ageNumber = Int(age), ageNumber > 0 else {
            errorMessage = "Age must be a positive number."
            return false
        }
        guard isValidEmail(email) else {
            errorMessage = "Invalid email format."
            return false
        }
        errorMessage = nil
        return true
    }

    private func isValidEmail(_ email: String) -> Bool {
        let emailRegex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}" // 이메일 정규식
        let emailPredicate = NSPredicate(format: "SELF MATCHES %@", emailRegex)
        return emailPredicate.evaluate(with: email)
    }

    private func saveFormData() {
        UserDefaults.standard.set(name, forKey: "name")
        UserDefaults.standard.set(age, forKey: "age")
        UserDefaults.standard.set(email, forKey: "email")
    }

    private func submitForm() {
        print("Name: \(name)")
        print("Age: \(age)")
        print("Email: \(email)")
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-09"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"8a6fc8c8","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 사용자 입력을 관리하고 폼 데이터를 처리하는 것은 종종 복잡하게 느껴질 수 있습니다. 하지만 올바른 접근 방법만 알면 더 쉽게 다룰 수 있습니다. 이 글에서는 이를 위해 필요한 핵심 기술과 예제를 통해 복잡한 폼 구성 및 데이터 처리에 대해 심도 있게 설명합니다."}],"\n",["$","h2",null,{"id":"f01fe8e8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"폼 구성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 복잡한 폼을 구성하는 첫 번째 단계는 폼의 구조를 정의하는 것입니다. 이를 위해 SwiftUI와 UIKit 모두를 사용할 수 있습니다. 여기서는 SwiftUI를 사용하여 폼을 구성하는 방법에 대해 설명합니다. SwiftUI는 선언적 문법을 사용하여 코드량을 줄이고 유지보수성을 높여줍니다."}],"\n",["$","h3",null,{"id":"7d59c9bf","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"간단한 SwiftUI 폼 예제"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct SimpleForm: View {\n    @State private var name: String = \"\"\n    @State private var age: String = \"\"\n    @State private var email: String = \"\"\n\n    var body: some View {\n        Form {\n            Section(header: Text(\"Personal Information\")) {\n                TextField(\"Name\", text: $name)\n                TextField(\"Age\", text: $age)\n                TextField(\"Email\", text: $email)\n            }\n            Button(\"Submit\") {\n                submitForm()\n            }\n        }\n    }\n\n    private func submitForm() {\n        print(\"Name: \\(name)\")\n        print(\"Age: \\(age)\")\n        print(\"Email: \\(email)\")\n    }\n}\n\nstruct SimpleForm_Previews: PreviewProvider {\n    static var previews: some View {\n        SimpleForm()\n    }\n}\n"}],"position":{"start":{"line":12,"column":1,"offset":392},"end":{"line":45,"column":4,"offset":1163}}},"children":"import SwiftUI\n\nstruct SimpleForm: View {\n    @State private var name: String = \"\"\n    @State private var age: String = \"\"\n    @State private var email: String = \"\"\n\n    var body: some View {\n        Form {\n            Section(header: Text(\"Personal Information\")) {\n                TextField(\"Name\", text: $name)\n                TextField(\"Age\", text: $age)\n                TextField(\"Email\", text: $email)\n            }\n            Button(\"Submit\") {\n                submitForm()\n            }\n        }\n    }\n\n    private func submitForm() {\n        print(\"Name: \\(name)\")\n        print(\"Age: \\(age)\")\n        print(\"Email: \\(email)\")\n    }\n}\n\nstruct SimpleForm_Previews: PreviewProvider {\n    static var previews: some View {\n        SimpleForm()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 간단한 폼을 SwiftUI로 구성한 예제입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@State","position":{"start":{"line":47,"column":34,"offset":1198},"end":{"line":47,"column":42,"offset":1206}}}],"position":{"start":{"line":47,"column":34,"offset":1198},"end":{"line":47,"column":42,"offset":1206}}},"children":"@State"}}]," 변수를 사용하여 필드의 상태를 관리하며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TextField","position":{"start":{"line":47,"column":66,"offset":1230},"end":{"line":47,"column":77,"offset":1241}}}],"position":{"start":{"line":47,"column":66,"offset":1230},"end":{"line":47,"column":77,"offset":1241}}},"children":"TextField"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Button","position":{"start":{"line":47,"column":79,"offset":1243},"end":{"line":47,"column":87,"offset":1251}}}],"position":{"start":{"line":47,"column":79,"offset":1243},"end":{"line":47,"column":87,"offset":1251}}},"children":"Button"}}],"을 사용하여 폼을 구성합니다."]}],"\n",["$","h2",null,{"id":"bf282e96","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"데이터 유효성 검사"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"폼 입력을 처리할 때 중요한 단계는 데이터 유효성 검사입니다. 유효성 검사를 통해 사용자로부터 올바른 데이터를 입력받을 수 있습니다. 이 예제에서는 이메일 형식과 나이의 범위를 확인하는 유효성 검사 로직을 추가합니다."}],"\n",["$","h3",null,{"id":"f6a10442","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 유효성 검사 예제"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":55,"column":1,"offset":1426},"end":{"line":109,"column":4,"offset":3075}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 이메일 포맷을 확인하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isValidEmail","position":{"start":{"line":111,"column":20,"offset":3096},"end":{"line":111,"column":34,"offset":3110}}}],"position":{"start":{"line":111,"column":20,"offset":3096},"end":{"line":111,"column":34,"offset":3110}}},"children":"isValidEmail"}}]," 함수를 사용하여 이메일이 유효한지 검사하고, 나이를 양수로 입력했는지 확인하는 예제입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"validateForm","position":{"start":{"line":111,"column":86,"offset":3162},"end":{"line":111,"column":100,"offset":3176}}}],"position":{"start":{"line":111,"column":86,"offset":3162},"end":{"line":111,"column":100,"offset":3176}}},"children":"validateForm"}}]," 함수는 각 필드를 유효성 검사하고, 오류 메시지를 표시합니다."]}],"\n",["$","h2",null,{"id":"a750c79d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"사용자 입력 저장"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["사용자 입력을 적절히 관리하려면 폼 데이터를 저장하고, 필요에 따라 이를 재사용할 수 있어야 합니다. 이를 위해 Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserDefaults","position":{"start":{"line":115,"column":71,"offset":3297},"end":{"line":115,"column":85,"offset":3311}}}],"position":{"start":{"line":115,"column":71,"offset":3297},"end":{"line":115,"column":85,"offset":3311}}},"children":"UserDefaults"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CoreData","position":{"start":{"line":115,"column":87,"offset":3313},"end":{"line":115,"column":97,"offset":3323}}}],"position":{"start":{"line":115,"column":87,"offset":3313},"end":{"line":115,"column":97,"offset":3323}}},"children":"CoreData"}}],", 또는 서버와의 통신을 통해 데이터를 저장할 수 있습니다. 여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserDefaults","position":{"start":{"line":115,"column":136,"offset":3362},"end":{"line":115,"column":150,"offset":3376}}}],"position":{"start":{"line":115,"column":136,"offset":3362},"end":{"line":115,"column":150,"offset":3376}}},"children":"UserDefaults"}}],"를 사용하여 데이터를 저장하는 예제를 보겠습니다."]}],"\n",["$","h3",null,{"id":"794e0473","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용자 입력 저장 예제"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":119,"column":1,"offset":3423},"end":{"line":180,"column":4,"offset":5460}}},"children":"$11"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 사용자 입력 데이터를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserDefaults","position":{"start":{"line":182,"column":21,"offset":5482},"end":{"line":182,"column":35,"offset":5496}}}],"position":{"start":{"line":182,"column":21,"offset":5482},"end":{"line":182,"column":35,"offset":5496}}},"children":"UserDefaults"}}],"에 저장하고, 앱이 다시 실행될 때 저장된 데이터를 자동으로 불러옵니다. 이는 데이터 지속성을 제공하여 사용자 경험을 향상시킵니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 복잡한 폼을 구성하고 데이터 처리를 관리하는 것은 그리 어렵지 않습니다. SwiftUI를 사용하면 선언적 문법과 상태 관리를 통해 더 간단하게 폼을 만들고 처리할 수 있습니다. 중요한 것은 올바른 유효성 검사와 데이터 저장 메커니즘을 사용하는 것입니다. 이 글에서 다룬 예제를 통해 SwiftUI에서의 폼 처리에 대한 이해를 높이고 실제 프로젝트에서 적용해 보시기 바랍니다."}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리","toc":[{"tagName":"h1","title":"복잡한 폼 구성 및 데이터 처리: 사용자 입력 관리","id":"8a6fc8c8"},{"tagName":"h2","title":"폼 구성","id":"f01fe8e8"},{"tagName":"h3","title":"간단한 SwiftUI 폼 예제","id":"7d59c9bf"},{"tagName":"h2","title":"데이터 유효성 검사","id":"bf282e96"},{"tagName":"h3","title":"데이터 유효성 검사 예제","id":"f6a10442"},{"tagName":"h2","title":"사용자 입력 저장","id":"a750c79d"},{"tagName":"h3","title":"사용자 입력 저장 예제","id":"794e0473"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
