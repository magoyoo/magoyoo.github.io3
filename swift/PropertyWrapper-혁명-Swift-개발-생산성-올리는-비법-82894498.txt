1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","PropertyWrapper-%ED%98%81%EB%AA%85-Swift-%EA%B0%9C%EB%B0%9C-%EC%83%9D%EC%82%B0%EC%84%B1-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B9%84%EB%B2%95-82894498","d"],{"children":["__PAGE__?{\"slug\":\"PropertyWrapper-혁명-Swift-개발-생산성-올리는-비법-82894498\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","PropertyWrapper-%ED%98%81%EB%AA%85-Swift-%EA%B0%9C%EB%B0%9C-%EC%83%9D%EC%82%B0%EC%84%B1-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B9%84%EB%B2%95-82894498","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"PropertyWrapper-혁명-Swift-개발-생산성-올리는-비법-82894498\"}"},"styles":[]}],"segment":["slug","PropertyWrapper-%ED%98%81%EB%AA%85-Swift-%EA%B0%9C%EB%B0%9C-%EC%83%9D%EC%82%B0%EC%84%B1-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B9%84%EB%B2%95-82894498","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법! | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift의 Property Wrapper 기능을 설명하고, 이를 통해 개발 생산성을 극대화하는 방법에 대해 다룹니다. 프로퍼티 래퍼를 사용하면 코드의 재사용성과 가독성을 높일 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,PropertyWrapper,개발 생산성,iOS"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/PropertyWrapper-%ED%98%81%EB%AA%85-Swift-%EA%B0%9C%EB%B0%9C-%EC%83%9D%EC%82%B0%EC%84%B1-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B9%84%EB%B2%95-82894498"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법! | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법! | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift의 Property Wrapper 기능을 설명하고, 이를 통해 개발 생산성을 극대화하는 방법에 대해 다룹니다. 프로퍼티 래퍼를 사용하면 코드의 재사용성과 가독성을 높일 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/PropertyWrapper-%ED%98%81%EB%AA%85-Swift-%EA%B0%9C%EB%B0%9C-%EC%83%9D%EC%82%B0%EC%84%B1-%EC%98%AC%EB%A6%AC%EB%8A%94-%EB%B9%84%EB%B2%95-82894498"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법! | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift의 Property Wrapper 기능을 설명하고, 이를 통해 개발 생산성을 극대화하는 방법에 대해 다룹니다. 프로퍼티 래퍼를 사용하면 코드의 재사용성과 가독성을 높일 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-11"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"2e1e83a7","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift는 애플이 개발한 강력한 프로그래밍 언어로, iOS와 macOS 개발에 주로 사용됩니다. Swift 5.1에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Property Wrapper","position":{"start":{"line":4,"column":69,"offset":118},"end":{"line":4,"column":87,"offset":136}}}],"position":{"start":{"line":4,"column":69,"offset":118},"end":{"line":4,"column":87,"offset":136}}},"children":"Property Wrapper"}}],"라는 강력한 기능이 도입되었습니다. 이를 통해 개발 생산성을 크게 향상시킬 수 있습니다. 이 글에서는 Property Wrapper의 기본 개념, 사용법, 그리고 이를 통해 어떻게 생산성을 향상시킬 수 있는지에 대해 자세히 살펴보겠습니다."]}],"\n",["$","h2",null,{"id":"e0b1e8da","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Property Wrapper란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Property Wrapper는 Swift 5.1에서 도입된 기능으로, 프로퍼티의 값을 저장하거나, 검증하거나, 수정하는 공통 로직을 추출하여 재사용할 수 있게 만들어주는 도구입니다. 말하자면, 프로퍼티를 위한 데코레이터(Decorator)입니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기본적인 예로, 사용자의 나이를 저장하는 프로퍼티가 있다고 가정해봅시다. 이 프로퍼티는 0에서 120 사이의 값만 유효하다고 합시다. 이를 Property Wrapper를 사용하여 구현하면 다음과 같습니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@propertyWrapper\nstruct ValidatedAge {\n    private var value: Int\n    \n    var wrappedValue: Int {\n        get { value }\n        set { value = max(0, min(newValue, 120)) }\n    }\n    \n    init(wrappedValue: Int) {\n        self.value = wrappedValue\n    }\n}\n\nstruct Person {\n    @ValidatedAge var age: Int\n}\n\nlet person = Person(age: 130)\nprint(person.age) // 출력: 120 (최대값으로 조정됨)\n"}],"position":{"start":{"line":12,"column":1,"offset":551},"end":{"line":33,"column":4,"offset":940}}},"children":"@propertyWrapper\nstruct ValidatedAge {\n    private var value: Int\n    \n    var wrappedValue: Int {\n        get { value }\n        set { value = max(0, min(newValue, 120)) }\n    }\n    \n    init(wrappedValue: Int) {\n        self.value = wrappedValue\n    }\n}\n\nstruct Person {\n    @ValidatedAge var age: Int\n}\n\nlet person = Person(age: 130)\nprint(person.age) // 출력: 120 (최대값으로 조정됨)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ValidatedAge","position":{"start":{"line":35,"column":8,"offset":949},"end":{"line":35,"column":22,"offset":963}}}],"position":{"start":{"line":35,"column":8,"offset":949},"end":{"line":35,"column":22,"offset":963}}},"children":"ValidatedAge"}}],"는 Property Wrapper입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wrappedValue","position":{"start":{"line":35,"column":45,"offset":986},"end":{"line":35,"column":59,"offset":1000}}}],"position":{"start":{"line":35,"column":45,"offset":986},"end":{"line":35,"column":59,"offset":1000}}},"children":"wrappedValue"}}]," 프로퍼티를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age","position":{"start":{"line":35,"column":69,"offset":1010},"end":{"line":35,"column":74,"offset":1015}}}],"position":{"start":{"line":35,"column":69,"offset":1010},"end":{"line":35,"column":74,"offset":1015}}},"children":"age"}}]," 값이 자동으로 유효한 범위로 조정되는 것을 볼 수 있습니다. 프로퍼티에 직접 접근하지 않고도 유효성 검사를 할 수 있어 코드의 가독성과 유지보수성이 높아집니다."]}],"\n",["$","h2",null,{"id":"98cdf606","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Property Wrapper로 생산성 향상하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Property Wrapper를 활용하면 코드의 재사용성을 높이고, 중복 코드를 줄이며, 개발 속도를 크게 향상시킬 수 있습니다. 아래는 다양한 상황에서 Property Wrapper를 활용하는 방법들입니다."}],"\n",["$","h3",null,{"id":"4f9433ad","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UserDefaults와의 연동"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 앱 개발에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserDefaults","position":{"start":{"line":43,"column":12,"offset":1290},"end":{"line":43,"column":26,"offset":1304}}}],"position":{"start":{"line":43,"column":12,"offset":1290},"end":{"line":43,"column":26,"offset":1304}}},"children":"UserDefaults"}}],"를 통해 간편하게 데이터를 저장하고 불러올 수 있습니다. 이를 Property Wrapper로 래핑하면 더욱 편리하게 사용할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@propertyWrapper\nstruct UserDefault<T> {\n    let key: String\n    let defaultValue: T\n    \n    var wrappedValue: T {\n        get { UserDefaults.standard.object(forKey: key) as? T ?? defaultValue }\n        set { UserDefaults.standard.set(newValue, forKey: key) }\n    }\n}\n\nstruct Settings {\n    @UserDefault(key: \"username\", defaultValue: \"Guest\")\n    static var username: String\n    \n    @UserDefault(key: \"isLoggedIn\", defaultValue: false)\n    static var isLoggedIn: Bool\n}\n\nprint(Settings.username) // 출력: Guest\nSettings.username = \"Alice\"\nprint(Settings.username) // 출력: Alice\n"}],"position":{"start":{"line":45,"column":1,"offset":1383},"end":{"line":68,"column":4,"offset":1973}}},"children":"@propertyWrapper\nstruct UserDefault<T> {\n    let key: String\n    let defaultValue: T\n    \n    var wrappedValue: T {\n        get { UserDefaults.standard.object(forKey: key) as? T ?? defaultValue }\n        set { UserDefaults.standard.set(newValue, forKey: key) }\n    }\n}\n\nstruct Settings {\n    @UserDefault(key: \"username\", defaultValue: \"Guest\")\n    static var username: String\n    \n    @UserDefault(key: \"isLoggedIn\", defaultValue: false)\n    static var isLoggedIn: Bool\n}\n\nprint(Settings.username) // 출력: Guest\nSettings.username = \"Alice\"\nprint(Settings.username) // 출력: Alice\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserDefault","position":{"start":{"line":70,"column":9,"offset":1983},"end":{"line":70,"column":22,"offset":1996}}}],"position":{"start":{"line":70,"column":9,"offset":1983},"end":{"line":70,"column":22,"offset":1996}}},"children":"UserDefault"}}],"라는 Property Wrapper를 생성하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserDefaults","position":{"start":{"line":70,"column":48,"offset":2022},"end":{"line":70,"column":62,"offset":2036}}}],"position":{"start":{"line":70,"column":48,"offset":2022},"end":{"line":70,"column":62,"offset":2036}}},"children":"UserDefaults"}}],"에 데이터를 쉽게 저장하고 불러올 수 있게 했습니다. 이처럼 Property Wrapper를 사용하면 반복되는 작업을 단순화하고, 코드의 읽기와 유지보수가 간편해집니다."]}],"\n",["$","h3",null,{"id":"aac9d85b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 인코딩과 디코딩"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"API와 통신할 때 자주 사용하는 작업 중 하나는 데이터를 인코딩하거나 디코딩하는 것입니다. 이러한 작업도 Property Wrapper를 통해 쉽게 처리할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"@propertyWrapper\nstruct CodableWrapper<T: Codable> {\n    var wrappedValue: T\n    \n    init(wrappedValue: T) {\n        self.wrappedValue = wrappedValue\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.singleValueContainer()\n        self.wrappedValue = try container.decode(T.self)\n    }\n    \n    func encode(to encoder: Encoder) throws {\n        var container = encoder.singleValueContainer()\n        try container.encode(wrappedValue)\n    }\n}\n\nstruct User: Codable {\n    @CodableWrapper var name: String\n    @CodableWrapper var age: Int\n}\n"}],"position":{"start":{"line":76,"column":1,"offset":2247},"end":{"line":100,"column":4,"offset":2837}}},"children":"@propertyWrapper\nstruct CodableWrapper<T: Codable> {\n    var wrappedValue: T\n    \n    init(wrappedValue: T) {\n        self.wrappedValue = wrappedValue\n    }\n    \n    init(from decoder: Decoder) throws {\n        let container = try decoder.singleValueContainer()\n        self.wrappedValue = try container.decode(T.self)\n    }\n    \n    func encode(to encoder: Encoder) throws {\n        var container = encoder.singleValueContainer()\n        try container.encode(wrappedValue)\n    }\n}\n\nstruct User: Codable {\n    @CodableWrapper var name: String\n    @CodableWrapper var age: Int\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CodableWrapper","position":{"start":{"line":102,"column":9,"offset":2847},"end":{"line":102,"column":25,"offset":2863}}}],"position":{"start":{"line":102,"column":9,"offset":2847},"end":{"line":102,"column":25,"offset":2863}}},"children":"CodableWrapper"}}],"를 통해 인코딩과 디코딩 과정을 간단하게 처리합니다. 이 방법을 사용하면 우리의 모델이 보다 깔끔해지고, 인코딩과 디코딩 과정에서 발생할 수 있는 오류를 줄일 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Property Wrapper는 Swift에서 매우 강력한 기능으로, 프로퍼티의 상태를 관리하고, 밸리데이션을 수행하며, 다른 부가적인 로직을 추가하기에 매우 유용합니다. 이를 통해 코드를 보다 모듈화하고 재사용성을 높일 수 있으며, 중복 코드를 줄여 개발 생산성을 크게 향상시킬 수 있습니다. 다양한 상황에서 Property Wrapper를 적극적으로 활용하여, 코드의 품질을 높이고 개발 과정을 효율적으로 만들어 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!","toc":[{"tagName":"h1","title":"PropertyWrapper 혁명: Swift 개발 생산성 200% 올리는 비법!","id":"2e1e83a7"},{"tagName":"h2","title":"Property Wrapper란?","id":"e0b1e8da"},{"tagName":"h2","title":"Property Wrapper로 생산성 향상하기","id":"98cdf606"},{"tagName":"h3","title":"UserDefaults와의 연동","id":"4f9433ad"},{"tagName":"h3","title":"데이터 인코딩과 디코딩","id":"aac9d85b"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
