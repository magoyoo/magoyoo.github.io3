1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%98-%EB%A7%88%EB%B2%95-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9E%91%EC%9D%80-%EC%A1%B0%EA%B0%81%EC%9C%BC%EB%A1%9C-%ED%92%80%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B8%B0%EC%88%A0-44039c79","d"],{"children":["__PAGE__?{\"slug\":\"분할-정복의-마법-복잡한-문제를-작은-조각으로-풀어내는-기술-44039c79\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%98-%EB%A7%88%EB%B2%95-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9E%91%EC%9D%80-%EC%A1%B0%EA%B0%81%EC%9C%BC%EB%A1%9C-%ED%92%80%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B8%B0%EC%88%A0-44039c79","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"분할-정복의-마법-복잡한-문제를-작은-조각으로-풀어내는-기술-44039c79\"}"},"styles":[]}],"segment":["slug","%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%98-%EB%A7%88%EB%B2%95-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9E%91%EC%9D%80-%EC%A1%B0%EA%B0%81%EC%9C%BC%EB%A1%9C-%ED%92%80%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B8%B0%EC%88%A0-44039c79","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"분할 정복(디바이드 앤 컨커)은 복잡한 문제를 작은 부분으로 쪼개어 해결하는 프로그래밍 기법입니다. 이 글에서는 분할 정복의 기본 원리와 응용 방법을 실제 알고리즘 예시를 들어 자세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"알고리즘,분할 정복,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%98-%EB%A7%88%EB%B2%95-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9E%91%EC%9D%80-%EC%A1%B0%EA%B0%81%EC%9C%BC%EB%A1%9C-%ED%92%80%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B8%B0%EC%88%A0-44039c79"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"분할 정복(디바이드 앤 컨커)은 복잡한 문제를 작은 부분으로 쪼개어 해결하는 프로그래밍 기법입니다. 이 글에서는 분할 정복의 기본 원리와 응용 방법을 실제 알고리즘 예시를 들어 자세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5%EC%9D%98-%EB%A7%88%EB%B2%95-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%EC%9E%91%EC%9D%80-%EC%A1%B0%EA%B0%81%EC%9C%BC%EB%A1%9C-%ED%92%80%EC%96%B4%EB%82%B4%EB%8A%94-%EA%B8%B0%EC%88%A0-44039c79"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"분할 정복(디바이드 앤 컨커)은 복잡한 문제를 작은 부분으로 쪼개어 해결하는 프로그래밍 기법입니다. 이 글에서는 분할 정복의 기본 원리와 응용 방법을 실제 알고리즘 예시를 들어 자세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/defaultBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-15"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"83dc8461","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"분할 정복(혹은 디바이드 앤 컨커)은 복잡한 문제를 해결하는 데 매우 유용한 알고리즘 기법입니다. 이 방법론은 문제를 해결하기 위한 보편적이고 강력한 프레임워크로, 크고 복잡한 문제를 더 작고 단순한 문제로 분해한 다음, 각각의 작은 문제를 해결하고 다시 합치는 과정을 통해 전체 문제를 해결합니다. 이 글에서는 분할 정복의 기본 개념, 실제 활용 예시, 그리고 이를 구현하는 방법에 대해 다루도록 하겠습니다."}],"\n",["$","h2",null,{"id":"14857519","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"분할 정복의 기본 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"분할 정복의 기본 원리는 매우 간단합니다. 다음 세 가지 단계를 따릅니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"분할(Divide)"}],": 문제를 더 작은 여러 하위 문제로 나눕니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"정복(Conquer)"}],": 각 하위 문제를 재귀적으로 해결합니다. 부분 문제들이 충분히 작아질 때까지 이 과정을 반복합니다. 필요시 부분 문제는 직접 해결 가능합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"합치기(Combine)"}],": 각 하위 문제의 해답을 합쳐서 원래 문제의 해답을 구합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 방식은 특히 재귀적인 문제 해결 방식에서 그 진가를 발휘합니다. 분할 정복 알고리즘의 대표적인 예로는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"퀵 정렬(Quick Sort)","position":{"start":{"line":14,"column":60,"offset":588},"end":{"line":14,"column":78,"offset":606}}}],"position":{"start":{"line":14,"column":60,"offset":588},"end":{"line":14,"column":78,"offset":606}}},"children":"퀵 정렬(Quick Sort)"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"병합 정렬(Merge Sort)","position":{"start":{"line":14,"column":80,"offset":608},"end":{"line":14,"column":99,"offset":627}}}],"position":{"start":{"line":14,"column":80,"offset":608},"end":{"line":14,"column":99,"offset":627}}},"children":"병합 정렬(Merge Sort)"}}],", 그리고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"이진 탐색(Binary Search)","position":{"start":{"line":14,"column":105,"offset":633},"end":{"line":14,"column":127,"offset":655}}}],"position":{"start":{"line":14,"column":105,"offset":633},"end":{"line":14,"column":127,"offset":655}}},"children":"이진 탐색(Binary Search)"}}]," 등이 있습니다."]}],"\n",["$","h2",null,{"id":"d3fa58fe","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"대표적인 분할 정복 알고리즘 예시"}],"\n",["$","h3",null,{"id":"1bac3fe1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"퀵 정렬"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"퀵 정렬은 분할 정복을 기반으로 한 매우 효율적인 정렬 알고리즘입니다. 퀵 정렬의 과정은 다음과 같습니다:"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"기준점 선택(Pivot Selection)"}],": 배열에서 기준점을 하나 선택합니다. 보통 첫 번째 요소, 마지막 요소, 또는 랜덤하게 선택합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"분할(Divide)"}],": 기준점을 기준으로 해당 배열을 두 개의 하위 배열로 나눕니다. 왼쪽 부분 배열은 기준점보다 작거나 같은 요소로, 오른쪽 부분 배열은 기준점보다 큰 요소로 구성됩니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"재귀 호출(Conquer)"}],": 각 하위 배열에 대해 퀵 정렬을 재귀적으로 진행합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"합치기(Combine)"}],": 각 부분 배열을 합칩니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"퀵 정렬의 구현 예시는 아래와 같습니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n"}],"position":{"start":{"line":29,"column":1,"offset":1074},"end":{"line":38,"column":4,"offset":1364}}},"children":"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n"}}]}],"\n",["$","h3",null,{"id":"a4d8badf","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"병합 정렬"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"병합 정렬 역시 분할 정복을 사용하는 또 다른 효율적인 정렬 알고리즘입니다. 병합 정렬의 과정은 다음과 같습니다:"}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"분할(Divide)"}],": 배열을 동일한 크기의 두 개 부분 배열로 나눕니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"정복(Conquer)"}],": 각 부분 배열을 재귀적으로 병합 정렬을 이용해 정렬합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"합치기(Combine)"}],": 두 부분 배열을 합쳐서 하나의 정렬된 배열로 만듭니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"병합 정렬의 Python 구현 예시는 다음과 같습니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"}],"position":{"start":{"line":50,"column":1,"offset":1628},"end":{"line":76,"column":4,"offset":2156}}},"children":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"}}]}],"\n",["$","h2",null,{"id":"054339fe","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"이진 탐색"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이진 탐색은 이미 정렬된 배열에서 특정 값을 찾는 데 사용되는 매우 효율적인 알고리즘입니다. 이 알고리즘도 분할 정복 기법을 사용합니다. 이진 탐색의 과정은 다음과 같습니다:"}],"\n",["$","ol","ol-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"기준점 확인"}],": 배열의 중간 값을 기준점으로 선택합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"값 비교"}],": 기준점의 값과 찾고자 하는 값을 비교합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"재귀 호출"}],": 기준점의 값과 찾고자 하는 값이 다를 경우, 배열을 절반으로 나누어 재귀적으로 검색을 진행합니다. (값이 작으면 왼쪽, 크면 오른쪽)"]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이진 탐색의 Python 구현 예시는 다음과 같습니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n"}],"position":{"start":{"line":88,"column":1,"offset":2465},"end":{"line":102,"column":4,"offset":2774}}},"children":"def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n"}}]}],"\n",["$","h2",null,{"id":"387eeb4b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"복잡도 분석"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["분할 정복 알고리즘은 일반적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"로그","position":{"start":{"line":106,"column":19,"offset":2805},"end":{"line":106,"column":23,"offset":2809}}}],"position":{"start":{"line":106,"column":19,"offset":2805},"end":{"line":106,"column":23,"offset":2809}}},"children":"로그"}}]," 타입의 시간 복잡도를 가지며, 이는 매우 효율적입니다. 예를 들어, 병합 정렬과 퀵 정렬의 평균 시간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n log n)","position":{"start":{"line":106,"column":86,"offset":2872},"end":{"line":106,"column":98,"offset":2884}}}],"position":{"start":{"line":106,"column":86,"offset":2872},"end":{"line":106,"column":98,"offset":2884}}},"children":"O(n log n)"}}],"입니다. 반면에 이진 탐색의 시간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(log n)","position":{"start":{"line":106,"column":122,"offset":2908},"end":{"line":106,"column":132,"offset":2918}}}],"position":{"start":{"line":106,"column":122,"offset":2908},"end":{"line":106,"column":132,"offset":2918}}},"children":"O(log n)"}}],"입니다. 이는 이러한 알고리즘들이 매우 큰 데이터 집합에서도 효율적으로 처리할 수 있음을 의미합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"분할 정복은 다양하고 복잡한 문제를 해결하는 데 있어 강력한 도구입니다. 이를 통해 큰 문제를 작은 문제로 나누어 풀고, 다시 합치는 과정을 통해 전체 문제를 해결할 수 있습니다. 우리가 다룬 대표적인 알고리즘들인 퀵 정렬, 병합 정렬, 이진 탐색 모두 이 원리를 통해 높은 효율성을 자랑합니다. 이런 알고리즘들을 잘 이해하고 활용하면, 프로그래밍 문제를 보다 효과적으로 해결할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술","toc":[{"tagName":"h1","title":"분할 정복의 마법: 복잡한 문제를 작은 조각으로 풀어내는 기술","id":"83dc8461"},{"tagName":"h2","title":"분할 정복의 기본 원리","id":"14857519"},{"tagName":"h2","title":"대표적인 분할 정복 알고리즘 예시","id":"d3fa58fe"},{"tagName":"h3","title":"퀵 정렬","id":"1bac3fe1"},{"tagName":"h3","title":"병합 정렬","id":"a4d8badf"},{"tagName":"h2","title":"이진 탐색","id":"054339fe"},{"tagName":"h2","title":"복잡도 분석","id":"387eeb4b"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
