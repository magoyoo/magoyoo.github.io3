1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","JavaScript-Promises%EB%A1%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%B4%88%EB%B3%B4%EC%9E%90-%EA%B0%80%EC%9D%B4%EB%93%9C-5ee40f19","d"],{"children":["__PAGE__?{\"slug\":\"JavaScript-Promises로-비동기-작업-처리하기-초보자-가이드-5ee40f19\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","JavaScript-Promises%EB%A1%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%B4%88%EB%B3%B4%EC%9E%90-%EA%B0%80%EC%9D%B4%EB%93%9C-5ee40f19","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"JavaScript-Promises로-비동기-작업-처리하기-초보자-가이드-5ee40f19\"}"},"styles":[]}],"segment":["slug","JavaScript-Promises%EB%A1%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%B4%88%EB%B3%B4%EC%9E%90-%EA%B0%80%EC%9D%B4%EB%93%9C-5ee40f19","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 초보자들을 위해 JavaScript Promises를 사용하여 비동기 작업을 처리하는 방법을 자세히 설명합니다. Promises란 무엇인지, 왜 중요한지, 그리고 어떻게 사용하는지에 대해 다룹니다."}],["$","meta","3",{"name":"keywords","content":"JavaScript,Promises,비동기,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/JavaScript-Promises%EB%A1%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%B4%88%EB%B3%B4%EC%9E%90-%EA%B0%80%EC%9D%B4%EB%93%9C-5ee40f19"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 초보자들을 위해 JavaScript Promises를 사용하여 비동기 작업을 처리하는 방법을 자세히 설명합니다. Promises란 무엇인지, 왜 중요한지, 그리고 어떻게 사용하는지에 대해 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/JavaScript-Promises%EB%A1%9C-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%9E%91%EC%97%85-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%B4%88%EB%B3%B4%EC%9E%90-%EA%B0%80%EC%9D%B4%EB%93%9C-5ee40f19"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 초보자들을 위해 JavaScript Promises를 사용하여 비동기 작업을 처리하는 방법을 자세히 설명합니다. Promises란 무엇인지, 왜 중요한지, 그리고 어떻게 사용하는지에 대해 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-06"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fd4a928f","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["JavaScript에서 비동기 작업을 처리하는 것은 필수적인 능력입니다. 어떨 때는 서버에서 데이터를 가져오고, 때로는 긴 연산을 비동기적으로 처리해야 합니다. 비동기 작업을 효과적으로 다루기 위해 등장한 개념이 바로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promises","position":{"start":{"line":4,"column":123,"offset":168},"end":{"line":4,"column":133,"offset":178}}}],"position":{"start":{"line":4,"column":123,"offset":168},"end":{"line":4,"column":133,"offset":178}}},"children":"Promises"}}],"입니다. 이 가이드에서는 Promises가 무엇인지, 왜 중요한지, 그리고 이를 어떻게 사용할 수 있는지에 대해 자세히 설명하려고 합니다."]}],"\n",["$","h2",null,{"id":"93a845b5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Promises란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promises","position":{"start":{"line":8,"column":1,"offset":277},"end":{"line":8,"column":11,"offset":287}}}],"position":{"start":{"line":8,"column":1,"offset":277},"end":{"line":8,"column":11,"offset":287}}},"children":"Promises"}}],"는 JavaScript에서 비동기 작업을 처리하기 위한 객체입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise","position":{"start":{"line":8,"column":49,"offset":325},"end":{"line":8,"column":58,"offset":334}}}],"position":{"start":{"line":8,"column":49,"offset":325},"end":{"line":8,"column":58,"offset":334}}},"children":"Promise"}}]," 객체는 아직 완료되지 않은 작업의 최종 결과값을 나타냅니다. Promises는 주로 다음 세 가지 상태를 가집니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Pending (대기)"}],": 초기 상태, 아직 비동기 작업이 완료되지 않았습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Fulfilled (이행)"}],": 비동기 작업이 성공적으로 완료되었습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"Rejected (거부)"}],": 비동기 작업이 실패했습니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Promises는 한 번 처리되면(이행되거나 거부되면) 그 상태를 유지하며, 이후에는 변경되지 않습니다. 비동기 작업이 완료되면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"then","position":{"start":{"line":14,"column":73,"offset":609},"end":{"line":14,"column":79,"offset":615}}}],"position":{"start":{"line":14,"column":73,"offset":609},"end":{"line":14,"column":79,"offset":615}}},"children":"then"}}]," 메서드를 사용하여 이행된 결과값에 접근하거나, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch","position":{"start":{"line":14,"column":106,"offset":642},"end":{"line":14,"column":113,"offset":649}}}],"position":{"start":{"line":14,"column":106,"offset":642},"end":{"line":14,"column":113,"offset":649}}},"children":"catch"}}]," 메서드를 사용하여 거부된 이유를 처리할 수 있습니다."]}],"\n",["$","h3",null,{"id":"fc3a03ab","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 간단한 Promise 생성하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 간단한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise","position":{"start":{"line":18,"column":9,"offset":715},"end":{"line":18,"column":18,"offset":724}}}],"position":{"start":{"line":18,"column":9,"offset":715},"end":{"line":18,"column":18,"offset":724}}},"children":"Promise"}}]," 객체를 생성하는 예제입니다. 이 경우, Promise는 2초 후에 이행됩니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Promise 이행 완료!');\n  }, 2000);\n});\n\nmyPromise.then(result => {\n  console.log(result); // 'Promise 이행 완료!' 출력\n}).catch(error => {\n  console.error(error);\n});\n"}],"position":{"start":{"line":20,"column":1,"offset":770},"end":{"line":32,"column":4,"offset":1030}}},"children":"const myPromise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Promise 이행 완료!');\n  }, 2000);\n});\n\nmyPromise.then(result => {\n  console.log(result); // 'Promise 이행 완료!' 출력\n}).catch(error => {\n  console.error(error);\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setTimeout","position":{"start":{"line":34,"column":8,"offset":1039},"end":{"line":34,"column":20,"offset":1051}}}],"position":{"start":{"line":34,"column":8,"offset":1039},"end":{"line":34,"column":20,"offset":1051}}},"children":"setTimeout"}}]," 함수는 2초 후에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"resolve","position":{"start":{"line":34,"column":31,"offset":1062},"end":{"line":34,"column":40,"offset":1071}}}],"position":{"start":{"line":34,"column":31,"offset":1062},"end":{"line":34,"column":40,"offset":1071}}},"children":"resolve"}}]," 함수를 호출합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"then","position":{"start":{"line":34,"column":52,"offset":1083},"end":{"line":34,"column":58,"offset":1089}}}],"position":{"start":{"line":34,"column":52,"offset":1083},"end":{"line":34,"column":58,"offset":1089}}},"children":"then"}}]," 메서드는 Promise가 이행되었을 때 호출되며, 결과값을 인수로 받습니다."]}],"\n",["$","h2",null,{"id":"6bf1595a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"왜 Promises가 중요한가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promises","position":{"start":{"line":38,"column":1,"offset":1156},"end":{"line":38,"column":11,"offset":1166}}}],"position":{"start":{"line":38,"column":1,"offset":1156},"end":{"line":38,"column":11,"offset":1166}}},"children":"Promises"}}],"는 JavaScript에서 비동기 코드를 처리하는 방법을 개선하는 몇 가지 중요한 이유가 있습니다:"]}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"가독성 향상"}],": Promises는 콜백 헬(callback hell)을 جلوگیری하여 코드의 가독성을 높입니다. 콜백 헬은 중첩된 콜백 함수들로 인해 코드가 복잡해지는 현상을 말합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"에러 처리의 일관성"}],": Promises는 에러 처리를 구조화된 방식으로 처리할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch","position":{"start":{"line":41,"column":59,"offset":1393},"end":{"line":41,"column":66,"offset":1400}}}],"position":{"start":{"line":41,"column":59,"offset":1393},"end":{"line":41,"column":66,"offset":1400}}},"children":"catch"}}]," 메서드를 사용하면 항상 동일한 방식으로 에러를 처리할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"체이닝"}],": Promises는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"then","position":{"start":{"line":42,"column":23,"offset":1461},"end":{"line":42,"column":29,"offset":1467}}}],"position":{"start":{"line":42,"column":23,"offset":1461},"end":{"line":42,"column":29,"offset":1467}}},"children":"then"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch","position":{"start":{"line":42,"column":31,"offset":1469},"end":{"line":42,"column":38,"offset":1476}}}],"position":{"start":{"line":42,"column":31,"offset":1469},"end":{"line":42,"column":38,"offset":1476}}},"children":"catch"}}]," 메서드를 활용한 체이닝이 가능합니다. 여러 비동기 작업을 순차적으로 처리할 때 유용합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"01dd7467","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 콜백 헬과 Promise 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"콜백 헬의 예제를 먼저 살펴봅시다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"asyncFunction1(function(result1) {\n  asyncFunction2(result1, function(result2) {\n    asyncFunction3(result2, function(result3) {\n      console.log('최종 결과:', result3);\n    });\n  });\n});\n"}],"position":{"start":{"line":48,"column":1,"offset":1576},"end":{"line":56,"column":4,"offset":1778}}},"children":"asyncFunction1(function(result1) {\n  asyncFunction2(result1, function(result2) {\n    asyncFunction3(result2, function(result3) {\n      console.log('최종 결과:', result3);\n    });\n  });\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 같은 작업을 Promises를 사용하여 구현해 보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"asyncFunction1()\n  .then(result1 => asyncFunction2(result1))\n  .then(result2 => asyncFunction3(result2))\n  .then(result3 => {\n    console.log('최종 결과:', result3);\n  })\n  .catch(error => {\n    console.error('에러 발생:', error);\n  });\n"}],"position":{"start":{"line":60,"column":1,"offset":1817},"end":{"line":70,"column":4,"offset":2063}}},"children":"asyncFunction1()\n  .then(result1 => asyncFunction2(result1))\n  .then(result2 => asyncFunction3(result2))\n  .then(result3 => {\n    console.log('최종 결과:', result3);\n  })\n  .catch(error => {\n    console.error('에러 발생:', error);\n  });\n"}}]}],"\n",["$","h2",null,{"id":"70ff5f4a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Promise API"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Promises는 내장된 여러 메서드를 통해 강력하고 유연한 비동기 처리가 가능합니다. 그 중 몇 가지 주요 메서드를 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"da39a3ee","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise.all","position":{"start":{"line":76,"column":5,"offset":2161},"end":{"line":76,"column":18,"offset":2174}}}],"position":{"start":{"line":76,"column":5,"offset":2161},"end":{"line":76,"column":18,"offset":2174}}},"children":"Promise.all"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise.all","position":{"start":{"line":78,"column":1,"offset":2176},"end":{"line":78,"column":14,"offset":2189}}}],"position":{"start":{"line":78,"column":1,"offset":2176},"end":{"line":78,"column":14,"offset":2189}}},"children":"Promise.all"}}]," 메서드는 주어진 모든 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise","position":{"start":{"line":78,"column":27,"offset":2202},"end":{"line":78,"column":36,"offset":2211}}}],"position":{"start":{"line":78,"column":27,"offset":2202},"end":{"line":78,"column":36,"offset":2211}}},"children":"Promise"}}],"가 이행될 때까지 기다렸다가, 각각의 결과값을 배열로 반환합니다. 만약 하나라도 거부되면, 즉시 거부된 이유를 반환합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const promise1 = Promise.resolve(3);\nconst promise2 = new Promise((resolve, reject) => setTimeout(resolve, 2000, 'foo'));\nconst promise3 = 42;\n\nPromise.all([promise1, promise2, promise3]).then(values => {\n  console.log(values); // [3, 'foo', 42] 출력\n}).catch(error => {\n  console.error(error);\n});\n"}],"position":{"start":{"line":80,"column":1,"offset":2281},"end":{"line":90,"column":4,"offset":2595}}},"children":"const promise1 = Promise.resolve(3);\nconst promise2 = new Promise((resolve, reject) => setTimeout(resolve, 2000, 'foo'));\nconst promise3 = 42;\n\nPromise.all([promise1, promise2, promise3]).then(values => {\n  console.log(values); // [3, 'foo', 42] 출력\n}).catch(error => {\n  console.error(error);\n});\n"}}]}],"\n",["$","h3",null,{"id":"da39a3ee","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise.race","position":{"start":{"line":92,"column":5,"offset":2601},"end":{"line":92,"column":19,"offset":2615}}}],"position":{"start":{"line":92,"column":5,"offset":2601},"end":{"line":92,"column":19,"offset":2615}}},"children":"Promise.race"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise.race","position":{"start":{"line":94,"column":1,"offset":2617},"end":{"line":94,"column":15,"offset":2631}}}],"position":{"start":{"line":94,"column":1,"offset":2617},"end":{"line":94,"column":15,"offset":2631}}},"children":"Promise.race"}}]," 메서드는 가장 먼저 이행되거나 거부된 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise","position":{"start":{"line":94,"column":37,"offset":2653},"end":{"line":94,"column":46,"offset":2662}}}],"position":{"start":{"line":94,"column":37,"offset":2653},"end":{"line":94,"column":46,"offset":2662}}},"children":"Promise"}}],"의 결과값 또는 거부 이유를 반환합니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const promise1 = new Promise((resolve, reject) => setTimeout(resolve, 500, '1번 이행')); \nconst promise2 = new Promise((resolve, reject) => setTimeout(resolve, 100, '2번 이행'));\n\nPromise.race([promise1, promise2]).then(value => {\n  console.log(value); // '2번 이행' 출력\n}).catch(error => {\n  console.error(error);\n});\n"}],"position":{"start":{"line":96,"column":1,"offset":2686},"end":{"line":105,"column":4,"offset":3012}}},"children":"const promise1 = new Promise((resolve, reject) => setTimeout(resolve, 500, '1번 이행')); \nconst promise2 = new Promise((resolve, reject) => setTimeout(resolve, 100, '2번 이행'));\n\nPromise.race([promise1, promise2]).then(value => {\n  console.log(value); // '2번 이행' 출력\n}).catch(error => {\n  console.error(error);\n});\n"}}]}],"\n",["$","h3",null,{"id":"da39a3ee","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise.allSettled","position":{"start":{"line":107,"column":5,"offset":3018},"end":{"line":107,"column":25,"offset":3038}}}],"position":{"start":{"line":107,"column":5,"offset":3018},"end":{"line":107,"column":25,"offset":3038}}},"children":"Promise.allSettled"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise.allSettled","position":{"start":{"line":109,"column":1,"offset":3040},"end":{"line":109,"column":21,"offset":3060}}}],"position":{"start":{"line":109,"column":1,"offset":3040},"end":{"line":109,"column":21,"offset":3060}}},"children":"Promise.allSettled"}}]," 메서드는 주어진 모든 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise","position":{"start":{"line":109,"column":34,"offset":3073},"end":{"line":109,"column":43,"offset":3082}}}],"position":{"start":{"line":109,"column":34,"offset":3073},"end":{"line":109,"column":43,"offset":3082}}},"children":"Promise"}}],"가 이행되거나 거부될 때까지 기다립니다. 모든 결과를 객체 배열로 반환하며, 각각은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"status","position":{"start":{"line":109,"column":90,"offset":3129},"end":{"line":109,"column":98,"offset":3137}}}],"position":{"start":{"line":109,"column":90,"offset":3129},"end":{"line":109,"column":98,"offset":3137}}},"children":"status"}}]," 필드와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value","position":{"start":{"line":109,"column":103,"offset":3142},"end":{"line":109,"column":110,"offset":3149}}}],"position":{"start":{"line":109,"column":103,"offset":3142},"end":{"line":109,"column":110,"offset":3149}}},"children":"value"}}]," 또는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reason","position":{"start":{"line":109,"column":114,"offset":3153},"end":{"line":109,"column":122,"offset":3161}}}],"position":{"start":{"line":109,"column":114,"offset":3153},"end":{"line":109,"column":122,"offset":3161}}},"children":"reason"}}]," 필드를 가집니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const promise1 = Promise.resolve('이행됨');\nconst promise2 = Promise.reject('거부됨');\n\nPromise.allSettled([promise1, promise2]).then(results => {\n  results.forEach((result) => console.log(result.status));\n});\n// 출력: 'fulfilled', 'rejected'\n"}],"position":{"start":{"line":111,"column":1,"offset":3173},"end":{"line":119,"column":4,"offset":3425}}},"children":"const promise1 = Promise.resolve('이행됨');\nconst promise2 = Promise.reject('거부됨');\n\nPromise.allSettled([promise1, promise2]).then(results => {\n  results.forEach((result) => console.log(result.status));\n});\n// 출력: 'fulfilled', 'rejected'\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["JavaScript의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promises","position":{"start":{"line":123,"column":13,"offset":3446},"end":{"line":123,"column":23,"offset":3456}}}],"position":{"start":{"line":123,"column":13,"offset":3446},"end":{"line":123,"column":23,"offset":3456}}},"children":"Promises"}}],"는 비동기 작업을 좀 더 직관적이고 관리하기 쉽게 해주는 강력한 도구입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promises","position":{"start":{"line":123,"column":66,"offset":3499},"end":{"line":123,"column":76,"offset":3509}}}],"position":{"start":{"line":123,"column":66,"offset":3499},"end":{"line":123,"column":76,"offset":3509}}},"children":"Promises"}}],"를 이해하고 효과적으로 사용하는 것은 현대 JavaScript 개발자의 필수 능력 중 하나입니다. 이 가이드를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promises","position":{"start":{"line":123,"column":141,"offset":3574},"end":{"line":123,"column":151,"offset":3584}}}],"position":{"start":{"line":123,"column":141,"offset":3574},"end":{"line":123,"column":151,"offset":3584}}},"children":"Promises"}}],"의 기본 개념과 사용법을 이해하는 데 도움이 되었기를 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드","toc":[{"tagName":"h1","title":"JavaScript Promises로 비동기 작업 처리하기: 초보자 가이드","id":"fd4a928f"},{"tagName":"h2","title":"Promises란 무엇인가?","id":"93a845b5"},{"tagName":"h3","title":"예제: 간단한 Promise 생성하기","id":"fc3a03ab"},{"tagName":"h2","title":"왜 Promises가 중요한가?","id":"6bf1595a"},{"tagName":"h3","title":"예제: 콜백 헬과 Promise 비교","id":"01dd7467"},{"tagName":"h2","title":"Promise API","id":"70ff5f4a"},{"tagName":"h3","title":"$undefined","id":""},{"tagName":"h3","title":"$undefined","id":""},{"tagName":"h3","title":"$undefined","id":""},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
