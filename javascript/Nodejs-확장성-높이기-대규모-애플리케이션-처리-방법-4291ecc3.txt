1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-4291ecc3","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-확장성-높이기-대규모-애플리케이션-처리-방법-4291ecc3\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-4291ecc3","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-확장성-높이기-대규모-애플리케이션-처리-방법-4291ecc3\"}"},"styles":[]}],"segment":["slug","Nodejs-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-4291ecc3","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js 애플리케이션의 확장성을 높이는 방법에 대해 논의합니다. 여러가지 디자인 패턴과 아키텍처를 활용하여 대규모 애플리케이션을 효율적으로 처리하는 방법을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,확장성,대규모 애플리케이션,소프트웨어 아키텍처"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-4291ecc3"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js 애플리케이션의 확장성을 높이는 방법에 대해 논의합니다. 여러가지 디자인 패턴과 아키텍처를 활용하여 대규모 애플리케이션을 효율적으로 처리하는 방법을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%ED%99%95%EC%9E%A5%EC%84%B1-%EB%86%92%EC%9D%B4%EA%B8%B0-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%B2%98%EB%A6%AC-%EB%B0%A9%EB%B2%95-4291ecc3"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js 애플리케이션의 확장성을 높이는 방법에 대해 논의합니다. 여러가지 디자인 패턴과 아키텍처를 활용하여 대규모 애플리케이션을 효율적으로 처리하는 방법을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-28"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fdce6e2b","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js는 비동기 I/O와 단일 스레드 이벤트 루프 덕분에 고성능 웹 애플리케이션을 작성하는 데 좋은 선택입니다. 하지만 애플리케이션이 커지고 트래픽이 증가함에 따라 성능과 확장성 문제에 직면할 수 있습니다. 이 글에서는 Node.js 애플리케이션의 확장성을 높이기 위한 다양한 방법과 기술을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"dead741f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. 클러스터링을 통한 멀티 프로세싱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js는 단일 스레드로 작동하지만, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"클러스터 모듈","position":{"start":{"line":8,"column":25,"offset":264},"end":{"line":8,"column":34,"offset":273}}}],"position":{"start":{"line":8,"column":25,"offset":264},"end":{"line":8,"column":34,"offset":273}}},"children":"클러스터 모듈"}}],"을 사용하여 멀티 프로세싱을 구현할 수 있습니다. 클러스터링은 CPU 코어를 모두 활용하여 성능을 극대화하는 데 유용합니다. 간단한 예제는 다음과 같습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`마스터 프로세스 ID: ${process.pid}`);\n\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`워커 프로세스 ${worker.process.pid} 종료`);\n  });\n} else {\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello World\\n');\n  }).listen(8000);\n\n  console.log(`워커 프로세스 ID: ${process.pid}`);\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":362},"end":{"line":33,"column":4,"offset":899}}},"children":"const cluster = require('cluster');\nconst http = require('http');\nconst numCPUs = require('os').cpus().length;\n\nif (cluster.isMaster) {\n  console.log(`마스터 프로세스 ID: ${process.pid}`);\n\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  cluster.on('exit', (worker, code, signal) => {\n    console.log(`워커 프로세스 ${worker.process.pid} 종료`);\n  });\n} else {\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello World\\n');\n  }).listen(8000);\n\n  console.log(`워커 프로세스 ID: ${process.pid}`);\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드는 한 개의 마스터 프로세스와 여러 워커 프로세스를 생성하여 CPU 코어를 최대한 활용합니다."}],"\n",["$","h2",null,{"id":"6dde70df","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. 로드 밸런싱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["클러스터링 외에도 로드 밸런싱은 트래픽을 여러 서버에 분산시켜 확장성을 높이는 방법입니다. 대표적인 로드 밸런싱 기법에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Nginx","position":{"start":{"line":39,"column":69,"offset":1041},"end":{"line":39,"column":76,"offset":1048}}}],"position":{"start":{"line":39,"column":69,"offset":1041},"end":{"line":39,"column":76,"offset":1048}}},"children":"Nginx"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AWS ELB(Elastic Load Balancing)","position":{"start":{"line":39,"column":78,"offset":1050},"end":{"line":39,"column":111,"offset":1083}}}],"position":{"start":{"line":39,"column":78,"offset":1050},"end":{"line":39,"column":111,"offset":1083}}},"children":"AWS ELB(Elastic Load Balancing)"}}],"가 있습니다. 예를 들어, Nginx를 설정하여 로드 밸런싱을 할 수 있습니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-nginx","node":{"type":"element","tagName":"code","properties":{"className":["language-nginx"]},"children":[{"type":"text","value":"http {\n  upstream node_app {\n    server 127.0.0.1:8000;\n    server 127.0.0.1:8001;\n    server 127.0.0.1:8002;\n  }\n\n  server {\n    listen 80;\n\n    location / {\n      proxy_pass http://node_app;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection 'upgrade';\n      proxy_set_header Host $host;\n      proxy_cache_bypass $http_upgrade;\n    }\n  }\n}\n"}],"position":{"start":{"line":41,"column":1,"offset":1129},"end":{"line":62,"column":4,"offset":1542}}},"children":"http {\n  upstream node_app {\n    server 127.0.0.1:8000;\n    server 127.0.0.1:8001;\n    server 127.0.0.1:8002;\n  }\n\n  server {\n    listen 80;\n\n    location / {\n      proxy_pass http://node_app;\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection 'upgrade';\n      proxy_set_header Host $host;\n      proxy_cache_bypass $http_upgrade;\n    }\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 설정은 3개의 Node.js 애플리케이션 인스턴스로 트래픽을 분산합니다."}],"\n",["$","h2",null,{"id":"72d89545","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. 마이크로서비스 아키텍처 도입"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"마이크로서비스 아키텍처는 애플리케이션을 각각 독립적으로 배포되고 확장될 수 있는 작은 서비스 단위로 분해하는 접근 방식입니다. 이를 통해 특정 서비스만 확장하거나 업데이트할 수 있어 전체 시스템의 확장성이 향상됩니다. 마이크로서비스를 구현하기 위해 API 게이트웨이와 같은 패턴을 적용할 수 있습니다."}],"\n",["$","h3",null,{"id":"b96b669d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"API 게이트웨이"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["API 게이트웨이는 클라이언트와 마이크로서비스 간의 진입점 역할을 합니다. 주로 인증, 로깅, 로드 밸런싱 같은 공통 기능을 처리합니다. 예를 들어 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Express.js","position":{"start":{"line":72,"column":84,"offset":1879},"end":{"line":72,"column":96,"offset":1891}}}],"position":{"start":{"line":72,"column":84,"offset":1879},"end":{"line":72,"column":96,"offset":1891}}},"children":"Express.js"}}],"로 간단한 API 게이트웨이를 만들 수 있습니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const express = require('express');\nconst app = express();\nconst axios = require('axios');\n\napp.use('/service1', async (req, res) => {\n  const response = await axios.get('http://localhost:4001' + req.url);\n  res.send(response.data);\n});\n\napp.use('/service2', async (req, res) => {\n  const response = await axios.get('http://localhost:4002' + req.url);\n  res.send(response.data);\n});\n\napp.listen(3000, () => {\n  console.log('API 게이트웨이 실행 중');\n});\n"}],"position":{"start":{"line":74,"column":1,"offset":1920},"end":{"line":92,"column":4,"offset":2383}}},"children":"const express = require('express');\nconst app = express();\nconst axios = require('axios');\n\napp.use('/service1', async (req, res) => {\n  const response = await axios.get('http://localhost:4001' + req.url);\n  res.send(response.data);\n});\n\napp.use('/service2', async (req, res) => {\n  const response = await axios.get('http://localhost:4002' + req.url);\n  res.send(response.data);\n});\n\napp.listen(3000, () => {\n  console.log('API 게이트웨이 실행 중');\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/service1","position":{"start":{"line":94,"column":4,"offset":2388},"end":{"line":94,"column":15,"offset":2399}}}],"position":{"start":{"line":94,"column":4,"offset":2388},"end":{"line":94,"column":15,"offset":2399}}},"children":"/service1"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/service2","position":{"start":{"line":94,"column":17,"offset":2401},"end":{"line":94,"column":28,"offset":2412}}}],"position":{"start":{"line":94,"column":17,"offset":2401},"end":{"line":94,"column":28,"offset":2412}}},"children":"/service2"}}],"로 들어오는 요청을 각각 다른 마이크로서비스로 전달하는 간단한 API 게이트웨이 예제입니다."]}],"\n",["$","h2",null,{"id":"749c144a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. 성능 최적화를 위한 캐싱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["캐싱은 자주 사용되는 데이터를 메모리나 디스크에 저장하여 데이터베이스나 외부 API 호출을 줄이는 방법입니다. 대표적인 캐싱 솔루션은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Redis","position":{"start":{"line":98,"column":76,"offset":2561},"end":{"line":98,"column":83,"offset":2568}}}],"position":{"start":{"line":98,"column":76,"offset":2561},"end":{"line":98,"column":83,"offset":2568}}},"children":"Redis"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Memcached","position":{"start":{"line":98,"column":85,"offset":2570},"end":{"line":98,"column":96,"offset":2581}}}],"position":{"start":{"line":98,"column":85,"offset":2570},"end":{"line":98,"column":96,"offset":2581}}},"children":"Memcached"}}],"입니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Redis","position":{"start":{"line":98,"column":108,"offset":2593},"end":{"line":98,"column":115,"offset":2600}}}],"position":{"start":{"line":98,"column":108,"offset":2593},"end":{"line":98,"column":115,"offset":2600}}},"children":"Redis"}}],"를 Node.js에서 사용하는 방법은 다음과 같습니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('error', (err) => {\n  console.log('Redis 에러:', err);\n});\n\nfunction getFromCache(key) {\n  return new Promise((resolve, reject) => {\n    client.get(key, (err, result) => {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n}\n\nfunction setToCache(key, value) {\n  client.set(key, value);\n}\n\n(async () => {\n  await setToCache('myKey', 'myValue');\n  const value = await getFromCache('myKey');\n  console.log('캐시된 값:', value);\n})();\n"}],"position":{"start":{"line":100,"column":1,"offset":2632},"end":{"line":126,"column":4,"offset":3168}}},"children":"const redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('error', (err) => {\n  console.log('Redis 에러:', err);\n});\n\nfunction getFromCache(key) {\n  return new Promise((resolve, reject) => {\n    client.get(key, (err, result) => {\n      if (err) reject(err);\n      resolve(result);\n    });\n  });\n}\n\nfunction setToCache(key, value) {\n  client.set(key, value);\n}\n\n(async () => {\n  await setToCache('myKey', 'myValue');\n  const value = await getFromCache('myKey');\n  console.log('캐시된 값:', value);\n})();\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Redis","position":{"start":{"line":128,"column":9,"offset":3178},"end":{"line":128,"column":16,"offset":3185}}}],"position":{"start":{"line":128,"column":9,"offset":3178},"end":{"line":128,"column":16,"offset":3185}}},"children":"Redis"}}]," 클라이언트를 사용하여 데이터를 캐시하고 불러오는 간단한 예제를 보여줍니다."]}],"\n",["$","h2",null,{"id":"39a638ef","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. 데이터베이스 확장"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"데이터베이스 확장은 애플리케이션 확장성 문제의 중요한 부분입니다. 수평 확장(샤딩)과 수직 확장(레플리카)을 통해 데이터베이스의 성능을 높일 수 있습니다."}],"\n",["$","h3",null,{"id":"92b926c8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"수평 확장(샤딩)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"수평 확장은 데이터를 여러 데이터베이스 인스턴스에 나누어 저장하는 방법입니다. 이는 대규모 데이터 처리에 유용합니다. 예를 들어, 사용자의 ID를 기준으로 데이터를 샤딩할 수 있습니다."}],"\n",["$","h3",null,{"id":"ec494a6f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"수직 확장(레플리카)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["수직 확장은 데이터베이스 읽기 성능을 높이는 방법입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"레플리케이션","position":{"start":{"line":140,"column":33,"offset":3503},"end":{"line":140,"column":41,"offset":3511}}}],"position":{"start":{"line":140,"column":33,"offset":3503},"end":{"line":140,"column":41,"offset":3511}}},"children":"레플리케이션"}}]," 기법을 통해 데이터를 여러 복제본에 저장하고 읽기 요청을 분산할 수 있습니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MySQL","position":{"start":{"line":140,"column":93,"offset":3563},"end":{"line":140,"column":100,"offset":3570}}}],"position":{"start":{"line":140,"column":93,"offset":3563},"end":{"line":140,"column":100,"offset":3570}}},"children":"MySQL"}}],"에서 읽기 복제를 설정하는 방법은 다음과 같습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js 애플리케이션의 확장성을 높이는 방법은 다양합니다. 클러스터링과 로드 밸런싱부터 마이크로서비스 아키텍처 도입, 캐싱, 데이터베이스 확장까지 올바른 접근 방법을 결합하면 대규모 트래픽도 효율적으로 처리할 수 있습니다. 이러한 기법들을 체계적으로 사용하여 여러분의 애플리케이션을 고도화해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법","toc":[{"tagName":"h1","title":"Node.js 확장성 높이기: 대규모 애플리케이션 처리 방법","id":"fdce6e2b"},{"tagName":"h2","title":"1. 클러스터링을 통한 멀티 프로세싱","id":"dead741f"},{"tagName":"h2","title":"2. 로드 밸런싱","id":"6dde70df"},{"tagName":"h2","title":"3. 마이크로서비스 아키텍처 도입","id":"72d89545"},{"tagName":"h3","title":"API 게이트웨이","id":"b96b669d"},{"tagName":"h2","title":"4. 성능 최적화를 위한 캐싱","id":"749c144a"},{"tagName":"h2","title":"5. 데이터베이스 확장","id":"39a638ef"},{"tagName":"h3","title":"수평 확장(샤딩)","id":"92b926c8"},{"tagName":"h3","title":"수직 확장(레플리카)","id":"ec494a6f"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
