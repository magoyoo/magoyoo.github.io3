1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EC%97%90%EC%84%9C-Nested-Protocol-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-2d9eb2c7","d"],{"children":["__PAGE__?{\"slug\":\"Swift-에서-Nested-Protocol-개념-이해하기-2d9eb2c7\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EC%97%90%EC%84%9C-Nested-Protocol-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-2d9eb2c7","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-에서-Nested-Protocol-개념-이해하기-2d9eb2c7\"}"},"styles":[]}],"segment":["slug","Swift-%EC%97%90%EC%84%9C-Nested-Protocol-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-2d9eb2c7","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 5.10에서 Nested Protocol 개념 이해하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift 5.10에서 제공하는 Nested Protocol 개념에 대해 다룹니다. Nested Protocol은 프로토콜 내에 다른 프로토콜을 정의하는 기능으로, 코드의 가독성과 재사용성을 높이는 데 도움을 줍니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Nested Protocol,Swift 5.10,iOS"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EC%97%90%EC%84%9C-Nested-Protocol-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-2d9eb2c7"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 5.10에서 Nested Protocol 개념 이해하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 5.10에서 Nested Protocol 개념 이해하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift 5.10에서 제공하는 Nested Protocol 개념에 대해 다룹니다. Nested Protocol은 프로토콜 내에 다른 프로토콜을 정의하는 기능으로, 코드의 가독성과 재사용성을 높이는 데 도움을 줍니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EC%97%90%EC%84%9C-Nested-Protocol-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-2d9eb2c7"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 5.10에서 Nested Protocol 개념 이해하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift 5.10에서 제공하는 Nested Protocol 개념에 대해 다룹니다. Nested Protocol은 프로토콜 내에 다른 프로토콜을 정의하는 기능으로, 코드의 가독성과 재사용성을 높이는 데 도움을 줍니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 5.10에서 Nested Protocol 개념 이해하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 5.10에서 Nested Protocol 개념 이해하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-25"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"99e4b348","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 5.10에서 Nested Protocol 개념 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift 5.10에서는 코드를 더욱 모듈화하고 정리하기 위해 'Nested Protocol'이라는 개념을 도입했습니다. Nested Protocol은 프로토콜 내부에 또 다른 프로토콜을 정의하는 방법을 의미합니다. 이 기법은 프로토콜을 보다 구조화하고, 관련된 프로토콜들을 그룹화하여 사용의 편의성을 높여줍니다. 본 글에서는 Nested Protocol의 개념과 실제 사용 예제를 통해 이를 이해해 보겠습니다."}],"\n",["$","h2",null,{"id":"0690c611","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol이란 말 그대로, 한 프로토콜 내에 다른 프로토콜을 중첩하여 선언하는 것을 의미합니다. 이 개념은 코드의 가독성과 유지 보수성을 크게 향상시킬 수 있습니다. 다음은 Nested Protocol을 선언하는 기본 예제입니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol OuterProtocol {\n    protocol InnerProtocol {\n        func doSomething()\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":440},"end":{"line":16,"column":4,"offset":541}}},"children":"protocol OuterProtocol {\n    protocol InnerProtocol {\n        func doSomething()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":18,"column":9,"offset":551},"end":{"line":18,"column":24,"offset":566}}}],"position":{"start":{"line":18,"column":9,"offset":551},"end":{"line":18,"column":24,"offset":566}}},"children":"OuterProtocol"}}]," 안에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerProtocol","position":{"start":{"line":18,"column":28,"offset":570},"end":{"line":18,"column":43,"offset":585}}}],"position":{"start":{"line":18,"column":28,"offset":570},"end":{"line":18,"column":43,"offset":585}}},"children":"InnerProtocol"}}],"이 정의되어 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"InnerProtocol","position":{"start":{"line":18,"column":56,"offset":598},"end":{"line":18,"column":71,"offset":613}}}],"position":{"start":{"line":18,"column":56,"offset":598},"end":{"line":18,"column":71,"offset":613}}},"children":"InnerProtocol"}}],"은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OuterProtocol","position":{"start":{"line":18,"column":73,"offset":615},"end":{"line":18,"column":88,"offset":630}}}],"position":{"start":{"line":18,"column":73,"offset":615},"end":{"line":18,"column":88,"offset":630}}},"children":"OuterProtocol"}}],"의 일부로 간주되어 관련된 기능을 그룹화할 수 있습니다."]}],"\n",["$","h3",null,{"id":"b43374c7","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"API 설계에서의 Nested Protocol"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["API 설계 시에는 여러 가지 프로토콜을 정의해야 할 때가 많습니다. 이 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Nested Protocol","position":{"start":{"line":22,"column":44,"offset":737},"end":{"line":22,"column":61,"offset":754}}}],"position":{"start":{"line":22,"column":44,"offset":737},"end":{"line":22,"column":61,"offset":754}}},"children":"Nested Protocol"}}],"을 활용하면 API의 구성 요소들을 논리적으로 그룹화 할 수 있습니다. 예를 들어, 게임 애플리케이션에서 여러 가지 액션을 정의하려 한다면 다음과 같이 작성할 수 있습니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Game {\n    protocol Action {\n        func performAction()\n    }\n    protocol Movement: Action {\n        func moveForward()\n        func moveBackward()\n    }\n    protocol Attack: Action {\n        func meleeAttack()\n        func rangedAttack()\n    }\n}\n"}],"position":{"start":{"line":24,"column":1,"offset":852},"end":{"line":38,"column":4,"offset":1123}}},"children":"protocol Game {\n    protocol Action {\n        func performAction()\n    }\n    protocol Movement: Action {\n        func moveForward()\n        func moveBackward()\n    }\n    protocol Attack: Action {\n        func meleeAttack()\n        func rangedAttack()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Game","position":{"start":{"line":40,"column":10,"offset":1134},"end":{"line":40,"column":16,"offset":1140}}}],"position":{"start":{"line":40,"column":10,"offset":1134},"end":{"line":40,"column":16,"offset":1140}}},"children":"Game"}}]," 프로토콜 내부에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Action","position":{"start":{"line":40,"column":26,"offset":1150},"end":{"line":40,"column":34,"offset":1158}}}],"position":{"start":{"line":40,"column":26,"offset":1150},"end":{"line":40,"column":34,"offset":1158}}},"children":"Action"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Movement","position":{"start":{"line":40,"column":36,"offset":1160},"end":{"line":40,"column":46,"offset":1170}}}],"position":{"start":{"line":40,"column":36,"offset":1160},"end":{"line":40,"column":46,"offset":1170}}},"children":"Movement"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Attack","position":{"start":{"line":40,"column":48,"offset":1172},"end":{"line":40,"column":56,"offset":1180}}}],"position":{"start":{"line":40,"column":48,"offset":1172},"end":{"line":40,"column":56,"offset":1180}}},"children":"Attack"}}]," 프로토콜이 정의되어 있어서 각기 다른 액션 유형들을 논리적으로 그룹화할 수 있습니다. 이러한 구조는 각 프로토콜의 역할을 명확히 하고, 코드의 재사용성을 높입니다."]}],"\n",["$","h2",null,{"id":"279b6b56","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 장점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol을 사용하면 다음과 같은 여러 가지 장점이 있습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"가독성 향상"}],": 관련된 프로토콜들을 함께 그룹화함으로써 코드의 가독성을 크게 향상시킬 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"모듈화"}],": 프로토콜을 논리적인 모듈로 분리하여 관리할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"재사용성 증가"}],": 관련 기능을 그룹화하여 다른 곳에서도 쉽게 사용할 수 있게 만듭니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"유지 보수성 개선"}],": 각 프로토콜의 역할이 명확해져 유지 보수가 편리해집니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"b515caef","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: Nested Protocol을 이용한 데이터 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"데이터 처리 과정을 프로토콜로 정의할 때도 Nested Protocol을 사용할 수 있습니다. 예를 들어, 데이터를 로드하고, 처리하고, 저장하는 과정을 각각의 프로세스로 나눠보겠습니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol DataProcess {\n    protocol Loader {\n        func loadData() -> String\n    }\n    protocol Processor {\n        func processData(data: String) -> String\n    }\n    protocol Saver {\n        func saveData(data: String)\n    }\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1699},"end":{"line":67,"column":4,"offset":1941}}},"children":"protocol DataProcess {\n    protocol Loader {\n        func loadData() -> String\n    }\n    protocol Processor {\n        func processData(data: String) -> String\n    }\n    protocol Saver {\n        func saveData(data: String)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 이러한 프로토콜을 구현하는 실제 클래스나 구조체를 정의할 수 있습니다:"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct DataHandler: DataProcess.Loader, DataProcess.Processor, DataProcess.Saver {\n    func loadData() -> String {\n        return \"Raw Data\"\n    }\n    func processData(data: String) -> String {\n        return \"Processed \" + data\n    }\n    func saveData(data: String) {\n        print(\"Saving: \\(data)\")\n    }\n}\n"}],"position":{"start":{"line":71,"column":1,"offset":1987},"end":{"line":83,"column":4,"offset":2309}}},"children":"struct DataHandler: DataProcess.Loader, DataProcess.Processor, DataProcess.Saver {\n    func loadData() -> String {\n        return \"Raw Data\"\n    }\n    func processData(data: String) -> String {\n        return \"Processed \" + data\n    }\n    func saveData(data: String) {\n        print(\"Saving: \\(data)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 예제는 Nested Protocol을 이용하여 데이터 로드, 처리, 저장을 정의하고 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DataHandler","position":{"start":{"line":85,"column":54,"offset":2364},"end":{"line":85,"column":67,"offset":2377}}}],"position":{"start":{"line":85,"column":54,"offset":2364},"end":{"line":85,"column":67,"offset":2377}}},"children":"DataHandler"}}]," 구조체에서 구현하는 예제를 보여줍니다. 이 방식으로 코드를 작성하면 각 단계의 역할이 명확하게 분리되어 더 이해하기 쉽고 관리하기 용이합니다."]}],"\n",["$","h2",null,{"id":"a19d2488","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Nested Protocol의 실용적 사용 예시"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 좀 더 복잡한 예제를 통해 Nested Protocol이 실무에서 어떻게 사용될 수 있는지를 보여줍니다. 이 예제에서는 사용자가 여러 가지 방식으로 인증을 할 수 있는 시스템을 만들어 보겠습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Authentication {\n    protocol Method {\n        func authenticate() -> Bool\n    }\n    protocol PasswordBased: Method {\n        func enterPassword(password: String)\n    }\n    protocol OTPBased: Method {\n        func enterOTP(otp: String)\n    }\n}\n\nclass PasswordAuthenticator: Authentication.PasswordBased {\n    private var password: String?\n    func enterPassword(password: String) {\n        self.password = password\n    }\n    func authenticate() -> Bool {\n        return password == \"securePassword123\"\n    }\n}\n\nclass OTPAuthenticator: Authentication.OTPBased {\n    private var otp: String?\n    func enterOTP(otp: String) {\n        self.otp = otp\n    }\n    func authenticate() -> Bool {\n        return otp == \"123456\"\n    }\n}\n"}],"position":{"start":{"line":91,"column":1,"offset":2605},"end":{"line":123,"column":4,"offset":3351}}},"children":"protocol Authentication {\n    protocol Method {\n        func authenticate() -> Bool\n    }\n    protocol PasswordBased: Method {\n        func enterPassword(password: String)\n    }\n    protocol OTPBased: Method {\n        func enterOTP(otp: String)\n    }\n}\n\nclass PasswordAuthenticator: Authentication.PasswordBased {\n    private var password: String?\n    func enterPassword(password: String) {\n        self.password = password\n    }\n    func authenticate() -> Bool {\n        return password == \"securePassword123\"\n    }\n}\n\nclass OTPAuthenticator: Authentication.OTPBased {\n    private var otp: String?\n    func enterOTP(otp: String) {\n        self.otp = otp\n    }\n    func authenticate() -> Bool {\n        return otp == \"123456\"\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Authentication","position":{"start":{"line":125,"column":5,"offset":3357},"end":{"line":125,"column":21,"offset":3373}}}],"position":{"start":{"line":125,"column":5,"offset":3357},"end":{"line":125,"column":21,"offset":3373}}},"children":"Authentication"}}]," 프로토콜은 여러 가지 인증 방법을 Nested Protocol을 통해 정의하고 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PasswordBased","position":{"start":{"line":125,"column":72,"offset":3424},"end":{"line":125,"column":87,"offset":3439}}}],"position":{"start":{"line":125,"column":72,"offset":3424},"end":{"line":125,"column":87,"offset":3439}}},"children":"PasswordBased"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OTPBased","position":{"start":{"line":125,"column":89,"offset":3441},"end":{"line":125,"column":99,"offset":3451}}}],"position":{"start":{"line":125,"column":89,"offset":3441},"end":{"line":125,"column":99,"offset":3451}}},"children":"OTPBased"}}],"는 각각 다른 인증 방식을 정의하며, 이를 구현한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PasswordAuthenticator","position":{"start":{"line":125,"column":127,"offset":3479},"end":{"line":125,"column":150,"offset":3502}}}],"position":{"start":{"line":125,"column":127,"offset":3479},"end":{"line":125,"column":150,"offset":3502}}},"children":"PasswordAuthenticator"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OTPAuthenticator","position":{"start":{"line":125,"column":152,"offset":3504},"end":{"line":125,"column":170,"offset":3522}}}],"position":{"start":{"line":125,"column":152,"offset":3504},"end":{"line":125,"column":170,"offset":3522}}},"children":"OTPAuthenticator"}}]," 클래스는 각기 다른 방식으로 인증을 처리합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Nested Protocol은 Swift 5.10에서 제공하는 강력한 기능 중 하나로, 프로토콜의 구조를 보다 논리적으로 구성할 수 있게 합니다. 이를 통해 코드의 가독성과 재사용성, 유지 보수성을 크게 향상시킬 수 있습니다. API 설계, 데이터 처리, 인증 시스템 등 다양한 분야에서 Nested Protocol을 활용할 수 있으며, 이로 인해 복잡한 시스템을 쉽게 관리하고 유지 보수할 수 있습니다. Nested Protocol을 통해 코드의 품질을 한 단계 더 높여보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 5.10에서 Nested Protocol 개념 이해하기","toc":[{"tagName":"h1","title":"Swift 5.10에서 Nested Protocol 개념 이해하기","id":"99e4b348"},{"tagName":"h2","title":"Nested Protocol의 기본 개념","id":"0690c611"},{"tagName":"h3","title":"API 설계에서의 Nested Protocol","id":"b43374c7"},{"tagName":"h2","title":"Nested Protocol의 장점","id":"279b6b56"},{"tagName":"h3","title":"예제: Nested Protocol을 이용한 데이터 처리","id":"b515caef"},{"tagName":"h2","title":"Nested Protocol의 실용적 사용 예시","id":"a19d2488"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
