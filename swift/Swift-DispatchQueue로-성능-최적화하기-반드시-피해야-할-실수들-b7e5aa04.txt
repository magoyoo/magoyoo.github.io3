1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-DispatchQueue%EB%A1%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EA%B8%B0-%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%8B%A4%EC%88%98%EB%93%A4-b7e5aa04","d"],{"children":["__PAGE__?{\"slug\":\"Swift-DispatchQueue로-성능-최적화하기-반드시-피해야-할-실수들-b7e5aa04\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-DispatchQueue%EB%A1%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EA%B8%B0-%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%8B%A4%EC%88%98%EB%93%A4-b7e5aa04","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-DispatchQueue로-성능-최적화하기-반드시-피해야-할-실수들-b7e5aa04\"}"},"styles":[]}],"segment":["slug","Swift-DispatchQueue%EB%A1%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EA%B8%B0-%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%8B%A4%EC%88%98%EB%93%A4-b7e5aa04","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift의 DispatchQueue를 사용한 성능 최적화 과정에서 발생할 수 있는 몇 가지 실수들을 살펴보고, 이를 어떻게 피할 수 있는지 설명합니다. 이를 통해 보다 효율적이고 안전한 코드를 작성할 수 있도록 돕습니다."}],["$","meta","3",{"name":"keywords","content":"Swift,DispatchQueue,성능 최적화,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-DispatchQueue%EB%A1%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EA%B8%B0-%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%8B%A4%EC%88%98%EB%93%A4-b7e5aa04"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift의 DispatchQueue를 사용한 성능 최적화 과정에서 발생할 수 있는 몇 가지 실수들을 살펴보고, 이를 어떻게 피할 수 있는지 설명합니다. 이를 통해 보다 효율적이고 안전한 코드를 작성할 수 있도록 돕습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-DispatchQueue%EB%A1%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EA%B8%B0-%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%94%BC%ED%95%B4%EC%95%BC-%ED%95%A0-%EC%8B%A4%EC%88%98%EB%93%A4-b7e5aa04"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift의 DispatchQueue를 사용한 성능 최적화 과정에서 발생할 수 있는 몇 가지 실수들을 살펴보고, 이를 어떻게 피할 수 있는지 설명합니다. 이를 통해 보다 효율적이고 안전한 코드를 작성할 수 있도록 돕습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-09"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"38f14349","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":4,"column":9,"offset":57},"end":{"line":4,"column":24,"offset":72}}}],"position":{"start":{"line":4,"column":9,"offset":57},"end":{"line":4,"column":24,"offset":72}}},"children":"DispatchQueue"}}],"는 비동기 작업을 처리하고 성능을 최적화하는 데 유용한 도구입니다. 하지만 이 강력한 도구를 잘못 사용하면 오히려 성능 저하나 프로그램 오류가 발생할 수 있습니다. 이번 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":4,"column":124,"offset":172},"end":{"line":4,"column":139,"offset":187}}}],"position":{"start":{"line":4,"column":124,"offset":172},"end":{"line":4,"column":139,"offset":187}}},"children":"DispatchQueue"}}],"를 사용할 때 범하기 쉬운 몇 가지 실수와 이를 피하기 위한 방법을 소개합니다."]}],"\n",["$","h2",null,{"id":"53e10323","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. 메인 큐에서의 블로킹 작업"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["메인 큐(즉, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue.main","position":{"start":{"line":8,"column":9,"offset":263},"end":{"line":8,"column":29,"offset":283}}}],"position":{"start":{"line":8,"column":9,"offset":263},"end":{"line":8,"column":29,"offset":283}}},"children":"DispatchQueue.main"}}],")는 주로 UI 업데이트와 사용자와의 상호작용을 처리하게 됩니다. 메인 큐에서 시간이 많이 걸리는 작업을 처리하면 애플리케이션이 반응하지 않게 되어 사용자 경험이 크게 저하될 수 있습니다. 예를 들어, 다음과 같은 코드는 피해야 합니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"DispatchQueue.main.sync {\n    // 시간 소모적인 작업\n    Thread.sleep(forTimeInterval: 5)\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":417},"end":{"line":15,"column":4,"offset":512}}},"children":"DispatchQueue.main.sync {\n    // 시간 소모적인 작업\n    Thread.sleep(forTimeInterval: 5)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 코드는 메인 큐를 블로킹하므로 UI가 5초 동안 멈추게 됩니다. 이를 피하려면 백그라운드 큐에서 작업을 수행한 후 결과를 메인 큐에서 처리하도록 해야 합니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"DispatchQueue.global().async {\n    // 시간 소모적인 작업\n    let result = performTimeConsumingTask()\n    DispatchQueue.main.async {\n        // UI 업데이트\n        updateUI(with: result)\n    }\n}\n"}],"position":{"start":{"line":19,"column":1,"offset":606},"end":{"line":28,"column":4,"offset":800}}},"children":"DispatchQueue.global().async {\n    // 시간 소모적인 작업\n    let result = performTimeConsumingTask()\n    DispatchQueue.main.async {\n        // UI 업데이트\n        updateUI(with: result)\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"a4b80c64","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. 경쟁 상태(Race Condition)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다중 쓰레드 환경에서는 경쟁 상태가 발생할 수 있습니다. 이는 두 개 이상의 쓰레드가 동일한 리소스에 동시에 접근하려 할 때 발생하며, 예상치 못한 결과를 초래할 수 있습니다. 이런 문제를 방지하기 위해서는 동기화 메커니즘을 도입해야 합니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 다음 코드는 경쟁 상태를 유발할 수 있습니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var sharedResource = 0\nDispatchQueue.global().async {\n    sharedResource += 1\n}\nDispatchQueue.global().async {\n    sharedResource += 1\n}\n"}],"position":{"start":{"line":36,"column":1,"offset":1002},"end":{"line":44,"column":4,"offset":1151}}},"children":"var sharedResource = 0\nDispatchQueue.global().async {\n    sharedResource += 1\n}\nDispatchQueue.global().async {\n    sharedResource += 1\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 문제를 방지하려면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":46,"column":14,"offset":1166},"end":{"line":46,"column":29,"offset":1181}}}],"position":{"start":{"line":46,"column":14,"offset":1166},"end":{"line":46,"column":29,"offset":1181}}},"children":"DispatchQueue"}}],"의 동기화 기능을 활용하여 접근을 제어해야 합니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let synchronizationQueue = DispatchQueue(label: \"synchronizationQueue\")\nvar sharedResource = 0\nsynchronizationQueue.async {\n    sharedResource += 1\n}\nsynchronizationQueue.async {\n    sharedResource += 1\n}\n"}],"position":{"start":{"line":48,"column":1,"offset":1211},"end":{"line":57,"column":4,"offset":1428}}},"children":"let synchronizationQueue = DispatchQueue(label: \"synchronizationQueue\")\nvar sharedResource = 0\nsynchronizationQueue.async {\n    sharedResource += 1\n}\nsynchronizationQueue.async {\n    sharedResource += 1\n}\n"}}]}],"\n",["$","h2",null,{"id":"9e90d0ad","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. Deadlock"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Deadlock은 두 개 이상의 쓰레드가 서로를 기다리면서 무한 대기 상태에 빠지는 상황을 의미합니다. Deadlock을 피하려면 동기 작업을 신중하게 사용해야 합니다. 다음은 Deadlock을 유발하는 예입니다:"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let serialQueue = DispatchQueue(label: \"serialQueue\")\nserialQueue.sync {\n    serialQueue.sync {\n        // Deadlock 발생\n    }\n}\n"}],"position":{"start":{"line":63,"column":1,"offset":1567},"end":{"line":70,"column":4,"offset":1706}}},"children":"let serialQueue = DispatchQueue(label: \"serialQueue\")\nserialQueue.sync {\n    serialQueue.sync {\n        // Deadlock 발생\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 코드는 동일한 직렬 큐에서 다시 동기 작업을 호출하여 Deadlock을 유발합니다. 이를 피하려면, 동일한 큐 내에서 다시 동기 작업을 호출하는 것을 피하거나 비동기 작업을 사용해야 합니다:"}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"serialQueue.sync {\n    serialQueue.async {\n        // Deadlock 발생하지 않음\n    }\n}\n"}],"position":{"start":{"line":74,"column":1,"offset":1818},"end":{"line":80,"column":4,"offset":1909}}},"children":"serialQueue.sync {\n    serialQueue.async {\n        // Deadlock 발생하지 않음\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"8c979211","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. 과도한 큐 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"너무 많은 큐를 생성하는 것도 문제를 일으킬 수 있습니다. 각 큐는 자체 쓰레드를 가지기 때문에 시스템 리소스를 낭비할 수 있으며, 쓰레드 스케줄링에도 부정적인 영향을 미칠 수 있습니다. 가능하면 재사용 가능한 큐를 사용하고, 큐의 수를 최소화해야 합니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 불필요하게 많은 큐를 생성하는 대신, 글로벌 큐를 사용할 수 있습니다:"}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"for i in 1...10 {\n    DispatchQueue(label: \"com.example.queue.\", qos: .background).async {\n        // 작업\n    }\n}\n"}],"position":{"start":{"line":88,"column":1,"offset":2120},"end":{"line":94,"column":4,"offset":2245}}},"children":"for i in 1...10 {\n    DispatchQueue(label: \"com.example.queue.\", qos: .background).async {\n        // 작업\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"대신, 글로벌 큐를 사용하여 리소스를 절약할 수 있습니다:"}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"for i in 1...10 {\n    DispatchQueue.global(qos: .background).async {\n        // 작업\n    }\n}\n"}],"position":{"start":{"line":98,"column":1,"offset":2281},"end":{"line":104,"column":4,"offset":2384}}},"children":"for i in 1...10 {\n    DispatchQueue.global(qos: .background).async {\n        // 작업\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"f0084caa","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. 사용되지 않는 작업 캔슬"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":108,"column":1,"offset":2407},"end":{"line":108,"column":16,"offset":2422}}}],"position":{"start":{"line":108,"column":1,"offset":2407},"end":{"line":108,"column":16,"offset":2422}}},"children":"DispatchQueue"}}],"를 사용할 때 작업 캔슬을 고려하지 않으면, 불필요한 작업이 수행될 수 있습니다. 이는 특히 사용자의 인터랙션에 의해 작업이 불필요해지는 경우에 중요합니다. 이를 위해 작업을 관리하고 필요 시 작업을 취소하는 방법을 추가해야 합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchWorkItem","position":{"start":{"line":110,"column":8,"offset":2561},"end":{"line":110,"column":26,"offset":2579}}}],"position":{"start":{"line":110,"column":8,"offset":2561},"end":{"line":110,"column":26,"offset":2579}}},"children":"DispatchWorkItem"}}],"을 사용하여 작업을 캔슬할 수 있습니다:"]}],"\n",["$","pre","pre-8",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let workItem = DispatchWorkItem {\n    // 특정 작업\n}\nDispatchQueue.global().async(execute: workItem)\n// 작업이 필요 없어진 경우\nworkItem.cancel()\n"}],"position":{"start":{"line":112,"column":1,"offset":2603},"end":{"line":119,"column":4,"offset":2747}}},"children":"let workItem = DispatchWorkItem {\n    // 특정 작업\n}\nDispatchQueue.global().async(execute: workItem)\n// 작업이 필요 없어진 경우\nworkItem.cancel()\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DispatchQueue","position":{"start":{"line":123,"column":1,"offset":2756},"end":{"line":123,"column":16,"offset":2771}}}],"position":{"start":{"line":123,"column":1,"offset":2756},"end":{"line":123,"column":16,"offset":2771}}},"children":"DispatchQueue"}}],"는 Swift에서 성능 최적화를 위해 중요한 도구입니다. 하지만 이를 올바르게 사용하지 않으면 성능 저하나 프로그램 오류가 발생할 수 있습니다. 메인 큐를 블로킹하는 작업을 피하고, 경쟁 상태나 Deadlock을 주의하며, 과도한 큐 생성을 피하고 작업 캔슬을 고려하면 보다 안전하고 효율적인 코드를 작성할 수 있습니다. 이러한 권장 사항을 준수하여 Swift에서 최적의 성능을 달성하시기 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들","toc":[{"tagName":"h1","title":"Swift DispatchQueue로 성능 최적화하기: 반드시 피해야 할 실수들","id":"38f14349"},{"tagName":"h2","title":"1. 메인 큐에서의 블로킹 작업","id":"53e10323"},{"tagName":"h2","title":"2. 경쟁 상태(Race Condition)","id":"a4b80c64"},{"tagName":"h2","title":"3. Deadlock","id":"9e90d0ad"},{"tagName":"h2","title":"4. 과도한 큐 생성","id":"8c979211"},{"tagName":"h2","title":"5. 사용되지 않는 작업 캔슬","id":"f0084caa"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
