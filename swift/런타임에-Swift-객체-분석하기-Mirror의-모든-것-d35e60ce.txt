1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90-Swift-%EA%B0%9D%EC%B2%B4-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0-Mirror%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-d35e60ce","d"],{"children":["__PAGE__?{\"slug\":\"런타임에-Swift-객체-분석하기-Mirror의-모든-것-d35e60ce\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90-Swift-%EA%B0%9D%EC%B2%B4-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0-Mirror%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-d35e60ce","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"런타임에-Swift-객체-분석하기-Mirror의-모든-것-d35e60ce\"}"},"styles":[]}],"segment":["slug","%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90-Swift-%EA%B0%9D%EC%B2%B4-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0-Mirror%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-d35e60ce","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"런타임에 Swift 객체 분석하기: Mirror의 모든 것 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift 언어의 강력한 기능 중 하나인 Mirror에 대해 알아보고, 이 기능을 사용하여 런타임에 Swift 객체를 분석하는 방법을 자세히 설명합니다. Mirror의 기본 개념, 사용법 그리고 다양한 활용 예제를 통해 이해를 깊이 있게 해봅시다."}],["$","meta","3",{"name":"keywords","content":"Swift,객체 분석,Mirror,런타임"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90-Swift-%EA%B0%9D%EC%B2%B4-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0-Mirror%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-d35e60ce"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"런타임에 Swift 객체 분석하기: Mirror의 모든 것 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"런타임에 Swift 객체 분석하기: Mirror의 모든 것 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift 언어의 강력한 기능 중 하나인 Mirror에 대해 알아보고, 이 기능을 사용하여 런타임에 Swift 객체를 분석하는 방법을 자세히 설명합니다. Mirror의 기본 개념, 사용법 그리고 다양한 활용 예제를 통해 이해를 깊이 있게 해봅시다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/%EB%9F%B0%ED%83%80%EC%9E%84%EC%97%90-Swift-%EA%B0%9D%EC%B2%B4-%EB%B6%84%EC%84%9D%ED%95%98%EA%B8%B0-Mirror%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-d35e60ce"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"런타임에 Swift 객체 분석하기: Mirror의 모든 것 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift 언어의 강력한 기능 중 하나인 Mirror에 대해 알아보고, 이 기능을 사용하여 런타임에 Swift 객체를 분석하는 방법을 자세히 설명합니다. Mirror의 기본 개념, 사용법 그리고 다양한 활용 예제를 통해 이해를 깊이 있게 해봅시다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"런타임에 Swift 객체 분석하기: Mirror의 모든 것"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"런타임에 Swift 객체 분석하기: Mirror의 모든 것"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-11"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"32050b09","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"런타임에 Swift 객체 분석하기: Mirror의 모든 것"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift는 강력하고 다재다능한 언어로, 다양한 기능들을 제공합니다. 그중에서도 특히 주목할 만한 기능이 바로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":4,"column":63,"offset":99},"end":{"line":4,"column":71,"offset":107}}}],"position":{"start":{"line":4,"column":63,"offset":99},"end":{"line":4,"column":71,"offset":107}}},"children":"Mirror"}}],"입니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":4,"column":83,"offset":119},"end":{"line":4,"column":91,"offset":127}}}],"position":{"start":{"line":4,"column":83,"offset":119},"end":{"line":4,"column":91,"offset":127}}},"children":"Mirror"}}],"를 사용하여 런타임에 Swift 객체를 분석하는 방법을 알아보겠습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":4,"column":131,"offset":167},"end":{"line":4,"column":139,"offset":175}}}],"position":{"start":{"line":4,"column":131,"offset":167},"end":{"line":4,"column":139,"offset":175}}},"children":"Mirror"}}],"는 객체의 속성, 메소드 등 다양한 정보를 제공하여 디버깅이나 테스트, 리플렉션(reflection) 작업에 많은 도움을 줍니다."]}],"\n",["$","h2",null,{"id":"d5ec7419","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Mirror란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":8,"column":1,"offset":267},"end":{"line":8,"column":9,"offset":275}}}],"position":{"start":{"line":8,"column":1,"offset":267},"end":{"line":8,"column":9,"offset":275}}},"children":"Mirror"}}],"는 Swift 언어에서 제공하는 리플렉션 도구입니다. 리플렉션이란 프로그램이 런타임에 자기 자신을 검사하거나 수정할 수 있는 능력을 말합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":8,"column":89,"offset":355},"end":{"line":8,"column":97,"offset":363}}}],"position":{"start":{"line":8,"column":89,"offset":355},"end":{"line":8,"column":97,"offset":363}}},"children":"Mirror"}}],"를 사용하면 클래스, 구조체, 열거형 등의 객체에 대한 메타데이터를 추출할 수 있습니다. 이를 통해 객체의 속성, 타입, 값 등을 동적으로 탐색할 수 있게 됩니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person {\n    var name: String\n    var age: Int\n}\n\nlet person = Person(name: \"Alice\", age: 30)\nlet mirror = Mirror(reflecting: person)\n"}],"position":{"start":{"line":10,"column":1,"offset":456},"end":{"line":18,"column":4,"offset":609}}},"children":"struct Person {\n    var name: String\n    var age: Int\n}\n\nlet person = Person(name: \"Alice\", age: 30)\nlet mirror = Mirror(reflecting: person)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":20,"column":11,"offset":621},"end":{"line":20,"column":19,"offset":629}}}],"position":{"start":{"line":20,"column":11,"offset":621},"end":{"line":20,"column":19,"offset":629}}},"children":"Person"}}]," 구조체의 인스턴스를 생성하고, 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":20,"column":40,"offset":650},"end":{"line":20,"column":48,"offset":658}}}],"position":{"start":{"line":20,"column":40,"offset":650},"end":{"line":20,"column":48,"offset":658}}},"children":"Mirror"}}],"를 통해 반영(reflect)하고 있습니다. 이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"mirror","position":{"start":{"line":20,"column":76,"offset":686},"end":{"line":20,"column":84,"offset":694}}}],"position":{"start":{"line":20,"column":76,"offset":686},"end":{"line":20,"column":84,"offset":694}}},"children":"mirror"}}]," 객체를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person","position":{"start":{"line":20,"column":92,"offset":702},"end":{"line":20,"column":100,"offset":710}}}],"position":{"start":{"line":20,"column":92,"offset":702},"end":{"line":20,"column":100,"offset":710}}},"children":"person"}}]," 객체의 정보를 얻을 수 있습니다."]}],"\n",["$","h2",null,{"id":"07d48540","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Mirror의 기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":24,"column":1,"offset":750},"end":{"line":24,"column":9,"offset":758}}}],"position":{"start":{"line":24,"column":1,"offset":750},"end":{"line":24,"column":9,"offset":758}}},"children":"Mirror"}}],"의 가장 기본적인 사용법은 객체의 속성을 나열하는 것입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":24,"column":43,"offset":792},"end":{"line":24,"column":51,"offset":800}}}],"position":{"start":{"line":24,"column":43,"offset":792},"end":{"line":24,"column":51,"offset":800}}},"children":"Mirror"}}]," 인스턴스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children","position":{"start":{"line":24,"column":58,"offset":807},"end":{"line":24,"column":68,"offset":817}}}],"position":{"start":{"line":24,"column":58,"offset":807},"end":{"line":24,"column":68,"offset":817}}},"children":"children"}}]," 프로퍼티를 통해 객체의 각 속성을 나타내는 튜플의 배열을 제공합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"for child in mirror.children {\n    print(\"\\(child.label!): \\(child.value)\")\n}\n"}],"position":{"start":{"line":26,"column":1,"offset":858},"end":{"line":30,"column":4,"offset":948}}},"children":"for child in mirror.children {\n    print(\"\\(child.label!): \\(child.value)\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":32,"column":7,"offset":956},"end":{"line":32,"column":15,"offset":964}}}],"position":{"start":{"line":32,"column":7,"offset":956},"end":{"line":32,"column":15,"offset":964}}},"children":"Mirror"}}]," 객체의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children","position":{"start":{"line":32,"column":20,"offset":969},"end":{"line":32,"column":30,"offset":979}}}],"position":{"start":{"line":32,"column":20,"offset":969},"end":{"line":32,"column":30,"offset":979}}},"children":"children"}}]," 프로퍼티를 순회하며, 각 속성의 이름과 값을 출력합니다. 출력 결과는 다음과 같습니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name: Alice\nage: 30\n"}],"position":{"start":{"line":34,"column":1,"offset":1030},"end":{"line":37,"column":4,"offset":1057}}},"children":"name: Alice\nage: 30\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person","position":{"start":{"line":39,"column":7,"offset":1065},"end":{"line":39,"column":15,"offset":1073}}}],"position":{"start":{"line":39,"column":7,"offset":1065},"end":{"line":39,"column":15,"offset":1073}}},"children":"person"}}]," 객체의 내부 구조를 런타임에 동적으로 파악할 수 있습니다."]}],"\n",["$","h2",null,{"id":"766c0049","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"심화 기능: Mirror를 활용한 객체 분석"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":43,"column":1,"offset":1137},"end":{"line":43,"column":9,"offset":1145}}}],"position":{"start":{"line":43,"column":1,"offset":1137},"end":{"line":43,"column":9,"offset":1145}}},"children":"Mirror"}}],"는 단순히 속성 나열뿐만 아니라 다양한 기능을 제공합니다. 예를 들어, 객체의 타입, 부모 클래스, 디스플레이 스타일 등을 확인할 수 있습니다."]}],"\n",["$","h3",null,{"id":"800456f4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"객체의 타입 확인하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":47,"column":1,"offset":1244},"end":{"line":47,"column":9,"offset":1252}}}],"position":{"start":{"line":47,"column":1,"offset":1244},"end":{"line":47,"column":9,"offset":1252}}},"children":"Mirror"}}]," 객체의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"subjectType","position":{"start":{"line":47,"column":14,"offset":1257},"end":{"line":47,"column":27,"offset":1270}}}],"position":{"start":{"line":47,"column":14,"offset":1257},"end":{"line":47,"column":27,"offset":1270}}},"children":"subjectType"}}]," 프로퍼티를 사용하면 해당 객체의 타입을 알 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"print(\"Type of person: \\(mirror.subjectType)\")\n"}],"position":{"start":{"line":49,"column":1,"offset":1304},"end":{"line":51,"column":4,"offset":1363}}},"children":"print(\"Type of person: \\(mirror.subjectType)\")\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"출력 결과는 다음과 같습니다:"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Type of person: Person\n"}],"position":{"start":{"line":55,"column":1,"offset":1383},"end":{"line":57,"column":4,"offset":1413}}},"children":"Type of person: Person\n"}}]}],"\n",["$","h3",null,{"id":"7718470f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"부모 클래스 탐색하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["객체가 클래스인 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"superclassMirror","position":{"start":{"line":61,"column":14,"offset":1445},"end":{"line":61,"column":32,"offset":1463}}}],"position":{"start":{"line":61,"column":14,"offset":1445},"end":{"line":61,"column":32,"offset":1463}}},"children":"superclassMirror"}}]," 프로퍼티를 통해 부모 클래스의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":61,"column":50,"offset":1481},"end":{"line":61,"column":58,"offset":1489}}}],"position":{"start":{"line":61,"column":50,"offset":1481},"end":{"line":61,"column":58,"offset":1489}}},"children":"Mirror"}}],"를 얻을 수 있습니다. 이를 통해 클래스 계층 구조를 탐색할 수 있습니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"if let superclassMirror = mirror.superclassMirror {\n    for child in superclassMirror.children {\n        print(\"Superclass property: \\(child.label!): \\(child.value)\")\n    }\n}\n"}],"position":{"start":{"line":63,"column":1,"offset":1532},"end":{"line":69,"column":4,"offset":1719}}},"children":"if let superclassMirror = mirror.superclassMirror {\n    for child in superclassMirror.children {\n        print(\"Superclass property: \\(child.label!): \\(child.value)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 방법을 사용하면 상속 계층 구조에서 상위 클래스의 속성도 분석할 수 있습니다."}],"\n",["$","h3",null,{"id":"5c186db9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"CustomReflectable 프로토콜"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["객체의 리플렉션 출력을 커스터마이징하고 싶다면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CustomReflectable","position":{"start":{"line":75,"column":27,"offset":1822},"end":{"line":75,"column":46,"offset":1841}}}],"position":{"start":{"line":75,"column":27,"offset":1822},"end":{"line":75,"column":46,"offset":1841}}},"children":"CustomReflectable"}}]," 프로토콜을 사용할 수 있습니다. 이 프로토콜을 채택한 객체는 자신만의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":75,"column":86,"offset":1881},"end":{"line":75,"column":94,"offset":1889}}}],"position":{"start":{"line":75,"column":86,"offset":1881},"end":{"line":75,"column":94,"offset":1889}}},"children":"Mirror"}}],"를 제공할 수 있습니다."]}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct CustomPerson: CustomReflectable {\n    var name: String\n    var age: Int\n    var customMirror: Mirror {\n        return Mirror(self, children: [\"customName\": name, \"customAge\": age])\n    }\n}\n\nlet customPerson = CustomPerson(name: \"Bob\", age: 25)\nlet customMirror = Mirror(reflecting: customPerson)\nfor child in customMirror.children {\n    print(\"\\(child.label!): \\(child.value)\")\n}\n"}],"position":{"start":{"line":77,"column":1,"offset":1904},"end":{"line":91,"column":4,"offset":2303}}},"children":"struct CustomPerson: CustomReflectable {\n    var name: String\n    var age: Int\n    var customMirror: Mirror {\n        return Mirror(self, children: [\"customName\": name, \"customAge\": age])\n    }\n}\n\nlet customPerson = CustomPerson(name: \"Bob\", age: 25)\nlet customMirror = Mirror(reflecting: customPerson)\nfor child in customMirror.children {\n    print(\"\\(child.label!): \\(child.value)\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"출력 결과는 다음과 같습니다:"}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"customName: Bob\ncustomAge: 25\n"}],"position":{"start":{"line":95,"column":1,"offset":2323},"end":{"line":98,"column":4,"offset":2360}}},"children":"customName: Bob\ncustomAge: 25\n"}}]}],"\n",["$","h2",null,{"id":"317be2e6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실용적인 사용 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":102,"column":1,"offset":2377},"end":{"line":102,"column":9,"offset":2385}}}],"position":{"start":{"line":102,"column":1,"offset":2377},"end":{"line":102,"column":9,"offset":2385}}},"children":"Mirror"}}],"는 다양한 상황에서 유용하게 사용될 수 있습니다. 예를 들어, JSON 직렬화 및 역직렬화, 디버깅 및 테스트, 그리고 게터 및 세터를 동적으로 호출하는 등의 작업에 활용될 수 있습니다."]}],"\n",["$","h3",null,{"id":"f7d5c6e7","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"JSON 직렬화 지원"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리플렉션을 통해 객체를 JSON으로 직렬화할 수 있는 유틸리티를 쉽게 작성할 수 있습니다."}],"\n",["$","pre","pre-8",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func toJSON(_ value: Any) -> String? {\n    let mirror = Mirror(reflecting: value)\n    var dict = [String: Any]()\n    for child in mirror.children {\n        guard let label = child.label else { continue }\n        dict[label] = child.value\n    }\n    if let jsonData = try? JSONSerialization.data(withJSONObject: dict, options: .prettyPrinted) {\n        return String(data: jsonData, encoding: .utf8)\n    }\n    return nil\n}\n\nlet jsonString = toJSON(person)\nprint(jsonString ?? \"Failed to serialize to JSON\")\n"}],"position":{"start":{"line":108,"column":1,"offset":2560},"end":{"line":124,"column":4,"offset":3077}}},"children":"func toJSON(_ value: Any) -> String? {\n    let mirror = Mirror(reflecting: value)\n    var dict = [String: Any]()\n    for child in mirror.children {\n        guard let label = child.label else { continue }\n        dict[label] = child.value\n    }\n    if let jsonData = try? JSONSerialization.data(withJSONObject: dict, options: .prettyPrinted) {\n        return String(data: jsonData, encoding: .utf8)\n    }\n    return nil\n}\n\nlet jsonString = toJSON(person)\nprint(jsonString ?? \"Failed to serialize to JSON\")\n"}}]}],"\n",["$","h3",null,{"id":"cac42c1e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"디버깅 및 테스트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["디버깅 시 객체 상태를 빠르게 파악하는 데 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":128,"column":25,"offset":3118},"end":{"line":128,"column":33,"offset":3126}}}],"position":{"start":{"line":128,"column":25,"offset":3118},"end":{"line":128,"column":33,"offset":3126}}},"children":"Mirror"}}],"를 사용할 수 있습니다. 예를 들어, 변경이 많이 이루어지는 객체의 현재 상태를 검증할 때 유용합니다."]}],"\n",["$","pre","pre-9",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func debugPrint(_ value: Any) {\n    let mirror = Mirror(reflecting: value)\n    for child in mirror.children {\n        print(\"\\(child.label!): \\(child.value)\")\n    }\n}\n\ndebugPrint(person)\n"}],"position":{"start":{"line":130,"column":1,"offset":3185},"end":{"line":139,"column":4,"offset":3384}}},"children":"func debugPrint(_ value: Any) {\n    let mirror = Mirror(reflecting: value)\n    for child in mirror.children {\n        print(\"\\(child.label!): \\(child.value)\")\n    }\n}\n\ndebugPrint(person)\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":143,"column":8,"offset":3400},"end":{"line":143,"column":16,"offset":3408}}}],"position":{"start":{"line":143,"column":8,"offset":3400},"end":{"line":143,"column":16,"offset":3408}}},"children":"Mirror"}}],"는 런타임 객체 분석을 가능하게 하는 매우 강력한 도구입니다. 이를 사용하여 동적인 런타임 정보를 얻고, 디버깅, 테스트, JSON 직렬화 등 다양한 작업을 효율적으로 수행할 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":143,"column":129,"offset":3521},"end":{"line":143,"column":137,"offset":3529}}}],"position":{"start":{"line":143,"column":129,"offset":3521},"end":{"line":143,"column":137,"offset":3529}}},"children":"Mirror"}}],"의 기본 개념과 사용법, 그리고 다양한 실용적인 사용 사례를 다루었습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mirror","position":{"start":{"line":143,"column":179,"offset":3571},"end":{"line":143,"column":187,"offset":3579}}}],"position":{"start":{"line":143,"column":179,"offset":3571},"end":{"line":143,"column":187,"offset":3579}}},"children":"Mirror"}}],"를 적절히 활용하면 Swift 프로그래밍에서 한층 더 높은 수준의 유연성과 효율성을 달성할 수 있을 것입니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"런타임에 Swift 객체 분석하기: Mirror의 모든 것","toc":[{"tagName":"h1","title":"런타임에 Swift 객체 분석하기: Mirror의 모든 것","id":"32050b09"},{"tagName":"h2","title":"Mirror란 무엇인가?","id":"d5ec7419"},{"tagName":"h2","title":"Mirror의 기본 사용법","id":"07d48540"},{"tagName":"h2","title":"심화 기능: Mirror를 활용한 객체 분석","id":"766c0049"},{"tagName":"h3","title":"객체의 타입 확인하기","id":"800456f4"},{"tagName":"h3","title":"부모 클래스 탐색하기","id":"7718470f"},{"tagName":"h3","title":"CustomReflectable 프로토콜","id":"5c186db9"},{"tagName":"h2","title":"실용적인 사용 사례","id":"317be2e6"},{"tagName":"h3","title":"JSON 직렬화 지원","id":"f7d5c6e7"},{"tagName":"h3","title":"디버깅 및 테스트","id":"cac42c1e"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
