1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","swiftui-list-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0-2%ED%83%84","d"],{"children":["__PAGE__?{\"slug\":\"swiftui-list-완벽-마스터-2탄\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","swiftui-list-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0-2%ED%83%84","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"swiftui-list-완벽-마스터-2탄\"}"},"styles":[]}],"segment":["slug","swiftui-list-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0-2%ED%83%84","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다."}],["$","meta","3",{"name":"keywords","content":"swift,swiftUI"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/swiftui-list-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0-2%ED%83%84"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/swiftui-list-%EC%99%84%EB%B2%BD-%EB%A7%88%EC%8A%A4%ED%84%B0-2%ED%83%84"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
14:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
15:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T4f0,struct ContentView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
f:T4f0,struct ContentView: View {
    @State private var searchText = ""
    let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

    var filteredItems: [String] {
        if searchText.isEmpty {
            return items
        } else {
            return items.filter { $0.contains(searchText) }
        }
    }

    var body: some View {
        VStack {
            SearchBar(text: $searchText)
            List(filteredItems, id: \.self) { item in
                Text(item)
            }
        }
    }
}

struct SearchBar: UIViewRepresentable {
    @Binding var text: String

    class Coordinator: NSObject, UISearchBarDelegate {
        @Binding var text: String

        init(text: Binding<String>) {
            _text = text
        }

        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
            text = searchText
        }
    }

    func makeCoordinator() -> Coordinator {
        return Coordinator(text: $text)
    }

    func makeUIView(context: Context) -> UISearchBar {
        let searchBar = UISearchBar(frame: .zero)
        searchBar.delegate = context.coordinator
        return searchBar
    }

    func updateUIView(_ uiView: UISearchBar, context: Context) {
        uiView.text = text
    }
}
11:T20da,
## SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법

SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다.

### 리스트의 고급 기능

1. **커스텀 셀 사용하기**
   리스트의 기본 텍스트 셀 외에도 복잡한 커스텀 셀을 만들 수 있습니다. 예를 들어, 이미지와 텍스트가 함께 포함된 셀을 만들려면 다음과 같이 할 수 있습니다:

   ```swift
   struct CustomRow: View {
       var item: String

       var body: some View {
           HStack {
               Image(systemName: "star")
               Text(item)
           }
       }
   }

   struct ContentView: View {
       let items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           List(items, id: \.self) { item in
               CustomRow(item: item)
           }
       }
   }
   ```

2. **그룹화된 리스트**
   그룹화된 리스트는 아이템을 논리적으로 그룹화하여 보여줍니다. 이를 통해 리스트의 구조를 더욱 명확하게 만들 수 있습니다:

   ```swift
   struct ContentView: View {
       let items = [
           ["Header 1": ["Item 1", "Item 2"]],
           ["Header 2": ["Item 3", "Item 4"]]
       ]

       var body: some View {
           List {
               ForEach(items, id: \.keys.first!) { section in
                   Section(header: Text(section.keys.first!)) {
                       ForEach(section.values.first!, id: \.self) { item in
                           Text(item)
                       }
                   }
               }
           }
       }
   }
   ```

3. **리스트 스타일 커스터마이징**
   `listStyle` 수정자를 사용하여 리스트의 외관을 변경할 수 있습니다. 다양한 스타일 옵션을 제공하여 리스트의 디자인을 맞춤 설정할 수 있습니다:

   ```swift
   var body: some View {
       List(items, id: \.self) { item in
           Text(item)
       }
       .listStyle(InsetGroupedListStyle())
   }
   ```

4. **비동기 데이터 로딩**
   SwiftUI와 Combine 프레임워크를 사용하여 비동기 데이터 로딩을 구현할 수 있습니다. 예를 들어, API 호출을 통해 데이터를 로드하고 리스트에 표시하는 방법은 다음과 같습니다:

   ```swift
   class ViewModel: ObservableObject {
       @Published var items: [String] = []

       func fetchData() {
           let url = URL(string: "https://api.example.com/items")!
           URLSession.shared.dataTask(with: url) { data, response, error in
               if let data = data {
                   let items = try? JSONDecoder().decode([String].self, from: data)
                   DispatchQueue.main.async {
                       self.items = items ?? []
                   }
               }
           }.resume()
       }
   }

   struct ContentView: View {
       @StateObject private var viewModel = ViewModel()

       var body: some View {
           List(viewModel.items, id: \.self) { item in
               Text(item)
           }
           .onAppear {
               viewModel.fetchData()
           }
       }
   }
   ```

5. **편집 가능한 리스트**
   리스트의 아이템을 추가, 삭제 및 재정렬할 수 있는 편집 가능한 리스트를 만들 수 있습니다. `onMove` 및 `onDelete` 수정자를 사용하여 이러한 기능을 구현할 수 있습니다:

   ```swift
   struct ContentView: View {
       @State private var items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           List {
               ForEach(items, id: \.self) { item in
                   Text(item)
               }
               .onDelete(perform: deleteItems)
               .onMove(perform: moveItems)
           }
           .toolbar {
               EditButton()
           }
       }

       func deleteItems(at offsets: IndexSet) {
           items.remove(atOffsets: offsets)
       }

       func moveItems(from source: IndexSet, to destination: Int) {
           items.move(fromOffsets: source, toOffset: destination)
       }
   }
   ```

### 심화 활용 예제

1. **필터링된 리스트**
   사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. `SearchBar`를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:

   ```swift
   struct ContentView: View {
       @State private var searchText = ""
       let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

       var filteredItems: [String] {
           if searchText.isEmpty {
               return items
           } else {
               return items.filter { $0.contains(searchText) }
           }
       }

       var body: some View {
           VStack {
               SearchBar(text: $searchText)
               List(filteredItems, id: \.self) { item in
                   Text(item)
               }
           }
       }
   }

   struct SearchBar: UIViewRepresentable {
       @Binding var text: String

       class Coordinator: NSObject, UISearchBarDelegate {
           @Binding var text: String

           init(text: Binding<String>) {
               _text = text
           }

           func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
               text = searchText
           }
       }

       func makeCoordinator() -> Coordinator {
           return Coordinator(text: $text)
       }

       func makeUIView(context: Context) -> UISearchBar {
           let searchBar = UISearchBar(frame: .zero)
           searchBar.delegate = context.coordinator
           return searchBar
       }

       func updateUIView(_ uiView: UISearchBar, context: Context) {
           uiView.text = text
       }
   }
   ```

2. **리스트 내비게이션**
   리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. `NavigationView`와 `NavigationLink`를 사용하여 다음과 같이 할 수 있습니다:

   ```swift
   struct ContentView: View {
       let items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           NavigationView {
               List(items, id: \.self) { item in
                   NavigationLink(destination: DetailView(item: item)) {
                       Text(item)
                   }
               }
               .navigationTitle("Items")
           }
       }
   }

   struct DetailView: View {
       let item: String

       var body: some View {
           Text("Detail for \(item)")
               .navigationTitle(item)
       }
   }
   ```

### 성능 최적화

리스트의 성능을 최적화하기 위해서는 고유 식별자를 사용하고, 가능한 경우 LazyVStack을 사용하는 것이 좋습니다. 또한, 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다.

1. **고유 식별자 사용**
   리스트 아이템의 고유 식별자를 지정하여 효율적인 업데이트를 보장합니다.

2. **LazyVStack 사용**
   많은 아이템을 렌더링할 때 `LazyVStack`를 사용하여 성능을 개선할 수 있습니다.

3. **상태 관리**
   상태 변수가 변경될 때마다 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다. 상태 변수를 최소화하고, 가능한 경우 부모 뷰가 아닌 하위 뷰에서 상태를 관리하도록 합니다.

### 결론

SwiftUI List의 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 구현할 수 있습니다. 멀티 선택, 데이터 새로고침, 섹션 구성, 계층형 리스트, 비동기 데이터 로딩, 편집 가능한 리스트, 필터링된 리스트, 리스트 내비게이션 등 다양한 기능을 활용하여 사용자 경험을 향상시킬 수 있습니다.

### 추가 자료

자세한 예제와 고급 사용법은 아래 자료를 참조하세요:

- [호현문님의 SwiftUI List 튜토리얼](https://www.hohyeonmoon.com/blog/swiftui-tutorial-list)
- [Apple 개발자 문서](https://developer.apple.com/documentation/swiftui/list)
- [Jake Kim의 iOS 개발 블로그](https://ios-development.tistory.com/1094)
12:T20da,
## SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법

SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다.

### 리스트의 고급 기능

1. **커스텀 셀 사용하기**
   리스트의 기본 텍스트 셀 외에도 복잡한 커스텀 셀을 만들 수 있습니다. 예를 들어, 이미지와 텍스트가 함께 포함된 셀을 만들려면 다음과 같이 할 수 있습니다:

   ```swift
   struct CustomRow: View {
       var item: String

       var body: some View {
           HStack {
               Image(systemName: "star")
               Text(item)
           }
       }
   }

   struct ContentView: View {
       let items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           List(items, id: \.self) { item in
               CustomRow(item: item)
           }
       }
   }
   ```

2. **그룹화된 리스트**
   그룹화된 리스트는 아이템을 논리적으로 그룹화하여 보여줍니다. 이를 통해 리스트의 구조를 더욱 명확하게 만들 수 있습니다:

   ```swift
   struct ContentView: View {
       let items = [
           ["Header 1": ["Item 1", "Item 2"]],
           ["Header 2": ["Item 3", "Item 4"]]
       ]

       var body: some View {
           List {
               ForEach(items, id: \.keys.first!) { section in
                   Section(header: Text(section.keys.first!)) {
                       ForEach(section.values.first!, id: \.self) { item in
                           Text(item)
                       }
                   }
               }
           }
       }
   }
   ```

3. **리스트 스타일 커스터마이징**
   `listStyle` 수정자를 사용하여 리스트의 외관을 변경할 수 있습니다. 다양한 스타일 옵션을 제공하여 리스트의 디자인을 맞춤 설정할 수 있습니다:

   ```swift
   var body: some View {
       List(items, id: \.self) { item in
           Text(item)
       }
       .listStyle(InsetGroupedListStyle())
   }
   ```

4. **비동기 데이터 로딩**
   SwiftUI와 Combine 프레임워크를 사용하여 비동기 데이터 로딩을 구현할 수 있습니다. 예를 들어, API 호출을 통해 데이터를 로드하고 리스트에 표시하는 방법은 다음과 같습니다:

   ```swift
   class ViewModel: ObservableObject {
       @Published var items: [String] = []

       func fetchData() {
           let url = URL(string: "https://api.example.com/items")!
           URLSession.shared.dataTask(with: url) { data, response, error in
               if let data = data {
                   let items = try? JSONDecoder().decode([String].self, from: data)
                   DispatchQueue.main.async {
                       self.items = items ?? []
                   }
               }
           }.resume()
       }
   }

   struct ContentView: View {
       @StateObject private var viewModel = ViewModel()

       var body: some View {
           List(viewModel.items, id: \.self) { item in
               Text(item)
           }
           .onAppear {
               viewModel.fetchData()
           }
       }
   }
   ```

5. **편집 가능한 리스트**
   리스트의 아이템을 추가, 삭제 및 재정렬할 수 있는 편집 가능한 리스트를 만들 수 있습니다. `onMove` 및 `onDelete` 수정자를 사용하여 이러한 기능을 구현할 수 있습니다:

   ```swift
   struct ContentView: View {
       @State private var items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           List {
               ForEach(items, id: \.self) { item in
                   Text(item)
               }
               .onDelete(perform: deleteItems)
               .onMove(perform: moveItems)
           }
           .toolbar {
               EditButton()
           }
       }

       func deleteItems(at offsets: IndexSet) {
           items.remove(atOffsets: offsets)
       }

       func moveItems(from source: IndexSet, to destination: Int) {
           items.move(fromOffsets: source, toOffset: destination)
       }
   }
   ```

### 심화 활용 예제

1. **필터링된 리스트**
   사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. `SearchBar`를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:

   ```swift
   struct ContentView: View {
       @State private var searchText = ""
       let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

       var filteredItems: [String] {
           if searchText.isEmpty {
               return items
           } else {
               return items.filter { $0.contains(searchText) }
           }
       }

       var body: some View {
           VStack {
               SearchBar(text: $searchText)
               List(filteredItems, id: \.self) { item in
                   Text(item)
               }
           }
       }
   }

   struct SearchBar: UIViewRepresentable {
       @Binding var text: String

       class Coordinator: NSObject, UISearchBarDelegate {
           @Binding var text: String

           init(text: Binding<String>) {
               _text = text
           }

           func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
               text = searchText
           }
       }

       func makeCoordinator() -> Coordinator {
           return Coordinator(text: $text)
       }

       func makeUIView(context: Context) -> UISearchBar {
           let searchBar = UISearchBar(frame: .zero)
           searchBar.delegate = context.coordinator
           return searchBar
       }

       func updateUIView(_ uiView: UISearchBar, context: Context) {
           uiView.text = text
       }
   }
   ```

2. **리스트 내비게이션**
   리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. `NavigationView`와 `NavigationLink`를 사용하여 다음과 같이 할 수 있습니다:

   ```swift
   struct ContentView: View {
       let items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           NavigationView {
               List(items, id: \.self) { item in
                   NavigationLink(destination: DetailView(item: item)) {
                       Text(item)
                   }
               }
               .navigationTitle("Items")
           }
       }
   }

   struct DetailView: View {
       let item: String

       var body: some View {
           Text("Detail for \(item)")
               .navigationTitle(item)
       }
   }
   ```

### 성능 최적화

리스트의 성능을 최적화하기 위해서는 고유 식별자를 사용하고, 가능한 경우 LazyVStack을 사용하는 것이 좋습니다. 또한, 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다.

1. **고유 식별자 사용**
   리스트 아이템의 고유 식별자를 지정하여 효율적인 업데이트를 보장합니다.

2. **LazyVStack 사용**
   많은 아이템을 렌더링할 때 `LazyVStack`를 사용하여 성능을 개선할 수 있습니다.

3. **상태 관리**
   상태 변수가 변경될 때마다 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다. 상태 변수를 최소화하고, 가능한 경우 부모 뷰가 아닌 하위 뷰에서 상태를 관리하도록 합니다.

### 결론

SwiftUI List의 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 구현할 수 있습니다. 멀티 선택, 데이터 새로고침, 섹션 구성, 계층형 리스트, 비동기 데이터 로딩, 편집 가능한 리스트, 필터링된 리스트, 리스트 내비게이션 등 다양한 기능을 활용하여 사용자 경험을 향상시킬 수 있습니다.

### 추가 자료

자세한 예제와 고급 사용법은 아래 자료를 참조하세요:

- [호현문님의 SwiftUI List 튜토리얼](https://www.hohyeonmoon.com/blog/swiftui-tutorial-list)
- [Apple 개발자 문서](https://developer.apple.com/documentation/swiftui/list)
- [Jake Kim의 iOS 개발 블로그](https://ios-development.tistory.com/1094)
13:T20da,
## SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법

SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다.

### 리스트의 고급 기능

1. **커스텀 셀 사용하기**
   리스트의 기본 텍스트 셀 외에도 복잡한 커스텀 셀을 만들 수 있습니다. 예를 들어, 이미지와 텍스트가 함께 포함된 셀을 만들려면 다음과 같이 할 수 있습니다:

   ```swift
   struct CustomRow: View {
       var item: String

       var body: some View {
           HStack {
               Image(systemName: "star")
               Text(item)
           }
       }
   }

   struct ContentView: View {
       let items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           List(items, id: \.self) { item in
               CustomRow(item: item)
           }
       }
   }
   ```

2. **그룹화된 리스트**
   그룹화된 리스트는 아이템을 논리적으로 그룹화하여 보여줍니다. 이를 통해 리스트의 구조를 더욱 명확하게 만들 수 있습니다:

   ```swift
   struct ContentView: View {
       let items = [
           ["Header 1": ["Item 1", "Item 2"]],
           ["Header 2": ["Item 3", "Item 4"]]
       ]

       var body: some View {
           List {
               ForEach(items, id: \.keys.first!) { section in
                   Section(header: Text(section.keys.first!)) {
                       ForEach(section.values.first!, id: \.self) { item in
                           Text(item)
                       }
                   }
               }
           }
       }
   }
   ```

3. **리스트 스타일 커스터마이징**
   `listStyle` 수정자를 사용하여 리스트의 외관을 변경할 수 있습니다. 다양한 스타일 옵션을 제공하여 리스트의 디자인을 맞춤 설정할 수 있습니다:

   ```swift
   var body: some View {
       List(items, id: \.self) { item in
           Text(item)
       }
       .listStyle(InsetGroupedListStyle())
   }
   ```

4. **비동기 데이터 로딩**
   SwiftUI와 Combine 프레임워크를 사용하여 비동기 데이터 로딩을 구현할 수 있습니다. 예를 들어, API 호출을 통해 데이터를 로드하고 리스트에 표시하는 방법은 다음과 같습니다:

   ```swift
   class ViewModel: ObservableObject {
       @Published var items: [String] = []

       func fetchData() {
           let url = URL(string: "https://api.example.com/items")!
           URLSession.shared.dataTask(with: url) { data, response, error in
               if let data = data {
                   let items = try? JSONDecoder().decode([String].self, from: data)
                   DispatchQueue.main.async {
                       self.items = items ?? []
                   }
               }
           }.resume()
       }
   }

   struct ContentView: View {
       @StateObject private var viewModel = ViewModel()

       var body: some View {
           List(viewModel.items, id: \.self) { item in
               Text(item)
           }
           .onAppear {
               viewModel.fetchData()
           }
       }
   }
   ```

5. **편집 가능한 리스트**
   리스트의 아이템을 추가, 삭제 및 재정렬할 수 있는 편집 가능한 리스트를 만들 수 있습니다. `onMove` 및 `onDelete` 수정자를 사용하여 이러한 기능을 구현할 수 있습니다:

   ```swift
   struct ContentView: View {
       @State private var items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           List {
               ForEach(items, id: \.self) { item in
                   Text(item)
               }
               .onDelete(perform: deleteItems)
               .onMove(perform: moveItems)
           }
           .toolbar {
               EditButton()
           }
       }

       func deleteItems(at offsets: IndexSet) {
           items.remove(atOffsets: offsets)
       }

       func moveItems(from source: IndexSet, to destination: Int) {
           items.move(fromOffsets: source, toOffset: destination)
       }
   }
   ```

### 심화 활용 예제

1. **필터링된 리스트**
   사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. `SearchBar`를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:

   ```swift
   struct ContentView: View {
       @State private var searchText = ""
       let items = ["Apple", "Banana", "Cherry", "Date", "Fig", "Grape"]

       var filteredItems: [String] {
           if searchText.isEmpty {
               return items
           } else {
               return items.filter { $0.contains(searchText) }
           }
       }

       var body: some View {
           VStack {
               SearchBar(text: $searchText)
               List(filteredItems, id: \.self) { item in
                   Text(item)
               }
           }
       }
   }

   struct SearchBar: UIViewRepresentable {
       @Binding var text: String

       class Coordinator: NSObject, UISearchBarDelegate {
           @Binding var text: String

           init(text: Binding<String>) {
               _text = text
           }

           func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
               text = searchText
           }
       }

       func makeCoordinator() -> Coordinator {
           return Coordinator(text: $text)
       }

       func makeUIView(context: Context) -> UISearchBar {
           let searchBar = UISearchBar(frame: .zero)
           searchBar.delegate = context.coordinator
           return searchBar
       }

       func updateUIView(_ uiView: UISearchBar, context: Context) {
           uiView.text = text
       }
   }
   ```

2. **리스트 내비게이션**
   리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. `NavigationView`와 `NavigationLink`를 사용하여 다음과 같이 할 수 있습니다:

   ```swift
   struct ContentView: View {
       let items = ["Item 1", "Item 2", "Item 3"]

       var body: some View {
           NavigationView {
               List(items, id: \.self) { item in
                   NavigationLink(destination: DetailView(item: item)) {
                       Text(item)
                   }
               }
               .navigationTitle("Items")
           }
       }
   }

   struct DetailView: View {
       let item: String

       var body: some View {
           Text("Detail for \(item)")
               .navigationTitle(item)
       }
   }
   ```

### 성능 최적화

리스트의 성능을 최적화하기 위해서는 고유 식별자를 사용하고, 가능한 경우 LazyVStack을 사용하는 것이 좋습니다. 또한, 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다.

1. **고유 식별자 사용**
   리스트 아이템의 고유 식별자를 지정하여 효율적인 업데이트를 보장합니다.

2. **LazyVStack 사용**
   많은 아이템을 렌더링할 때 `LazyVStack`를 사용하여 성능을 개선할 수 있습니다.

3. **상태 관리**
   상태 변수가 변경될 때마다 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다. 상태 변수를 최소화하고, 가능한 경우 부모 뷰가 아닌 하위 뷰에서 상태를 관리하도록 합니다.

### 결론

SwiftUI List의 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 구현할 수 있습니다. 멀티 선택, 데이터 새로고침, 섹션 구성, 계층형 리스트, 비동기 데이터 로딩, 편집 가능한 리스트, 필터링된 리스트, 리스트 내비게이션 등 다양한 기능을 활용하여 사용자 경험을 향상시킬 수 있습니다.

### 추가 자료

자세한 예제와 고급 사용법은 아래 자료를 참조하세요:

- [호현문님의 SwiftUI List 튜토리얼](https://www.hohyeonmoon.com/blog/swiftui-tutorial-list)
- [Apple 개발자 문서](https://developer.apple.com/documentation/swiftui/list)
- [Jake Kim의 iOS 개발 블로그](https://ios-development.tistory.com/1094)
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-25"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"16ae5172","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다."}],"\n",["$","h3",null,{"id":"2dee2333","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"리스트의 고급 기능"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"커스텀 셀 사용하기"}],"\n리스트의 기본 텍스트 셀 외에도 복잡한 커스텀 셀을 만들 수 있습니다. 예를 들어, 이미지와 텍스트가 함께 포함된 셀을 만들려면 다음과 같이 할 수 있습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct CustomRow: View {\n    var item: String\n\n    var body: some View {\n        HStack {\n            Image(systemName: \"star\")\n            Text(item)\n        }\n    }\n}\n\nstruct ContentView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        List(items, id: \\.self) { item in\n            CustomRow(item: item)\n        }\n    }\n}\n"}],"position":{"start":{"line":11,"column":4,"offset":289},"end":{"line":32,"column":7,"offset":720}}},"children":"struct CustomRow: View {\n    var item: String\n\n    var body: some View {\n        HStack {\n            Image(systemName: \"star\")\n            Text(item)\n        }\n    }\n}\n\nstruct ContentView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        List(items, id: \\.self) { item in\n            CustomRow(item: item)\n        }\n    }\n}\n"}}]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"그룹화된 리스트"}],"\n그룹화된 리스트는 아이템을 논리적으로 그룹화하여 보여줍니다. 이를 통해 리스트의 구조를 더욱 명확하게 만들 수 있습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    let items = [\n        [\"Header 1\": [\"Item 1\", \"Item 2\"]],\n        [\"Header 2\": [\"Item 3\", \"Item 4\"]]\n    ]\n\n    var body: some View {\n        List {\n            ForEach(items, id: \\.keys.first!) { section in\n                Section(header: Text(section.keys.first!)) {\n                    ForEach(section.values.first!, id: \\.self) { item in\n                        Text(item)\n                    }\n                }\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":37,"column":4,"offset":813},"end":{"line":56,"column":7,"offset":1359}}},"children":"struct ContentView: View {\n    let items = [\n        [\"Header 1\": [\"Item 1\", \"Item 2\"]],\n        [\"Header 2\": [\"Item 3\", \"Item 4\"]]\n    ]\n\n    var body: some View {\n        List {\n            ForEach(items, id: \\.keys.first!) { section in\n                Section(header: Text(section.keys.first!)) {\n                    ForEach(section.values.first!, id: \\.self) { item in\n                        Text(item)\n                    }\n                }\n            }\n        }\n    }\n}\n"}}]}],"\n"]}],"\n",["$","li","li-2",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"리스트 스타일 커스터마이징"}],"\n",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"listStyle","position":{"start":{"line":59,"column":4,"offset":1386},"end":{"line":59,"column":15,"offset":1397}}}],"position":{"start":{"line":59,"column":4,"offset":1386},"end":{"line":59,"column":15,"offset":1397}}},"children":"listStyle"}}]," 수정자를 사용하여 리스트의 외관을 변경할 수 있습니다. 다양한 스타일 옵션을 제공하여 리스트의 디자인을 맞춤 설정할 수 있습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var body: some View {\n    List(items, id: \\.self) { item in\n        Text(item)\n    }\n    .listStyle(InsetGroupedListStyle())\n}\n"}],"position":{"start":{"line":61,"column":4,"offset":1475},"end":{"line":68,"column":7,"offset":1635}}},"children":"var body: some View {\n    List(items, id: \\.self) { item in\n        Text(item)\n    }\n    .listStyle(InsetGroupedListStyle())\n}\n"}}]}],"\n"]}],"\n",["$","li","li-3",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"비동기 데이터 로딩"}],"\nSwiftUI와 Combine 프레임워크를 사용하여 비동기 데이터 로딩을 구현할 수 있습니다. 예를 들어, API 호출을 통해 데이터를 로드하고 리스트에 표시하는 방법은 다음과 같습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewModel: ObservableObject {\n    @Published var items: [String] = []\n\n    func fetchData() {\n        let url = URL(string: \"https://api.example.com/items\")!\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let data = data {\n                let items = try? JSONDecoder().decode([String].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = items ?? []\n                }\n            }\n        }.resume()\n    }\n}\n\nstruct ContentView: View {\n    @StateObject private var viewModel = ViewModel()\n\n    var body: some View {\n        List(viewModel.items, id: \\.self) { item in\n            Text(item)\n        }\n        .onAppear {\n            viewModel.fetchData()\n        }\n    }\n}\n"}],"position":{"start":{"line":73,"column":4,"offset":1767},"end":{"line":102,"column":7,"offset":2620}}},"children":"class ViewModel: ObservableObject {\n    @Published var items: [String] = []\n\n    func fetchData() {\n        let url = URL(string: \"https://api.example.com/items\")!\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let data = data {\n                let items = try? JSONDecoder().decode([String].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = items ?? []\n                }\n            }\n        }.resume()\n    }\n}\n\nstruct ContentView: View {\n    @StateObject private var viewModel = ViewModel()\n\n    var body: some View {\n        List(viewModel.items, id: \\.self) { item in\n            Text(item)\n        }\n        .onAppear {\n            viewModel.fetchData()\n        }\n    }\n}\n"}}]}],"\n"]}],"\n",["$","li","li-4",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"편집 가능한 리스트"}],"\n리스트의 아이템을 추가, 삭제 및 재정렬할 수 있는 편집 가능한 리스트를 만들 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onMove","position":{"start":{"line":105,"column":56,"offset":2695},"end":{"line":105,"column":64,"offset":2703}}}],"position":{"start":{"line":105,"column":56,"offset":2695},"end":{"line":105,"column":64,"offset":2703}}},"children":"onMove"}}]," 및 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"onDelete","position":{"start":{"line":105,"column":67,"offset":2706},"end":{"line":105,"column":77,"offset":2716}}}],"position":{"start":{"line":105,"column":67,"offset":2706},"end":{"line":105,"column":77,"offset":2716}}},"children":"onDelete"}}]," 수정자를 사용하여 이러한 기능을 구현할 수 있습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    @State private var items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        List {\n            ForEach(items, id: \\.self) { item in\n                Text(item)\n            }\n            .onDelete(perform: deleteItems)\n            .onMove(perform: moveItems)\n        }\n        .toolbar {\n            EditButton()\n        }\n    }\n\n    func deleteItems(at offsets: IndexSet) {\n        items.remove(atOffsets: offsets)\n    }\n\n    func moveItems(from source: IndexSet, to destination: Int) {\n        items.move(fromOffsets: source, toOffset: destination)\n    }\n}\n"}],"position":{"start":{"line":107,"column":4,"offset":2751},"end":{"line":132,"column":7,"offset":3434}}},"children":"struct ContentView: View {\n    @State private var items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        List {\n            ForEach(items, id: \\.self) { item in\n                Text(item)\n            }\n            .onDelete(perform: deleteItems)\n            .onMove(perform: moveItems)\n        }\n        .toolbar {\n            EditButton()\n        }\n    }\n\n    func deleteItems(at offsets: IndexSet) {\n        items.remove(atOffsets: offsets)\n    }\n\n    func moveItems(from source: IndexSet, to destination: Int) {\n        items.move(fromOffsets: source, toOffset: destination)\n    }\n}\n"}}]}],"\n"]}],"\n"]}],"\n",["$","h3",null,{"id":"feb218b8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"심화 활용 예제"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"필터링된 리스트"}],"\n사용자 입력에 따라 리스트 아이템을 필터링하는 기능을 구현할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SearchBar","position":{"start":{"line":137,"column":46,"offset":3511},"end":{"line":137,"column":57,"offset":3522}}}],"position":{"start":{"line":137,"column":46,"offset":3511},"end":{"line":137,"column":57,"offset":3522}}},"children":"SearchBar"}}],"를 사용하여 리스트를 동적으로 필터링하는 방법은 다음과 같습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":139,"column":4,"offset":3563},"end":{"line":191,"column":7,"offset":4968}}},"children":"$f"}}]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"리스트 내비게이션"}],"\n리스트 아이템을 선택하면 상세 화면으로 이동하는 네비게이션을 구현할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NavigationView","position":{"start":{"line":194,"column":50,"offset":5036},"end":{"line":194,"column":66,"offset":5052}}}],"position":{"start":{"line":194,"column":50,"offset":5036},"end":{"line":194,"column":66,"offset":5052}}},"children":"NavigationView"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NavigationLink","position":{"start":{"line":194,"column":68,"offset":5054},"end":{"line":194,"column":84,"offset":5070}}}],"position":{"start":{"line":194,"column":68,"offset":5054},"end":{"line":194,"column":84,"offset":5070}}},"children":"NavigationLink"}}],"를 사용하여 다음과 같이 할 수 있습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) { item in\n                NavigationLink(destination: DetailView(item: item)) {\n                    Text(item)\n                }\n            }\n            .navigationTitle(\"Items\")\n        }\n    }\n}\n\nstruct DetailView: View {\n    let item: String\n\n    var body: some View {\n        Text(\"Detail for \\(item)\")\n            .navigationTitle(item)\n    }\n}\n"}],"position":{"start":{"line":196,"column":4,"offset":5098},"end":{"line":220,"column":7,"offset":5687}}},"children":"struct ContentView: View {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    var body: some View {\n        NavigationView {\n            List(items, id: \\.self) { item in\n                NavigationLink(destination: DetailView(item: item)) {\n                    Text(item)\n                }\n            }\n            .navigationTitle(\"Items\")\n        }\n    }\n}\n\nstruct DetailView: View {\n    let item: String\n\n    var body: some View {\n        Text(\"Detail for \\(item)\")\n            .navigationTitle(item)\n    }\n}\n"}}]}],"\n"]}],"\n"]}],"\n",["$","h3",null,{"id":"d0b3c807","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"리스트의 성능을 최적화하기 위해서는 고유 식별자를 사용하고, 가능한 경우 LazyVStack을 사용하는 것이 좋습니다. 또한, 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다."}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"고유 식별자 사용"}],"\n리스트 아이템의 고유 식별자를 지정하여 효율적인 업데이트를 보장합니다."]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"LazyVStack 사용"}],"\n많은 아이템을 렌더링할 때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"LazyVStack","position":{"start":{"line":230,"column":19,"offset":5911},"end":{"line":230,"column":31,"offset":5923}}}],"position":{"start":{"line":230,"column":19,"offset":5911},"end":{"line":230,"column":31,"offset":5923}}},"children":"LazyVStack"}}],"를 사용하여 성능을 개선할 수 있습니다."]}],"\n"]}],"\n",["$","li","li-2",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"상태 관리"}],"\n상태 변수가 변경될 때마다 불필요한 리렌더링을 피하기 위해 상태 관리를 신중하게 해야 합니다. 상태 변수를 최소화하고, 가능한 경우 부모 뷰가 아닌 하위 뷰에서 상태를 관리하도록 합니다."]}],"\n"]}],"\n"]}],"\n",["$","h3",null,{"id":"5b12bcf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI List의 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 구현할 수 있습니다. 멀티 선택, 데이터 새로고침, 섹션 구성, 계층형 리스트, 비동기 데이터 로딩, 편집 가능한 리스트, 필터링된 리스트, 리스트 내비게이션 등 다양한 기능을 활용하여 사용자 경험을 향상시킬 수 있습니다."}],"\n",["$","h3",null,{"id":"056a8b51","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"추가 자료"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"자세한 예제와 고급 사용법은 아래 자료를 참조하세요:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["$","$L10",null,{"props":{"href":"https://www.hohyeonmoon.com/blog/swiftui-tutorial-list","node":{"type":"element","tagName":"a","properties":{"href":"https://www.hohyeonmoon.com/blog/swiftui-tutorial-list"},"children":[{"type":"text","value":"호현문님의 SwiftUI List 튜토리얼","position":{"start":{"line":243,"column":4,"offset":6297},"end":{"line":243,"column":27,"offset":6320}}}],"position":{"start":{"line":243,"column":3,"offset":6296},"end":{"line":243,"column":84,"offset":6377}}},"children":"호현문님의 SwiftUI List 튜토리얼"},"post":{"title":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법","description":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다.","date":"2024-05-25T10:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"swiftUI","path":"/tags/swiftui","id":"swiftui"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift ","readMin":"7.9","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"swiftui-list-완벽-마스터-2탄","content":"$11","category":"swift"},"language":"kr"}]}],"\n",["$","li","li-1",{"children":["$","$L10",null,{"props":{"href":"https://developer.apple.com/documentation/swiftui/list","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swiftui/list"},"children":[{"type":"text","value":"Apple 개발자 문서","position":{"start":{"line":244,"column":4,"offset":6381},"end":{"line":244,"column":16,"offset":6393}}}],"position":{"start":{"line":244,"column":3,"offset":6380},"end":{"line":244,"column":73,"offset":6450}}},"children":"Apple 개발자 문서"},"post":{"title":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법","description":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다.","date":"2024-05-25T10:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"swiftUI","path":"/tags/swiftui","id":"swiftui"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift ","readMin":"7.9","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"swiftui-list-완벽-마스터-2탄","content":"$12","category":"swift"},"language":"kr"}]}],"\n",["$","li","li-2",{"children":["$","$L10",null,{"props":{"href":"https://ios-development.tistory.com/1094","node":{"type":"element","tagName":"a","properties":{"href":"https://ios-development.tistory.com/1094"},"children":[{"type":"text","value":"Jake Kim의 iOS 개발 블로그","position":{"start":{"line":245,"column":4,"offset":6454},"end":{"line":245,"column":24,"offset":6474}}}],"position":{"start":{"line":245,"column":3,"offset":6453},"end":{"line":245,"column":67,"offset":6517}}},"children":"Jake Kim의 iOS 개발 블로그"},"post":{"title":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법","description":"SwiftUI List의 기본 사용법을 숙지했다면, 이제 고급 기능과 심화 사용법을 통해 더욱 강력하고 유연한 리스트를 만들어 보세요. 이 글에서는 리스트의 다양한 고급 기능과 그 활용 방법을 다룹니다.","date":"2024-05-25T10:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"swiftUI","path":"/tags/swiftui","id":"swiftui"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"swift ","readMin":"7.9","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"swiftui-list-완벽-마스터-2탄","content":"$13","category":"swift"},"language":"kr"}]}],"\n"]}]]}]}],["$","$L14",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L15",null,{"articleTitle":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법","toc":[{"tagName":"h2","title":"SwiftUI List 완벽 마스터 2탄: 고급 기능 및 심화 사용법","id":"16ae5172"},{"tagName":"h3","title":"리스트의 고급 기능","id":"2dee2333"},{"tagName":"h3","title":"심화 활용 예제","id":"feb218b8"},{"tagName":"h3","title":"성능 최적화","id":"d0b3c807"},{"tagName":"h3","title":"결론","id":"5b12bcf2"},{"tagName":"h3","title":"추가 자료","id":"056a8b51"}],"language":"kr"}]}]]}]]
8:null
