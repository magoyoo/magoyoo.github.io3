1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98Memoization%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-d5839cdd","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-메모이제이션Memoization으로-렌더링-성능-최적화-d5839cdd\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98Memoization%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-d5839cdd","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-메모이제이션Memoization으로-렌더링-성능-최적화-d5839cdd\"}"},"styles":[]}],"segment":["slug","Reactjs-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98Memoization%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-d5839cdd","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 `React.js`에서 메모이제이션(memoization)을 사용하여 렌더링 성능을 최적화하는 방법에 대해 설명합니다. `React.memo`, `useMemo`, `useCallback` 등 주요 메모이제이션 기법을 다루며, 코드 예시를 통해 구체적인 사용법을 알려드립니다."}],["$","meta","3",{"name":"keywords","content":"React,Memoization,성능 최적화,JavaScript"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98Memoization%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-d5839cdd"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 `React.js`에서 메모이제이션(memoization)을 사용하여 렌더링 성능을 최적화하는 방법에 대해 설명합니다. `React.memo`, `useMemo`, `useCallback` 등 주요 메모이제이션 기법을 다루며, 코드 예시를 통해 구체적인 사용법을 알려드립니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98Memoization%EC%9C%BC%EB%A1%9C-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-d5839cdd"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 `React.js`에서 메모이제이션(memoization)을 사용하여 렌더링 성능을 최적화하는 방법에 대해 설명합니다. `React.memo`, `useMemo`, `useCallback` 등 주요 메모이제이션 기법을 다루며, 코드 예시를 통해 구체적인 사용법을 알려드립니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-12"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"e46460b9","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React는 컴포넌트 기반의 라이브러리로, 상태 변화에 따라 효율적으로 UI를 업데이트합니다. 하지만 때로는 불필요한 재렌더링이 발생하여 성능 저하를 초래할 수 있습니다. 이러한 문제를 해결하기 위해 메모이제이션(memoization)을 활용할 수 있습니다. 메모이제이션을 사용하면 불필요한 계산이나 렌더링을 피하고 애플리케이션의 성능을 최적화할 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":4,"column":210,"offset":255},"end":{"line":4,"column":222,"offset":267}}}],"position":{"start":{"line":4,"column":210,"offset":255},"end":{"line":4,"column":222,"offset":267}}},"children":"React.memo"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":4,"column":224,"offset":269},"end":{"line":4,"column":233,"offset":278}}}],"position":{"start":{"line":4,"column":224,"offset":269},"end":{"line":4,"column":233,"offset":278}}},"children":"useMemo"}}],", 그리고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":4,"column":239,"offset":284},"end":{"line":4,"column":252,"offset":297}}}],"position":{"start":{"line":4,"column":239,"offset":284},"end":{"line":4,"column":252,"offset":297}}},"children":"useCallback"}}],"을 사용하여 성능을 개선하는 방법을 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"b168874d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"React.memo"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":8,"column":1,"offset":342},"end":{"line":8,"column":13,"offset":354}}}],"position":{"start":{"line":8,"column":1,"offset":342},"end":{"line":8,"column":13,"offset":354}}},"children":"React.memo"}}],"는 고차 컴포넌트(Higher Order Component)로, 컴포넌트가 동일한 props로 여러 번 렌더링되는 것을 방지합니다. 이를 통해 불필요한 렌더링을 피할 수 있습니다. 예를 들어, 다음과 같은 간단한 컴포넌트를 살펴봅시다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react';\n\nconst MyComponent = (props) => {\n  console.log('컴포넌트 렌더링');\n  return <div>{props.value}</div>;\n};\n\nexport default MyComponent;\n"}],"position":{"start":{"line":10,"column":1,"offset":487},"end":{"line":19,"column":4,"offset":652}}},"children":"import React from 'react';\n\nconst MyComponent = (props) => {\n  console.log('컴포넌트 렌더링');\n  return <div>{props.value}</div>;\n};\n\nexport default MyComponent;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 컴포넌트는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props.value","position":{"start":{"line":21,"column":10,"offset":663},"end":{"line":21,"column":23,"offset":676}}}],"position":{"start":{"line":21,"column":10,"offset":663},"end":{"line":21,"column":23,"offset":676}}},"children":"props.value"}}],"가 변경될 때마다 다시 렌더링됩니다. 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":21,"column":47,"offset":700},"end":{"line":21,"column":59,"offset":712}}}],"position":{"start":{"line":21,"column":47,"offset":700},"end":{"line":21,"column":59,"offset":712}}},"children":"React.memo"}}],"로 감싸서 최적화할 수 있습니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React from 'react';\n\nconst MyComponent = React.memo((props) => {\n  console.log('컴포넌트 렌더링');\n  return <div>{props.value}</div>;\n});\n\nexport default MyComponent;\n"}],"position":{"start":{"line":23,"column":1,"offset":732},"end":{"line":32,"column":4,"offset":909}}},"children":"import React from 'react';\n\nconst MyComponent = React.memo((props) => {\n  console.log('컴포넌트 렌더링');\n  return <div>{props.value}</div>;\n});\n\nexport default MyComponent;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props.value","position":{"start":{"line":34,"column":4,"offset":914},"end":{"line":34,"column":17,"offset":927}}}],"position":{"start":{"line":34,"column":4,"offset":914},"end":{"line":34,"column":17,"offset":927}}},"children":"props.value"}}],"가 변경되지 않는 한, 컴포넌트는 다시 렌더링되지 않습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":34,"column":51,"offset":961},"end":{"line":34,"column":63,"offset":973}}}],"position":{"start":{"line":34,"column":51,"offset":961},"end":{"line":34,"column":63,"offset":973}}},"children":"React.memo"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props","position":{"start":{"line":34,"column":65,"offset":975},"end":{"line":34,"column":72,"offset":982}}}],"position":{"start":{"line":34,"column":65,"offset":975},"end":{"line":34,"column":72,"offset":982}}},"children":"props"}}]," 검사에 매우 효과적입니다. 하지만 객체나 배열 같은 참조형 데이터를 사용할 때는 별도로 이를 관리해야 합니다."]}],"\n",["$","h2",null,{"id":"7134ae42","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useMemo"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":38,"column":1,"offset":1058},"end":{"line":38,"column":10,"offset":1067}}}],"position":{"start":{"line":38,"column":1,"offset":1058},"end":{"line":38,"column":10,"offset":1067}}},"children":"useMemo"}}]," 훅은 계산 비용이 큰 함수의 결과를 메모이제이션하는 데 사용됩니다. 이는 불필요한 연산을 피하고 계산된 값을 재사용함으로써 성능을 최적화합니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":38,"column":96,"offset":1153},"end":{"line":38,"column":105,"offset":1162}}}],"position":{"start":{"line":38,"column":96,"offset":1153},"end":{"line":38,"column":105,"offset":1162}}},"children":"useMemo"}}],"의 사용 예시입니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React, { useMemo } from 'react';\n\nconst MyComponent = ({ items }) => {\n  const expensiveCalculation = (items) => {\n    console.log('비싼 계산 수행 중');\n    return items.reduce((acc, item) => acc + item.value, 0);\n  };\n\n  const totalValue = useMemo(() => expensiveCalculation(items), [items]);\n\n  return <div>총합: {totalValue}</div>;\n};\n\nexport default MyComponent;\n"}],"position":{"start":{"line":40,"column":1,"offset":1175},"end":{"line":55,"column":4,"offset":1550}}},"children":"import React, { useMemo } from 'react';\n\nconst MyComponent = ({ items }) => {\n  const expensiveCalculation = (items) => {\n    console.log('비싼 계산 수행 중');\n    return items.reduce((acc, item) => acc + item.value, 0);\n  };\n\n  const totalValue = useMemo(() => expensiveCalculation(items), [items]);\n\n  return <div>총합: {totalValue}</div>;\n};\n\nexport default MyComponent;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"items","position":{"start":{"line":57,"column":9,"offset":1560},"end":{"line":57,"column":16,"offset":1567}}}],"position":{"start":{"line":57,"column":9,"offset":1560},"end":{"line":57,"column":16,"offset":1567}}},"children":"items"}}]," 배열이 변경될 때만 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expensiveCalculation","position":{"start":{"line":57,"column":28,"offset":1579},"end":{"line":57,"column":50,"offset":1601}}}],"position":{"start":{"line":57,"column":28,"offset":1579},"end":{"line":57,"column":50,"offset":1601}}},"children":"expensiveCalculation"}}]," 함수가 호출됩니다. 이를 통해 불필요한 재계산을 피할 수 있습니다."]}],"\n",["$","h2",null,{"id":"0bedb35c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useCallback"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":61,"column":1,"offset":1657},"end":{"line":61,"column":14,"offset":1670}}}],"position":{"start":{"line":61,"column":1,"offset":1657},"end":{"line":61,"column":14,"offset":1670}}},"children":"useCallback"}}]," 훅은 메모이제이션된 콜백 함수를 반환하여 컴포넌트가 다시 렌더링될 때마다 동일한 콜백 함수가 생성되는 것을 막습니다. 이는 특히 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props","position":{"start":{"line":61,"column":87,"offset":1743},"end":{"line":61,"column":94,"offset":1750}}}],"position":{"start":{"line":61,"column":87,"offset":1743},"end":{"line":61,"column":94,"offset":1750}}},"children":"props"}}],"로 콜백 함수를 전달하는 경우 유용합니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":61,"column":122,"offset":1778},"end":{"line":61,"column":135,"offset":1791}}}],"position":{"start":{"line":61,"column":122,"offset":1778},"end":{"line":61,"column":135,"offset":1791}}},"children":"useCallback"}}],"의 사용 예시입니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"import React, { useState, useCallback } from 'react';\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = useCallback(() => {\n    setCount(count + 1);\n  }, [count]);\n\n  return <button onClick={increment}>증가</button>;\n};\n\nexport default MyComponent;\n"}],"position":{"start":{"line":63,"column":1,"offset":1804},"end":{"line":77,"column":4,"offset":2102}}},"children":"import React, { useState, useCallback } from 'react';\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = useCallback(() => {\n    setCount(count + 1);\n  }, [count]);\n\n  return <button onClick={increment}>증가</button>;\n};\n\nexport default MyComponent;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"increment","position":{"start":{"line":79,"column":8,"offset":2111},"end":{"line":79,"column":19,"offset":2122}}}],"position":{"start":{"line":79,"column":8,"offset":2111},"end":{"line":79,"column":19,"offset":2122}}},"children":"increment"}}]," 함수는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count","position":{"start":{"line":79,"column":24,"offset":2127},"end":{"line":79,"column":31,"offset":2134}}}],"position":{"start":{"line":79,"column":24,"offset":2127},"end":{"line":79,"column":31,"offset":2134}}},"children":"count"}}]," 값이 변경될 때만 새로 생성됩니다. 이를 통해 콜백 함수가 빈번하게 변경되는 문제를 해결할 수 있습니다."]}],"\n",["$","h2",null,{"id":"f18f9a7d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 최적화 시 주의사항"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"메모이제이션은 성능 최적화에 매우 효과적이지만, 무조건 사용해서는 안 됩니다. 메모이제이션 자체도 일정한 비용이 들기 때문에, 계산 비용이 크지 않으면 오히려 역효과가 날 수 있습니다. 비용이 큰 연산이나, 빈번한 렌더링을 방지할 필요가 있는 경우에만 사용하는 것이 좋습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["또한, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":85,"column":5,"offset":2373},"end":{"line":85,"column":17,"offset":2385}}}],"position":{"start":{"line":85,"column":5,"offset":2373},"end":{"line":85,"column":17,"offset":2385}}},"children":"React.memo"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":85,"column":19,"offset":2387},"end":{"line":85,"column":28,"offset":2396}}}],"position":{"start":{"line":85,"column":19,"offset":2387},"end":{"line":85,"column":28,"offset":2396}}},"children":"useMemo"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":85,"column":30,"offset":2398},"end":{"line":85,"column":43,"offset":2411}}}],"position":{"start":{"line":85,"column":30,"offset":2398},"end":{"line":85,"column":43,"offset":2411}}},"children":"useCallback"}}],"은 모두 동일한 입력에 대해 동일한 출력을 보장해야 합니다. 이 규칙을 지키지 않으면 예기치 않은 버그가 발생할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["메모이제이션은 React 애플리케이션의 성능을 최적화하는 데 강력한 도구입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":89,"column":46,"offset":2535},"end":{"line":89,"column":58,"offset":2547}}}],"position":{"start":{"line":89,"column":46,"offset":2535},"end":{"line":89,"column":58,"offset":2547}}},"children":"React.memo"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":89,"column":60,"offset":2549},"end":{"line":89,"column":69,"offset":2558}}}],"position":{"start":{"line":89,"column":60,"offset":2549},"end":{"line":89,"column":69,"offset":2558}}},"children":"useMemo"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":89,"column":71,"offset":2560},"end":{"line":89,"column":84,"offset":2573}}}],"position":{"start":{"line":89,"column":71,"offset":2560},"end":{"line":89,"column":84,"offset":2573}}},"children":"useCallback"}}],"을 적절히 사용하면 불필요한 렌더링과 계산을 줄이고, 애플리케이션의 반응성을 크게 개선할 수 있습니다. 하지만 이는 적절한 상황에서만 사용해야 하며, 무조건 남용해서는 안 됩니다. 항상 코드의 성능과 복잡도 사이에서 균형을 맞추는 것이 중요합니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화","toc":[{"tagName":"h1","title":"React.js 메모이제이션(Memoization)으로 렌더링 성능 최적화","id":"e46460b9"},{"tagName":"h2","title":"React.memo","id":"b168874d"},{"tagName":"h2","title":"useMemo","id":"7134ae42"},{"tagName":"h2","title":"useCallback","id":"0bedb35c"},{"tagName":"h2","title":"성능 최적화 시 주의사항","id":"f18f9a7d"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
