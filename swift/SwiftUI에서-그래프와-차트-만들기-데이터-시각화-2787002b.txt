1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80-%EC%B0%A8%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-2787002b","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI에서-그래프와-차트-만들기-데이터-시각화-2787002b\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80-%EC%B0%A8%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-2787002b","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI에서-그래프와-차트-만들기-데이터-시각화-2787002b\"}"},"styles":[]}],"segment":["slug","SwiftUI%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80-%EC%B0%A8%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-2787002b","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 SwiftUI를 이용하여 애플리케이션에서 데이터를 시각화하는 방법에 대해 설명합니다. 그래프와 차트를 만들어 데이터를 효율적으로 표현하는 방법과 관련된 다양한 기법을 탐구합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,데이터 시각화,그래프,차트"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80-%EC%B0%A8%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-2787002b"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 SwiftUI를 이용하여 애플리케이션에서 데이터를 시각화하는 방법에 대해 설명합니다. 그래프와 차트를 만들어 데이터를 효율적으로 표현하는 방법과 관련된 다양한 기법을 탐구합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EA%B7%B8%EB%9E%98%ED%94%84%EC%99%80-%EC%B0%A8%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%8B%9C%EA%B0%81%ED%99%94-2787002b"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 SwiftUI를 이용하여 애플리케이션에서 데이터를 시각화하는 방법에 대해 설명합니다. 그래프와 차트를 만들어 데이터를 효율적으로 표현하는 방법과 관련된 다양한 기법을 탐구합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T4b6,import SwiftUI

struct PieChartView: View {
    var dataPoints: [Double]
    var colors: [Color]
    
    var total: Double {
        dataPoints.reduce(0, +)
    }
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                ForEach(0..<dataPoints.count, id: \.self) { index in
                    let startAngle = self.angle(for: Array(dataPoints.prefix(index)).reduce(0, +), in: geometry.size)
                    let endAngle = self.angle(for: dataPoints[index], in: geometry.size) + startAngle
                    Path { path in
                        path.move(to: CGPoint(x: geometry.size.width / 2, y: geometry.size.height / 2))
                        path.addArc(center: .init(x: geometry.size.width / 2, y: geometry.size.height / 2), radius: geometry.size.width / 2, startAngle: startAngle, endAngle: endAngle, clockwise: false)
                    }
                    .fill(self.colors[index % self.colors.count])
                }
            }
        }
        .aspectRatio(1, contentMode: .fit)
        .padding()
    }
    
    func angle(for value: Double, in size: CGSize) -> Angle {
        return .degrees((value / total) * 360.0)
    }
}
f:T4b6,import SwiftUI

struct PieChartView: View {
    var dataPoints: [Double]
    var colors: [Color]
    
    var total: Double {
        dataPoints.reduce(0, +)
    }
    
    var body: some View {
        GeometryReader { geometry in
            ZStack {
                ForEach(0..<dataPoints.count, id: \.self) { index in
                    let startAngle = self.angle(for: Array(dataPoints.prefix(index)).reduce(0, +), in: geometry.size)
                    let endAngle = self.angle(for: dataPoints[index], in: geometry.size) + startAngle
                    Path { path in
                        path.move(to: CGPoint(x: geometry.size.width / 2, y: geometry.size.height / 2))
                        path.addArc(center: .init(x: geometry.size.width / 2, y: geometry.size.height / 2), radius: geometry.size.width / 2, startAngle: startAngle, endAngle: endAngle, clockwise: false)
                    }
                    .fill(self.colors[index % self.colors.count])
                }
            }
        }
        .aspectRatio(1, contentMode: .fit)
        .padding()
    }
    
    func angle(for value: Double, in size: CGSize) -> Angle {
        return .degrees((value / total) * 360.0)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-23"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"e5402de0","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 Apple 플랫폼에서 사용자 인터페이스(UI)를 쉽게 만들 수 있는 프레임워크입니다. 데이터 시각화는 앱 개발에서 점점 더 중요한 역할을 하고 있습니다. 이 글에서는 SwiftUI를 사용하여 그래프와 차트를 만들어 데이터를 시각화하는 방법을 자세히 탐구하겠습니다."}],"\n",["$","h2",null,{"id":"b03d9b3e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 차트 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서 차트를 만들기 위해서는 우선 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@State","position":{"start":{"line":8,"column":27,"offset":233},"end":{"line":8,"column":35,"offset":241}}}],"position":{"start":{"line":8,"column":27,"offset":233},"end":{"line":8,"column":35,"offset":241}}},"children":"@State"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Binding","position":{"start":{"line":8,"column":37,"offset":243},"end":{"line":8,"column":47,"offset":253}}}],"position":{"start":{"line":8,"column":37,"offset":243},"end":{"line":8,"column":47,"offset":253}}},"children":"@Binding"}}]," 등의 속성을 이용하여 데이터를 관리할 수 있어야 합니다. 기본적인 라인 차트를 만드는 예제를 통해 시작해보겠습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct LineChartView: View {\n    @State private var dataPoints: [Double] = [1, 3, 2, 5, 4]\n    \n    var body: some View {\n        GeometryReader { geometry in\n            Path { path in\n                let width = geometry.size.width\n                let height = geometry.size.height\n                guard dataPoints.count > 1 else { return }\n                let step = width / CGFloat(dataPoints.count - 1)\n                path.move(to: CGPoint(x: 0, y: height - CGFloat(dataPoints[0]) * height))\n                for index in 1..<dataPoints.count {\n                    path.addLine(to: CGPoint(x: CGFloat(index) * step, y: height - CGFloat(dataPoints[index]) * height))\n                }\n            }\n            .stroke(Color.blue, lineWidth: 2)\n        }\n        .padding()\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":320},"end":{"line":33,"column":4,"offset":1134}}},"children":"import SwiftUI\n\nstruct LineChartView: View {\n    @State private var dataPoints: [Double] = [1, 3, 2, 5, 4]\n    \n    var body: some View {\n        GeometryReader { geometry in\n            Path { path in\n                let width = geometry.size.width\n                let height = geometry.size.height\n                guard dataPoints.count > 1 else { return }\n                let step = width / CGFloat(dataPoints.count - 1)\n                path.move(to: CGPoint(x: 0, y: height - CGFloat(dataPoints[0]) * height))\n                for index in 1..<dataPoints.count {\n                    path.addLine(to: CGPoint(x: CGFloat(index) * step, y: height - CGFloat(dataPoints[index]) * height))\n                }\n            }\n            .stroke(Color.blue, lineWidth: 2)\n        }\n        .padding()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"dataPoints","position":{"start":{"line":35,"column":9,"offset":1144},"end":{"line":35,"column":21,"offset":1156}}}],"position":{"start":{"line":35,"column":9,"offset":1144},"end":{"line":35,"column":21,"offset":1156}}},"children":"dataPoints"}}]," 배열을 이용해 데이터 셋을 정의하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Path","position":{"start":{"line":35,"column":43,"offset":1178},"end":{"line":35,"column":49,"offset":1184}}}],"position":{"start":{"line":35,"column":43,"offset":1178},"end":{"line":35,"column":49,"offset":1184}}},"children":"Path"}}],"를 이용해 점들을 이어서 라인 차트를 그립니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GeometryReader","position":{"start":{"line":35,"column":76,"offset":1211},"end":{"line":35,"column":92,"offset":1227}}}],"position":{"start":{"line":35,"column":76,"offset":1211},"end":{"line":35,"column":92,"offset":1227}}},"children":"GeometryReader"}}],"를 사용하여 차트가 그려질 영역의 크기를 동적으로 받아오는 것도 중요합니다."]}],"\n",["$","h2",null,{"id":"67aafd08","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"막대 차트 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"막대 차트는 데이터를 시각화하는 또 다른 유용한 방법입니다. 막대 차트를 생성하기 위해서는 사각형(사각 막대)을 그려야 합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct BarChartView: View {\n    var dataPoints: [Double]\n    \n    var body: some View {\n        GeometryReader { geometry in\n            HStack(alignment: .bottom, spacing: 2) {\n                ForEach(0..<dataPoints.count, id: \\.self) { index in\n                    Rectangle()\n                        .fill(Color.green)\n                        .frame(width: (geometry.size.width / CGFloat(dataPoints.count)) * 0.8, height: CGFloat(dataPoints[index]) * geometry.size.height)\n                }\n            }\n        }\n        .padding()\n    }\n}\n"}],"position":{"start":{"line":41,"column":1,"offset":1358},"end":{"line":60,"column":4,"offset":1931}}},"children":"import SwiftUI\n\nstruct BarChartView: View {\n    var dataPoints: [Double]\n    \n    var body: some View {\n        GeometryReader { geometry in\n            HStack(alignment: .bottom, spacing: 2) {\n                ForEach(0..<dataPoints.count, id: \\.self) { index in\n                    Rectangle()\n                        .fill(Color.green)\n                        .frame(width: (geometry.size.width / CGFloat(dataPoints.count)) * 0.8, height: CGFloat(dataPoints[index]) * geometry.size.height)\n                }\n            }\n        }\n        .padding()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HStack","position":{"start":{"line":62,"column":6,"offset":1938},"end":{"line":62,"column":14,"offset":1946}}}],"position":{"start":{"line":62,"column":6,"offset":1938},"end":{"line":62,"column":14,"offset":1946}}},"children":"HStack"}}],"을 사용하여 막대를 수평으로 배치하고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Rectangle","position":{"start":{"line":62,"column":35,"offset":1967},"end":{"line":62,"column":46,"offset":1978}}}],"position":{"start":{"line":62,"column":35,"offset":1967},"end":{"line":62,"column":46,"offset":1978}}},"children":"Rectangle"}}],"을 이용해 막대를 그립니다. 막대의 높이는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"dataPoints","position":{"start":{"line":62,"column":70,"offset":2002},"end":{"line":62,"column":82,"offset":2014}}}],"position":{"start":{"line":62,"column":70,"offset":2002},"end":{"line":62,"column":82,"offset":2014}}},"children":"dataPoints"}}],"의 값에 비례하도록 설정하였습니다."]}],"\n",["$","h2",null,{"id":"237d8531","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"원형 차트 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"원형 차트, 특히 파이 차트는 구성 요소들의 비율을 시각화할 때 유용합니다. 이는 각도의 합이 360도를 넘지 않게 설정해줘야 합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":68,"column":1,"offset":2126},"end":{"line":101,"column":4,"offset":3344}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 각 데이터 포인트의 비율을 계산하여 파이 차트를 그립니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Path","position":{"start":{"line":103,"column":40,"offset":3385},"end":{"line":103,"column":46,"offset":3391}}}],"position":{"start":{"line":103,"column":40,"offset":3385},"end":{"line":103,"column":46,"offset":3391}}},"children":"Path"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"addArc","position":{"start":{"line":103,"column":48,"offset":3393},"end":{"line":103,"column":56,"offset":3401}}}],"position":{"start":{"line":103,"column":48,"offset":3393},"end":{"line":103,"column":56,"offset":3401}}},"children":"addArc"}}],"를 사용하여 각 조각을 그리며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fill","position":{"start":{"line":103,"column":74,"offset":3419},"end":{"line":103,"column":80,"offset":3425}}}],"position":{"start":{"line":103,"column":74,"offset":3419},"end":{"line":103,"column":80,"offset":3425}}},"children":"fill"}}]," 메서드를 통해 색을 채웁니다."]}],"\n",["$","h2",null,{"id":"17b316c6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"데이터 업데이트 반영하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["실시간으로 데이터가 변경될 때 차트를 업데이트해야 할 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@State","position":{"start":{"line":107,"column":35,"offset":3496},"end":{"line":107,"column":43,"offset":3504}}}],"position":{"start":{"line":107,"column":35,"offset":3496},"end":{"line":107,"column":43,"offset":3504}}},"children":"@State"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Combine","position":{"start":{"line":107,"column":45,"offset":3506},"end":{"line":107,"column":54,"offset":3515}}}],"position":{"start":{"line":107,"column":45,"offset":3506},"end":{"line":107,"column":54,"offset":3515}}},"children":"Combine"}}]," 프레임워크를 사용할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\nimport Combine\n\nclass DataModel: ObservableObject {\n    @Published var dataPoints: [Double] = [1, 3, 2, 5, 4]\n\n    func updateData() {\n        // 데이터를 갱신하는 로직\n    }\n}\n\nstruct LineChartWithUpdates: View {\n    @ObservedObject var dataModel = DataModel()\n\n    var body: some View {\n        LineChartView(dataPoints: dataModel.dataPoints)\n            .onAppear {\n                Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in\n                    self.dataModel.updateData()\n                }\n            }\n    }\n}\n"}],"position":{"start":{"line":109,"column":1,"offset":3536},"end":{"line":133,"column":4,"offset":4092}}},"children":"import SwiftUI\nimport Combine\n\nclass DataModel: ObservableObject {\n    @Published var dataPoints: [Double] = [1, 3, 2, 5, 4]\n\n    func updateData() {\n        // 데이터를 갱신하는 로직\n    }\n}\n\nstruct LineChartWithUpdates: View {\n    @ObservedObject var dataModel = DataModel()\n\n    var body: some View {\n        LineChartView(dataPoints: dataModel.dataPoints)\n            .onAppear {\n                Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in\n                    self.dataModel.updateData()\n                }\n            }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ObservableObject","position":{"start":{"line":135,"column":9,"offset":4102},"end":{"line":135,"column":27,"offset":4120}}}],"position":{"start":{"line":135,"column":9,"offset":4102},"end":{"line":135,"column":27,"offset":4120}}},"children":"ObservableObject"}}],"를 채택한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DataModel","position":{"start":{"line":135,"column":33,"offset":4126},"end":{"line":135,"column":44,"offset":4137}}}],"position":{"start":{"line":135,"column":33,"offset":4126},"end":{"line":135,"column":44,"offset":4137}}},"children":"DataModel"}}]," 클래스를 생성하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Published","position":{"start":{"line":135,"column":56,"offset":4149},"end":{"line":135,"column":68,"offset":4161}}}],"position":{"start":{"line":135,"column":56,"offset":4149},"end":{"line":135,"column":68,"offset":4161}}},"children":"@Published"}}]," 속성을 사용하여 데이터가 변경될 때 뷰가 업데이트되도록 했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Timer","position":{"start":{"line":135,"column":106,"offset":4199},"end":{"line":135,"column":113,"offset":4206}}}],"position":{"start":{"line":135,"column":106,"offset":4199},"end":{"line":135,"column":113,"offset":4206}}},"children":"Timer"}}],"를 통해 주기적으로 데이터를 갱신하는 방법도 포함되었습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI를 이용하면 그래프와 차트를 손쉽게 만들고 데이터를 시각화할 수 있습니다. 이번 글에서는 라인 차트, 막대 차트, 원형 차트를 만드는 방법을 탐구했으며, 실시간 데이터 업데이트를 반영하는 방법도 소개했습니다. 이러한 기법을 활용하여 더욱 직관적이고 데이터 중심적인 애플리케이션을 개발해 보세요."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화","toc":[{"tagName":"h1","title":"SwiftUI에서 그래프와 차트 만들기: 데이터 시각화","id":"e5402de0"},{"tagName":"h2","title":"기본 차트 만들기","id":"b03d9b3e"},{"tagName":"h2","title":"막대 차트 만들기","id":"67aafd08"},{"tagName":"h2","title":"원형 차트 만들기","id":"237d8531"},{"tagName":"h2","title":"데이터 업데이트 반영하기","id":"17b316c6"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
