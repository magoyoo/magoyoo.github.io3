1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EC%8B%AC%ED%99%94-useState-%ED%9B%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EA%B1%B8%EC%B3%90-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-fecabb8e","d"],{"children":["__PAGE__?{\"slug\":\"React에서의-상태-관리-심화-useState-훅을-사용하여-상태를-여러-컴포넌트에-걸쳐-관리하는-방법-fecabb8e\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EC%8B%AC%ED%99%94-useState-%ED%9B%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EA%B1%B8%EC%B3%90-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-fecabb8e","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"React에서의-상태-관리-심화-useState-훅을-사용하여-상태를-여러-컴포넌트에-걸쳐-관리하는-방법-fecabb8e\"}"},"styles":[]}],"segment":["slug","React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EC%8B%AC%ED%99%94-useState-%ED%9B%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EA%B1%B8%EC%B3%90-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-fecabb8e","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 React에서 useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법에 대해 심도 깊게 다룹니다. 상태 관리의 기본 개념부터 시작해 구체적인 예제와 함께 실습을 통해 이해를 돕습니다."}],["$","meta","3",{"name":"keywords","content":"React,useState,상태 관리,컴포넌트"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EC%8B%AC%ED%99%94-useState-%ED%9B%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EA%B1%B8%EC%B3%90-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-fecabb8e"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 React에서 useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법에 대해 심도 깊게 다룹니다. 상태 관리의 기본 개념부터 시작해 구체적인 예제와 함께 실습을 통해 이해를 돕습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-%EC%8B%AC%ED%99%94-useState-%ED%9B%85%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%83%81%ED%83%9C%EB%A5%BC-%EC%97%AC%EB%9F%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-%EA%B1%B8%EC%B3%90-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-fecabb8e"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 React에서 useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법에 대해 심도 깊게 다룹니다. 상태 관리의 기본 개념부터 시작해 구체적인 예제와 함께 실습을 통해 이해를 돕습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-19"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"c481e1b8","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법"}],"\n",["$","h2",null,{"id":"ed238834","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태 관리의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React에서 상태(state)는 컴포넌트의 동적인 데이터를 다루는 중요한 요소입니다. 상태는 사용자의 입력, 네트워크 응답 및 기타 다양한 이벤트에 따라 변경될 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":6,"column":100,"offset":180},"end":{"line":6,"column":110,"offset":190}}}],"position":{"start":{"line":6,"column":100,"offset":180},"end":{"line":6,"column":110,"offset":190}}},"children":"useState"}}]," 훅은 함수형 컴포넌트에서 상태를 관리하기 위해 사용됩니다. 기본적인 사용법은 아래와 같습니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Current count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":8,"column":1,"offset":245},"end":{"line":21,"column":4,"offset":511}}},"children":"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Current count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState(0)","position":{"start":{"line":23,"column":8,"offset":520},"end":{"line":23,"column":21,"offset":533}}}],"position":{"start":{"line":23,"column":8,"offset":520},"end":{"line":23,"column":21,"offset":533}}},"children":"useState(0)"}}],"은 상태 변수인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count","position":{"start":{"line":23,"column":30,"offset":542},"end":{"line":23,"column":37,"offset":549}}}],"position":{"start":{"line":23,"column":30,"offset":542},"end":{"line":23,"column":37,"offset":549}}},"children":"count"}}],"와 상태 변경 함수인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setCount","position":{"start":{"line":23,"column":49,"offset":561},"end":{"line":23,"column":59,"offset":571}}}],"position":{"start":{"line":23,"column":49,"offset":561},"end":{"line":23,"column":59,"offset":571}}},"children":"setCount"}}],"를 반환합니다. 초기 상태로 0을 전달합니다. 버튼을 클릭하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setCount","position":{"start":{"line":23,"column":94,"offset":606},"end":{"line":23,"column":104,"offset":616}}}],"position":{"start":{"line":23,"column":94,"offset":606},"end":{"line":23,"column":104,"offset":616}}},"children":"setCount"}}]," 함수를 호출하여 상태를 업데이트합니다."]}],"\n",["$","h2",null,{"id":"a2e63c1b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"컴포넌트 간 상태 공유의 필요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"단일 컴포넌트에서 상태를 관리하는 것은 간단하지만, 복잡한 애플리케이션에서는 여러 컴포넌트에 상태를 공유할 필요가 있습니다. 이를 위해 상태를 상위 컴포넌트에서 정의하고, 이를 하위 컴포넌트에 props로 전달하는 방식이 일반적입니다."}],"\n",["$","h3",null,{"id":"611e2085","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"상태를 상위 컴포넌트에서 관리하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["상위 컴포넌트에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":31,"column":11,"offset":829},"end":{"line":31,"column":21,"offset":839}}}],"position":{"start":{"line":31,"column":11,"offset":829},"end":{"line":31,"column":21,"offset":839}}},"children":"useState"}}],"를 사용하고, 하위 컴포넌트에 상태와 상태 변경 함수를 props로 전달할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction ParentComponent() {\n  const [data, setData] = useState('Initial data');\n\n  return (\n    <div>\n      <h1>Parent Component</h1>\n      <ChildComponent data={data} setData={setData} />\n    </div>\n  );\n}\n\nfunction ChildComponent({ data, setData }) {\n  return (\n    <div>\n      <h2>Child Component</h2>\n      <p>{data}</p>\n      <button onClick={() => setData('Updated data')}>Update Data</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":33,"column":1,"offset":890},"end":{"line":56,"column":4,"offset":1368}}},"children":"import React, { useState } from 'react';\n\nfunction ParentComponent() {\n  const [data, setData] = useState('Initial data');\n\n  return (\n    <div>\n      <h1>Parent Component</h1>\n      <ChildComponent data={data} setData={setData} />\n    </div>\n  );\n}\n\nfunction ChildComponent({ data, setData }) {\n  return (\n    <div>\n      <h2>Child Component</h2>\n      <p>{data}</p>\n      <button onClick={() => setData('Updated data')}>Update Data</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ParentComponent","position":{"start":{"line":58,"column":8,"offset":1377},"end":{"line":58,"column":25,"offset":1394}}}],"position":{"start":{"line":58,"column":8,"offset":1377},"end":{"line":58,"column":25,"offset":1394}}},"children":"ParentComponent"}}],"는 상태 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":58,"column":30,"offset":1399},"end":{"line":58,"column":36,"offset":1405}}}],"position":{"start":{"line":58,"column":30,"offset":1399},"end":{"line":58,"column":36,"offset":1405}}},"children":"data"}}],"를 관리하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ChildComponent","position":{"start":{"line":58,"column":44,"offset":1413},"end":{"line":58,"column":60,"offset":1429}}}],"position":{"start":{"line":58,"column":44,"offset":1413},"end":{"line":58,"column":60,"offset":1429}}},"children":"ChildComponent"}}],"는 이를 props로 받아 사용합니다. 버튼을 클릭하면 상태가 변경되고, 이는 상위 컴포넌트와 하위 컴포넌트에 모두 반영됩니다."]}],"\n",["$","h2",null,{"id":"fe1ba7d0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"여러 레벨의 상태 전달의 문제점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"상태를 props로 전달하는 방식은 간단하지만, 컴포넌트 계층 구조가 깊어질수록 관리가 어려워집니다. 이러한 문제를 해결하기 위해 React에서는 Context API를 제공합니다."}],"\n",["$","h2",null,{"id":"a90fd69c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Context를 이용한 상태 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Context를 사용하면 컴포넌트 트리에서 깊숙이 있는 모든 컴포넌트에 데이터를 전달할 수 있습니다. Context를 사용하기 위해서는 다음과 같은 단계가 필요합니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"Context 생성"}],"\n",["$","li","li-1",{"children":"상위 컴포넌트에서 Provider 사용"}],"\n",["$","li","li-2",{"children":"하위 컴포넌트에서 Context Consumer or useContext 훅 사용"}],"\n"]}],"\n",["$","h3",null,{"id":"a0437819","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Context 생성"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { createContext, useState } from 'react';\n\nconst DataContext = createContext();\n"}],"position":{"start":{"line":74,"column":1,"offset":1850},"end":{"line":78,"column":4,"offset":1961}}},"children":"import React, { createContext, useState } from 'react';\n\nconst DataContext = createContext();\n"}}]}],"\n",["$","h3",null,{"id":"3d951bfb","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Provider 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["상위 컴포넌트에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DataContext.Provider","position":{"start":{"line":82,"column":11,"offset":1990},"end":{"line":82,"column":33,"offset":2012}}}],"position":{"start":{"line":82,"column":11,"offset":1990},"end":{"line":82,"column":33,"offset":2012}}},"children":"DataContext.Provider"}}],"를 사용하여 상태와 상태 변경 함수를 전달합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"function ParentComponent() {\n  const [data, setData] = useState('Initial data');\n\n  return (\n    <DataContext.Provider value={{ data, setData }}>\n      <ChildComponent />\n    </DataContext.Provider>\n  );\n}\n"}],"position":{"start":{"line":84,"column":1,"offset":2041},"end":{"line":94,"column":4,"offset":2264}}},"children":"function ParentComponent() {\n  const [data, setData] = useState('Initial data');\n\n  return (\n    <DataContext.Provider value={{ data, setData }}>\n      <ChildComponent />\n    </DataContext.Provider>\n  );\n}\n"}}]}],"\n",["$","h3",null,{"id":"dc753fa8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Consumer or useContext 훅 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["하위 컴포넌트에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useContext","position":{"start":{"line":98,"column":11,"offset":2309},"end":{"line":98,"column":23,"offset":2321}}}],"position":{"start":{"line":98,"column":11,"offset":2309},"end":{"line":98,"column":23,"offset":2321}}},"children":"useContext"}}]," 훅을 사용하여 상태에 접근할 수 있습니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useContext } from 'react';\n\nfunction ChildComponent() {\n  const { data, setData } = useContext(DataContext);\n\n  return (\n    <div>\n      <h2>Child Component</h2>\n      <p>{data}</p>\n      <button onClick={() => setData('Updated data')}>Update Data</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":100,"column":1,"offset":2347},"end":{"line":114,"column":4,"offset":2655}}},"children":"import React, { useContext } from 'react';\n\nfunction ChildComponent() {\n  const { data, setData } = useContext(DataContext);\n\n  return (\n    <div>\n      <h2>Child Component</h2>\n      <p>{data}</p>\n      <button onClick={() => setData('Updated data')}>Update Data</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React에서 상태를 여러 컴포넌트에 걸쳐 관리하는 것은 어려운 작업일 수 있습니다. 그러나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":118,"column":53,"offset":2716},"end":{"line":118,"column":63,"offset":2726}}}],"position":{"start":{"line":118,"column":53,"offset":2716},"end":{"line":118,"column":63,"offset":2726}}},"children":"useState"}}]," 훅과 Context API를 적절히 사용하면 이러한 문제를 효율적으로 해결할 수 있습니다. 기본적인 상태 관리부터 시작해 Context를 사용한 고급 상태 관리까지, 여러분의 애플리케이션 구조에 맞는 상태 관리 방법을 선택하시길 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법.","toc":[{"tagName":"h1","title":"React에서의 상태 관리 심화: useState 훅을 사용하여 상태를 여러 컴포넌트에 걸쳐 관리하는 방법","id":"c481e1b8"},{"tagName":"h2","title":"상태 관리의 기본 개념","id":"ed238834"},{"tagName":"h2","title":"컴포넌트 간 상태 공유의 필요성","id":"a2e63c1b"},{"tagName":"h3","title":"상태를 상위 컴포넌트에서 관리하기","id":"611e2085"},{"tagName":"h2","title":"여러 레벨의 상태 전달의 문제점","id":"fe1ba7d0"},{"tagName":"h2","title":"Context를 이용한 상태 관리","id":"a90fd69c"},{"tagName":"h3","title":"Context 생성","id":"a0437819"},{"tagName":"h3","title":"Provider 사용","id":"3d951bfb"},{"tagName":"h3","title":"Consumer or useContext 훅 사용","id":"dc753fa8"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
