1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-Hooks-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-useState-useEffect-%ED%99%9C%EC%9A%A9%EB%B2%95-cb780e65","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-Hooks-완벽-가이드-useState-useEffect-활용법-cb780e65\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-Hooks-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-useState-useEffect-%ED%99%9C%EC%9A%A9%EB%B2%95-cb780e65","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-Hooks-완벽-가이드-useState-useEffect-활용법-cb780e65\"}"},"styles":[]}],"segment":["slug","Reactjs-Hooks-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-useState-useEffect-%ED%99%9C%EC%9A%A9%EB%B2%95-cb780e65","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js Hooks 완벽 가이드: useState, useEffect 활용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"React는 현대 웹 개발에서 중요한 위치를 차지하고 있습니다. 이번 글에서는 React의 핵심 기능인 Hooks 중 useState와 useEffect에 대해 심층적으로 다루어 보겠습니다. 이 두 가지 Hooks의 기본 사용법과 함께 실전 예제를 통해 학습해보세요."}],["$","meta","3",{"name":"keywords","content":"React,Hooks,useState,useEffect"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-Hooks-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-useState-useEffect-%ED%99%9C%EC%9A%A9%EB%B2%95-cb780e65"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js Hooks 완벽 가이드: useState, useEffect 활용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js Hooks 완벽 가이드: useState, useEffect 활용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"React는 현대 웹 개발에서 중요한 위치를 차지하고 있습니다. 이번 글에서는 React의 핵심 기능인 Hooks 중 useState와 useEffect에 대해 심층적으로 다루어 보겠습니다. 이 두 가지 Hooks의 기본 사용법과 함께 실전 예제를 통해 학습해보세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-Hooks-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-useState-useEffect-%ED%99%9C%EC%9A%A9%EB%B2%95-cb780e65"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js Hooks 완벽 가이드: useState, useEffect 활용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"React는 현대 웹 개발에서 중요한 위치를 차지하고 있습니다. 이번 글에서는 React의 핵심 기능인 Hooks 중 useState와 useEffect에 대해 심층적으로 다루어 보겠습니다. 이 두 가지 Hooks의 기본 사용법과 함께 실전 예제를 통해 학습해보세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js Hooks 완벽 가이드: useState, useEffect 활용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js Hooks 완벽 가이드: useState, useEffect 활용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-24"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"b72a9f71","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js Hooks 완벽 가이드: useState, useEffect 활용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React는 사용자 인터페이스를 구축하기 위한 강력하고 유연한 라이브러리입니다. React에서 컴포넌트 상태를 관리하고 생명 주기 이벤트를 처리하기 위해 필요한 것이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hooks","position":{"start":{"line":4,"column":94,"offset":144},"end":{"line":4,"column":101,"offset":151}}}],"position":{"start":{"line":4,"column":94,"offset":144},"end":{"line":4,"column":101,"offset":151}}},"children":"Hooks"}}],"입니다. 이 글에서는 가장 널리 사용되는 두 가지 Hook인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":4,"column":135,"offset":185},"end":{"line":4,"column":145,"offset":195}}}],"position":{"start":{"line":4,"column":135,"offset":185},"end":{"line":4,"column":145,"offset":195}}},"children":"useState"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":4,"column":147,"offset":197},"end":{"line":4,"column":158,"offset":208}}}],"position":{"start":{"line":4,"column":147,"offset":197},"end":{"line":4,"column":158,"offset":208}}},"children":"useEffect"}}],"의 기본 개념과 활용 방법을 다루고자 합니다. 앞서 나가기에 앞서, Hooks는 함수형 컴포넌트에서 사용할 수 있습니다."]}],"\n",["$","h2",null,{"id":"8cf817ed","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useState: 상태 관리를 위한 Hook"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":8,"column":1,"offset":306},"end":{"line":8,"column":11,"offset":316}}}],"position":{"start":{"line":8,"column":1,"offset":306},"end":{"line":8,"column":11,"offset":316}}},"children":"useState"}}],"는 리액트 컴포넌트에서 상태를 관리할 때 사용하는 Hook입니다. 클래스형 컴포넌트에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this.state","position":{"start":{"line":8,"column":61,"offset":366},"end":{"line":8,"column":73,"offset":378}}}],"position":{"start":{"line":8,"column":61,"offset":366},"end":{"line":8,"column":73,"offset":378}}},"children":"this.state"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this.setState","position":{"start":{"line":8,"column":75,"offset":380},"end":{"line":8,"column":90,"offset":395}}}],"position":{"start":{"line":8,"column":75,"offset":380},"end":{"line":8,"column":90,"offset":395}}},"children":"this.setState"}}],"를 사용했지만, 함수형 컴포넌트에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":8,"column":111,"offset":416},"end":{"line":8,"column":121,"offset":426}}}],"position":{"start":{"line":8,"column":111,"offset":416},"end":{"line":8,"column":121,"offset":426}}},"children":"useState"}}],"를 통해 상태를 설정하고 업데이트합니다. 다음은 기본적인 사용 예제입니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction Counter() {\n  // count라는 상태 변수와 setCount라는 상태 업데이트 함수를 선언합니다.\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>현재 카운트: {count}</p>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":469},"end":{"line":24,"column":4,"offset":771}}},"children":"import React, { useState } from 'react';\n\nfunction Counter() {\n  // count라는 상태 변수와 setCount라는 상태 업데이트 함수를 선언합니다.\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>현재 카운트: {count}</p>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState(0)","position":{"start":{"line":26,"column":8,"offset":780},"end":{"line":26,"column":21,"offset":793}}}],"position":{"start":{"line":26,"column":8,"offset":780},"end":{"line":26,"column":21,"offset":793}}},"children":"useState(0)"}}],"는 초기 상태 값을 0으로 설정합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":26,"column":43,"offset":815},"end":{"line":26,"column":53,"offset":825}}}],"position":{"start":{"line":26,"column":43,"offset":815},"end":{"line":26,"column":53,"offset":825}}},"children":"useState"}}],"는 두 개의 값을 반환하는데, 첫 번째 값은 현재 상태, 두 번째 값은 상태를 갱신할 수 있는 함수입니다. 상태를 갱신하기 위해서는 그 함수에 새로운 상태 값을 넘겨주면 됩니다."]}],"\n",["$","h3",null,{"id":"9aa17e05","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"상태를 여러 개 설정하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["복잡한 상태를 관리하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":30,"column":17,"offset":961},"end":{"line":30,"column":27,"offset":971}}}],"position":{"start":{"line":30,"column":17,"offset":961},"end":{"line":30,"column":27,"offset":971}}},"children":"useState"}}],"를 여러 번 호출할 수 있습니다. 예제는 다음과 같습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"function Profile() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        placeholder=\"이름을 입력하세요\"\n      />\n      <input\n        type=\"number\"\n        value={age}\n        onChange={(e) => setAge(Number(e.target.value))}\n        placeholder=\"나이를 입력하세요\"\n      />\n      <p>이름: {name}</p>\n      <p>나이: {age}</p>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":32,"column":1,"offset":1005},"end":{"line":56,"column":4,"offset":1505}}},"children":"function Profile() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        placeholder=\"이름을 입력하세요\"\n      />\n      <input\n        type=\"number\"\n        value={age}\n        onChange={(e) => setAge(Number(e.target.value))}\n        placeholder=\"나이를 입력하세요\"\n      />\n      <p>이름: {name}</p>\n      <p>나이: {age}</p>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 우리는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name","position":{"start":{"line":58,"column":12,"offset":1518},"end":{"line":58,"column":18,"offset":1524}}}],"position":{"start":{"line":58,"column":12,"offset":1518},"end":{"line":58,"column":18,"offset":1524}}},"children":"name"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age","position":{"start":{"line":58,"column":20,"offset":1526},"end":{"line":58,"column":25,"offset":1531}}}],"position":{"start":{"line":58,"column":20,"offset":1526},"end":{"line":58,"column":25,"offset":1531}}},"children":"age"}}]," 두 개의 상태 변수를 설정하고 이를 각각의 입력 필드와 연결하였습니다. 상태 업데이트는 입력값의 변화에 따라 이루어집니다."]}],"\n",["$","h2",null,{"id":"5c8b4e66","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useEffect: 사이드 이펙트를 처리하는 Hook"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":62,"column":1,"offset":1636},"end":{"line":62,"column":12,"offset":1647}}}],"position":{"start":{"line":62,"column":1,"offset":1636},"end":{"line":62,"column":12,"offset":1647}}},"children":"useEffect"}}],"는 컴포넌트가 렌더링된 이후에 특정 작업을 수행하기 위해 사용하는 Hook입니다. 클래스형 컴포넌트의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentDidMount","position":{"start":{"line":62,"column":69,"offset":1704},"end":{"line":62,"column":88,"offset":1723}}}],"position":{"start":{"line":62,"column":69,"offset":1704},"end":{"line":62,"column":88,"offset":1723}}},"children":"componentDidMount"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentDidUpdate","position":{"start":{"line":62,"column":90,"offset":1725},"end":{"line":62,"column":110,"offset":1745}}}],"position":{"start":{"line":62,"column":90,"offset":1725},"end":{"line":62,"column":110,"offset":1745}}},"children":"componentDidUpdate"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentWillUnmount","position":{"start":{"line":62,"column":112,"offset":1747},"end":{"line":62,"column":134,"offset":1769}}}],"position":{"start":{"line":62,"column":112,"offset":1747},"end":{"line":62,"column":134,"offset":1769}}},"children":"componentWillUnmount"}}],"와 비슷한 역할을 합니다. 다음은 기본적인 사용 예제입니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((prevSeconds) => prevSeconds + 1);\n    }, 1000);\n    // 컴포넌트가 언마운트될 때 인터벌을 정리합니다.\n    return () => clearInterval(interval);\n  }, []); // 빈 배열은 의존성을 의미하며, 이 경우 컴포넌트가 처음 마운트될 때 한 번만 실행됩니다.\n\n  return (\n    <div>\n      <p>타이머: {seconds} 초</p>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":64,"column":1,"offset":1804},"end":{"line":84,"column":4,"offset":2274}}},"children":"import React, { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds((prevSeconds) => prevSeconds + 1);\n    }, 1000);\n    // 컴포넌트가 언마운트될 때 인터벌을 정리합니다.\n    return () => clearInterval(interval);\n  }, []); // 빈 배열은 의존성을 의미하며, 이 경우 컴포넌트가 처음 마운트될 때 한 번만 실행됩니다.\n\n  return (\n    <div>\n      <p>타이머: {seconds} 초</p>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":86,"column":8,"offset":2283},"end":{"line":86,"column":19,"offset":2294}}}],"position":{"start":{"line":86,"column":8,"offset":2283},"end":{"line":86,"column":19,"offset":2294}}},"children":"useEffect"}}],"는 인터벌을 설정하고 컴포넌트가 언마운트될 때 인터벌을 정리합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":86,"column":57,"offset":2332},"end":{"line":86,"column":68,"offset":2343}}}],"position":{"start":{"line":86,"column":57,"offset":2332},"end":{"line":86,"column":68,"offset":2343}}},"children":"useEffect"}}],"의 두 번째 인자로 빈 배열을 제공하면, 이 효과는 컴포넌트가 처음 렌더링될 때 한 번만 실행됩니다."]}],"\n",["$","h3",null,{"id":"46859fb0","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"여러 종류의 사이드 이펙트 관리하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":90,"column":1,"offset":2426},"end":{"line":90,"column":12,"offset":2437}}}],"position":{"start":{"line":90,"column":1,"offset":2426},"end":{"line":90,"column":12,"offset":2437}}},"children":"useEffect"}}],"를 여러 번 호출하여 다양한 사이드 이펙트를 관리할 수 있습니다. 예를 들어, API 호출과 정리 작업을 각각 분리할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState, useEffect } from 'react';\n\nfunction DataFetcher({ apiEndpoint }) {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // 데이터 가져오기\n  useEffect(() => {\n    fetch(apiEndpoint)\n      .then(response => response.json())\n      .then(data => setData(data))\n      .catch(error => setError(error));\n  }, [apiEndpoint]); // apiEndpoint가 바뀔 때마다 이 효과 실행\n\n  // 정리 작업\n  useEffect(() => {\n    return () => {\n      console.log('컴포넌트 언마운트됨');\n    };\n  }, []);\n\n  if (error) return <div>에러 발생: {error.message}</div>;\n  if (!data) return <div>로딩 중...</div>;\n\n  return (\n    <div>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":92,"column":1,"offset":2512},"end":{"line":123,"column":4,"offset":3220}}},"children":"import React, { useState, useEffect } from 'react';\n\nfunction DataFetcher({ apiEndpoint }) {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n\n  // 데이터 가져오기\n  useEffect(() => {\n    fetch(apiEndpoint)\n      .then(response => response.json())\n      .then(data => setData(data))\n      .catch(error => setError(error));\n  }, [apiEndpoint]); // apiEndpoint가 바뀔 때마다 이 효과 실행\n\n  // 정리 작업\n  useEffect(() => {\n    return () => {\n      console.log('컴포넌트 언마운트됨');\n    };\n  }, []);\n\n  if (error) return <div>에러 발생: {error.message}</div>;\n  if (!data) return <div>로딩 중...</div>;\n\n  return (\n    <div>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 첫 번째 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":125,"column":13,"offset":3234},"end":{"line":125,"column":24,"offset":3245}}}],"position":{"start":{"line":125,"column":13,"offset":3234},"end":{"line":125,"column":24,"offset":3245}}},"children":"useEffect"}}],"는 API 엔드포인트가 변경될 때마다 데이터를 다시 로드합니다. 두 번째 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":125,"column":65,"offset":3286},"end":{"line":125,"column":76,"offset":3297}}}],"position":{"start":{"line":125,"column":65,"offset":3286},"end":{"line":125,"column":76,"offset":3297}}},"children":"useEffect"}}],"는 컴포넌트가 언마운트될 때 정리 작업(이 경우 단순히 콘솔 로그)을 수행합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":129,"column":1,"offset":3351},"end":{"line":129,"column":11,"offset":3361}}}],"position":{"start":{"line":129,"column":1,"offset":3351},"end":{"line":129,"column":11,"offset":3361}}},"children":"useState"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":129,"column":13,"offset":3363},"end":{"line":129,"column":24,"offset":3374}}}],"position":{"start":{"line":129,"column":13,"offset":3363},"end":{"line":129,"column":24,"offset":3374}}},"children":"useEffect"}}],"는 리액트가 클래스형 컴포넌트의 복잡함을 줄이고 함수형 컴포넌트만으로도 충분히 복잡한 상태와 사이드 이펙트를 관리할 수 있도록 하는 강력한 도구입니다. 이 두 Hook의 적용 범위는 매우 넓으며, 리액트 애플리케이션을 더욱 효율적으로 만들기 위해 반드시 익혀야 할 기본 요소입니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js Hooks 완벽 가이드: useState, useEffect 활용법","toc":[{"tagName":"h1","title":"React.js Hooks 완벽 가이드: useState, useEffect 활용법","id":"b72a9f71"},{"tagName":"h2","title":"useState: 상태 관리를 위한 Hook","id":"8cf817ed"},{"tagName":"h3","title":"상태를 여러 개 설정하기","id":"9aa17e05"},{"tagName":"h2","title":"useEffect: 사이드 이펙트를 처리하는 Hook","id":"5c8b4e66"},{"tagName":"h3","title":"여러 종류의 사이드 이펙트 관리하기","id":"46859fb0"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
