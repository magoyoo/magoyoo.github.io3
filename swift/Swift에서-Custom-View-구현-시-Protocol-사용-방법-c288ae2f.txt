1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-Custom-View-%EA%B5%AC%ED%98%84-%EC%8B%9C-Protocol-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95-c288ae2f","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-Custom-View-구현-시-Protocol-사용-방법-c288ae2f\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-Custom-View-%EA%B5%AC%ED%98%84-%EC%8B%9C-Protocol-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95-c288ae2f","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-Custom-View-구현-시-Protocol-사용-방법-c288ae2f\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-Custom-View-%EA%B5%AC%ED%98%84-%EC%8B%9C-Protocol-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95-c288ae2f","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 Custom View 구현 시 Protocol 사용 방법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 커스텀 뷰를 구현할 때 프로토콜을 사용하는 방법을 다룹니다. 이 글에서는 프로토콜의 장점, 구현 방법, 그리고 실제 예제를 통해 프로토콜이 커스텀 뷰 설계에 어떻게 도움을 줄 수 있는지 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Custom View,Protocol,iOS 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Custom-View-%EA%B5%AC%ED%98%84-%EC%8B%9C-Protocol-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95-c288ae2f"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 Custom View 구현 시 Protocol 사용 방법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 Custom View 구현 시 Protocol 사용 방법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 커스텀 뷰를 구현할 때 프로토콜을 사용하는 방법을 다룹니다. 이 글에서는 프로토콜의 장점, 구현 방법, 그리고 실제 예제를 통해 프로토콜이 커스텀 뷰 설계에 어떻게 도움을 줄 수 있는지 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Custom-View-%EA%B5%AC%ED%98%84-%EC%8B%9C-Protocol-%EC%82%AC%EC%9A%A9-%EB%B0%A9%EB%B2%95-c288ae2f"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 Custom View 구현 시 Protocol 사용 방법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 커스텀 뷰를 구현할 때 프로토콜을 사용하는 방법을 다룹니다. 이 글에서는 프로토콜의 장점, 구현 방법, 그리고 실제 예제를 통해 프로토콜이 커스텀 뷰 설계에 어떻게 도움을 줄 수 있는지 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T440,import UIKit

class UserView: UIView, ConfigurableView {
    typealias DataType = User

    private let nameLabel = UILabel()
    private let ageLabel = UILabel()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupView()
    }

    private func setupView() {
        addSubview(nameLabel)
        addSubview(ageLabel)

        // 레이아웃 설정
        nameLabel.translatesAutoresizingMaskIntoConstraints = false
        ageLabel.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            nameLabel.topAnchor.constraint(equalTo: topAnchor),
            nameLabel.leadingAnchor.constraint(equalTo: leadingAnchor),
            ageLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 8),
            ageLabel.leadingAnchor.constraint(equalTo: leadingAnchor)
        ])
    }

    func configure(with data: User) {
        nameLabel.text = data.name
        ageLabel.text = "Age: \(data.age)"
    }
}
f:T440,import UIKit

class UserView: UIView, ConfigurableView {
    typealias DataType = User

    private let nameLabel = UILabel()
    private let ageLabel = UILabel()

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupView()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupView()
    }

    private func setupView() {
        addSubview(nameLabel)
        addSubview(ageLabel)

        // 레이아웃 설정
        nameLabel.translatesAutoresizingMaskIntoConstraints = false
        ageLabel.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            nameLabel.topAnchor.constraint(equalTo: topAnchor),
            nameLabel.leadingAnchor.constraint(equalTo: leadingAnchor),
            ageLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 8),
            ageLabel.leadingAnchor.constraint(equalTo: leadingAnchor)
        ])
    }

    func configure(with data: User) {
        nameLabel.text = data.name
        ageLabel.text = "Age: \(data.age)"
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 Custom View 구현 시 Protocol 사용 방법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 Custom View 구현 시 Protocol 사용 방법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-01"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"40484f6c","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 Custom View 구현 시 Protocol 사용 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 Custom View를 구현할 때 프로토콜을 사용하면 코드를 더 유연하고 재사용 가능하게 만들 수 있습니다. 프로토콜은 특정 기능이나 속성을 가지는 타입을 정의하는데 유용하며, 이를 통해 코드를 모듈화하고 유지보수를 쉽게 할 수 있습니다. 이 글에서는 Swift에서 커스텀 뷰를 구현할 때 프로토콜을 사용하는 방법을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"13f74b89","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜의 장점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로토콜을 사용하면 여러 가지 장점을 누릴 수 있습니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"유연성"}],": 서로 다른 타입에서 공통 기능을 사용할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"재사용성"}],": 동일한 인터페이스를 여러 곳에서 재사용할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"코드의 가독성"}],": 프로토콜을 사용하면 코드의 논리를 분리하고, 각 기능을 명확히 정의할 수 있습니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"테스트 용이성"}],": 프로토콜을 사용하면 의존성 주입(Dependency Injection)이 쉬워져, 테스트 코드 작성이 용이해집니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"a19ef20b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜 정의하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, 프로토콜을 정의해 봅시다. 예를 들어, 'ConfigurableView'라는 프로토콜을 정의한다고 가정합니다. 이 프로토콜은 뷰가 데이터를 통해 구성될 수 있는 기능을 제공해야 합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol ConfigurableView {\n    associatedtype DataType\n    func configure(with data: DataType)\n}\n"}],"position":{"start":{"line":19,"column":1,"offset":639},"end":{"line":24,"column":4,"offset":749}}},"children":"protocol ConfigurableView {\n    associatedtype DataType\n    func configure(with data: DataType)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"associatedtype","position":{"start":{"line":26,"column":9,"offset":759},"end":{"line":26,"column":25,"offset":775}}}],"position":{"start":{"line":26,"column":9,"offset":759},"end":{"line":26,"column":25,"offset":775}}},"children":"associatedtype"}}]," 키워드를 사용하여, 어떤 데이터 타입이든 이를 이용해 뷰를 설정할 수 있도록 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"configure(with:)","position":{"start":{"line":26,"column":74,"offset":824},"end":{"line":26,"column":92,"offset":842}}}],"position":{"start":{"line":26,"column":74,"offset":824},"end":{"line":26,"column":92,"offset":842}}},"children":"configure(with:)"}}]," 메서드는 주어진 데이터로 뷰를 설정하는 책임을 가집니다."]}],"\n",["$","h2",null,{"id":"045b75d2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜을 준수하는 Custom View 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConfigurableView","position":{"start":{"line":30,"column":4,"offset":910},"end":{"line":30,"column":22,"offset":928}}}],"position":{"start":{"line":30,"column":4,"offset":910},"end":{"line":30,"column":22,"offset":928}}},"children":"ConfigurableView"}}]," 프로토콜을 준수하는 커스텀 뷰를 만들어 보겠습니다. 예를 들어, 사용자 정보를 표시하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserView","position":{"start":{"line":30,"column":72,"offset":978},"end":{"line":30,"column":82,"offset":988}}}],"position":{"start":{"line":30,"column":72,"offset":978},"end":{"line":30,"column":82,"offset":988}}},"children":"UserView"}}],"라는 커스텀 뷰를 만들어 보겠습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저 사용자 정보를 저장할 타입을 정의합니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct User {\n    let name: String\n    let age: Int\n}\n"}],"position":{"start":{"line":34,"column":1,"offset":1037},"end":{"line":39,"column":4,"offset":1103}}},"children":"struct User {\n    let name: String\n    let age: Int\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["그 다음, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserView","position":{"start":{"line":41,"column":7,"offset":1111},"end":{"line":41,"column":17,"offset":1121}}}],"position":{"start":{"line":41,"column":7,"offset":1111},"end":{"line":41,"column":17,"offset":1121}}},"children":"UserView"}}]," 클래스를 정의하고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConfigurableView","position":{"start":{"line":41,"column":28,"offset":1132},"end":{"line":41,"column":46,"offset":1150}}}],"position":{"start":{"line":41,"column":28,"offset":1132},"end":{"line":41,"column":46,"offset":1150}}},"children":"ConfigurableView"}}]," 프로토콜을 준수하게 합니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":43,"column":1,"offset":1168},"end":{"line":82,"column":4,"offset":2256}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserView","position":{"start":{"line":84,"column":5,"offset":2262},"end":{"line":84,"column":15,"offset":2272}}}],"position":{"start":{"line":84,"column":5,"offset":2262},"end":{"line":84,"column":15,"offset":2272}}},"children":"UserView"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConfigurableView","position":{"start":{"line":84,"column":21,"offset":2278},"end":{"line":84,"column":39,"offset":2296}}}],"position":{"start":{"line":84,"column":21,"offset":2278},"end":{"line":84,"column":39,"offset":2296}}},"children":"ConfigurableView"}}]," 프로토콜을 준수합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"configure(with:)","position":{"start":{"line":84,"column":53,"offset":2310},"end":{"line":84,"column":71,"offset":2328}}}],"position":{"start":{"line":84,"column":53,"offset":2310},"end":{"line":84,"column":71,"offset":2328}}},"children":"configure(with:)"}}]," 메서드는 주어진 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"User","position":{"start":{"line":84,"column":81,"offset":2338},"end":{"line":84,"column":87,"offset":2344}}}],"position":{"start":{"line":84,"column":81,"offset":2338},"end":{"line":84,"column":87,"offset":2344}}},"children":"User"}}]," 데이터로 뷰를 설정합니다."]}],"\n",["$","h2",null,{"id":"066cf051","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토콜 확장"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["프로토콜 확장은 기본 구현을 제공함으로써 프로토콜 채택 시 코드를 간단하게 만들 수 있습니다. 예를 들어, 디버깅을 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"printConfiguration","position":{"start":{"line":88,"column":69,"offset":2441},"end":{"line":88,"column":89,"offset":2461}}}],"position":{"start":{"line":88,"column":69,"offset":2441},"end":{"line":88,"column":89,"offset":2461}}},"children":"printConfiguration"}}]," 메서드를 추가한다고 가정해 봅시다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"extension ConfigurableView where DataType == User {\n    func printConfiguration(data: User) {\n        print(\"Configuring view with User data: \\(data)\")\n    }\n}\n"}],"position":{"start":{"line":90,"column":1,"offset":2483},"end":{"line":96,"column":4,"offset":2655}}},"children":"extension ConfigurableView where DataType == User {\n    func printConfiguration(data: User) {\n        print(\"Configuring view with User data: \\(data)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserView","position":{"start":{"line":98,"column":4,"offset":2660},"end":{"line":98,"column":14,"offset":2670}}}],"position":{"start":{"line":98,"column":4,"offset":2660},"end":{"line":98,"column":14,"offset":2670}}},"children":"UserView"}}]," 클래스에서 이 메서드를 사용할 수 있습니다:"]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let userView = UserView(frame: .zero)\nlet user = User(name: \"John Doe\", age: 30)\nuserView.printConfiguration(data: user)\n"}],"position":{"start":{"line":100,"column":1,"offset":2697},"end":{"line":104,"column":4,"offset":2830}}},"children":"let userView = UserView(frame: .zero)\nlet user = User(name: \"John Doe\", age: 30)\nuserView.printConfiguration(data: user)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"printConfiguration(data:)","position":{"start":{"line":106,"column":8,"offset":2839},"end":{"line":106,"column":35,"offset":2866}}}],"position":{"start":{"line":106,"column":8,"offset":2839},"end":{"line":106,"column":35,"offset":2866}}},"children":"printConfiguration(data:)"}}]," 메서드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserView","position":{"start":{"line":106,"column":41,"offset":2872},"end":{"line":106,"column":51,"offset":2882}}}],"position":{"start":{"line":106,"column":41,"offset":2872},"end":{"line":106,"column":51,"offset":2882}}},"children":"UserView"}}]," 클래스뿐만 아니라 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConfigurableView","position":{"start":{"line":106,"column":62,"offset":2893},"end":{"line":106,"column":80,"offset":2911}}}],"position":{"start":{"line":106,"column":62,"offset":2893},"end":{"line":106,"column":80,"offset":2911}}},"children":"ConfigurableView"}}]," 프로토콜을 준수하는 모든 클래스에서 사용 가능합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"커스텀 뷰를 구현할 때 프로토콜을 사용하면 여러 가지 장점이 있습니다. 프로토콜을 사용하면 유연성과 재사용성이 높아지고, 코드를 더 모듈화하고 가독성을 높일 수 있습니다. 또한 테스트가 쉬워지며, 기본 구현을 제공하여 프로토콜의 기능을 확장할 수도 있습니다. Swift에서 프로토콜을 잘 활용하면 더 안정적이고 유지보수가 쉬운 코드를 작성할 수 있을 것입니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift에서 Custom View 구현 시 Protocol 사용 방법","toc":[{"tagName":"h1","title":"Swift에서 Custom View 구현 시 Protocol 사용 방법","id":"40484f6c"},{"tagName":"h2","title":"프로토콜의 장점","id":"13f74b89"},{"tagName":"h2","title":"프로토콜 정의하기","id":"a19ef20b"},{"tagName":"h2","title":"프로토콜을 준수하는 Custom View 만들기","id":"045b75d2"},{"tagName":"h2","title":"프로토콜 확장","id":"066cf051"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
