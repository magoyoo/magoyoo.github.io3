1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B9%84%EA%B5%90-fd90ae7c","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-함수형-컴포넌트와-클래스형-컴포넌트-비교-fd90ae7c\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B9%84%EA%B5%90-fd90ae7c","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-함수형-컴포넌트와-클래스형-컴포넌트-비교-fd90ae7c\"}"},"styles":[]}],"segment":["slug","Reactjs-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B9%84%EA%B5%90-fd90ae7c","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 React.js에서 주로 사용되는 두 가지 컴포넌트 유형인 함수형 컴포넌트와 클래스형 컴포넌트를 비교하여, 각 유형의 특징과 장단점을 알아봅니다. 이를 통해 개발자가 더 적합한 방식으로 컴포넌트를 선택할 수 있도록 돕습니다."}],["$","meta","3",{"name":"keywords","content":"React.js,함수형 컴포넌트,클래스형 컴포넌트,비교"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B9%84%EA%B5%90-fd90ae7c"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 React.js에서 주로 사용되는 두 가지 컴포넌트 유형인 함수형 컴포넌트와 클래스형 컴포넌트를 비교하여, 각 유형의 특징과 장단점을 알아봅니다. 이를 통해 개발자가 더 적합한 방식으로 컴포넌트를 선택할 수 있도록 돕습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%B9%84%EA%B5%90-fd90ae7c"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 React.js에서 주로 사용되는 두 가지 컴포넌트 유형인 함수형 컴포넌트와 클래스형 컴포넌트를 비교하여, 각 유형의 특징과 장단점을 알아봅니다. 이를 통해 개발자가 더 적합한 방식으로 컴포넌트를 선택할 수 있도록 돕습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-26"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"ca73300f","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React.js는 현대 웹 개발에서 가장 널리 사용되는 라이브러리 중 하나로, 사용자 인터페이스를 구축하는 데 매우 효율적입니다. React.js 컴포넌트는 크게 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"함수형 컴포넌트","position":{"start":{"line":4,"column":92,"offset":127},"end":{"line":4,"column":102,"offset":137}}}],"position":{"start":{"line":4,"column":92,"offset":127},"end":{"line":4,"column":102,"offset":137}}},"children":"함수형 컴포넌트"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"클래스형 컴포넌트","position":{"start":{"line":4,"column":104,"offset":139},"end":{"line":4,"column":115,"offset":150}}}],"position":{"start":{"line":4,"column":104,"offset":139},"end":{"line":4,"column":115,"offset":150}}},"children":"클래스형 컴포넌트"}}]," 두 가지로 나눌 수 있습니다. 이 글에서는 이 두 가지 컴포넌트를 비교하고, 각 유형의 장단점을 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"f31ebb03","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"함수형 컴포넌트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["함수형 컴포넌트는 함수로 정의되는 컴포넌트입니다. 함수형 컴포넌트는 상태를 가지지 않으며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props","position":{"start":{"line":8,"column":52,"offset":279},"end":{"line":8,"column":59,"offset":286}}}],"position":{"start":{"line":8,"column":52,"offset":279},"end":{"line":8,"column":59,"offset":286}}},"children":"props"}}],"를 받아 UI를 반환하는 구조로 되어 있습니다. 예시를 통해 함수형 컴포넌트의 사용 방식을 알아보겠습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React from 'react';\n\nconst HelloWorld = (props) => {\n  return <h1>Hello, {props.name}!</h1>;\n};\n\nexport default HelloWorld;\n"}],"position":{"start":{"line":10,"column":1,"offset":347},"end":{"line":18,"column":4,"offset":495}}},"children":"import React from 'react';\n\nconst HelloWorld = (props) => {\n  return <h1>Hello, {props.name}!</h1>;\n};\n\nexport default HelloWorld;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제는 단순한 함수형 컴포넌트로, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props.name","position":{"start":{"line":20,"column":22,"offset":518},"end":{"line":20,"column":34,"offset":530}}}],"position":{"start":{"line":20,"column":22,"offset":518},"end":{"line":20,"column":34,"offset":530}}},"children":"props.name"}}]," 값을 받아 화면에 표시합니다. 함수형 컴포넌트의 주요 장점은 다음과 같습니다."]}],"\n",["$","h3",null,{"id":"0e91a822","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"장점"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"간단한 구조"}],": 함수형 컴포넌트는 단순한 자바스크립트 함수로 정의되기 때문에 구조가 간단합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"성능"}],": 함수형 컴포넌트는 상태나 생명주기 메서드가 없기 때문에 호출에 필요한 오버헤드가 적습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"가독성"}],": 함수형 컴포넌트는 일반적으로 코드가 적고, 가독성이 높습니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"Hooks 사용 가능"}],": React 16.8 이후로, 함수형 컴포넌트에서도 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":27,"column":49,"offset":801},"end":{"line":27,"column":59,"offset":811}}}],"position":{"start":{"line":27,"column":49,"offset":801},"end":{"line":27,"column":59,"offset":811}}},"children":"useState"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect","position":{"start":{"line":27,"column":61,"offset":813},"end":{"line":27,"column":72,"offset":824}}}],"position":{"start":{"line":27,"column":61,"offset":813},"end":{"line":27,"column":72,"offset":824}}},"children":"useEffect"}}]," 같은 Hooks를 사용하여 상태와 생명주기 관리가 가능합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"함수형 컴포넌트는 간단한 구조와 높은 가독성으로 인해 많은 개발자들 사이에서 인기 있는 선택입니다. 그러나 모든 상황에 적합한 것은 아닙니다."}],"\n",["$","h3",null,{"id":"7c7251f1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"단점"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 로직"}],": 복잡한 상태 관리나 생명주기 메서드가 필요한 경우, 함수형 컴포넌트는 적합하지 않을 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"레퍼런스 사용 제약"}],": DOM 레퍼런스를 직접 조작해야 하는 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useRef","position":{"start":{"line":34,"column":45,"offset":1064},"end":{"line":34,"column":53,"offset":1072}}}],"position":{"start":{"line":34,"column":45,"offset":1064},"end":{"line":34,"column":53,"offset":1072}}},"children":"useRef"}}],"와 같은 Hooks를 통해 우회해야 합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"b936f749","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"클래스형 컴포넌트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클래스형 컴포넌트는 ES6 클래스 문법을 사용하여 정의됩니다. 클래스형 컴포넌트는 상태를 가지며, 여러 생명주기 메서드를 통해 컴포넌트의 상태와 행동을 제어할 수 있습니다. 예시를 통해 클래스형 컴포넌트의 사용 방식을 알아보겠습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { Component } from 'react';\n\nclass HelloWorld extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return <h1>Hello, {this.props.name}! Count: {this.state.count}</h1>;\n  }\n}\n\nexport default HelloWorld;\n"}],"position":{"start":{"line":40,"column":1,"offset":1244},"end":{"line":57,"column":4,"offset":1548}}},"children":"import React, { Component } from 'react';\n\nclass HelloWorld extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return <h1>Hello, {this.props.name}! Count: {this.state.count}</h1>;\n  }\n}\n\nexport default HelloWorld;\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제는 클래스형 컴포넌트로, 상태 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count","position":{"start":{"line":59,"column":22,"offset":1571},"end":{"line":59,"column":29,"offset":1578}}}],"position":{"start":{"line":59,"column":22,"offset":1571},"end":{"line":59,"column":29,"offset":1578}}},"children":"count"}}],"를 관리합니다. 클래스형 컴포넌트의 주요 장점은 다음과 같습니다."]}],"\n",["$","h3",null,{"id":"0e91a822","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"장점"}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 상태 관리"}],": 클래스형 컴포넌트는 자체적으로 상태를 가질 수 있어 복잡한 상태 관리가 가능합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"생명주기 메서드"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentDidMount","position":{"start":{"line":64,"column":18,"offset":1706},"end":{"line":64,"column":37,"offset":1725}}}],"position":{"start":{"line":64,"column":18,"offset":1706},"end":{"line":64,"column":37,"offset":1725}}},"children":"componentDidMount"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentDidUpdate","position":{"start":{"line":64,"column":39,"offset":1727},"end":{"line":64,"column":59,"offset":1747}}}],"position":{"start":{"line":64,"column":39,"offset":1727},"end":{"line":64,"column":59,"offset":1747}}},"children":"componentDidUpdate"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentWillUnmount","position":{"start":{"line":64,"column":61,"offset":1749},"end":{"line":64,"column":83,"offset":1771}}}],"position":{"start":{"line":64,"column":61,"offset":1749},"end":{"line":64,"column":83,"offset":1771}}},"children":"componentWillUnmount"}}]," 등 다양한 생명주기 메서드를 통해 컴포넌트의 상태와 행동을 제어할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"레퍼런스 사용 용이"}],": DOM 레퍼런스를 쉽게 관리할 수 있습니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클래스형 컴포넌트는 복잡한 상태와 생명주기 관리가 필요한 경우에 유리합니다. 그러나 몇 가지 단점도 존재합니다."}],"\n",["$","h3",null,{"id":"7c7251f1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"단점"}],"\n",["$","ol","ol-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 문법"}],": 클래스형 컴포넌트는 함수형 컴포넌트에 비해 상대적으로 복잡한 문법을 사용합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"성능"}],": 상태와 생명주기 메서드 때문에 호출에 필요한 오버헤드가 높을 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"가독성 낮음"}],": 코드가 복잡해지기 쉬우며, 가독성이 떨어질 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"3f975209","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"함수형 컴포넌트 vs. 클래스형 컴포넌트: 선택 기준"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 함수형 컴포넌트와 클래스형 컴포넌트의 장단점을 살펴봤으니, 어떤 상황에서 어떤 컴포넌트를 선택해야 하는지에 대해 알아봅시다."}],"\n",["$","ol","ol-4",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"단순한 UI 컴포넌트"}],": 상태 관리가 필요 없고 단순히 데이터를 표시하는 경우, 함수형 컴포넌트가 적합합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 상태 관리"}],": 여러 상태를 관리하거나 생명주기 메서드를 사용해야 하는 경우, 클래스형 컴포넌트가 더 나은 선택입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"코드 가독성"}],": 코드가 간단하고 가독성이 높은 것을 선호한다면 함수형 컴포넌트를 사용하는 것이 좋습니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"성능 고려"}],": 성능이 중요한 경우, 함수형 컴포넌트가 더 나을 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React.js에서 함수형 컴포넌트와 클래스형 컴포넌트는 각각의 용도와 상황에 따라 선택적으로 사용되어야 합니다. 함수형 컴포넌트는 간단한 구조와 높은 가독성으로 인해 많은 경우에 적합하지만, 복잡한 상태 관리와 생명주기 메서드가 필요한 경우에는 클래스형 컴포넌트가 더 유리할 수 있습니다. 각 컴포넌트의 특성을 잘 이해하고, 프로젝트의 요구사항에 맞게 적절한 컴포넌트를 선택하는 것이 중요합니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교","toc":[{"tagName":"h1","title":"React.js 함수형 컴포넌트와 클래스형 컴포넌트 비교","id":"ca73300f"},{"tagName":"h2","title":"함수형 컴포넌트","id":"f31ebb03"},{"tagName":"h3","title":"장점","id":"0e91a822"},{"tagName":"h3","title":"단점","id":"7c7251f1"},{"tagName":"h2","title":"클래스형 컴포넌트","id":"b936f749"},{"tagName":"h3","title":"장점","id":"0e91a822"},{"tagName":"h3","title":"단점","id":"7c7251f1"},{"tagName":"h2","title":"함수형 컴포넌트 vs. 클래스형 컴포넌트: 선택 기준","id":"3f975209"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
