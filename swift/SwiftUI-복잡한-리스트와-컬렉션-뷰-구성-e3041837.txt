1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%BB%AC%EB%A0%89%EC%85%98-%EB%B7%B0-%EA%B5%AC%EC%84%B1-e3041837","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI-복잡한-리스트와-컬렉션-뷰-구성-e3041837\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%BB%AC%EB%A0%89%EC%85%98-%EB%B7%B0-%EA%B5%AC%EC%84%B1-e3041837","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI-복잡한-리스트와-컬렉션-뷰-구성-e3041837\"}"},"styles":[]}],"segment":["slug","SwiftUI-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%BB%AC%EB%A0%89%EC%85%98-%EB%B7%B0-%EA%B5%AC%EC%84%B1-e3041837","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 SwiftUI를 사용하여 복잡한 리스트와 컬렉션 뷰를 구성하는 방법에 대해 설명합니다. SwiftUI는 UI 컴포넌트를 구조적으로 간결하게 표현할 수 있는 기능을 제공하며, 다양한 리스트와 컬렉션 뷰를 효율적으로 구현할 수 있는 방법을 탐구합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,리스트,컬렉션뷰,iOS개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%BB%AC%EB%A0%89%EC%85%98-%EB%B7%B0-%EA%B5%AC%EC%84%B1-e3041837"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 SwiftUI를 사용하여 복잡한 리스트와 컬렉션 뷰를 구성하는 방법에 대해 설명합니다. SwiftUI는 UI 컴포넌트를 구조적으로 간결하게 표현할 수 있는 기능을 제공하며, 다양한 리스트와 컬렉션 뷰를 효율적으로 구현할 수 있는 방법을 탐구합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EC%99%80-%EC%BB%AC%EB%A0%89%EC%85%98-%EB%B7%B0-%EA%B5%AC%EC%84%B1-e3041837"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 SwiftUI를 사용하여 복잡한 리스트와 컬렉션 뷰를 구성하는 방법에 대해 설명합니다. SwiftUI는 UI 컴포넌트를 구조적으로 간결하게 표현할 수 있는 기능을 제공하며, 다양한 리스트와 컬렉션 뷰를 효율적으로 구현할 수 있는 방법을 탐구합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-12"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"baa210ec","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 애플의 최신 UI 프레임워크로서, 매우 선언적인 방식으로 사용자 인터페이스를 만들 수 있게 해줍니다. 특히, 리스트와 컬렉션 뷰와 같은 복잡한 데이터 중심의 뷰도 간단하게 구성할 수 있는 도구를 제공합니다. 이 글에서는 복잡한 리스트와 컬렉션 뷰를 이용해 강력하고 확장 가능한 UI를 구축하는 방법에 대해 다룹니다."}],"\n",["$","h2",null,{"id":"acd78e19","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"리스트(List)의 기본 구성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서 리스트는 매우 간단하게 구성할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":8,"column":36,"offset":273},"end":{"line":8,"column":42,"offset":279}}}],"position":{"start":{"line":8,"column":36,"offset":273},"end":{"line":8,"column":42,"offset":279}}},"children":"List"}}]," 컴포넌트를 사용하면 데이터 항목들을 시각적으로 나열할 수 있습니다. 예를 들어, 기본적인 리스트는 다음과 같이 작성할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct SimpleListView: View {\n    let items = [\"One\", \"Two\", \"Three\"]\n\n    var body: some View {\n        List(items, id: \\ .self) { item in\n            Text(item)\n        }\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":355},"end":{"line":22,"column":4,"offset":564}}},"children":"import SwiftUI\n\nstruct SimpleListView: View {\n    let items = [\"One\", \"Two\", \"Three\"]\n\n    var body: some View {\n        List(items, id: \\ .self) { item in\n            Text(item)\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"items","position":{"start":{"line":23,"column":9,"offset":573},"end":{"line":23,"column":16,"offset":580}}}],"position":{"start":{"line":23,"column":9,"offset":573},"end":{"line":23,"column":16,"offset":580}}},"children":"items"}}]," 배열의 문자열을 리스트로 나열합니다.\nList 뷰는 각 항목을 식별하기 위해 'id' 속성을 사용하여 고유한 값으로 처리합니다."]}],"\n",["$","h2",null,{"id":"0e63c1ba","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 셀(Custom Cell) 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기본적인 리스트는 간단하지만, 현실적인 애플리케이션에서는 더 복잡한 셀이 필요합니다. 이를 위해 커스텀 뷰를 리스트의 셀로 사용할 수 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct CustomCell: View {\n    let title: String\n    let subtitle: String\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(title)\n                .font(.headline)\n            Text(subtitle)\n                .font(.subheadline)\n                .foregroundColor(.gray)\n        }\n    }\n}\n\nstruct CustomListView: View {\n    let items = [\"First Item\", \"Second Item\", \"Third Item\"]\n\n    var body: some View {\n        List(items, id: \\ .self) { item in\n            CustomCell(title: item, subtitle: \"Subtitle for \\(item)\")\n        }\n    }\n}\n"}],"position":{"start":{"line":30,"column":1,"offset":764},"end":{"line":55,"column":5,"offset":1342}}},"children":"struct CustomCell: View {\n    let title: String\n    let subtitle: String\n\n    var body: some View {\n        VStack(alignment: .leading) {\n            Text(title)\n                .font(.headline)\n            Text(subtitle)\n                .font(.subheadline)\n                .foregroundColor(.gray)\n        }\n    }\n}\n\nstruct CustomListView: View {\n    let items = [\"First Item\", \"Second Item\", \"Third Item\"]\n\n    var body: some View {\n        List(items, id: \\ .self) { item in\n            CustomCell(title: item, subtitle: \"Subtitle for \\(item)\")\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CustomCell","position":{"start":{"line":56,"column":9,"offset":1351},"end":{"line":56,"column":21,"offset":1363}}}],"position":{"start":{"line":56,"column":9,"offset":1351},"end":{"line":56,"column":21,"offset":1363}}},"children":"CustomCell"}}]," 뷰를 만들어 각 리스트 항목에 제목과 부제목을 표시합니다. 이제 더 복잡한 UI를 리스트 셀로 쉽게 사용 가능합니다."]}],"\n",["$","h2",null,{"id":"1eb76d44","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"섹션(Section)으로 리스트 구분하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["리스트를 섹션으로 구분하면 사용자가 데이터 구조를 더 쉽게 이해할 수 있습니다. SwiftUI의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Section","position":{"start":{"line":60,"column":55,"offset":1512},"end":{"line":60,"column":64,"offset":1521}}}],"position":{"start":{"line":60,"column":55,"offset":1512},"end":{"line":60,"column":64,"offset":1521}}},"children":"Section"}}]," 컴포넌트를 사용하면 간단하게 섹션을 추가할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct SectionedListView: View {\n    let sections = [\"Fruits\", \"Vegetables\", \"Dairy\"]\n    let items = [\n        [\"Apple\", \"Orange\", \"Banana\"],\n        [\"Carrot\", \"Cucumber\", \"Tomato\"],\n        [\"Milk\", \"Cheese\", \"Butter\"]\n    ]\n\n    var body: some View {\n        List {\n            ForEach(0..<sections.count, id: \\ .self) { index in\n                Section(header: Text(self.sections[index])) {\n                    ForEach(self.items[index], id: \\ .self) { item in\n                        Text(item)\n                    }\n                }\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":62,"column":1,"offset":1555},"end":{"line":83,"column":4,"offset":2140}}},"children":"struct SectionedListView: View {\n    let sections = [\"Fruits\", \"Vegetables\", \"Dairy\"]\n    let items = [\n        [\"Apple\", \"Orange\", \"Banana\"],\n        [\"Carrot\", \"Cucumber\", \"Tomato\"],\n        [\"Milk\", \"Cheese\", \"Butter\"]\n    ]\n\n    var body: some View {\n        List {\n            ForEach(0..<sections.count, id: \\ .self) { index in\n                Section(header: Text(self.sections[index])) {\n                    ForEach(self.items[index], id: \\ .self) { item in\n                        Text(item)\n                    }\n                }\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Section","position":{"start":{"line":84,"column":7,"offset":2147},"end":{"line":84,"column":16,"offset":2156}}}],"position":{"start":{"line":84,"column":7,"offset":2147},"end":{"line":84,"column":16,"offset":2156}}},"children":"Section"}}],"을 이용하여 데이터 항목을 'Fruits', 'Vegetables', 'Dairy'와 같은 섹션으로 구분하여 리스트를 구성합니다. 각 섹션에는 해당 항목들이 나열되어 있습니다."]}],"\n",["$","h2",null,{"id":"88132847","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"컬렉션 뷰(Collection View) 구성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["컬렉션 뷰는 그리드 형식으로 데이터를 표시할 때 유용합니다. SwiftUI에서 그리드 레이아웃은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"LazyVGrid","position":{"start":{"line":88,"column":55,"offset":2340},"end":{"line":88,"column":66,"offset":2351}}}],"position":{"start":{"line":88,"column":55,"offset":2340},"end":{"line":88,"column":66,"offset":2351}}},"children":"LazyVGrid"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"LazyHGrid","position":{"start":{"line":88,"column":68,"offset":2353},"end":{"line":88,"column":79,"offset":2364}}}],"position":{"start":{"line":88,"column":68,"offset":2353},"end":{"line":88,"column":79,"offset":2364}}},"children":"LazyHGrid"}}],"를 사용하여 구현할 수 있습니다. 예를 들어 세로형 그리드를 구성하는 코드는 다음과 같습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct GridItem: Identifiable {\n    var id = UUID()\n    var value: String\n}\n\nstruct GridView: View {\n    let items = [\n        GridItem(value: \"One\"),\n        GridItem(value: \"Two\"),\n        GridItem(value: \"Three\"),\n        GridItem(value: \"Four\"),\n        GridItem(value: \"Five\"),\n        GridItem(value: \"Six\")\n    ]\n\n    let columns = [\n        GridItem(.flexible()),\n        GridItem(.flexible())\n    ]\n\n    var body: some View {\n        ScrollView {\n            LazyVGrid(columns: columns, spacing: 20) {\n                ForEach(items) { item in\n                    Text(item.value)\n                        .frame(width: 100, height: 100)\n                        .background(Color.blue)\n                        .cornerRadius(10)\n                        .foregroundColor(.white)\n                }\n            }\n            .padding()\n        }\n    }\n}\n"}],"position":{"start":{"line":90,"column":1,"offset":2418},"end":{"line":126,"column":4,"offset":3287}}},"children":"struct GridItem: Identifiable {\n    var id = UUID()\n    var value: String\n}\n\nstruct GridView: View {\n    let items = [\n        GridItem(value: \"One\"),\n        GridItem(value: \"Two\"),\n        GridItem(value: \"Three\"),\n        GridItem(value: \"Four\"),\n        GridItem(value: \"Five\"),\n        GridItem(value: \"Six\")\n    ]\n\n    let columns = [\n        GridItem(.flexible()),\n        GridItem(.flexible())\n    ]\n\n    var body: some View {\n        ScrollView {\n            LazyVGrid(columns: columns, spacing: 20) {\n                ForEach(items) { item in\n                    Text(item.value)\n                        .frame(width: 100, height: 100)\n                        .background(Color.blue)\n                        .cornerRadius(10)\n                        .foregroundColor(.white)\n                }\n            }\n            .padding()\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"LazyVGrid","position":{"start":{"line":127,"column":7,"offset":3294},"end":{"line":127,"column":18,"offset":3305}}}],"position":{"start":{"line":127,"column":7,"offset":3294},"end":{"line":127,"column":18,"offset":3305}}},"children":"LazyVGrid"}}],"를 사용하여 두 개의 열로 구성된 그리드를 만들며, 각 셀에는 'One'부터 'Six'까지의 텍스트 값이 표시됩니다. 셀의 크기와 모서리 반경도 설정하여 그리드를 좀 더 보기 좋게 만들 수 있습니다."]}],"\n",["$","h2",null,{"id":"9faca531","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"동적 데이터와 데이터 바인딩"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["실제 앱에서는 리스트와 컬렉션 뷰에 표시되는 데이터는 종종 실시간으로 변경됩니다. 이를 위해 SwiftUI는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@State","position":{"start":{"line":131,"column":62,"offset":3499},"end":{"line":131,"column":70,"offset":3507}}}],"position":{"start":{"line":131,"column":62,"offset":3499},"end":{"line":131,"column":70,"offset":3507}}},"children":"@State"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Binding","position":{"start":{"line":131,"column":72,"offset":3509},"end":{"line":131,"column":82,"offset":3519}}}],"position":{"start":{"line":131,"column":72,"offset":3509},"end":{"line":131,"column":82,"offset":3519}}},"children":"@Binding"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@ObservedObject","position":{"start":{"line":131,"column":84,"offset":3521},"end":{"line":131,"column":101,"offset":3538}}}],"position":{"start":{"line":131,"column":84,"offset":3521},"end":{"line":131,"column":101,"offset":3538}}},"children":"@ObservedObject"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@EnvironmentObject","position":{"start":{"line":131,"column":103,"offset":3540},"end":{"line":131,"column":123,"offset":3560}}}],"position":{"start":{"line":131,"column":103,"offset":3540},"end":{"line":131,"column":123,"offset":3560}}},"children":"@EnvironmentObject"}}]," 등의 속성을 통해 데이터 바인딩을 지원합니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class DataModel: ObservableObject {\n    @Published var items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    func addItem() {\n        items.append(\"Item \\(items.count + 1)\")\n    }\n}\n\nstruct DynamicListView: View {\n    @ObservedObject var model = DataModel()\n\n    var body: some View {\n        VStack {\n            List(model.items, id: \\ .self) { item in\n                Text(item)\n            }\n            Button(action: model.addItem) {\n                Text(\"Add Item\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(5)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":133,"column":1,"offset":3588},"end":{"line":160,"column":4,"offset":4252}}},"children":"class DataModel: ObservableObject {\n    @Published var items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    func addItem() {\n        items.append(\"Item \\(items.count + 1)\")\n    }\n}\n\nstruct DynamicListView: View {\n    @ObservedObject var model = DataModel()\n\n    var body: some View {\n        VStack {\n            List(model.items, id: \\ .self) { item in\n                Text(item)\n            }\n            Button(action: model.addItem) {\n                Text(\"Add Item\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(5)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ObservableObject","position":{"start":{"line":161,"column":9,"offset":4261},"end":{"line":161,"column":27,"offset":4279}}}],"position":{"start":{"line":161,"column":9,"offset":4261},"end":{"line":161,"column":27,"offset":4279}}},"children":"ObservableObject"}}]," 프로토콜을 준수하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DataModel","position":{"start":{"line":161,"column":39,"offset":4291},"end":{"line":161,"column":50,"offset":4302}}}],"position":{"start":{"line":161,"column":39,"offset":4291},"end":{"line":161,"column":50,"offset":4302}}},"children":"DataModel"}}]," 클래스를 만들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Published","position":{"start":{"line":161,"column":61,"offset":4313},"end":{"line":161,"column":73,"offset":4325}}}],"position":{"start":{"line":161,"column":61,"offset":4313},"end":{"line":161,"column":73,"offset":4325}}},"children":"@Published"}}]," 속성을 통해 데이터를 자동으로 업데이트합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DynamicListView","position":{"start":{"line":161,"column":100,"offset":4352},"end":{"line":161,"column":117,"offset":4369}}}],"position":{"start":{"line":161,"column":100,"offset":4352},"end":{"line":161,"column":117,"offset":4369}}},"children":"DynamicListView"}}]," 뷰는 이 데이터를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@ObservedObject","position":{"start":{"line":161,"column":128,"offset":4380},"end":{"line":161,"column":145,"offset":4397}}}],"position":{"start":{"line":161,"column":128,"offset":4380},"end":{"line":161,"column":145,"offset":4397}}},"children":"@ObservedObject"}}]," 속성을 사용하여 구독합니다. 버튼을 사용하여 리스트에 항목을 추가할 때마다 자동으로 UI가 업데이트됩니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI를 사용하면 복잡한 리스트와 컬렉션 뷰를 쉽게 구성할 수 있습니다. 다양한 데이터 유형과 구성을 지원하며, 데이터 바인딩을 통해 실시간 데이터 업데이트도 원활하게 처리할 수 있습니다. 이 글에서 소개한 예제들을 기반으로, 더 복잡하고 강력한 사용자 인터페이스를 개발할 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성","toc":[{"tagName":"h1","title":"SwiftUI 복잡한 리스트와 컬렉션 뷰 구성","id":"baa210ec"},{"tagName":"h2","title":"리스트(List)의 기본 구성","id":"acd78e19"},{"tagName":"h2","title":"커스텀 셀(Custom Cell) 만들기","id":"0e63c1ba"},{"tagName":"h2","title":"섹션(Section)으로 리스트 구분하기","id":"1eb76d44"},{"tagName":"h2","title":"컬렉션 뷰(Collection View) 구성","id":"88132847"},{"tagName":"h2","title":"동적 데이터와 데이터 바인딩","id":"9faca531"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
