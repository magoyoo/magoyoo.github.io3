1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B9%84%EB%B2%95-d885943c","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-스트림-이해하기-데이터-처리-최적화-비법-d885943c\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B9%84%EB%B2%95-d885943c","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-스트림-이해하기-데이터-처리-최적화-비법-d885943c\"}"},"styles":[]}],"segment":["slug","Nodejs-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B9%84%EB%B2%95-d885943c","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js의 스트림(Stream) 개념을 중심으로, 데이터 처리 방식에 대한 심층적인 이해를 도와줍니다. 스트림을 사용한 효율적인 데이터 처리 기법에 대해 2000자 이상 길이로 자세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,Stream,데이터 처리,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B9%84%EB%B2%95-d885943c"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js의 스트림(Stream) 개념을 중심으로, 데이터 처리 방식에 대한 심층적인 이해를 도와줍니다. 스트림을 사용한 효율적인 데이터 처리 기법에 대해 2000자 이상 길이로 자세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B9%84%EB%B2%95-d885943c"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js의 스트림(Stream) 개념을 중심으로, 데이터 처리 방식에 대한 심층적인 이해를 도와줍니다. 스트림을 사용한 효율적인 데이터 처리 기법에 대해 2000자 이상 길이로 자세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-27"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"701eebf9","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js는 비동기 I/O(입출력) 작업과 이벤트 기반 처리를 통해 뛰어난 성능을 자랑합니다. 이러한 성능의 핵심 요소 중 하나가 바로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"스트림(Stream)","position":{"start":{"line":4,"column":79,"offset":114},"end":{"line":4,"column":92,"offset":127}}}],"position":{"start":{"line":4,"column":79,"offset":114},"end":{"line":4,"column":92,"offset":127}}},"children":"스트림(Stream)"}}],"입니다. 스트림은 대용량 데이터를 처리하는 데 있어 매우 중요한 역할을 하며, 데이터가 전송되는 동안 부분적으로 데이터에 접근하고 처리할 수 있게 해줍니다. 이 글에서는 Node.js의 스트림 개념을 이해하고 이를 활용해 효율적인 데이터 처리를 구현하는 방법에 대해 설명합니다."]}],"\n",["$","h2",null,{"id":"dd88a883","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"스트림의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"스트림은 데이터의 흐름을 표현하는 추상화된 개념으로, 데이터 조각(chunk)을 순차적으로 처리할 수 있게 도와줍니다. 이를 통해 메모리 효율성을 높일 수 있으며, 입력과 출력 작업 동안 비동기적으로 데이터를 처리할 수 있습니다. Node.js에서 스트림의 종류는 크게 네 가지로 나뉩니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Readable Streams"}],": 읽기 전용 스트림으로, 데이터 소스로부터 데이터 조각을 읽어들입니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Writable Streams"}],": 쓰기 전용 스트림으로, 데이터를 특정 목적지로 쓰는 역할을 합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"Duplex Streams"}],": 양방향 스트림으로, 읽기와 쓰기를 모두 수행할 수 있습니다. 예로는 TCP 소켓이 있습니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"Transform Streams"}],": 데이터를 읽고 쓰는 동시에 데이터를 변환하는 스트림입니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"7075f97f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Readable Stream 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Readable Stream은 외부 데이터 소스로부터 데이터를 읽어들이는 기능을 합니다. 예를 들어, 파일 시스템에서 파일을 읽는 것을 생각해볼 수 있습니다. Node.js에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fs.createReadStream","position":{"start":{"line":17,"column":101,"offset":851},"end":{"line":17,"column":122,"offset":872}}}],"position":{"start":{"line":17,"column":101,"offset":851},"end":{"line":17,"column":122,"offset":872}}},"children":"fs.createReadStream"}}]," 메서드를 사용하여 파일 시스템의 파일을 읽는 Readable Stream을 생성할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const fs = require('fs');\nconst readableStream = fs.createReadStream('example.txt', {\n  encoding: 'utf8',\n  highWaterMark: 16 * 1024 // 16KB 청크 사이즈\n});\n\nreadableStream.on('data', (chunk) => {\n  console.log('New chunk received:', chunk);\n});\n\nreadableStream.on('end', () => {\n  console.log('No more data to read.');\n});\n\nreadableStream.on('error', (err) => {\n  console.error('An error occurred:', err.message);\n});\n"}],"position":{"start":{"line":19,"column":1,"offset":929},"end":{"line":37,"column":4,"offset":1360}}},"children":"const fs = require('fs');\nconst readableStream = fs.createReadStream('example.txt', {\n  encoding: 'utf8',\n  highWaterMark: 16 * 1024 // 16KB 청크 사이즈\n});\n\nreadableStream.on('data', (chunk) => {\n  console.log('New chunk received:', chunk);\n});\n\nreadableStream.on('end', () => {\n  console.log('No more data to read.');\n});\n\nreadableStream.on('error', (err) => {\n  console.error('An error occurred:', err.message);\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"example.txt","position":{"start":{"line":39,"column":9,"offset":1370},"end":{"line":39,"column":22,"offset":1383}}}],"position":{"start":{"line":39,"column":9,"offset":1370},"end":{"line":39,"column":22,"offset":1383}}},"children":"example.txt"}}]," 파일을 16KB씩 읽어들이는 데모를 보여줍니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"data","position":{"start":{"line":39,"column":50,"offset":1411},"end":{"line":39,"column":56,"offset":1417}}}],"position":{"start":{"line":39,"column":50,"offset":1411},"end":{"line":39,"column":56,"offset":1417}}},"children":"data"}}]," 이벤트 리스너는 새 데이터 덩어리를 받을 때마다 호출되며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"end","position":{"start":{"line":39,"column":90,"offset":1451},"end":{"line":39,"column":95,"offset":1456}}}],"position":{"start":{"line":39,"column":90,"offset":1451},"end":{"line":39,"column":95,"offset":1456}}},"children":"end"}}]," 이벤트는 모든 데이터를 다 읽었을 때 호출됩니다."]}],"\n",["$","h2",null,{"id":"28c36621","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Writable Stream 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Writable Stream은 데이터를 특정 대상에 기록하는 역할을 합니다. 파일에 데이터를 쓰는 예제를 살펴보겠습니다. 마찬가지로 Node.js의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fs","position":{"start":{"line":43,"column":84,"offset":1594},"end":{"line":43,"column":88,"offset":1598}}}],"position":{"start":{"line":43,"column":84,"offset":1594},"end":{"line":43,"column":88,"offset":1598}}},"children":"fs"}}]," 모듈을 이용합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const fs = require('fs');\nconst writableStream = fs.createWriteStream('output.txt');\n\nwritableStream.write('Hello, world!\n');\nwritableStream.write('Writing to a file using streams is efficient!\n');\n\nwritableStream.end('This is the end of the stream.\n');\n\nwritableStream.on('finish', () => {\n  console.log('All data written to file.');\n});\n\nwritableStream.on('error', (err) => {\n  console.error('An error occurred:', err.message);\n});\n"}],"position":{"start":{"line":45,"column":1,"offset":1611},"end":{"line":64,"column":4,"offset":2062}}},"children":"const fs = require('fs');\nconst writableStream = fs.createWriteStream('output.txt');\n\nwritableStream.write('Hello, world!\n');\nwritableStream.write('Writing to a file using streams is efficient!\n');\n\nwritableStream.end('This is the end of the stream.\n');\n\nwritableStream.on('finish', () => {\n  console.log('All data written to file.');\n});\n\nwritableStream.on('error', (err) => {\n  console.error('An error occurred:', err.message);\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"output.txt","position":{"start":{"line":66,"column":7,"offset":2070},"end":{"line":66,"column":19,"offset":2082}}}],"position":{"start":{"line":66,"column":7,"offset":2070},"end":{"line":66,"column":19,"offset":2082}}},"children":"output.txt"}}]," 파일에 데이터를 쓰는 데모입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"write","position":{"start":{"line":66,"column":39,"offset":2102},"end":{"line":66,"column":46,"offset":2109}}}],"position":{"start":{"line":66,"column":39,"offset":2102},"end":{"line":66,"column":46,"offset":2109}}},"children":"write"}}]," 메서드를 통해 데이터를 스트림으로 쓰며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"end","position":{"start":{"line":66,"column":70,"offset":2133},"end":{"line":66,"column":75,"offset":2138}}}],"position":{"start":{"line":66,"column":70,"offset":2133},"end":{"line":66,"column":75,"offset":2138}}},"children":"end"}}]," 메서드는 스트림이 더 이상 쓸 데이터가 없음을 나타냅니다."]}],"\n",["$","h2",null,{"id":"cb650770","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Duplex 및 Transform Streams 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Duplex 스트림은 읽기와 쓰기를 동시에 할 수 있는 스트림입니다. 예를 들어 TCP 소켓 서버의 예제를 들어 보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const net = require('net');\n\nconst server = net.createServer((socket) => {\n  console.log('Client connected');\n  socket.on('data', (data) => {\n    console.log('Received data:', data.toString());\n    socket.write('Echo: ' + data);\n  });\n\n  socket.on('end', () => {\n    console.log('Client disconnected');\n  });\n\n  socket.on('error', (err) => {\n    console.error('An error occurred:', err.message);\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n"}],"position":{"start":{"line":72,"column":1,"offset":2281},"end":{"line":94,"column":4,"offset":2785}}},"children":"const net = require('net');\n\nconst server = net.createServer((socket) => {\n  console.log('Client connected');\n  socket.on('data', (data) => {\n    console.log('Received data:', data.toString());\n    socket.write('Echo: ' + data);\n  });\n\n  socket.on('end', () => {\n    console.log('Client disconnected');\n  });\n\n  socket.on('error', (err) => {\n    console.error('An error occurred:', err.message);\n  });\n});\n\nserver.listen(8080, () => {\n  console.log('Server listening on port 8080');\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제에서는 클라이언트와 서버 간의 양방향 데이터 통신을 제공합니다. 클라이언트가 데이터를 보낼 때 서버는 해당 데이터를 받아서 처리하고, 다시 클라이언트로 돌려보내는(에코) 기능을 수행합니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Transform 스트림은 읽은 데이터를 변환하여 다시 쓰는 스트림입니다. 예를 들어, 데이터의 내용을 대문자로 변환하는 예제를 보겠습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const { Transform } = require('stream');\n\nclass UpperCaseTransform extends Transform {\n  _transform(chunk, encoding, callback) {\n    this.push(chunk.toString().toUpperCase());\n    callback();\n  }\n}\n\nconst uppercase = new UpperCaseTransform();\n\nprocess.stdin.pipe(uppercase).pipe(process.stdout);\n"}],"position":{"start":{"line":100,"column":1,"offset":2978},"end":{"line":113,"column":4,"offset":3291}}},"children":"const { Transform } = require('stream');\n\nclass UpperCaseTransform extends Transform {\n  _transform(chunk, encoding, callback) {\n    this.push(chunk.toString().toUpperCase());\n    callback();\n  }\n}\n\nconst uppercase = new UpperCaseTransform();\n\nprocess.stdin.pipe(uppercase).pipe(process.stdout);\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드는 stdin에서 입력된 데이터를 대문자로 변환하여 stdout으로 출력합니다. Transform 스트림은 데이터를 실시간으로 변형하여 처리할 수 있는 매우 강력한 도구입니다."}],"\n",["$","h2",null,{"id":"75366d95","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"스트림 사용의 장점"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"메모리 효율성"}],": 스트림을 사용하면 데이터를 작은 청크 단위로 처리할 수 있어 메모리 사용량이 적습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"비동기 처리"}],": I/O 작업을 비동기로 처리하여 높은 처리 성능을 제공합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"파이프라인 구성"}],": 스트림을 체인으로 연결하여 데이터 파이프라인을 구성할 수 있습니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"광범위한 활용성"}],": 파일, 네트워크, 소켓, 그리고 다른 I/O 소스에 대해 쉽게 사용할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js 스트림은 대용량 데이터를 효율적으로 처리할 수 있는 강력한 도구입니다. 기본적인 개념을 이해하고 다양한 스트림을 활용하면 메모리 효율적이고 성능 좋은 애플리케이션을 개발할 수 있습니다. 본문에서 제공한 예제들을 통해 직접 스트림의 기능을 실습해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법","toc":[{"tagName":"h1","title":"Node.js 스트림 이해하기: 데이터 처리 최적화 비법","id":"701eebf9"},{"tagName":"h2","title":"스트림의 기본 개념","id":"dd88a883"},{"tagName":"h2","title":"Readable Stream 사용하기","id":"7075f97f"},{"tagName":"h2","title":"Writable Stream 사용하기","id":"28c36621"},{"tagName":"h2","title":"Duplex 및 Transform Streams 사용하기","id":"cb650770"},{"tagName":"h2","title":"스트림 사용의 장점","id":"75366d95"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
