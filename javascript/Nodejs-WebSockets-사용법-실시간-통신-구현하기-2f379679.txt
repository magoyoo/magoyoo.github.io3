1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-WebSockets-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%8B%A4%EC%8B%9C%EA%B0%84-%ED%86%B5%EC%8B%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-2f379679","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-WebSockets-사용법-실시간-통신-구현하기-2f379679\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-WebSockets-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%8B%A4%EC%8B%9C%EA%B0%84-%ED%86%B5%EC%8B%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-2f379679","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-WebSockets-사용법-실시간-통신-구현하기-2f379679\"}"},"styles":[]}],"segment":["slug","Nodejs-WebSockets-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%8B%A4%EC%8B%9C%EA%B0%84-%ED%86%B5%EC%8B%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-2f379679","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js WebSockets 사용법: 실시간 통신 구현하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js와 WebSockets를 사용하여 실시간 통신을 구현하는 방법에 대해 설명합니다. WebSockets의 기본 개념과 Node.js 환경에서의 설정, 그리고 간단한 챗 애플리케이션을 예제로 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,WebSockets,실시간 통신,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-WebSockets-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%8B%A4%EC%8B%9C%EA%B0%84-%ED%86%B5%EC%8B%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-2f379679"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js WebSockets 사용법: 실시간 통신 구현하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js WebSockets 사용법: 실시간 통신 구현하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js와 WebSockets를 사용하여 실시간 통신을 구현하는 방법에 대해 설명합니다. WebSockets의 기본 개념과 Node.js 환경에서의 설정, 그리고 간단한 챗 애플리케이션을 예제로 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-WebSockets-%EC%82%AC%EC%9A%A9%EB%B2%95-%EC%8B%A4%EC%8B%9C%EA%B0%84-%ED%86%B5%EC%8B%A0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-2f379679"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js WebSockets 사용법: 실시간 통신 구현하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js와 WebSockets를 사용하여 실시간 통신을 구현하는 방법에 대해 설명합니다. WebSockets의 기본 개념과 Node.js 환경에서의 설정, 그리고 간단한 챗 애플리케이션을 예제로 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js WebSockets 사용법: 실시간 통신 구현하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js WebSockets 사용법: 실시간 통신 구현하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-20"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5b404789","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js WebSockets 사용법: 실시간 통신 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"웹 애플리케이션이 발전함에 따라 사용자에게 실시간으로 데이터를 제공하는 것이 중요해졌습니다. 그 중 하나의 방법이 바로 WebSockets를 이용한 통신입니다. 이 글에서는 Node.js를 사용하여 WebSockets를 설정하고, 간단한 실시간 챗 애플리케이션을 구현하는 방법에 대해 설명하겠습니다."}],"\n",["$","h2",null,{"id":"dc9d537d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"WebSocket이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"WebSocket은 웹 클라이언트와 서버 간의 양방향 통신을 가능하게 하는 프로토콜입니다. 이는 HTTP와는 달리, 클라이언트와 서버가 지속적인 연결을 유지하며 데이터를 주고받을 수 있도록 합니다. 이러한 특성 덕분에 채팅 애플리케이션, 실시간 알림 시스템, 주식 시세 업데이트 등 다양한 분야에서 활용됩니다."}],"\n",["$","h2",null,{"id":"1087d3b2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Node.js와 WebSockets 설정하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js에서 WebSockets를 사용하려면 기본적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ws","position":{"start":{"line":12,"column":35,"offset":464},"end":{"line":12,"column":39,"offset":468}}}],"position":{"start":{"line":12,"column":35,"offset":464},"end":{"line":12,"column":39,"offset":468}}},"children":"ws"}}]," 모듈을 사용합니다. 이 모듈은 WebSocket 기능을 구현하는 데 필요한 모든 기능을 제공합니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ws","position":{"start":{"line":12,"column":100,"offset":529},"end":{"line":12,"column":104,"offset":533}}}],"position":{"start":{"line":12,"column":100,"offset":529},"end":{"line":12,"column":104,"offset":533}}},"children":"ws"}}]," 모듈을 설치하고 기본 설정을 완료하는 단계입니다."]}],"\n",["$","h3",null,{"id":"66bb4671","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. 프로젝트 생성과 모듈 설치"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저 새로운 Node.js 프로젝트를 생성하고 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ws","position":{"start":{"line":16,"column":27,"offset":612},"end":{"line":16,"column":31,"offset":616}}}],"position":{"start":{"line":16,"column":27,"offset":612},"end":{"line":16,"column":31,"offset":616}}},"children":"ws"}}]," 모듈을 설치합니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"mkdir websocket-demo\ncd websocket-demo\nnpm init -y\nnpm install ws\n"}],"position":{"start":{"line":17,"column":1,"offset":628},"end":{"line":22,"column":4,"offset":705}}},"children":"mkdir websocket-demo\ncd websocket-demo\nnpm init -y\nnpm install ws\n"}}]}],"\n",["$","h3",null,{"id":"cfc3f270","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. 기본 WebSocket 서버 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 WebSocket 서버 파일을 생성하여 기본 설정을 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"server.js","position":{"start":{"line":26,"column":38,"offset":771},"end":{"line":26,"column":49,"offset":782}}}],"position":{"start":{"line":26,"column":38,"offset":771},"end":{"line":26,"column":49,"offset":782}}},"children":"server.js"}}]," 파일을 생성하고 다음과 같이 작성합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const WebSocket = require('ws');\n\nconst server = new WebSocket.Server({ port: 8080 });\n\nserver.on('connection', (ws) => {\n  console.log('A new client connected');\n\n  ws.on('message', (message) => {\n    console.log('Received: %s', message);\n\n    // Echo the message back to the client\n    ws.send(`You said: ${message}`);\n  });\n\n  ws.on('close', () => {\n    console.log('Client has disconnected');\n  });\n});\n\nconsole.log('WebSocket server is running on ws://localhost:8080');\n"}],"position":{"start":{"line":27,"column":1,"offset":806},"end":{"line":48,"column":4,"offset":1298}}},"children":"const WebSocket = require('ws');\n\nconst server = new WebSocket.Server({ port: 8080 });\n\nserver.on('connection', (ws) => {\n  console.log('A new client connected');\n\n  ws.on('message', (message) => {\n    console.log('Received: %s', message);\n\n    // Echo the message back to the client\n    ws.send(`You said: ${message}`);\n  });\n\n  ws.on('close', () => {\n    console.log('Client has disconnected');\n  });\n});\n\nconsole.log('WebSocket server is running on ws://localhost:8080');\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서는 포트 8080에서 WebSocket 서버를 시작합니다. 클라이언트가 연결되면 메시지를 받기 위한 이벤트 리스너를 설정하고, 받은 메시지를 콘솔에 출력한 후 다시 클라이언트로 에코합니다."}],"\n",["$","h2",null,{"id":"c07b70dd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"간단한 실시간 챗 애플리케이션 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이번 섹션에서는 Node.js와 WebSockets를 이용한 간단한 채팅 애플리케이션을 만들어 보겠습니다. 클라이언트는 HTML과 JavaScript로 구성되며, 서버는 앞서 작성한 WebSocket 서버를 사용합니다."}],"\n",["$","h3",null,{"id":"c0ae7b08","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. HTML 클라이언트 파일 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"index.html","position":{"start":{"line":57,"column":1,"offset":1586},"end":{"line":57,"column":13,"offset":1598}}}],"position":{"start":{"line":57,"column":1,"offset":1586},"end":{"line":57,"column":13,"offset":1598}}},"children":"index.html"}}]," 파일을 생성하고 다음과 같이 작성합니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-html","node":{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"text","value":"<!DOCTYPE html>\n<html lang=\n"}],"position":{"start":{"line":58,"column":1,"offset":1622},"end":{"line":61,"column":1,"offset":1658}}},"children":"<!DOCTYPE html>\n<html lang=\n"}}]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js WebSockets 사용법: 실시간 통신 구현하기","toc":[{"tagName":"h1","title":"Node.js WebSockets 사용법: 실시간 통신 구현하기","id":"5b404789"},{"tagName":"h2","title":"WebSocket이란?","id":"dc9d537d"},{"tagName":"h2","title":"Node.js와 WebSockets 설정하기","id":"1087d3b2"},{"tagName":"h3","title":"1. 프로젝트 생성과 모듈 설치","id":"66bb4671"},{"tagName":"h3","title":"2. 기본 WebSocket 서버 설정","id":"cfc3f270"},{"tagName":"h2","title":"간단한 실시간 챗 애플리케이션 만들기","id":"c07b70dd"},{"tagName":"h3","title":"1. HTML 클라이언트 파일 생성","id":"c0ae7b08"}],"language":"kr"}]}]]}]]
8:null
