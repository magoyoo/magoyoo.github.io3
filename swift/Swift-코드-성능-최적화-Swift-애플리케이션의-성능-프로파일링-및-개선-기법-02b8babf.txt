1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EC%BD%94%EB%93%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-Swift-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81-%EB%B0%8F-%EA%B0%9C%EC%84%A0-%EA%B8%B0%EB%B2%95-02b8babf","d"],{"children":["__PAGE__?{\"slug\":\"Swift-코드-성능-최적화-Swift-애플리케이션의-성능-프로파일링-및-개선-기법-02b8babf\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EC%BD%94%EB%93%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-Swift-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81-%EB%B0%8F-%EA%B0%9C%EC%84%A0-%EA%B8%B0%EB%B2%95-02b8babf","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-코드-성능-최적화-Swift-애플리케이션의-성능-프로파일링-및-개선-기법-02b8babf\"}"},"styles":[]}],"segment":["slug","Swift-%EC%BD%94%EB%93%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-Swift-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81-%EB%B0%8F-%EA%B0%9C%EC%84%A0-%EA%B8%B0%EB%B2%95-02b8babf","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift 애플리케이션의 성능을 최적화하기 위한 코드 프로파일링과 개선 기술에 대한 내용을 다룹니다. 성능 병목 현상을 식별하고 이를 해결하는 다양한 기법을 소개합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,성능 최적화,프로파일링,코딩 기법"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EC%BD%94%EB%93%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-Swift-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81-%EB%B0%8F-%EA%B0%9C%EC%84%A0-%EA%B8%B0%EB%B2%95-02b8babf"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift 애플리케이션의 성능을 최적화하기 위한 코드 프로파일링과 개선 기술에 대한 내용을 다룹니다. 성능 병목 현상을 식별하고 이를 해결하는 다양한 기법을 소개합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EC%BD%94%EB%93%9C-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-Swift-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EC%84%B1%EB%8A%A5-%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81-%EB%B0%8F-%EA%B0%9C%EC%84%A0-%EA%B8%B0%EB%B2%95-02b8babf"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift 애플리케이션의 성능을 최적화하기 위한 코드 프로파일링과 개선 기술에 대한 내용을 다룹니다. 성능 병목 현상을 식별하고 이를 해결하는 다양한 기법을 소개합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-18"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"45d28d6a","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 강력하고 직관적인 프로그래밍 언어로, iOS 및 macOS 애플리케이션 개발에 널리 사용됩니다. 그러나 아무리 뛰어난 언어라 할지라도 성능 최적화가 이루어지지 않으면 애플리케이션의 활용도가 떨어질 수 있습니다. 이번 글에서는 Swift 코드를 프로파일링하는 방법과 성능을 최적화하기 위한 다양한 기법들을 소개합니다."}],"\n",["$","h2",null,{"id":"776baf53","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 프로파일링의 중요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["성능 프로파일링은 애플리케이션에서 성능 병목 현상을 식별하고 코드 최적화의 방향을 설정하는 데 필수적인 과정입니다. Xcode는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Instruments","position":{"start":{"line":8,"column":73,"offset":327},"end":{"line":8,"column":86,"offset":340}}}],"position":{"start":{"line":8,"column":73,"offset":327},"end":{"line":8,"column":86,"offset":340}}},"children":"Instruments"}}],"라는 강력한 성능 프로파일링 도구를 제공합니다. 이를 통해 다음과 같은 작업을 수행할 수 있습니다:"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"CPU 사용률 분석"}],"\n",["$","li","li-1",{"children":"메모리 사용량 추적"}],"\n",["$","li","li-2",{"children":"I/O 성능 모니터링"}],"\n",["$","li","li-3",{"children":"네트워크 트래픽 분석"}],"\n"]}],"\n",["$","h2",null,{"id":"c9f4f4ca","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Instruments 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Instruments는 Xcode와 함께 설치되며, 여러 가지 측정 템플릿을 제공합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Time Profiler","position":{"start":{"line":17,"column":51,"offset":522},"end":{"line":17,"column":66,"offset":537}}}],"position":{"start":{"line":17,"column":51,"offset":522},"end":{"line":17,"column":66,"offset":537}}},"children":"Time Profiler"}}],"는 가장 많이 사용되는 템플릿 중 하나로, 이 도구를 통해 CPU 사용시간을 세부적으로 분석할 수 있습니다. 다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Time Profiler","position":{"start":{"line":17,"column":131,"offset":602},"end":{"line":17,"column":146,"offset":617}}}],"position":{"start":{"line":17,"column":131,"offset":602},"end":{"line":17,"column":146,"offset":617}}},"children":"Time Profiler"}}],"를 사용하는 단계입니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["$","strong",null,{"className":"font-black","children":"Xcode에서 프로젝트를 엽니다."}]}],"\n",["$","li","li-1",{"children":["$","strong",null,{"className":"font-black","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Product > Profile","position":{"start":{"line":20,"column":6,"offset":663},"end":{"line":20,"column":25,"offset":682}}}],"position":{"start":{"line":20,"column":6,"offset":663},"end":{"line":20,"column":25,"offset":682}}},"children":"Product > Profile"}}],"을 선택합니다."]}]}],"\n",["$","li","li-2",{"children":["$","strong",null,{"className":"font-black","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Time Profiler","position":{"start":{"line":21,"column":6,"offset":698},"end":{"line":21,"column":21,"offset":713}}}],"position":{"start":{"line":21,"column":6,"offset":698},"end":{"line":21,"column":21,"offset":713}}},"children":"Time Profiler"}}],"를 선택하고 시작합니다."]}]}],"\n",["$","li","li-3",{"children":["$","strong",null,{"className":"font-black","children":"필요한 작업을 실행하여 성능 데이터를 수집합니다."}]}],"\n",["$","li","li-4",{"children":["$","strong",null,{"className":"font-black","children":"수집된 데이터를 분석합니다."}]}],"\n"]}],"\n",["$","h3",null,{"id":"129a19bb","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"주요 성능 지표 해석하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Instruments","position":{"start":{"line":27,"column":1,"offset":807},"end":{"line":27,"column":14,"offset":820}}}],"position":{"start":{"line":27,"column":1,"offset":807},"end":{"line":27,"column":14,"offset":820}}},"children":"Instruments"}}],"를 통해 수집한 데이터를 분석할 때 몇 가지 주요 지표에 주목해야 합니다:"]}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"메서드 호출 시간"}],": 각 메서드가 호출되는 데 걸리는 시간을 분석하여 성능 병목이 발생한 지점을 식별합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"메모리 할당"}],": 메모리 사용량을 모니터링하여 불필요한 할당을 줄이고 메모리 누수를 해결합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"스레드 사용량"}],": 스레드의 개수와 그들이 차지하는 CPU 시간 비율을 확인합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"b6e19c06","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 최적화 기법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"성능 프로파일링을 통해 병목 현상을 파악한 후, 이를 해결하기 위한 다양한 최적화 기법을 고려할 수 있습니다."}],"\n",["$","h3",null,{"id":"2009fcff","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"효율적인 데이터 구조 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 배열, 세트, 딕셔너리 등 다양한 데이터 구조가 제공됩니다. 각 데이터 구조는 특정 상황에서 최적의 성능을 발휘합니다. 예를 들어, 검색 작업이 빈번하게 이루어지는 경우 딕셔너리가 배열보다 더 좋은 성능을 제공합니다."}],"\n",["$","h3",null,{"id":"47f23cf6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"메모리 관리 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["애플리케이션의 메모리 사용을 줄이기 위해선 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ARC(Automatic Reference Counting)","position":{"start":{"line":43,"column":25,"offset":1307},"end":{"line":43,"column":60,"offset":1342}}}],"position":{"start":{"line":43,"column":25,"offset":1307},"end":{"line":43,"column":60,"offset":1342}}},"children":"ARC(Automatic Reference Counting)"}}],"를 이해하고 활용하는 것이 중요합니다. 강한 참조와 약한 참조를 적절히 사용하여 메모리 누수를 방지할 수 있습니다. 또한, 불필요한 객체 생성과 복사를 최소화하는 것이 좋습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class MyClass {\n    weak var delegate: MyDelegate?\n}\n"}],"position":{"start":{"line":45,"column":1,"offset":1443},"end":{"line":49,"column":4,"offset":1508}}},"children":"class MyClass {\n    weak var delegate: MyDelegate?\n}\n"}}]}],"\n",["$","ul","ul-2",{"children":["\n",["$","li","li-0",{"children":["위 코드 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"weak","position":{"start":{"line":51,"column":14,"offset":1523},"end":{"line":51,"column":20,"offset":1529}}}],"position":{"start":{"line":51,"column":14,"offset":1523},"end":{"line":51,"column":20,"offset":1529}}},"children":"weak"}}]," 키워드를 사용하여 약한 참조를 설정합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"c9c90c4f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"비동기 코드 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["네트워크 요청이나 대규모 데이터 처리는 주로 비동기로 실행됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"GCD(Grand Central Dispatch)","position":{"start":{"line":55,"column":38,"offset":1608},"end":{"line":55,"column":67,"offset":1637}}}],"position":{"start":{"line":55,"column":38,"offset":1608},"end":{"line":55,"column":67,"offset":1637}}},"children":"GCD(Grand Central Dispatch)"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"OperationQueue","position":{"start":{"line":55,"column":69,"offset":1639},"end":{"line":55,"column":85,"offset":1655}}}],"position":{"start":{"line":55,"column":69,"offset":1639},"end":{"line":55,"column":85,"offset":1655}}},"children":"OperationQueue"}}],"를 활용하여 비동기 작업을 최적화할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"DispatchQueue.global().async {\n    // 시간 소모적인 작업\n    DispatchQueue.main.async {\n        // 메인 쓰레드에서 UI 업데이트\n    }\n}\n"}],"position":{"start":{"line":57,"column":1,"offset":1684},"end":{"line":64,"column":4,"offset":1812}}},"children":"DispatchQueue.global().async {\n    // 시간 소모적인 작업\n    DispatchQueue.main.async {\n        // 메인 쓰레드에서 UI 업데이트\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"d21ad924","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"알고리즘 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"복잡한 알고리즘은 애플리케이션의 성능을 크게 저하시킬 수 있습니다. 파이썬이나 다른 언어와 마찬가지로 Swift에서도 효율적인 알고리즘을 선택하는 것이 중요합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func quickSort(_ array: [Int]) -> [Int] {\n    if array.count <= 1 { return array }\n    let pivot = array[array.count/2]\n    let less = array.filter { $0 < pivot }\n    let equal = array.filter { $0 == pivot }\n    let greater = array.filter { $0 > pivot }\n    return quickSort(less) + equal + quickSort(greater)\n}\n"}],"position":{"start":{"line":70,"column":1,"offset":1921},"end":{"line":79,"column":4,"offset":2245}}},"children":"func quickSort(_ array: [Int]) -> [Int] {\n    if array.count <= 1 { return array }\n    let pivot = array[array.count/2]\n    let less = array.filter { $0 < pivot }\n    let equal = array.filter { $0 == pivot }\n    let greater = array.filter { $0 > pivot }\n    return quickSort(less) + equal + quickSort(greater)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"quickSort","position":{"start":{"line":81,"column":8,"offset":2254},"end":{"line":81,"column":19,"offset":2265}}}],"position":{"start":{"line":81,"column":8,"offset":2254},"end":{"line":81,"column":19,"offset":2265}}},"children":"quickSort"}}],"는 효율적인 정렬 알고리즘인 퀵소트를 구현합니다."]}],"\n",["$","h3",null,{"id":"87108896","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"캐싱의 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["반복적으로 접근하는 데이터는 메모리에 캐시하여 액세스 시간을 줄일 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSCache","position":{"start":{"line":85,"column":46,"offset":2351},"end":{"line":85,"column":55,"offset":2360}}}],"position":{"start":{"line":85,"column":46,"offset":2351},"end":{"line":85,"column":55,"offset":2360}}},"children":"NSCache"}}],"를 활용하여 캐싱을 구현할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let cache = NSCache<NSString, UIImage>()\ncache.setObject(image, forKey: \n"}],"position":{"start":{"line":87,"column":1,"offset":2384},"end":{"line":90,"column":1,"offset":2466}}},"children":"let cache = NSCache<NSString, UIImage>()\ncache.setObject(image, forKey: \n"}}]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법.","toc":[{"tagName":"h1","title":"Swift 코드 성능 최적화: Swift 애플리케이션의 성능 프로파일링 및 개선 기법","id":"45d28d6a"},{"tagName":"h2","title":"성능 프로파일링의 중요성","id":"776baf53"},{"tagName":"h2","title":"Instruments 사용법","id":"c9f4f4ca"},{"tagName":"h3","title":"주요 성능 지표 해석하기","id":"129a19bb"},{"tagName":"h2","title":"성능 최적화 기법","id":"b6e19c06"},{"tagName":"h3","title":"효율적인 데이터 구조 사용","id":"2009fcff"},{"tagName":"h3","title":"메모리 관리 최적화","id":"47f23cf6"},{"tagName":"h3","title":"비동기 코드 최적화","id":"c9c90c4f"},{"tagName":"h3","title":"알고리즘 최적화","id":"d21ad924"},{"tagName":"h3","title":"캐싱의 활용","id":"87108896"}],"language":"kr"}]}]]}]]
8:null
