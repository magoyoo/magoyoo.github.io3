1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%98%EA%B8%B0-131fdae0","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-클래스형-컴포넌트에서-함수형-컴포넌트로-마이그레이션-하기-131fdae0\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%98%EA%B8%B0-131fdae0","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-클래스형-컴포넌트에서-함수형-컴포넌트로-마이그레이션-하기-131fdae0\"}"},"styles":[]}],"segment":["slug","Reactjs-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%98%EA%B8%B0-131fdae0","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 React.js의 클래스형 컴포넌트를 함수형 컴포넌트로 마이그레이션하는 방법과 그 필요성에 대해 2000자 이상 상세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"React.js,클래스형 컴포넌트,함수형 컴포넌트,마이그레이션"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%98%EA%B8%B0-131fdae0"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 React.js의 클래스형 컴포넌트를 함수형 컴포넌트로 마이그레이션하는 방법과 그 필요성에 대해 2000자 이상 상세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%95%98%EA%B8%B0-131fdae0"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 React.js의 클래스형 컴포넌트를 함수형 컴포넌트로 마이그레이션하는 방법과 그 필요성에 대해 2000자 이상 상세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-10"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"4e141ec4","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React.js는 현대 웹 애플리케이션 개발을 위한 가장 인기 있는 라이브러리 중 하나입니다. React는 컴포넌트를 기반으로 하는 구조로, 이 컴포넌트는 크게 클래스형 컴포넌트와 함수형 컴포넌트로 나뉩니다. 최근에는 함수형 컴포넌트가 주목받고 있으며, 클래스형 컴포넌트에서 함수형 컴포넌트로의 마이그레이션이 권장되고 있습니다. 이번 글에서는 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션하는 방법과 그 이유에 대해 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"21b90745","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"클래스형 컴포넌트란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["클래스형 컴포넌트는 ES6 클래스 문법을 사용하여 정의됩니다. 이를 통해 컴포넌트 생명주기 메서드와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"state","position":{"start":{"line":8,"column":57,"offset":363},"end":{"line":8,"column":64,"offset":370}}}],"position":{"start":{"line":8,"column":57,"offset":363},"end":{"line":8,"column":64,"offset":370}}},"children":"state"}}],"를 관리할 수 있습니다. 예를 들어, 다음은 기본적인 클래스형 컴포넌트의 예입니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>{this.state.count}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n"}],"position":{"start":{"line":10,"column":1,"offset":418},"end":{"line":36,"column":4,"offset":870}}},"children":"import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>{this.state.count}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n"}}]}],"\n",["$","h2",null,{"id":"c37376a5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"함수형 컴포넌트란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["함수형 컴포넌트는 단순히 JavaScript 함수를 사용하여 정의되며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props","position":{"start":{"line":40,"column":41,"offset":927},"end":{"line":40,"column":48,"offset":934}}}],"position":{"start":{"line":40,"column":41,"offset":927},"end":{"line":40,"column":48,"offset":934}}},"children":"props"}}],"를 인자로 받습니다. 이전에는 상태 관리와 생명주기 메서드를 사용할 수 없어 주로 간단한 컴포넌트에 사용되었지만, React 16.8에서 Hooks가 도입되면서 이제는 상태 관리와 생명주기 메서드도 사용할 수 있게 되었습니다. 즉, 클래스형 컴포넌트가 제공하는 대부분의 기능을 함수형 컴포넌트에서도 사용할 수 있게 된 것입니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 위의 클래스형 컴포넌트를 함수형 컴포넌트로 변환한 예입니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>{count}</n>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n"}],"position":{"start":{"line":44,"column":1,"offset":1158},"end":{"line":63,"column":4,"offset":1489}}},"children":"import React, { useState } from 'react';\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>{count}</n>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n"}}]}],"\n",["$","h2",null,{"id":"d291aa43","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 이유"}],"\n",["$","h3",null,{"id":"7f26aff4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"단순성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"함수형 컴포넌트는 단순한 구조로, 작성하고 이해하기 쉽습니다. 이는 유지보수를 용이하게 하며 코드를 더 간결하게 만듭니다."}],"\n",["$","h3",null,{"id":"0dd1dd3d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"함수형 컴포넌트는 클래스형 컴포넌트보다 메모리 효율성이 높습니다. 이는 렌더링 성능을 향상시키며, 사용자가 느끼는 애플리케이션의 응답 속도를 개선합니다."}],"\n",["$","h3",null,{"id":"4dc4e8e6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"테스트 용이성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"함수형 컴포넌트는 순수 함수의 특성을 가지기 때문에 유닛 테스트 작성이 더 용이합니다. 이를 통해 코드의 신뢰성과 품질을 높일 수 있습니다."}],"\n",["$","h3",null,{"id":"89f54efc","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Hooks의 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Hooks는 함수형 컴포넌트에서 상태와 생명주기 기능을 사용할 수 있게 해줍니다. Hooks를 사용하면 더 적은 코드로 복잡한 상태 관리를 쉽게 할 수 있으며, 상태를 컴포넌트 바깥으로 추상화하여 코드 재사용성을 높일 수 있습니다."}],"\n",["$","h2",null,{"id":"ea8c4190","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"마이그레이션 단계"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클래스형 컴포넌트를 함수형 컴포넌트로 변환하는 과정은 몇 가지 단계로 나눌 수 있습니다:"}],"\n",["$","h3",null,{"id":"87686807","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"상태 관리 변경"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["클래스형 컴포넌트의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"state","position":{"start":{"line":89,"column":12,"offset":2033},"end":{"line":89,"column":19,"offset":2040}}}],"position":{"start":{"line":89,"column":12,"offset":2033},"end":{"line":89,"column":19,"offset":2040}}},"children":"state"}}],"를 사용할 때는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":89,"column":28,"offset":2049},"end":{"line":89,"column":38,"offset":2059}}}],"position":{"start":{"line":89,"column":28,"offset":2049},"end":{"line":89,"column":38,"offset":2059}}},"children":"useState"}}]," Hook을 사용할 수 있습니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this.state.count","position":{"start":{"line":89,"column":64,"offset":2085},"end":{"line":89,"column":82,"offset":2103}}}],"position":{"start":{"line":89,"column":64,"offset":2085},"end":{"line":89,"column":82,"offset":2103}}},"children":"this.state.count"}}],"를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":89,"column":84,"offset":2105},"end":{"line":89,"column":94,"offset":2115}}}],"position":{"start":{"line":89,"column":84,"offset":2105},"end":{"line":89,"column":94,"offset":2115}}},"children":"useState"}}],"로 변환하는 방법은 다음과 같습니다:"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const [count, setCount] = useState(this.state.count || 0);\n"}],"position":{"start":{"line":91,"column":1,"offset":2137},"end":{"line":93,"column":4,"offset":2213}}},"children":"const [count, setCount] = useState(this.state.count || 0);\n"}}]}],"\n",["$","h3",null,{"id":"7fe54775","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"생명주기 메서드 변경"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클래스형 컴포넌트의 생명주기 메서드는 여러 가지 Hook으로 대체될 수 있습니다. 다음은 주요 생명주기 메서드와 그에 해당하는 Hook입니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentDidMount","position":{"start":{"line":99,"column":3,"offset":2315},"end":{"line":99,"column":22,"offset":2334}}}],"position":{"start":{"line":99,"column":3,"offset":2315},"end":{"line":99,"column":22,"offset":2334}}},"children":"componentDidMount"}}]," -> ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect(() => {}, [])","position":{"start":{"line":99,"column":26,"offset":2338},"end":{"line":99,"column":51,"offset":2363}}}],"position":{"start":{"line":99,"column":26,"offset":2338},"end":{"line":99,"column":51,"offset":2363}}},"children":"useEffect(() => {}, [])"}}]]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentDidUpdate","position":{"start":{"line":100,"column":3,"offset":2366},"end":{"line":100,"column":23,"offset":2386}}}],"position":{"start":{"line":100,"column":3,"offset":2366},"end":{"line":100,"column":23,"offset":2386}}},"children":"componentDidUpdate"}}]," -> ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect(() => {}, [dependencies])","position":{"start":{"line":100,"column":27,"offset":2390},"end":{"line":100,"column":64,"offset":2427}}}],"position":{"start":{"line":100,"column":27,"offset":2390},"end":{"line":100,"column":64,"offset":2427}}},"children":"useEffect(() => {}, [dependencies])"}}]]}],"\n",["$","li","li-2",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"componentWillUnmount","position":{"start":{"line":101,"column":3,"offset":2430},"end":{"line":101,"column":25,"offset":2452}}}],"position":{"start":{"line":101,"column":3,"offset":2430},"end":{"line":101,"column":25,"offset":2452}}},"children":"componentWillUnmount"}}]," -> ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useEffect(() => { return () => {} }, [])","position":{"start":{"line":101,"column":29,"offset":2456},"end":{"line":101,"column":71,"offset":2498}}}],"position":{"start":{"line":101,"column":29,"offset":2456},"end":{"line":101,"column":71,"offset":2498}}},"children":"useEffect(() => { return () => {} }, [])"}}]]}],"\n"]}],"\n",["$","h3",null,{"id":"5ee1a322","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기타 특수한 기능"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["클래스형 컴포넌트에서 제공하는 기타 기능도 Hook을 통해 구현할 수 있습니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useRef","position":{"start":{"line":105,"column":53,"offset":2567},"end":{"line":105,"column":61,"offset":2575}}}],"position":{"start":{"line":105,"column":53,"offset":2567},"end":{"line":105,"column":61,"offset":2575}}},"children":"useRef"}}]," Hook을 사용하면 참조를 관리할 수 있으며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useContext","position":{"start":{"line":105,"column":88,"offset":2602},"end":{"line":105,"column":100,"offset":2614}}}],"position":{"start":{"line":105,"column":88,"offset":2602},"end":{"line":105,"column":100,"offset":2614}}},"children":"useContext"}}]," Hook을 사용하면 컨텍스트를 사용할 수 있습니다."]}],"\n",["$","h2",null,{"id":"9350c22b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"마이그레이션 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 전체 마이그레이션 과정을 예시로 보여드립니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"기존 클래스형 컴포넌트를 가져옵니다:"}],"\n"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    console.log('Mounted');\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>{this.state.count}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n"}],"position":{"start":{"line":113,"column":1,"offset":2715},"end":{"line":143,"column":4,"offset":3224}}},"children":"import React, { Component } from 'react';\n\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    console.log('Mounted');\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  render() {\n    return (\n      <div>\n        <p>{this.state.count}</p>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n\nexport default MyComponent;\n"}}]}],"\n",["$","ol","ol-1",{"start":2,"children":["\n",["$","li","li-0",{"children":"기본 구조를 함수형 컴포넌트로 변경합니다:"}],"\n"]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useEffect, useState } from 'react';\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Mounted');\n  }, []);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n"}],"position":{"start":{"line":147,"column":1,"offset":3254},"end":{"line":170,"column":4,"offset":3655}}},"children":"import React, { useEffect, useState } from 'react';\n\nconst MyComponent = () => {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('Mounted');\n  }, []);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={increment}>Increment</button>\n    </div>\n  );\n};\n\nexport default MyComponent;\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"클래스형 컴포넌트에서 함수형 컴포넌트로의 마이그레이션은 초기에는 다소 손이 많이 가는 작업일 수 있지만, 장기적으로는 유지보수와 성능 측면에서 많은 이점을 제공합니다. 함수형 컴포넌트와 Hook을 활용하여 React 프로젝트를 더욱 효율적이고 효과적으로 관리해보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기","toc":[{"tagName":"h1","title":"React.js 클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 하기","id":"4e141ec4"},{"tagName":"h2","title":"클래스형 컴포넌트란?","id":"21b90745"},{"tagName":"h2","title":"함수형 컴포넌트란?","id":"c37376a5"},{"tagName":"h2","title":"클래스형 컴포넌트에서 함수형 컴포넌트로 마이그레이션 이유","id":"d291aa43"},{"tagName":"h3","title":"단순성","id":"7f26aff4"},{"tagName":"h3","title":"성능 향상","id":"0dd1dd3d"},{"tagName":"h3","title":"테스트 용이성","id":"4dc4e8e6"},{"tagName":"h3","title":"Hooks의 활용","id":"89f54efc"},{"tagName":"h2","title":"마이그레이션 단계","id":"ea8c4190"},{"tagName":"h3","title":"상태 관리 변경","id":"87686807"},{"tagName":"h3","title":"생명주기 메서드 변경","id":"7fe54775"},{"tagName":"h3","title":"기타 특수한 기능","id":"5ee1a322"},{"tagName":"h2","title":"마이그레이션 예제","id":"9350c22b"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
