1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-0fc596c4","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-성능-최적화-방법-빠르고-효율적인-앱-만들기-0fc596c4\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-0fc596c4","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-성능-최적화-방법-빠르고-효율적인-앱-만들기-0fc596c4\"}"},"styles":[]}],"segment":["slug","Reactjs-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-0fc596c4","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 React.js를 사용한 애플리케이션의 성능을 최적화하는 다양한 방법을 소개합니다. React의 최적화 기법은 사용자 경험을 향상시키고, 앱의 반응 속도를 개선하며, 개발 과정에서의 효율성을 높이는 데 중요한 역할을 합니다."}],["$","meta","3",{"name":"keywords","content":"React.js,성능 최적화,프론트엔드 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-0fc596c4"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 React.js를 사용한 애플리케이션의 성능을 최적화하는 다양한 방법을 소개합니다. React의 최적화 기법은 사용자 경험을 향상시키고, 앱의 반응 속도를 개선하며, 개발 과정에서의 효율성을 높이는 데 중요한 역할을 합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-0fc596c4"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 React.js를 사용한 애플리케이션의 성능을 최적화하는 다양한 방법을 소개합니다. React의 최적화 기법은 사용자 경험을 향상시키고, 앱의 반응 속도를 개선하며, 개발 과정에서의 효율성을 높이는 데 중요한 역할을 합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-20"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"ae21c53d","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React.js는 훌륭한 사용자 인터페이스를 만들기 위한 인기 있는 JavaScript 라이브러리입니다. 그러나 복잡한 애플리케이션에서는 성능 문제로 인해 사용자 경험이 저하될 수 있습니다. 이번 글에서는 다양한 최적화 기법을 알아보고, React 앱을 빠르고 효율적으로 만드는 방법을 설명하겠습니다."}],"\n",["$","h2",null,{"id":"1cb75519","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. 컴포넌트 재랜더링 최소화하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"의도치 않은 컴포넌트 재랜더링은 성능 문제의 주요 원인 중 하나입니다. 이를 방지하기 위해 다음과 같은 방법을 사용할 수 있습니다."}],"\n",["$","h3",null,{"id":"08c86d6a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"shouldComponentUpdate 메서드 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Class 컴포넌트를 사용한다면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"shouldComponentUpdate","position":{"start":{"line":12,"column":19,"offset":359},"end":{"line":12,"column":42,"offset":382}}}],"position":{"start":{"line":12,"column":19,"offset":359},"end":{"line":12,"column":42,"offset":382}}},"children":"shouldComponentUpdate"}}]," 메서드를 오버라이드하여 컴포넌트가 필요할 때만 재랜더링되도록 할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"class MyComponent extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.data !== this.props.data;\n  }\n  render() {\n    return <div>{this.props.data}</div>;\n  }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":428},"end":{"line":23,"column":4,"offset":648}}},"children":"class MyComponent extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.data !== this.props.data;\n  }\n  render() {\n    return <div>{this.props.data}</div>;\n  }\n}\n"}}]}],"\n",["$","h3",null,{"id":"030e4490","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"React.memo 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["함수형 컴포넌트에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.memo","position":{"start":{"line":27,"column":13,"offset":681},"end":{"line":27,"column":25,"offset":693}}}],"position":{"start":{"line":27,"column":13,"offset":681},"end":{"line":27,"column":25,"offset":693}}},"children":"React.memo"}}],"를 사용할 수 있습니다. 이 함수는 props가 변경되지 않으면 컴포넌트를 재랜더링하지 않습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const MyComponent = React.memo((props) => {\n  return <div>{props.data}</div>;\n}, (prevProps, nextProps) => {\n  return prevProps.data === nextProps.data;\n});\n"}],"position":{"start":{"line":29,"column":1,"offset":749},"end":{"line":35,"column":4,"offset":923}}},"children":"const MyComponent = React.memo((props) => {\n  return <div>{props.data}</div>;\n}, (prevProps, nextProps) => {\n  return prevProps.data === nextProps.data;\n});\n"}}]}],"\n",["$","h2",null,{"id":"79faf251","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. useMemo와 useCallback 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":39,"column":1,"offset":958},"end":{"line":39,"column":10,"offset":967}}}],"position":{"start":{"line":39,"column":1,"offset":958},"end":{"line":39,"column":10,"offset":967}}},"children":"useMemo"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":39,"column":12,"offset":969},"end":{"line":39,"column":25,"offset":982}}}],"position":{"start":{"line":39,"column":12,"offset":969},"end":{"line":39,"column":25,"offset":982}}},"children":"useCallback"}}],"은 컴포넌트를 최적화하는 두 가지 훅입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useMemo","position":{"start":{"line":39,"column":50,"offset":1007},"end":{"line":39,"column":59,"offset":1016}}}],"position":{"start":{"line":39,"column":50,"offset":1007},"end":{"line":39,"column":59,"offset":1016}}},"children":"useMemo"}}],"는 메모이제이션된 값을 반환하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useCallback","position":{"start":{"line":39,"column":78,"offset":1035},"end":{"line":39,"column":91,"offset":1048}}}],"position":{"start":{"line":39,"column":78,"offset":1035},"end":{"line":39,"column":91,"offset":1048}}},"children":"useCallback"}}],"은 메모이제이션된 함수를 반환합니다."]}],"\n",["$","h3",null,{"id":"645a5706","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"useMemo 사용 예제"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const MyComponent = ({ data }) => {\n  const computedValue = React.useMemo(() => {\n    return complexCalculation(data);\n  }, [data]);\n  return <div>{computedValue}</div>;\n};\n"}],"position":{"start":{"line":43,"column":1,"offset":1089},"end":{"line":50,"column":4,"offset":1279}}},"children":"const MyComponent = ({ data }) => {\n  const computedValue = React.useMemo(() => {\n    return complexCalculation(data);\n  }, [data]);\n  return <div>{computedValue}</div>;\n};\n"}}]}],"\n",["$","h3",null,{"id":"ed5a408b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"useCallback 사용 예제"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const MyComponent = ({ handleClick }) => {\n  const memoizedHandler = React.useCallback(() => {\n    handleClick();\n  }, [handleClick]);\n  return <button onClick={memoizedHandler}>Click me</button>;\n};\n"}],"position":{"start":{"line":54,"column":1,"offset":1304},"end":{"line":61,"column":4,"offset":1521}}},"children":"const MyComponent = ({ handleClick }) => {\n  const memoizedHandler = React.useCallback(() => {\n    handleClick();\n  }, [handleClick]);\n  return <button onClick={memoizedHandler}>Click me</button>;\n};\n"}}]}],"\n",["$","h2",null,{"id":"965b50d6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. 코드 분할 및 동적 import"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["코드 분할은 애플리케이션의 초기 로드를 최적화하는 중요한 방법입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.lazy","position":{"start":{"line":65,"column":40,"offset":1587},"end":{"line":65,"column":52,"offset":1599}}}],"position":{"start":{"line":65,"column":40,"offset":1587},"end":{"line":65,"column":52,"offset":1599}}},"children":"React.lazy"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Suspense","position":{"start":{"line":65,"column":54,"offset":1601},"end":{"line":65,"column":64,"offset":1611}}}],"position":{"start":{"line":65,"column":54,"offset":1601},"end":{"line":65,"column":64,"offset":1611}}},"children":"Suspense"}}],"를 사용하여 필요한 시점에 컴포넌트를 로드할 수 있습니다."]}],"\n",["$","h3",null,{"id":"b8dfb546","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"React.lazy와 Suspense 사용 예"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nconst MyComponent = () => (\n  <React.Suspense fallback={<div>Loading...</div>}>\n    <OtherComponent />\n  </React.Suspense>\n);\n"}],"position":{"start":{"line":69,"column":1,"offset":1676},"end":{"line":77,"column":4,"offset":1889}}},"children":"const OtherComponent = React.lazy(() => import('./OtherComponent'));\n\nconst MyComponent = () => (\n  <React.Suspense fallback={<div>Loading...</div>}>\n    <OtherComponent />\n  </React.Suspense>\n);\n"}}]}],"\n",["$","h2",null,{"id":"87a4873a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. React DevTools를 사용한 성능 프로파일링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React DevTools는 컴포넌트 계층 구조를 검사하고, 컴포넌트가 왜 재랜더링되는지 분석하는 데 유용합니다. 이를 통해 문제를 식별하고, 재랜더링 문제를 해결할 수 있습니다."}],"\n",["$","h3",null,{"id":"37602d02","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"React DevTools 설치 및 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React DevTools는 브라우저 확장 프로그램으로 제공됩니다. 브라우저에서 React DevTools를 설치한 후, 애플리케이션을 실행하면 DevTools에서 성능 분석을 시작할 수 있습니다."}],"\n",["$","h2",null,{"id":"0dfbefb5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. Virtualization을 통한 성능 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["긴 리스트를 렌더링할 때는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"react-window","position":{"start":{"line":89,"column":16,"offset":2216},"end":{"line":89,"column":30,"offset":2230}}}],"position":{"start":{"line":89,"column":16,"offset":2216},"end":{"line":89,"column":30,"offset":2230}}},"children":"react-window"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"react-virtualized","position":{"start":{"line":89,"column":32,"offset":2232},"end":{"line":89,"column":51,"offset":2251}}}],"position":{"start":{"line":89,"column":32,"offset":2232},"end":{"line":89,"column":51,"offset":2251}}},"children":"react-virtualized"}}]," 같은 라이브러리를 사용하여 리스트 항목을 가상화하면 성능을 크게 향상시킬 수 있습니다."]}],"\n",["$","h3",null,{"id":"ee9d736b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"react-window 사용 예"}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import { FixedSizeList as List } from 'react-window';\n\nconst MyList = ({ items }) => (\n  <List\n    height={150}\n    itemCount={items.length}\n    itemSize={35}\n    width={300}\n  >\n    {({ index, style }) => <div style={style}>{items[index]}</div>}\n  </List>\n);\n"}],"position":{"start":{"line":93,"column":1,"offset":2325},"end":{"line":106,"column":4,"offset":2602}}},"children":"import { FixedSizeList as List } from 'react-window';\n\nconst MyList = ({ items }) => (\n  <List\n    height={150}\n    itemCount={items.length}\n    itemSize={35}\n    width={300}\n  >\n    {({ index, style }) => <div style={style}>{items[index]}</div>}\n  </List>\n);\n"}}]}],"\n",["$","h2",null,{"id":"9586d2de","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"6. 불필요한 렌더링 방지"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["열려 있는 컴포넌트만 렌더링하고 보이지 않는 컴포넌트는 렌더링하지 않는 것이 중요합니다. 이를 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Intersection Observer API","position":{"start":{"line":110,"column":57,"offset":2679},"end":{"line":110,"column":84,"offset":2706}}}],"position":{"start":{"line":110,"column":57,"offset":2679},"end":{"line":110,"column":84,"offset":2706}}},"children":"Intersection Observer API"}}],"를 활용할 수 있습니다."]}],"\n",["$","h3",null,{"id":"f5c28302","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Intersection Observer를 활용한 예제"}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useEffect, useRef, useState } from 'react';\n\nconst LazyComponent = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          observer.disconnect();\n        }\n      });\n    });\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <div ref={ref}>\n      {isVisible ? <HeavyComponent /> : null}\n    </div>\n  );\n};\n"}],"position":{"start":{"line":114,"column":1,"offset":2756},"end":{"line":140,"column":4,"offset":3367}}},"children":"import React, { useEffect, useRef, useState } from 'react';\n\nconst LazyComponent = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const ref = useRef();\n\n  useEffect(() => {\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setIsVisible(true);\n          observer.disconnect();\n        }\n      });\n    });\n    observer.observe(ref.current);\n    return () => observer.disconnect();\n  }, []);\n\n  return (\n    <div ref={ref}>\n      {isVisible ? <HeavyComponent /> : null}\n    </div>\n  );\n};\n"}}]}],"\n",["$","h2",null,{"id":"7a8cd4f6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"7. CSS 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"CSS 파일의 크기는 웹사이트의 렌더링 성능에 큰 영향을 미칠 수 있습니다. CSS 파일 크기를 줄이는 것은 성능 최적화의 기본 중 하나입니다. 인터페이스에서 필요 없는 CSS는 제거하고, CSS 파일을 압축하여 로드 시간을 줄일 수 있습니다."}],"\n",["$","h3",null,{"id":"d5209b92","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"CSS 최적화 방법"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"불필요한 CSS 제거:"}]," 사용하지 않는 CSS를 제거하여 파일 크기를 줄입니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"CSS 압축:"}]," 미니파이(minify)된 CSS 파일을 사용하여 파일 크기를 더 줄일 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"성능 측정:"}]," Lighthouse와 같은 도구를 사용하여 CSS 관련 성능 문제를 분석하고 최적화할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React.js 애플리케이션의 성능을 최적화하는 것은 사용자 경험을 향상시키는 핵심적 요소입니다. 컴포넌트 재랜더링 최소화, 코드 분할, 가상화, React DevTools를 사용한 성능 프로파일링, CSS 최적화 등의 기술을 활용하여 애플리케이션이 빠르고 효율적으로 동작하도록 만들 수 있습니다. 이를 통해 사용자에게 보다 나은 경험을 제공하고, 개발자의 작업 효율성을 높일 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기","toc":[{"tagName":"h1","title":"React.js 성능 최적화 방법: 빠르고 효율적인 앱 만들기","id":"ae21c53d"},{"tagName":"h2","title":"1. 컴포넌트 재랜더링 최소화하기","id":"1cb75519"},{"tagName":"h3","title":"shouldComponentUpdate 메서드 활용","id":"08c86d6a"},{"tagName":"h3","title":"React.memo 사용","id":"030e4490"},{"tagName":"h2","title":"2. useMemo와 useCallback 사용하기","id":"79faf251"},{"tagName":"h3","title":"useMemo 사용 예제","id":"645a5706"},{"tagName":"h3","title":"useCallback 사용 예제","id":"ed5a408b"},{"tagName":"h2","title":"3. 코드 분할 및 동적 import","id":"965b50d6"},{"tagName":"h3","title":"React.lazy와 Suspense 사용 예","id":"b8dfb546"},{"tagName":"h2","title":"4. React DevTools를 사용한 성능 프로파일링","id":"87a4873a"},{"tagName":"h3","title":"React DevTools 설치 및 사용","id":"37602d02"},{"tagName":"h2","title":"5. Virtualization을 통한 성능 향상","id":"0dfbefb5"},{"tagName":"h3","title":"react-window 사용 예","id":"ee9d736b"},{"tagName":"h2","title":"6. 불필요한 렌더링 방지","id":"9586d2de"},{"tagName":"h3","title":"Intersection Observer를 활용한 예제","id":"f5c28302"},{"tagName":"h2","title":"7. CSS 최적화","id":"7a8cd4f6"},{"tagName":"h3","title":"CSS 최적화 방법","id":"d5209b92"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
