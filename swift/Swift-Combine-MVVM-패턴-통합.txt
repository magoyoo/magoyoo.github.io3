1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-Combine-MVVM-%ED%8C%A8%ED%84%B4-%ED%86%B5%ED%95%A9","d"],{"children":["__PAGE__?{\"slug\":\"Swift-Combine-MVVM-패턴-통합\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-Combine-MVVM-%ED%8C%A8%ED%84%B4-%ED%86%B5%ED%95%A9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-Combine-MVVM-패턴-통합\"}"},"styles":[]}],"segment":["slug","Swift-Combine-MVVM-%ED%8C%A8%ED%84%B4-%ED%86%B5%ED%95%A9","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift Combine과 MVVM 패턴의 통합 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift Combine과 MVVM 패턴을 통합하여 비동기 데이터를 효율적으로 관리하고, 데이터 바인딩을 간편하게 구현하는 방법을 설명합니다."}],["$","meta","3",{"name":"keywords","content":"swift,combine"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-Combine-MVVM-%ED%8C%A8%ED%84%B4-%ED%86%B5%ED%95%A9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift Combine과 MVVM 패턴의 통합 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift Combine과 MVVM 패턴의 통합 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift Combine과 MVVM 패턴을 통합하여 비동기 데이터를 효율적으로 관리하고, 데이터 바인딩을 간편하게 구현하는 방법을 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-Combine-MVVM-%ED%8C%A8%ED%84%B4-%ED%86%B5%ED%95%A9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swift-combine.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift Combine과 MVVM 패턴의 통합 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift Combine과 MVVM 패턴을 통합하여 비동기 데이터를 효율적으로 관리하고, 데이터 바인딩을 간편하게 구현하는 방법을 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swift-combine.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swift-combine.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift Combine과 MVVM 패턴의 통합"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift Combine과 MVVM 패턴의 통합"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-28"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"b7d8d683","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift Combine과 MVVM 패턴의 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift Combine은 애플의 리액티브 프로그래밍 프레임워크로, 비동기 이벤트 처리와 데이터 스트림 관리에 탁월한 성능을 발휘합니다. MVVM(Model-View-ViewModel) 패턴은 애플리케이션의 구조를 효율적으로 설계하는 데 유용한 아키텍처 패턴입니다. 이 글에서는 Swift Combine과 MVVM 패턴을 통합하여 애플리케이션을 개발하는 방법을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"626ea121","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"MVVM 패턴이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"MVVM 패턴은 애플리케이션의 코드베이스를 분리하여 유지보수성과 테스트 용이성을 높이는 데 도움을 주는 디자인 패턴입니다. MVVM 패턴은 다음 세 가지 주요 구성 요소로 이루어져 있습니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Model"}],": 애플리케이션의 데이터와 비즈니스 로직을 담당합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"View"}],": 사용자 인터페이스(UI)를 담당합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"ViewModel"}],": Model과 View 사이의 중개자로서, 데이터를 변환하여 View에 제공하고, 사용자의 입력을 Model로 전달합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"MVVM 패턴을 사용하면 코드의 재사용성을 높이고, 각 구성 요소를 독립적으로 테스트할 수 있습니다."}],"\n",["$","h2",null,{"id":"b7d8d683","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift Combine과 MVVM 패턴의 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift Combine은 MVVM 패턴과 잘 어울리는 프레임워크입니다. Combine을 사용하면 ViewModel에서 비동기 데이터를 손쉽게 관리하고, View와의 데이터 바인딩을 간편하게 구현할 수 있습니다."}],"\n",["$","h3",null,{"id":"95c479ff","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제 애플리케이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"간단한 예제 애플리케이션을 통해 Swift Combine과 MVVM 패턴의 통합을 살펴보겠습니다. 이 예제에서는 사용자가 입력한 텍스트를 실시간으로 반영하여 표시하는 기능을 구현합니다."}],"\n",["$","h3",null,{"id":"68c2cc7f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Model"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Model은 애플리케이션의 데이터와 비즈니스 로직을 담당합니다. 이 예제에서는 단순히 사용자의 입력을 저장하는 역할을 합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nstruct UserInput {\n    var text: String\n}\n"}],"position":{"start":{"line":28,"column":1,"offset":941},"end":{"line":34,"column":4,"offset":1014}}},"children":"import Foundation\n\nstruct UserInput {\n    var text: String\n}\n"}}]}],"\n",["$","h3",null,{"id":"c45be100","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"ViewModel"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ViewModel은 Model과 View 사이의 중개자로서, Combine을 사용하여 데이터를 관리하고 변환합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\nimport Foundation\n\nclass UserInputViewModel: ObservableObject {\n    @Published var userInput: UserInput = UserInput(text: \"\")\n    @Published var displayText: String = \"\"\n\n    private var cancellables = Set<AnyCancellable>()\n\n    init() {\n        $userInput\n            .map { $0.text }\n            .assign(to: \\.displayText, on: self)\n            .store(in: &cancellables)\n    }\n\n    func updateUserInput(text: String) {\n        userInput.text = text\n    }\n}\n"}],"position":{"start":{"line":40,"column":1,"offset":1097},"end":{"line":61,"column":4,"offset":1583}}},"children":"import Combine\nimport Foundation\n\nclass UserInputViewModel: ObservableObject {\n    @Published var userInput: UserInput = UserInput(text: \"\")\n    @Published var displayText: String = \"\"\n\n    private var cancellables = Set<AnyCancellable>()\n\n    init() {\n        $userInput\n            .map { $0.text }\n            .assign(to: \\.displayText, on: self)\n            .store(in: &cancellables)\n    }\n\n    func updateUserInput(text: String) {\n        userInput.text = text\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 ViewModel은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Published","position":{"start":{"line":63,"column":14,"offset":1598},"end":{"line":63,"column":26,"offset":1610}}}],"position":{"start":{"line":63,"column":14,"offset":1598},"end":{"line":63,"column":26,"offset":1610}}},"children":"@Published"}}]," 속성을 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"userInput","position":{"start":{"line":63,"column":36,"offset":1620},"end":{"line":63,"column":47,"offset":1631}}}],"position":{"start":{"line":63,"column":36,"offset":1620},"end":{"line":63,"column":47,"offset":1631}}},"children":"userInput"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"displayText","position":{"start":{"line":63,"column":49,"offset":1633},"end":{"line":63,"column":62,"offset":1646}}}],"position":{"start":{"line":63,"column":49,"offset":1633},"end":{"line":63,"column":62,"offset":1646}}},"children":"displayText"}}],"를 선언하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"userInput","position":{"start":{"line":63,"column":70,"offset":1654},"end":{"line":63,"column":81,"offset":1665}}}],"position":{"start":{"line":63,"column":70,"offset":1654},"end":{"line":63,"column":81,"offset":1665}}},"children":"userInput"}}],"의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"text","position":{"start":{"line":63,"column":83,"offset":1667},"end":{"line":63,"column":89,"offset":1673}}}],"position":{"start":{"line":63,"column":83,"offset":1667},"end":{"line":63,"column":89,"offset":1673}}},"children":"text"}}]," 값이 변경될 때마다 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"displayText","position":{"start":{"line":63,"column":101,"offset":1685},"end":{"line":63,"column":114,"offset":1698}}}],"position":{"start":{"line":63,"column":101,"offset":1685},"end":{"line":63,"column":114,"offset":1698}}},"children":"displayText"}}],"를 업데이트합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@Published","position":{"start":{"line":63,"column":125,"offset":1709},"end":{"line":63,"column":137,"offset":1721}}}],"position":{"start":{"line":63,"column":125,"offset":1709},"end":{"line":63,"column":137,"offset":1721}}},"children":"@Published"}}],"는 Combine에서 제공하는 속성 래퍼로, 값의 변경을 구독자에게 자동으로 알립니다."]}],"\n",["$","h3",null,{"id":"69bd4ef9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"View"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"View는 사용자 인터페이스를 담당하며, SwiftUI를 사용하여 구현합니다. View는 ViewModel을 구독하여 데이터가 변경될 때마다 UI를 업데이트합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct UserInputView: View {\n    @ObservedObject var viewModel: UserInputViewModel\n\n    var body: some View {\n        VStack {\n            TextField(\"Enter text\", text: Binding(\n                get: { self.viewModel.userInput.text },\n                set: { self.viewModel.updateUserInput(text: $0) }\n            ))\n            .textFieldStyle(RoundedBorderTextFieldStyle())\n            .padding()\n\n            Text(viewModel.displayText)\n                .padding()\n        }\n    }\n}\n"}],"position":{"start":{"line":69,"column":1,"offset":1874},"end":{"line":89,"column":4,"offset":2385}}},"children":"import SwiftUI\n\nstruct UserInputView: View {\n    @ObservedObject var viewModel: UserInputViewModel\n\n    var body: some View {\n        VStack {\n            TextField(\"Enter text\", text: Binding(\n                get: { self.viewModel.userInput.text },\n                set: { self.viewModel.updateUserInput(text: $0) }\n            ))\n            .textFieldStyle(RoundedBorderTextFieldStyle())\n            .padding()\n\n            Text(viewModel.displayText)\n                .padding()\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 View는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@ObservedObject","position":{"start":{"line":91,"column":9,"offset":2395},"end":{"line":91,"column":26,"offset":2412}}}],"position":{"start":{"line":91,"column":9,"offset":2395},"end":{"line":91,"column":26,"offset":2412}}},"children":"@ObservedObject"}}]," 속성을 사용하여 ViewModel을 구독하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TextField","position":{"start":{"line":91,"column":53,"offset":2439},"end":{"line":91,"column":64,"offset":2450}}}],"position":{"start":{"line":91,"column":53,"offset":2439},"end":{"line":91,"column":64,"offset":2450}}},"children":"TextField"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Text","position":{"start":{"line":91,"column":66,"offset":2452},"end":{"line":91,"column":72,"offset":2458}}}],"position":{"start":{"line":91,"column":66,"offset":2452},"end":{"line":91,"column":72,"offset":2458}}},"children":"Text"}}],"를 사용하여 사용자의 입력과 반영된 텍스트를 표시합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TextField","position":{"start":{"line":91,"column":104,"offset":2490},"end":{"line":91,"column":115,"offset":2501}}}],"position":{"start":{"line":91,"column":104,"offset":2490},"end":{"line":91,"column":115,"offset":2501}}},"children":"TextField"}}],"는 Binding을 사용하여 ViewModel의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"userInput.text","position":{"start":{"line":91,"column":142,"offset":2528},"end":{"line":91,"column":158,"offset":2544}}}],"position":{"start":{"line":91,"column":142,"offset":2528},"end":{"line":91,"column":158,"offset":2544}}},"children":"userInput.text"}}],"와 바인딩합니다."]}],"\n",["$","h3",null,{"id":"eb577b91","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"애플리케이션의 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"마지막으로, ViewModel과 View를 통합하여 애플리케이션을 완성합니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\n@main\nstruct CombineMVVMApp: App {\n    var body: some Scene {\n        WindowGroup {\n            UserInputView(viewModel: UserInputViewModel())\n        }\n    }\n}\n"}],"position":{"start":{"line":97,"column":1,"offset":2616},"end":{"line":108,"column":4,"offset":2805}}},"children":"import SwiftUI\n\n@main\nstruct CombineMVVMApp: App {\n    var body: some Scene {\n        WindowGroup {\n            UserInputView(viewModel: UserInputViewModel())\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CombineMVVMApp","position":{"start":{"line":110,"column":9,"offset":2815},"end":{"line":110,"column":25,"offset":2831}}}],"position":{"start":{"line":110,"column":9,"offset":2815},"end":{"line":110,"column":25,"offset":2831}}},"children":"CombineMVVMApp"}}],"의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"body","position":{"start":{"line":110,"column":27,"offset":2833},"end":{"line":110,"column":33,"offset":2839}}}],"position":{"start":{"line":110,"column":27,"offset":2833},"end":{"line":110,"column":33,"offset":2839}}},"children":"body"}}]," 속성에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserInputView","position":{"start":{"line":110,"column":39,"offset":2845},"end":{"line":110,"column":54,"offset":2860}}}],"position":{"start":{"line":110,"column":39,"offset":2845},"end":{"line":110,"column":54,"offset":2860}}},"children":"UserInputView"}}],"를 생성하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UserInputViewModel","position":{"start":{"line":110,"column":62,"offset":2868},"end":{"line":110,"column":82,"offset":2888}}}],"position":{"start":{"line":110,"column":62,"offset":2868},"end":{"line":110,"column":82,"offset":2888}}},"children":"UserInputViewModel"}}],"을 전달하여 애플리케이션을 시작합니다."]}],"\n",["$","h3",null,{"id":"260b2584","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 바인딩"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Combine과 MVVM 패턴을 사용하면 데이터 바인딩을 손쉽게 구현할 수 있습니다. ViewModel에서 데이터의 변경을 처리하고, View는 이를 자동으로 반영합니다. 예를 들어, 사용자가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TextField","position":{"start":{"line":114,"column":109,"offset":3032},"end":{"line":114,"column":120,"offset":3043}}}],"position":{"start":{"line":114,"column":109,"offset":3032},"end":{"line":114,"column":120,"offset":3043}}},"children":"TextField"}}],"에 텍스트를 입력하면, ViewModel의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"userInput.text","position":{"start":{"line":114,"column":144,"offset":3067},"end":{"line":114,"column":160,"offset":3083}}}],"position":{"start":{"line":114,"column":144,"offset":3067},"end":{"line":114,"column":160,"offset":3083}}},"children":"userInput.text"}}],"가 업데이트되고, 이는 다시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"displayText","position":{"start":{"line":114,"column":176,"offset":3099},"end":{"line":114,"column":189,"offset":3112}}}],"position":{"start":{"line":114,"column":176,"offset":3099},"end":{"line":114,"column":189,"offset":3112}}},"children":"displayText"}}],"에 반영되어 View가 자동으로 업데이트됩니다."]}],"\n",["$","h3",null,{"id":"558b8fc2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"비동기 작업 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Combine을 사용하면 비동기 작업을 간단하게 처리할 수 있습니다. 예를 들어, 네트워크 요청을 통해 데이터를 가져오는 작업을 ViewModel에서 처리할 수 있습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\nimport Foundation\n\nclass UserInputViewModel: ObservableObject {\n    @Published var userInput: UserInput = UserInput(text: \"\")\n    @Published var displayText: String = \"\"\n\n    private var cancellables = Set<AnyCancellable>()\n\n    init() {\n        $userInput\n            .map { $0.text }\n            .assign(to: \\.displayText, on: self)\n            .store(in: &cancellables)\n    }\n\n    func updateUserInput(text: String) {\n        userInput.text = text\n    }\n\n    func fetchRemoteData() {\n        let url = URL(string: \"https://api.example.com/data\")!\n        URLSession.shared.dataTaskPublisher(for: url)\n            .map { $0.data }\n            .decode(type: UserInput.self, decoder: JSONDecoder())\n            .replaceError(with: UserInput(text: \"Error fetching data\"))\n            .receive(on: DispatchQueue.main)\n            .assign(to: \\.userInput, on: self)\n            .store(in: &cancellables)\n    }\n}\n"}],"position":{"start":{"line":120,"column":1,"offset":3252},"end":{"line":152,"column":4,"offset":4188}}},"children":"import Combine\nimport Foundation\n\nclass UserInputViewModel: ObservableObject {\n    @Published var userInput: UserInput = UserInput(text: \"\")\n    @Published var displayText: String = \"\"\n\n    private var cancellables = Set<AnyCancellable>()\n\n    init() {\n        $userInput\n            .map { $0.text }\n            .assign(to: \\.displayText, on: self)\n            .store(in: &cancellables)\n    }\n\n    func updateUserInput(text: String) {\n        userInput.text = text\n    }\n\n    func fetchRemoteData() {\n        let url = URL(string: \"https://api.example.com/data\")!\n        URLSession.shared.dataTaskPublisher(for: url)\n            .map { $0.data }\n            .decode(type: UserInput.self, decoder: JSONDecoder())\n            .replaceError(with: UserInput(text: \"Error fetching data\"))\n            .receive(on: DispatchQueue.main)\n            .assign(to: \\.userInput, on: self)\n            .store(in: &cancellables)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchRemoteData","position":{"start":{"line":154,"column":9,"offset":4198},"end":{"line":154,"column":26,"offset":4215}}}],"position":{"start":{"line":154,"column":9,"offset":4198},"end":{"line":154,"column":26,"offset":4215}}},"children":"fetchRemoteData"}}]," 메서드를 사용하여 원격 데이터를 가져오고, 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"userInput","position":{"start":{"line":154,"column":54,"offset":4243},"end":{"line":154,"column":65,"offset":4254}}}],"position":{"start":{"line":154,"column":54,"offset":4243},"end":{"line":154,"column":65,"offset":4254}}},"children":"userInput"}}],"에 반영합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"receive(on:)","position":{"start":{"line":154,"column":74,"offset":4263},"end":{"line":154,"column":88,"offset":4277}}}],"position":{"start":{"line":154,"column":74,"offset":4263},"end":{"line":154,"column":88,"offset":4277}}},"children":"receive(on:)"}}]," 연산자를 사용하여 메인 스레드에서 데이터를 수신하고, UI를 안전하게 업데이트합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift Combine과 MVVM 패턴을 통합하면 비동기 데이터를 효율적으로 관리하고, View와의 데이터 바인딩을 간편하게 구현할 수 있습니다. Combine의 강력한 기능을 활용하여 비동기 작업을 손쉽게 처리하고, MVVM 패턴을 통해 코드의 재사용성과 유지보수성을 높일 수 있습니다. 이 글에서 소개한 예제와 원칙을 따라, 더욱 효율적이고 직관적인 애플리케이션을 개발해 보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift Combine과 MVVM 패턴의 통합","toc":[{"tagName":"h2","title":"Swift Combine과 MVVM 패턴의 통합","id":"b7d8d683"},{"tagName":"h2","title":"MVVM 패턴이란?","id":"626ea121"},{"tagName":"h2","title":"Swift Combine과 MVVM 패턴의 통합","id":"b7d8d683"},{"tagName":"h3","title":"예제 애플리케이션","id":"95c479ff"},{"tagName":"h3","title":"Model","id":"68c2cc7f"},{"tagName":"h3","title":"ViewModel","id":"c45be100"},{"tagName":"h3","title":"View","id":"69bd4ef9"},{"tagName":"h3","title":"애플리케이션의 통합","id":"eb577b91"},{"tagName":"h3","title":"데이터 바인딩","id":"260b2584"},{"tagName":"h3","title":"비동기 작업 처리","id":"558b8fc2"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
