1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState-%ED%9B%85-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%88%EC%A0%9C-0dd15295","d"],{"children":["__PAGE__?{\"slug\":\"함수형-컴포넌트에서의-상태-관리-useState-훅-사용법과-예제-0dd15295\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState-%ED%9B%85-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%88%EC%A0%9C-0dd15295","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"함수형-컴포넌트에서의-상태-관리-useState-훅-사용법과-예제-0dd15295\"}"},"styles":[]}],"segment":["slug","%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState-%ED%9B%85-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%88%EC%A0%9C-0dd15295","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 React의 함수형 컴포넌트에서 상태를 관리하기 위한 useState 훅의 사용법과 예제에 대해 설명합니다. 함수형 컴포넌트를 활용한 React 개발에 있어서 중요한 상태 관리를 쉽게 이해하고 활용할 수 있도록 도와줍니다."}],["$","meta","3",{"name":"keywords","content":"React,useState,상태 관리,함수형 컴포넌트"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState-%ED%9B%85-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%88%EC%A0%9C-0dd15295"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 React의 함수형 컴포넌트에서 상태를 관리하기 위한 useState 훅의 사용법과 예제에 대해 설명합니다. 함수형 컴포넌트를 활용한 React 개발에 있어서 중요한 상태 관리를 쉽게 이해하고 활용할 수 있도록 도와줍니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState-%ED%9B%85-%EC%82%AC%EC%9A%A9%EB%B2%95%EA%B3%BC-%EC%98%88%EC%A0%9C-0dd15295"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 React의 함수형 컴포넌트에서 상태를 관리하기 위한 useState 훅의 사용법과 예제에 대해 설명합니다. 함수형 컴포넌트를 활용한 React 개발에 있어서 중요한 상태 관리를 쉽게 이해하고 활용할 수 있도록 도와줍니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-24"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"58c0e0f0","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["함수형 컴포넌트는 리액트의 주요 컴포넌트 유형 중 하나로, 훨씬 간단하고 가독성이 좋습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":4,"column":53,"offset":94},"end":{"line":4,"column":63,"offset":104}}}],"position":{"start":{"line":4,"column":53,"offset":94},"end":{"line":4,"column":63,"offset":104}}},"children":"useState"}}]," 훅은 함수형 컴포넌트에서 상태를 관리하기 위해 사용되는 기본 도구입니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":4,"column":112,"offset":153},"end":{"line":4,"column":122,"offset":163}}}],"position":{"start":{"line":4,"column":112,"offset":153},"end":{"line":4,"column":122,"offset":163}}},"children":"useState"}}]," 훅의 사용법과 예제를 통해 상태 관리의 기초를 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"28150ec7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useState의 기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":8,"column":1,"offset":221},"end":{"line":8,"column":11,"offset":231}}}],"position":{"start":{"line":8,"column":1,"offset":221},"end":{"line":8,"column":11,"offset":231}}},"children":"useState"}}]," 훅은 함수형 컴포넌트 내에서 상태 변수와 그 상태를 갱신할 수 있는 함수를 제공합니다. 일반적으로 다음과 같이 사용됩니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>현재 카운트 값: {count}</p>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":302},"end":{"line":23,"column":4,"offset":556}}},"children":"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>현재 카운트 값: {count}</p>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState(0)","position":{"start":{"line":25,"column":8,"offset":565},"end":{"line":25,"column":21,"offset":578}}}],"position":{"start":{"line":25,"column":8,"offset":565},"end":{"line":25,"column":21,"offset":578}}},"children":"useState(0)"}}],"은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count","position":{"start":{"line":25,"column":23,"offset":580},"end":{"line":25,"column":30,"offset":587}}}],"position":{"start":{"line":25,"column":23,"offset":580},"end":{"line":25,"column":30,"offset":587}}},"children":"count"}}],"라는 상태 변수와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setCount","position":{"start":{"line":25,"column":40,"offset":597},"end":{"line":25,"column":50,"offset":607}}}],"position":{"start":{"line":25,"column":40,"offset":597},"end":{"line":25,"column":50,"offset":607}}},"children":"setCount"}}],"라는 상태 갱신 함수를 반환합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count","position":{"start":{"line":25,"column":70,"offset":627},"end":{"line":25,"column":77,"offset":634}}}],"position":{"start":{"line":25,"column":70,"offset":627},"end":{"line":25,"column":77,"offset":634}}},"children":"count"}}]," 변수는 현재 상태 값을 담고 있고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setCount","position":{"start":{"line":25,"column":98,"offset":655},"end":{"line":25,"column":108,"offset":665}}}],"position":{"start":{"line":25,"column":98,"offset":655},"end":{"line":25,"column":108,"offset":665}}},"children":"setCount"}}]," 함수는 그 상태를 갱신하는 데 사용됩니다. 초기 상태 값은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0","position":{"start":{"line":25,"column":142,"offset":699},"end":{"line":25,"column":145,"offset":702}}}],"position":{"start":{"line":25,"column":142,"offset":699},"end":{"line":25,"column":145,"offset":702}}},"children":"0"}}],"으로 설정되었습니다."]}],"\n",["$","h2",null,{"id":"92e55104","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"여러 상태 관리하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["함수형 컴포넌트에서는 여러 개의 상태 변수를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":29,"column":26,"offset":755},"end":{"line":29,"column":36,"offset":765}}}],"position":{"start":{"line":29,"column":26,"offset":755},"end":{"line":29,"column":36,"offset":765}}},"children":"useState"}}]," 훅을 사용하여 개별적으로 관리할 수 있습니다. 예를 들어, 사용자 정보와 관련된 상태를 관리하려면 다음과 같이 할 수 있습니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction UserProfile() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"이름을 입력하세요\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"나이를 입력하세요\"\n        value={age}\n        onChange={(e) => setAge(Number(e.target.value))}\n      />\n      <p>이름: {name}</p>\n      <p>나이: {age}</p>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":31,"column":1,"offset":839},"end":{"line":57,"column":4,"offset":1385}}},"children":"import React, { useState } from 'react';\n\nfunction UserProfile() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState(0);\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"이름을 입력하세요\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"나이를 입력하세요\"\n        value={age}\n        onChange={(e) => setAge(Number(e.target.value))}\n      />\n      <p>이름: {name}</p>\n      <p>나이: {age}</p>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name","position":{"start":{"line":59,"column":9,"offset":1395},"end":{"line":59,"column":15,"offset":1401}}}],"position":{"start":{"line":59,"column":9,"offset":1395},"end":{"line":59,"column":15,"offset":1401}}},"children":"name"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age","position":{"start":{"line":59,"column":17,"offset":1403},"end":{"line":59,"column":22,"offset":1408}}}],"position":{"start":{"line":59,"column":17,"offset":1403},"end":{"line":59,"column":22,"offset":1408}}},"children":"age"}}],"라는 두 개의 상태 변수를 각각 관리하고 있습니다. 이는 컴포넌트에서 여러 상태를 독립적으로 관리하기에 유용합니다."]}],"\n",["$","h2",null,{"id":"ee5f1a4a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"객체 상태 관리하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"하나의 객체 내에 여러 상태를 포함시키고 싶을 때도 있습니다. 이 경우 상태 갱신 시 기존 상태를 전파하는 것을 잊지 말아야 합니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction UserProfile() {\n  const [user, setUser] = useState({ name: '', age: 0 });\n\n  const handleNameChange = (e) => {\n    setUser({ ...user, name: e.target.value });\n  };\n\n  const handleAgeChange = (e) => {\n    setUser({ ...user, age: Number(e.target.value) });\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"이름을 입력하세요\"\n        value={user.name}\n        onChange={handleNameChange}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"나이를 입력하세요\"\n        value={user.age}\n        onChange={handleAgeChange}\n      />\n      <p>이름: {user.name}</p>\n      <p>나이: {user.age}</p>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":65,"column":1,"offset":1565},"end":{"line":98,"column":4,"offset":2262}}},"children":"import React, { useState } from 'react';\n\nfunction UserProfile() {\n  const [user, setUser] = useState({ name: '', age: 0 });\n\n  const handleNameChange = (e) => {\n    setUser({ ...user, name: e.target.value });\n  };\n\n  const handleAgeChange = (e) => {\n    setUser({ ...user, age: Number(e.target.value) });\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"이름을 입력하세요\"\n        value={user.name}\n        onChange={handleNameChange}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"나이를 입력하세요\"\n        value={user.age}\n        onChange={handleAgeChange}\n      />\n      <p>이름: {user.name}</p>\n      <p>나이: {user.age}</p>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setUser","position":{"start":{"line":100,"column":5,"offset":2268},"end":{"line":100,"column":14,"offset":2277}}}],"position":{"start":{"line":100,"column":5,"offset":2268},"end":{"line":100,"column":14,"offset":2277}}},"children":"setUser"}}]," 함수는 상태 객체 전체를 업데이트하므로, 기존 상태를 전개 연산자(spread operator)를 사용해 유지한 후 갱신될 상태만 업데이트합니다."]}],"\n",["$","h2",null,{"id":"110e58f6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태 초기화 하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":104,"column":1,"offset":2375},"end":{"line":104,"column":11,"offset":2385}}}],"position":{"start":{"line":104,"column":1,"offset":2375},"end":{"line":104,"column":11,"offset":2385}}},"children":"useState"}}]," 훅의 인자로 전달되는 초기 값은 기본값으로 설정됩니다. 하지만 초기 값이 복잡한 계산을 필요로 하는 경우, 초기 상태 설정 함수를 사용할 수 있습니다:"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"function calculateInitialCount() {\n  return someComplexCalculation();\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(calculateInitialCount);\n\n  return (\n    <div>\n      <p>현재 카운트 값: {count}</p>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":106,"column":1,"offset":2472},"end":{"line":121,"column":4,"offset":2777}}},"children":"function calculateInitialCount() {\n  return someComplexCalculation();\n}\n\nfunction Counter() {\n  const [count, setCount] = useState(calculateInitialCount);\n\n  return (\n    <div>\n      <p>현재 카운트 값: {count}</p>\n      <button onClick={() => setCount(count + 1)}>증가</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 방식으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":123,"column":8,"offset":2786},"end":{"line":123,"column":18,"offset":2796}}}],"position":{"start":{"line":123,"column":8,"offset":2786},"end":{"line":123,"column":18,"offset":2796}}},"children":"useState"}}],"는 컴포넌트가 처음 렌더링 될 때에만 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"calculateInitialCount","position":{"start":{"line":123,"column":39,"offset":2817},"end":{"line":123,"column":62,"offset":2840}}}],"position":{"start":{"line":123,"column":39,"offset":2817},"end":{"line":123,"column":62,"offset":2840}}},"children":"calculateInitialCount"}}]," 함수를 호출합니다."]}],"\n",["$","h2",null,{"id":"8363bc07","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상태에 의존적인 값 계산하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"종종 상태 값에 기반하여 다른 값을 계산해야 하는 상황이 있을 수 있습니다. 이때 상태가 갱신될 때마다 계산되는 값을 관리하려면 상태 갱신 함수를 인자로 사용할 수 있습니다:"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return (\n    <div>\n      <p>현재 카운트 값: {count}</p>\n      <button onClick={increment}>증가</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":129,"column":1,"offset":2972},"end":{"line":146,"column":4,"offset":3286}}},"children":"import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return (\n    <div>\n      <p>현재 카운트 값: {count}</p>\n      <button onClick={increment}>증가</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setCount","position":{"start":{"line":148,"column":9,"offset":3296},"end":{"line":148,"column":19,"offset":3306}}}],"position":{"start":{"line":148,"column":9,"offset":3296},"end":{"line":148,"column":19,"offset":3306}}},"children":"setCount"}}]," 함수에 이전 상태 값인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prevCount","position":{"start":{"line":148,"column":33,"offset":3320},"end":{"line":148,"column":44,"offset":3331}}}],"position":{"start":{"line":148,"column":33,"offset":3320},"end":{"line":148,"column":44,"offset":3331}}},"children":"prevCount"}}],"를 함수 형태로 전달하여 상태 갱신을 수행합니다. 이는 상태 갱신이 비동기적일 때 발생할 수 있는 경쟁 조건을 방지합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 글에서는 함수형 컴포넌트에서 상태 관리를 위한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":152,"column":29,"offset":3436},"end":{"line":152,"column":39,"offset":3446}}}],"position":{"start":{"line":152,"column":29,"offset":3436},"end":{"line":152,"column":39,"offset":3446}}},"children":"useState"}}]," 훅을 소개하고, 다양한 예제를 통해 그 사용법을 설명했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":152,"column":75,"offset":3482},"end":{"line":152,"column":85,"offset":3492}}}],"position":{"start":{"line":152,"column":75,"offset":3482},"end":{"line":152,"column":85,"offset":3492}}},"children":"useState"}}]," 훅은 매우 강력하며, 적절히 사용하면 컴포넌트의 복잡성을 줄이고 코드를 더욱 가독성 있게 만들 수 있습니다. 다양한 사례를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":152,"column":158,"offset":3565},"end":{"line":152,"column":168,"offset":3575}}}],"position":{"start":{"line":152,"column":158,"offset":3565},"end":{"line":152,"column":168,"offset":3575}}},"children":"useState"}}]," 훅을 잘 이해하고 적용할 수 있기를 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제.","toc":[{"tagName":"h1","title":"함수형 컴포넌트에서의 상태 관리: useState 훅 사용법과 예제","id":"58c0e0f0"},{"tagName":"h2","title":"useState의 기본 사용법","id":"28150ec7"},{"tagName":"h2","title":"여러 상태 관리하기","id":"92e55104"},{"tagName":"h2","title":"객체 상태 관리하기","id":"ee5f1a4a"},{"tagName":"h2","title":"상태 초기화 하기","id":"110e58f6"},{"tagName":"h2","title":"상태에 의존적인 값 계산하기","id":"8363bc07"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
