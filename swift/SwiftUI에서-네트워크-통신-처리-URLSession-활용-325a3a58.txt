1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI%EC%97%90%EC%84%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%86%B5%EC%8B%A0-%EC%B2%98%EB%A6%AC-URLSession-%ED%99%9C%EC%9A%A9-325a3a58","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI에서-네트워크-통신-처리-URLSession-활용-325a3a58\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI%EC%97%90%EC%84%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%86%B5%EC%8B%A0-%EC%B2%98%EB%A6%AC-URLSession-%ED%99%9C%EC%9A%A9-325a3a58","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI에서-네트워크-통신-처리-URLSession-활용-325a3a58\"}"},"styles":[]}],"segment":["slug","SwiftUI%EC%97%90%EC%84%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%86%B5%EC%8B%A0-%EC%B2%98%EB%A6%AC-URLSession-%ED%99%9C%EC%9A%A9-325a3a58","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI에서 네트워크 통신 처리: URLSession 활용 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI에서 네트워크 통신을 처리하는 방법을 다룹니다. 특히 URLSession을 사용하여 데이터를 로드하고 SwiftUI 뷰에 반영하는 방법을 단계별로 설명합니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,URLSession,네트워크 통신,iOS 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%86%B5%EC%8B%A0-%EC%B2%98%EB%A6%AC-URLSession-%ED%99%9C%EC%9A%A9-325a3a58"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI에서 네트워크 통신 처리: URLSession 활용 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI에서 네트워크 통신 처리: URLSession 활용 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI에서 네트워크 통신을 처리하는 방법을 다룹니다. 특히 URLSession을 사용하여 데이터를 로드하고 SwiftUI 뷰에 반영하는 방법을 단계별로 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%ED%86%B5%EC%8B%A0-%EC%B2%98%EB%A6%AC-URLSession-%ED%99%9C%EC%9A%A9-325a3a58"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI에서 네트워크 통신 처리: URLSession 활용 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI에서 네트워크 통신을 처리하는 방법을 다룹니다. 특히 URLSession을 사용하여 데이터를 로드하고 SwiftUI 뷰에 반영하는 방법을 단계별로 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T412,class NetworkManager: ObservableObject {
    @Published var apiResponse: [APIResponse] = []
    @Published var errorMessage: String? = nil
    private var cancellables = Set<AnyCancellable>()

    func fetchData() {
        guard let url = URL(string: "https://jsonplaceholder.typicode.com/posts") else { 
            self.errorMessage = "Invalid URL"
            return 
        }

        URLSession.shared.dataTaskPublisher(for: url)
            .map { $0.data }
            .decode(type: [APIResponse].self, decoder: JSONDecoder())
            .receive(on: DispatchQueue.main)
            .sink(receiveCompletion: { completion in
                switch completion {
                case .failure(let error):
                    self.errorMessage = "Failed to load data: \(error.localizedDescription)"
                case .finished:
                    break
                }
            }, receiveValue: { [weak self] response in
                self?.apiResponse = response
            })
            .store(in: &cancellables)
    }
}
f:T412,class NetworkManager: ObservableObject {
    @Published var apiResponse: [APIResponse] = []
    @Published var errorMessage: String? = nil
    private var cancellables = Set<AnyCancellable>()

    func fetchData() {
        guard let url = URL(string: "https://jsonplaceholder.typicode.com/posts") else { 
            self.errorMessage = "Invalid URL"
            return 
        }

        URLSession.shared.dataTaskPublisher(for: url)
            .map { $0.data }
            .decode(type: [APIResponse].self, decoder: JSONDecoder())
            .receive(on: DispatchQueue.main)
            .sink(receiveCompletion: { completion in
                switch completion {
                case .failure(let error):
                    self.errorMessage = "Failed to load data: \(error.localizedDescription)"
                case .finished:
                    break
                }
            }, receiveValue: { [weak self] response in
                self?.apiResponse = response
            })
            .store(in: &cancellables)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI에서 네트워크 통신 처리: URLSession 활용"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI에서 네트워크 통신 처리: URLSession 활용"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-05"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"9e73b678","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"SwiftUI에서 네트워크 통신 처리: URLSession 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI는 사용자 인터페이스(UI)를 빠르고 쉽고 직관적으로 개발할 수 있게 도와주는 프레임워크입니다. 그러나 실용성 있는 애플리케이션을 만들기 위해서는 네트워크를 통해 데이터를 가져오는 것이 필수적입니다. 이 글에서는 SwiftUI에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":4,"column":137,"offset":176},"end":{"line":4,"column":149,"offset":188}}}],"position":{"start":{"line":4,"column":137,"offset":176},"end":{"line":4,"column":149,"offset":188}}},"children":"URLSession"}}],"을 사용하여 네트워크 통신을 처리하는 방법을 다룰 것입니다. 우리는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":4,"column":187,"offset":226},"end":{"line":4,"column":199,"offset":238}}}],"position":{"start":{"line":4,"column":187,"offset":226},"end":{"line":4,"column":199,"offset":238}}},"children":"URLSession"}}],"을 통해 데이터를 가져오고, 이 데이터를 SwiftUI 뷰에 반영하는 방법을 단계별로 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"488d08c5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"URLSession 소개"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":8,"column":1,"offset":314},"end":{"line":8,"column":13,"offset":326}}}],"position":{"start":{"line":8,"column":1,"offset":314},"end":{"line":8,"column":13,"offset":326}}},"children":"URLSession"}}],"은 URL을 통해 데이터를 전송하고 수신하는 작업을 처리하는 Apple의 프레임워크입니다. iOS, macOS, watchOS 및 tvOS에서 네트워크 데이터를 가져오거나 업로드하는 작업을 처리합니다. 이 프레임워크는 다양한 설정 옵션과 함께 두 가지 주된 방식, 즉 동기와 비동기 작업을 지원합니다. 여기서는 비동기 작업을 주로 다루겠습니다."]}],"\n",["$","h2",null,{"id":"0a49fd14","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저 SwiftUI 프로젝트를 생성하고 필요한 구조를 설정해야 합니다. Xcode를 열고 새로운 SwiftUI 프로젝트를 생성합니다. 다음으로는 네트워크 요청을 처리할 모델을 생성해야 합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\nimport Combine\n\nstruct APIResponse: Codable {\n    let title: String\n    // 필요한 다른 필드들을 여기에 추가합니다.\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":639},"end":{"line":22,"column":4,"offset":766}}},"children":"import SwiftUI\nimport Combine\n\nstruct APIResponse: Codable {\n    let title: String\n    // 필요한 다른 필드들을 여기에 추가합니다.\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"APIResponse","position":{"start":{"line":24,"column":8,"offset":775},"end":{"line":24,"column":21,"offset":788}}}],"position":{"start":{"line":24,"column":8,"offset":775},"end":{"line":24,"column":21,"offset":788}}},"children":"APIResponse"}}],"라는 구조를 정의합니다. 이 구조는 JSON 응답을 Swift 객체로 디코딩하는 데 사용됩니다."]}],"\n",["$","h2",null,{"id":"6f705d8e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ViewModel 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 MVVM(모델-뷰-뷰모델) 아키텍처를 권장합니다. 따라서 데이터를 관리하고 네트워크 요청을 처리하는 ViewModel을 생성해야 합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class NetworkManager: ObservableObject {\n    @Published var apiResponse: [APIResponse] = []\n    private var cancellables = Set<AnyCancellable>()\n\n    func fetchData() {\n        guard let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\") else { return }\n\n        URLSession.shared.dataTaskPublisher(for: url)\n            .map { $0.data }\n            .decode(type: [APIResponse].self, decoder: JSONDecoder())\n            .receive(on: DispatchQueue.main)\n            .sink(receiveCompletion: { completion in\n                switch completion {\n                case .failure(let error):\n                    print(\"Error: \\(error)\")\n                case .finished:\n                    break\n                }\n            }, receiveValue: { [weak self] response in\n                self?.apiResponse = response\n            })\n            .store(in: &cancellables)\n    }\n}\n"}],"position":{"start":{"line":30,"column":1,"offset":947},"end":{"line":55,"column":4,"offset":1838}}},"children":"class NetworkManager: ObservableObject {\n    @Published var apiResponse: [APIResponse] = []\n    private var cancellables = Set<AnyCancellable>()\n\n    func fetchData() {\n        guard let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\") else { return }\n\n        URLSession.shared.dataTaskPublisher(for: url)\n            .map { $0.data }\n            .decode(type: [APIResponse].self, decoder: JSONDecoder())\n            .receive(on: DispatchQueue.main)\n            .sink(receiveCompletion: { completion in\n                switch completion {\n                case .failure(let error):\n                    print(\"Error: \\(error)\")\n                case .finished:\n                    break\n                }\n            }, receiveValue: { [weak self] response in\n                self?.apiResponse = response\n            })\n            .store(in: &cancellables)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkManager","position":{"start":{"line":57,"column":8,"offset":1847},"end":{"line":57,"column":24,"offset":1863}}}],"position":{"start":{"line":57,"column":8,"offset":1847},"end":{"line":57,"column":24,"offset":1863}}},"children":"NetworkManager"}}]," 클래스는 네트워크 요청을 관리하며, 요청이 완료되면 데이터를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"apiResponse","position":{"start":{"line":57,"column":59,"offset":1898},"end":{"line":57,"column":72,"offset":1911}}}],"position":{"start":{"line":57,"column":59,"offset":1898},"end":{"line":57,"column":72,"offset":1911}}},"children":"apiResponse"}}]," 배열에 저장합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ObservableObject","position":{"start":{"line":57,"column":84,"offset":1923},"end":{"line":57,"column":102,"offset":1941}}}],"position":{"start":{"line":57,"column":84,"offset":1923},"end":{"line":57,"column":102,"offset":1941}}},"children":"ObservableObject"}}],"를 준수하여 SwiftUI 뷰가 데이터 변경을 감지할 수 있도록 합니다."]}],"\n",["$","h2",null,{"id":"c3452e28","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI View에 통합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ViewModel을 SwiftUI 뷰와 통합합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@ObservedObject","position":{"start":{"line":61,"column":33,"offset":2036},"end":{"line":61,"column":50,"offset":2053}}}],"position":{"start":{"line":61,"column":33,"offset":2036},"end":{"line":61,"column":50,"offset":2053}}},"children":"@ObservedObject"}}],"를 사용하여 ViewModel을 뷰에 주입하고 데이터를 표시합니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    @ObservedObject var networkManager = NetworkManager()\n\n    var body: some View {\n        NavigationView {\n            List(networkManager.apiResponse, id: \\ .title) { item in\n                VStack(alignment: .leading) {\n                    Text(item.title)\n                        .font(.headline)\n                    // 여기에 다른 필드들을 추가하세요.\n                }\n            }\n            .navigationBarTitle(\"Posts\")\n        }\n        .onAppear {\n            self.networkManager.fetchData()\n        }\n    }\n}\n"}],"position":{"start":{"line":63,"column":1,"offset":2092},"end":{"line":83,"column":4,"offset":2641}}},"children":"struct ContentView: View {\n    @ObservedObject var networkManager = NetworkManager()\n\n    var body: some View {\n        NavigationView {\n            List(networkManager.apiResponse, id: \\ .title) { item in\n                VStack(alignment: .leading) {\n                    Text(item.title)\n                        .font(.headline)\n                    // 여기에 다른 필드들을 추가하세요.\n                }\n            }\n            .navigationBarTitle(\"Posts\")\n        }\n        .onAppear {\n            self.networkManager.fetchData()\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ContentView","position":{"start":{"line":85,"column":1,"offset":2643},"end":{"line":85,"column":14,"offset":2656}}}],"position":{"start":{"line":85,"column":1,"offset":2643},"end":{"line":85,"column":14,"offset":2656}}},"children":"ContentView"}}],"에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"networkManager","position":{"start":{"line":85,"column":18,"offset":2660},"end":{"line":85,"column":34,"offset":2676}}}],"position":{"start":{"line":85,"column":18,"offset":2660},"end":{"line":85,"column":34,"offset":2676}}},"children":"networkManager"}}]," 인스턴스를 사용하여 데이터를 관리합니다. 사용자가 이 뷰를 볼 때마다 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":85,"column":74,"offset":2716},"end":{"line":85,"column":85,"offset":2727}}}],"position":{"start":{"line":85,"column":74,"offset":2716},"end":{"line":85,"column":85,"offset":2727}}},"children":"fetchData"}}]," 메서드가 호출되어 데이터를 로드합니다."]}],"\n",["$","h2",null,{"id":"8488876a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"에러 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"네트워크 요청은 항상 성공하지 않을 수 있습니다. 따라서 실제 애플리케이션에서는 오류 상황을 처리해야 합니다. 다음은 간단한 오류 메시지를 추가하는 방법입니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":91,"column":1,"offset":2852},"end":{"line":120,"column":4,"offset":3906}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["추가된 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"errorMessage","position":{"start":{"line":122,"column":5,"offset":3912},"end":{"line":122,"column":19,"offset":3926}}}],"position":{"start":{"line":122,"column":5,"offset":3912},"end":{"line":122,"column":19,"offset":3926}}},"children":"errorMessage"}}],"를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ContentView","position":{"start":{"line":122,"column":21,"offset":3928},"end":{"line":122,"column":34,"offset":3941}}}],"position":{"start":{"line":122,"column":21,"offset":3928},"end":{"line":122,"column":34,"offset":3941}}},"children":"ContentView"}}],"에서 표시할 수 있습니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct ContentView: View {\n    @ObservedObject var networkManager = NetworkManager()\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                if let errorMessage = networkManager.errorMessage {\n                    Text(errorMessage)\n                        .foregroundColor(.red)\n                }\n                List(networkManager.apiResponse, id: .title) { item in\n                    VStack(alignment: .leading) {\n                        Text(item.title)\n                            .font(.headline)\n                        // 여기에 다른 필드들을 추가하세요.\n                    }\n                }\n                .navigationBarTitle(\"Posts\")\n            }\n        }\n        .onAppear {\n            self.networkManager.fetchData()\n        }\n    }\n}\n"}],"position":{"start":{"line":124,"column":1,"offset":3957},"end":{"line":150,"column":4,"offset":4743}}},"children":"struct ContentView: View {\n    @ObservedObject var networkManager = NetworkManager()\n\n    var body: some View {\n        NavigationView {\n            VStack {\n                if let errorMessage = networkManager.errorMessage {\n                    Text(errorMessage)\n                        .foregroundColor(.red)\n                }\n                List(networkManager.apiResponse, id: .title) { item in\n                    VStack(alignment: .leading) {\n                        Text(item.title)\n                            .font(.headline)\n                        // 여기에 다른 필드들을 추가하세요.\n                    }\n                }\n                .navigationBarTitle(\"Posts\")\n            }\n        }\n        .onAppear {\n            self.networkManager.fetchData()\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 네트워크 요청이 실패하면 뷰에 오류 메시지가 표시될 것입니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["SwiftUI에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"URLSession","position":{"start":{"line":156,"column":11,"offset":4801},"end":{"line":156,"column":23,"offset":4813}}}],"position":{"start":{"line":156,"column":11,"offset":4801},"end":{"line":156,"column":23,"offset":4813}}},"children":"URLSession"}}],"을 사용하여 네트워크 통신을 처리하는 것은 상대적으로 간단합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Combine","position":{"start":{"line":156,"column":60,"offset":4850},"end":{"line":156,"column":69,"offset":4859}}}],"position":{"start":{"line":156,"column":60,"offset":4850},"end":{"line":156,"column":69,"offset":4859}}},"children":"Combine"}}]," 프레임워크와 함께 사용하면 비동기 데이터를 쉽게 관리할 수 있습니다. 위의 예제는 단순한 GET 요청이지만, POST, PUT, DELETE 등 다양한 HTTP 메서드를 지원하며, 복잡한 네트워크 통신을 처리하는 데에도 유용합니다. 이 간단한 예제를 통해 네트워크 요청과 응답을 효과적으로 관리하며 SwiftUI 애플리케이션에 통합할 수 있을 것입니다."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"SwiftUI에서 네트워크 통신 처리: URLSession 활용","toc":[{"tagName":"h1","title":"SwiftUI에서 네트워크 통신 처리: URLSession 활용","id":"9e73b678"},{"tagName":"h2","title":"URLSession 소개","id":"488d08c5"},{"tagName":"h2","title":"기본 설정","id":"0a49fd14"},{"tagName":"h2","title":"ViewModel 생성","id":"6f705d8e"},{"tagName":"h2","title":"SwiftUI View에 통합","id":"c3452e28"},{"tagName":"h2","title":"에러 처리","id":"8488876a"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
