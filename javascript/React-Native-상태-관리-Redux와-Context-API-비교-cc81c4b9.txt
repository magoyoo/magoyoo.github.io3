1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","React-Native-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-Redux%EC%99%80-Context-API-%EB%B9%84%EA%B5%90-cc81c4b9","d"],{"children":["__PAGE__?{\"slug\":\"React-Native-상태-관리-Redux와-Context-API-비교-cc81c4b9\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","React-Native-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-Redux%EC%99%80-Context-API-%EB%B9%84%EA%B5%90-cc81c4b9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"React-Native-상태-관리-Redux와-Context-API-비교-cc81c4b9\"}"},"styles":[]}],"segment":["slug","React-Native-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-Redux%EC%99%80-Context-API-%EB%B9%84%EA%B5%90-cc81c4b9","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React Native 상태 관리: Redux와 Context API 비교 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 React Native 애플리케이션에서 상태 관리를 할 때 많이 사용되는 두 가지 방법인 Redux와 Context API를 비교합니다. 각 방법의 특징과 장단점 및 사용 사례를 중점적으로 다룹니다."}],["$","meta","3",{"name":"keywords","content":"React Native,Redux,Context API,상태 관리"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/React-Native-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-Redux%EC%99%80-Context-API-%EB%B9%84%EA%B5%90-cc81c4b9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React Native 상태 관리: Redux와 Context API 비교 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React Native 상태 관리: Redux와 Context API 비교 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 React Native 애플리케이션에서 상태 관리를 할 때 많이 사용되는 두 가지 방법인 Redux와 Context API를 비교합니다. 각 방법의 특징과 장단점 및 사용 사례를 중점적으로 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/React-Native-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-Redux%EC%99%80-Context-API-%EB%B9%84%EA%B5%90-cc81c4b9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React Native 상태 관리: Redux와 Context API 비교 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 React Native 애플리케이션에서 상태 관리를 할 때 많이 사용되는 두 가지 방법인 Redux와 Context API를 비교합니다. 각 방법의 특징과 장단점 및 사용 사례를 중점적으로 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React Native 상태 관리: Redux와 Context API 비교"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React Native 상태 관리: Redux와 Context API 비교"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"58d041fa","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React Native 상태 관리: Redux와 Context API 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React Native는 재사용 가능한 UI 컴포넌트를 통해 모바일 애플리케이션을 작성할 수 있는 강력한 도구입니다. 하지만 애플리케이션의 상태(state)를 효율적으로 관리하는 것은 큰 도전일 수 있습니다. 이 글에서는 React Native에서 상태 관리를 위해 많이 사용되는 두 가지 방법, 즉 Redux와 Context API를 비교해봅니다."}],"\n",["$","h2",null,{"id":"706daa74","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Redux란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Redux는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"플럭스","position":{"start":{"line":8,"column":8,"offset":267},"end":{"line":8,"column":13,"offset":272}}}],"position":{"start":{"line":8,"column":8,"offset":267},"end":{"line":8,"column":13,"offset":272}}},"children":"플럭스"}}]," 아키텍처를 기반으로 하는 상태 관리 라이브러리로, 복잡한 애플리케이션의 상태를 예측 가능하게 만들어 줍니다. Redux의 주요 개념은 다음과 같습니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"단일 스토어(Store)"}],": 애플리케이션의 상태는 단 하나의 스토어 객체로 관리됩니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"액션(Action)"}],": 상태를 변경하는 유일한 방법은 특정한 '액션'을 디스패치(dispatch)하는 것입니다. 액션은 type 필드를 가진 객체입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"리듀서(Reducer)"}],": 액션이 디스패치되면, 리듀서는 스토어의 현재 상태와 액션을 조합하여 새로운 상태를 반환합니다."]}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import { createStore } from 'redux';\n\n// 초기 상태\nconst initialState = { count: 0 };\n\n// 리듀서 함수\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// 스토어 생성\nconst store = createStore(counterReducer);\n"}],"position":{"start":{"line":14,"column":1,"offset":581},"end":{"line":34,"column":4,"offset":991}}},"children":"import { createStore } from 'redux';\n\n// 초기 상태\nconst initialState = { count: 0 };\n\n// 리듀서 함수\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n}\n\n// 스토어 생성\nconst store = createStore(counterReducer);\n"}}]}],"\n",["$","h3",null,{"id":"eb9e7fde","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Redux의 장점"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"예측 가능성"}],": 상태와 상태 변경이 모두 하나의 중앙 집중식 시스템을 통해 이루어지므로 상태가 예측 가능하게 관리됩니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"디버깅 용이성"}],": Redux DevTools와 같은 도구를 사용하면 상태 변경을 쉽게 추적할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"유지보수성"}],": 상태 관리가 체계적으로 이루어지기 때문에 코드의 유지보수가 쉽습니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"d21d267a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Redux의 단점"}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"보일러플레이트 코드"}],": 액션, 액션 생성자, 리듀서 등을 많이 작성해야 하므로 초기 설정이 복잡할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"학습 곡선"}],": Redux를 처음 접하는 개발자에게는 다소 복잡하게 느껴질 수 있는 개념들이 많습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"37d422f7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Context API란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Context API는 React 자체에서 제공하는 상태 관리 방법입니다. 글로벌 수준의 상태를 쉽게 관리할 수 있게 해주며, Redux와 같은 외부 라이브러리에 의존하지 않아도 됩니다. Context API는 다음과 같은 요소로 구성됩니다:"}],"\n",["$","ol","ol-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Context 생성"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.createContext()","position":{"start":{"line":51,"column":20,"offset":1529},"end":{"line":51,"column":43,"offset":1552}}}],"position":{"start":{"line":51,"column":20,"offset":1529},"end":{"line":51,"column":43,"offset":1552}}},"children":"React.createContext()"}}]," 함수를 사용하여 컨텍스트를 생성합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Provider"}],": Provider는 하위 컴포넌트에게 상태를 공급하는 역할을 합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"Consumer"}],": Consumer는 하위 컴포넌트에서 상태를 구독하는 방법입니다."]}],"\n"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import React, { createContext, useState } from 'react';\n\n// Context 생성\nconst CounterContext = createContext();\n\n// Provider 컴포넌트\nexport const CounterProvider = ({ children }) => {\n    const [count, setCount] = useState(0);\n\n    return (\n        <CounterContext.Provider value={{ count, setCount }}>\n            {children}\n        </CounterContext.Provider>\n    );\n};\n"}],"position":{"start":{"line":55,"column":1,"offset":1684},"end":{"line":71,"column":4,"offset":2068}}},"children":"import React, { createContext, useState } from 'react';\n\n// Context 생성\nconst CounterContext = createContext();\n\n// Provider 컴포넌트\nexport const CounterProvider = ({ children }) => {\n    const [count, setCount] = useState(0);\n\n    return (\n        <CounterContext.Provider value={{ count, setCount }}>\n            {children}\n        </CounterContext.Provider>\n    );\n};\n"}}]}],"\n",["$","h3",null,{"id":"16476e91","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Context API의 장점"}],"\n",["$","ol","ol-4",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"간단한 사용법"}],": Context API는 비교적 간단하게 설정할 수 있으며 외부 라이브러리에 의존하지 않습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"보일러플레이트 감소"}],": Redux에 비해 훨씬 적은 코드로 글로벌 상태 관리를 구현할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"좋은 성능"}],": 작은 규모의 애플리케이션에서는 Context API로도 충분한 성능을 발휘할 수 있습니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"65202e05","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Context API의 단점"}],"\n",["$","ol","ol-5",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"리렌더링 문제"}],": 단일 컨텍스트 안에 많은 상태가 포함되어 있을 경우, 작은 상태 변화에도 큰 리렌더링이 발생할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"비동기 처리의 복잡성"}],": 컨텍스트에서 비동기 상태나 복잡한 로직을 관리하는 것은 좀 더 복잡할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"c290b357","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"어떤 방법을 선택해야 할까?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"두 가지 방법 모두 장단점이 있으며, 애플리케이션의 복잡성과 요구사항에 따라 다른 선택을 해야 할 수 있습니다:"}],"\n",["$","ol","ol-6",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"작은 규모 또는 단순한 애플리케이션"}],": Context API가 적합할 것입니다. 설정이 간단하고 빠르게 적용할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 상태 관리가 필요한 대규모 애플리케이션"}],": Redux가 더 적합할 가능성이 높습니다. 예측 가능성과 디버깅 용이성 측면에서 유리합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"혼합 사용"}],": 특정 부분에서는 Context API를 사용하고, 복잡한 상태 관리가 필요한 부분에서는 Redux를 사용하는 혼합 방법도 고려해볼 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React Native에서 상태 관리를 하는 두 가지 주요 방법인 Redux와 Context API를 비교해보았습니다. 애플리케이션의 규모와 복잡성, 팀의 기술 숙련도 등을 고려하여 적절한 방법을 선택하는 것이 중요합니다. 각 방법마다 장단점이 있으므로, 필요에 맞게 선택하여 효율적인 상태 관리를 이루시기 바랍니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React Native 상태 관리: Redux와 Context API 비교","toc":[{"tagName":"h1","title":"React Native 상태 관리: Redux와 Context API 비교","id":"58d041fa"},{"tagName":"h2","title":"Redux란 무엇인가?","id":"706daa74"},{"tagName":"h3","title":"Redux의 장점","id":"eb9e7fde"},{"tagName":"h3","title":"Redux의 단점","id":"d21d267a"},{"tagName":"h2","title":"Context API란 무엇인가?","id":"37d422f7"},{"tagName":"h3","title":"Context API의 장점","id":"16476e91"},{"tagName":"h3","title":"Context API의 단점","id":"65202e05"},{"tagName":"h2","title":"어떤 방법을 선택해야 할까?","id":"c290b357"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
