1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Reactjs-%EA%B0%80%EC%83%81-DOM-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EB%B9%84%EB%B0%80-e80a49a3","d"],{"children":["__PAGE__?{\"slug\":\"Reactjs-가상-DOM-이해하기-성능-최적화의-비밀-e80a49a3\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Reactjs-%EA%B0%80%EC%83%81-DOM-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EB%B9%84%EB%B0%80-e80a49a3","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Reactjs-가상-DOM-이해하기-성능-최적화의-비밀-e80a49a3\"}"},"styles":[]}],"segment":["slug","Reactjs-%EA%B0%80%EC%83%81-DOM-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EB%B9%84%EB%B0%80-e80a49a3","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 현대 웹 개발에서 가장 중요한 라이브러리 중 하나인 React.js의 핵심 개념, 가상 DOM에 대해 설명합니다. 가상 DOM이 실제 DOM과 어떻게 다른지, React.js가 이를 통해 얻는 이점을 알아보고, 성능 최적화에 어떻게 기여하는지 깊이 있게 탐구해봅니다."}],["$","meta","3",{"name":"keywords","content":"React.js,가상 DOM,성능 최적화,웹 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Reactjs-%EA%B0%80%EC%83%81-DOM-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EB%B9%84%EB%B0%80-e80a49a3"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 현대 웹 개발에서 가장 중요한 라이브러리 중 하나인 React.js의 핵심 개념, 가상 DOM에 대해 설명합니다. 가상 DOM이 실제 DOM과 어떻게 다른지, React.js가 이를 통해 얻는 이점을 알아보고, 성능 최적화에 어떻게 기여하는지 깊이 있게 탐구해봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Reactjs-%EA%B0%80%EC%83%81-DOM-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EB%B9%84%EB%B0%80-e80a49a3"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 현대 웹 개발에서 가장 중요한 라이브러리 중 하나인 React.js의 핵심 개념, 가상 DOM에 대해 설명합니다. 가상 DOM이 실제 DOM과 어떻게 다른지, React.js가 이를 통해 얻는 이점을 알아보고, 성능 최적화에 어떻게 기여하는지 깊이 있게 탐구해봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-30"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"df5cd06b","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React.js는 현재 웹 개발에서 가장 널리 사용되는 JavaScript 라이브러리 중 하나로, 사용자가 인터랙티브한 사용자 인터페이스를 구축하기에 최적화되어 있습니다. 그 중에서도 가상 DOM(Virtual DOM)은 React.js의 핵심 개념 중 하나로, 성능 최적화와 관련해 매우 중요한 역할을 합니다. 이 글에서는 가상 DOM에 대해 깊이 있게 알아보고, 그것이 왜 중요한지, 그리고 실제로 어떻게 성능 최적화를 이루는지 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"7e8a1e66","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"DOM(Document Object Model)이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"DOM은 HTML, XML 문서의 구조화된 표현이며, 프로그래밍 인터페이스를 제공합니다. 브라우저는 이를 통해 문서의 내용과 구조를 조작할 수 있습니다. 기본적인 개념을 정리해보겠습니다."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"HTML 문서는 트리 구조로 표현됩니다."}],"\n",["$","li","li-1",{"children":"각 노드는 문서의 태그, 속성, 텍스트 등을 나타냅니다."}],"\n",["$","li","li-2",{"children":"JavaScript는 DOM API를 사용해 이 트리를 조작하고, 변경된 사항을 브라우저에 반영합니다."}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 다음과 같은 HTML 코드를 고려해보겠습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-html","node":{"type":"element","tagName":"code","properties":{"className":["language-html"]},"children":[{"type":"text","value":"<div id=\"app\">\n  <h1>Hello, World!</h1>\n  <p>This is a simple paragraph.</p>\n</div>\n"}],"position":{"start":{"line":16,"column":1,"offset":586},"end":{"line":21,"column":4,"offset":681}}},"children":"<div id=\"app\">\n  <h1>Hello, World!</h1>\n  <p>This is a simple paragraph.</p>\n</div>\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 코드의 DOM 트리는 다음과 유사합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"- div#app\n  - h1\n    - \"Hello, World!\"\n  - p\n    - \"This is a simple paragraph.\"\n"}],"position":{"start":{"line":25,"column":1,"offset":709},"end":{"line":31,"column":4,"offset":797}}},"children":"- div#app\n  - h1\n    - \"Hello, World!\"\n  - p\n    - \"This is a simple paragraph.\"\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"DOM은 매우 유연하지만, 크고 복잡한 애플리케이션에서는 다음과 같은 단점이 있습니다."}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"변경 비용이 높다:"}]," DOM 트리의 일부분을 변경하면, 브라우저는 해당 부분뿐만 아니라 전체 레이아웃을 재계산합니다. 이는 성능 저하의 주요 원인 중 하나입니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"재렌더링 비용:"}]," DOM의 변경이 많아질수록, 브라우저는 계속해서 문서를 재렌더링해야 합니다. 이는 리소스를 많이 소모합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"1cf81d6a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"가상 DOM의 등장"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"가상 DOM은 이러한 문제점을 해결하기 위해 제안된 개념입니다. React.js는 가상 DOM이라는 레이어를 추가하였습니다. 이는 실제 DOM의 경량화된 버전으로, 메모리 상에서 유지됩니다. 가상 DOM의 주요 특징은 다음과 같습니다."}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"빠른 변경 감지:"}]," 가상 DOM은 메모리 상에서 빠르게 변경 사항을 감지하고, 이를 실제 DOM에 적용합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"변화 최소화:"}]," 가상 DOM은 변경된 부분만 실제 DOM에 적용하여, 재렌더링 비용을 최소화합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"매번 새로운 트리 생성:"}]," React 컴포넌트가 업데이트될 때마다 새로운 가상 DOM 트리가 생성되며, 이전 트리와 새로운 트리를 비교(diffing)합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"2f7f9162","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"가상 DOM 동작 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"가상 DOM의 동작 원리를 단계별로 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"9171677c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. 초기 렌더링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"사용자가 페이지를 로드하면, React는 초기 가상 DOM 트리를 생성합니다. 이 트리는 React 컴포넌트의 현재 상태를 반영합니다. 예를 들어, 다음과 같은 컴포넌트를 고려해보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, World!</h1>\n        <p>This is a simple paragraph.</p>\n      </div>\n    );\n  }\n}\n"}],"position":{"start":{"line":54,"column":1,"offset":1567},"end":{"line":65,"column":4,"offset":1751}}},"children":"class App extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Hello, World!</h1>\n        <p>This is a simple paragraph.</p>\n      </div>\n    );\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 컴포넌트는 초기 가상 DOM 트리를 생성하며, 이는 실제 DOM과 동기화됩니다."}],"\n",["$","h3",null,{"id":"b83f0425","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. 업데이트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"사용자가 애플리케이션과 상호작용하면, React는 상태 변화에 따라 컴포넌트를 재렌더링합니다. 이때 새로운 가상 DOM 트리가 생성됩니다. 예를 들어, 사용자가 버튼을 눌러 상태가 변경된다고 가정해봅시다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-jsx","node":{"type":"element","tagName":"code","properties":{"className":["language-jsx"]},"children":[{"type":"text","value":"class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { count: 0 };\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.count}</h1>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n"}],"position":{"start":{"line":73,"column":1,"offset":1930},"end":{"line":93,"column":4,"offset":2282}}},"children":"class App extends React.Component {\n  constructor() {\n    super();\n    this.state = { count: 0 };\n  }\n\n  increment = () => {\n    this.setState({ count: this.state.count + 1 });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.count}</h1>\n        <button onClick={this.increment}>Increment</button>\n      </div>\n    );\n  }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["버튼을 클릭하면 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"increment","position":{"start":{"line":95,"column":10,"offset":2293},"end":{"line":95,"column":21,"offset":2304}}}],"position":{"start":{"line":95,"column":10,"offset":2293},"end":{"line":95,"column":21,"offset":2304}}},"children":"increment"}}]," 함수가 호출되어 상태가 변경되고, 새로운 가상 DOM 트리가 생성됩니다. 이때 React는 이전 가상 DOM 트리와 새로운 트리를 비교합니다(diffing)."]}],"\n",["$","h3",null,{"id":"34ef0b36","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. Diffing"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React의 Diffing 알고리즘은 효율적으로 트리의 변경점을 찾습니다. 이 알고리즘은 다음과 같이 동작합니다."}],"\n",["$","ol","ol-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"최소 단위 비교:"}]," React는 가상 DOM 트리의 각 노드를 최소 단위로 비교합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"동일 요소 비교:"}]," 동일한 타입의 요소만 비교합니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"div","position":{"start":{"line":102,"column":44,"offset":2574},"end":{"line":102,"column":49,"offset":2579}}}],"position":{"start":{"line":102,"column":44,"offset":2574},"end":{"line":102,"column":49,"offset":2579}}},"children":"div"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"span","position":{"start":{"line":102,"column":51,"offset":2581},"end":{"line":102,"column":57,"offset":2587}}}],"position":{"start":{"line":102,"column":51,"offset":2581},"end":{"line":102,"column":57,"offset":2587}}},"children":"span"}}],"은 비교하지 않습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"키(key) 속성:"}]," 리스트를 렌더링할 때, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key","position":{"start":{"line":103,"column":32,"offset":2631},"end":{"line":103,"column":37,"offset":2636}}}],"position":{"start":{"line":103,"column":32,"offset":2631},"end":{"line":103,"column":37,"offset":2636}}},"children":"key"}}]," 속성을 사용하여 요소를 식별합니다. 이는 효율적인 비교를 위해 필수적입니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 과정을 통해 React는 변경된 부분을 식별하고, 필요한 만큼만 실제 DOM에 적용합니다."}],"\n",["$","h3",null,{"id":"f03870ae","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4. 실제 DOM 패치"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"변경된 부분이 식별되면, React는 이를 실제 DOM에 최소한의 업데이트로 반영합니다. 이는 성능을 최적화하고, 불필요한 재렌더링을 방지합니다."}],"\n",["$","h2",null,{"id":"337a6afe","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"가상 DOM의 장점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"React가 가상 DOM을 통해 얻는 주요 이점은 다음과 같습니다."}],"\n",["$","ol","ol-4",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"성능 최적화:"}]," 가상 DOM은 변경된 부분만 실제 DOM에 반영하여, 전체 애플리케이션의 성능을 최적화합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"프로그래밍 모델 단순화:"}]," 가상 DOM을 사용하면, 개발자는 상태 변화를 단순하게 관리할 수 있습니다. React는 내부적으로 이를 효율적으로 처리합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"유연성:"}]," 가상 DOM은 다양한 플랫폼에서 동작할 수 있습니다. React Native는 이를 모바일 애플리케이션 개발에 활용합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"가상 DOM은 React.js가 성능 최적화를 달성하는 핵심 요소 중 하나입니다. 이를 통해 변화가 많은 사용자 인터페이스를 효율적으로 관리할 수 있습니다. 가상 DOM의 원리와 동작 방식을 이해하면, React 애플리케이션의 성능을 더욱 최적화할 수 있는 기회를 발견할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀","toc":[{"tagName":"h1","title":"React.js 가상 DOM 이해하기: 성능 최적화의 비밀","id":"df5cd06b"},{"tagName":"h2","title":"DOM(Document Object Model)이란?","id":"7e8a1e66"},{"tagName":"h2","title":"가상 DOM의 등장","id":"1cf81d6a"},{"tagName":"h2","title":"가상 DOM 동작 원리","id":"2f7f9162"},{"tagName":"h3","title":"1. 초기 렌더링","id":"9171677c"},{"tagName":"h3","title":"2. 업데이트","id":"b83f0425"},{"tagName":"h3","title":"3. Diffing","id":"34ef0b36"},{"tagName":"h3","title":"4. 실제 DOM 패치","id":"f03870ae"},{"tagName":"h2","title":"가상 DOM의 장점","id":"337a6afe"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
