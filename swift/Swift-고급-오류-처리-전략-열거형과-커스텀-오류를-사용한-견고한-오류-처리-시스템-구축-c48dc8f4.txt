1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-%EA%B3%A0%EA%B8%89-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%A0%84%EB%9E%B5-%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%A4%EB%A5%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-c48dc8f4","d"],{"children":["__PAGE__?{\"slug\":\"Swift-고급-오류-처리-전략-열거형과-커스텀-오류를-사용한-견고한-오류-처리-시스템-구축-c48dc8f4\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-%EA%B3%A0%EA%B8%89-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%A0%84%EB%9E%B5-%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%A4%EB%A5%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-c48dc8f4","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-고급-오류-처리-전략-열거형과-커스텀-오류를-사용한-견고한-오류-처리-시스템-구축-c48dc8f4\"}"},"styles":[]}],"segment":["slug","Swift-%EA%B3%A0%EA%B8%89-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%A0%84%EB%9E%B5-%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%A4%EB%A5%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-c48dc8f4","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift에서 고급 오류 처리의 장점과 방법을 설명합니다. 특히 열거형과 커스텀 오류를 사용하여 견고한 오류 처리 시스템을 구축하는 법을 다룹니다."}],["$","meta","3",{"name":"keywords","content":"swift,오류처리,열거형,커스텀 오류"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-%EA%B3%A0%EA%B8%89-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%A0%84%EB%9E%B5-%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%A4%EB%A5%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-c48dc8f4"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift에서 고급 오류 처리의 장점과 방법을 설명합니다. 특히 열거형과 커스텀 오류를 사용하여 견고한 오류 처리 시스템을 구축하는 법을 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-%EA%B3%A0%EA%B8%89-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%A0%84%EB%9E%B5-%EC%97%B4%EA%B1%B0%ED%98%95%EA%B3%BC-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%98%A4%EB%A5%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EA%B2%AC%EA%B3%A0%ED%95%9C-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-c48dc8f4"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift에서 고급 오류 처리의 장점과 방법을 설명합니다. 특히 열거형과 커스텀 오류를 사용하여 견고한 오류 처리 시스템을 구축하는 법을 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-04"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"18a4f1ae","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 강력한 오류 처리 메커니즘을 제공합니다. 여기에 열거형과 커스텀 오류를 활용하면 더욱 견고하고 유지보수하기 쉬운 코드를 작성할 수 있습니다. 이 글에서는 Swift의 오류 처리 방법에 대해 깊이 있게 탐구하고, 열거형과 커스텀 오류를 사용하여 복잡한 시나리오에서도 문제가 발생하지 않도록 하는 방법을 설명합니다."}],"\n",["$","h2",null,{"id":"09373091","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 오류 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에는 내장된 오류 처리 모델이 있습니다. 가장 기본적인 방법은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"throw","position":{"start":{"line":8,"column":41,"offset":293},"end":{"line":8,"column":48,"offset":300}}}],"position":{"start":{"line":8,"column":41,"offset":293},"end":{"line":8,"column":48,"offset":300}}},"children":"throw"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try","position":{"start":{"line":8,"column":50,"offset":302},"end":{"line":8,"column":55,"offset":307}}}],"position":{"start":{"line":8,"column":50,"offset":302},"end":{"line":8,"column":55,"offset":307}}},"children":"try"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch","position":{"start":{"line":8,"column":57,"offset":309},"end":{"line":8,"column":64,"offset":316}}}],"position":{"start":{"line":8,"column":57,"offset":309},"end":{"line":8,"column":64,"offset":316}}},"children":"catch"}}]," 키워드를 사용하는 것입니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum FileError: Error {\n    case fileNotFound\n    case unreadable\n    case encodingFailed\n}\n\nfunc readFile(fileName: String) throws -> String {\n    // 파일을 읽는 로직\n}\n\nfunc example() {\n    do {\n        let content = try readFile(fileName: \"example.txt\")\n        print(content)\n    } catch FileError.fileNotFound {\n        print(\"파일을 찾을 수 없습니다.\")\n    } catch {\n        print(\"알 수 없는 오류 발생.\")\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":334},"end":{"line":31,"column":4,"offset":741}}},"children":"enum FileError: Error {\n    case fileNotFound\n    case unreadable\n    case encodingFailed\n}\n\nfunc readFile(fileName: String) throws -> String {\n    // 파일을 읽는 로직\n}\n\nfunc example() {\n    do {\n        let content = try readFile(fileName: \"example.txt\")\n        print(content)\n    } catch FileError.fileNotFound {\n        print(\"파일을 찾을 수 없습니다.\")\n    } catch {\n        print(\"알 수 없는 오류 발생.\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"FileError","position":{"start":{"line":33,"column":7,"offset":749},"end":{"line":33,"column":18,"offset":760}}}],"position":{"start":{"line":33,"column":7,"offset":749},"end":{"line":33,"column":18,"offset":760}}},"children":"FileError"}}]," 열거형을 사용하여 파일 처리 중 발생할 수 있는 다양한 오류를 정의합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"readFile","position":{"start":{"line":33,"column":61,"offset":803},"end":{"line":33,"column":71,"offset":813}}}],"position":{"start":{"line":33,"column":61,"offset":803},"end":{"line":33,"column":71,"offset":813}}},"children":"readFile"}}]," 함수에서는 발생 가능한 오류를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"throws","position":{"start":{"line":33,"column":89,"offset":831},"end":{"line":33,"column":97,"offset":839}}}],"position":{"start":{"line":33,"column":89,"offset":831},"end":{"line":33,"column":97,"offset":839}}},"children":"throws"}}]," 키워드로 표시하며, 이를 호출하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"example","position":{"start":{"line":33,"column":117,"offset":859},"end":{"line":33,"column":126,"offset":868}}}],"position":{"start":{"line":33,"column":117,"offset":859},"end":{"line":33,"column":126,"offset":868}}},"children":"example"}}]," 함수에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"do-catch","position":{"start":{"line":33,"column":133,"offset":875},"end":{"line":33,"column":143,"offset":885}}}],"position":{"start":{"line":33,"column":133,"offset":875},"end":{"line":33,"column":143,"offset":885}}},"children":"do-catch"}}]," 블록을 사용하여 오류를 처리합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 기본적인 구조를 사용하면 대부분의 일반적인 오류 처리는 가능하지만, 더 복잡한 사례를 위해서는 추가적인 방법이 필요합니다."}],"\n",["$","h2",null,{"id":"07f043f4","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"열거형을 활용한 고급 오류 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"열거형을 활용하면 오류 상황을 매우 구체적이고 명확하게 정의할 수 있습니다. 이는 코드를 읽고 이해하는 데 중요한 도움을 줍니다."}],"\n",["$","h3",null,{"id":"e5c78491","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 열거형 오류"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"일반적인 열거형을 사용한 오류 처리는 아래와 같습니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum NetworkError: Error {\n    case badURL\n    case requestFailed(description: String)\n    case unknown\n}\n\nfunc fetchData(urlString: String) throws {\n    guard let url = URL(string: urlString) else {\n        throw NetworkError.badURL\n    }\n\n    // 네트워크 요청 로직, 여기서 requestFailed나 unknown 오류를 던질 수 있음\n}\n"}],"position":{"start":{"line":45,"column":1,"offset":1122},"end":{"line":59,"column":4,"offset":1435}}},"children":"enum NetworkError: Error {\n    case badURL\n    case requestFailed(description: String)\n    case unknown\n}\n\nfunc fetchData(urlString: String) throws {\n    guard let url = URL(string: urlString) else {\n        throw NetworkError.badURL\n    }\n\n    // 네트워크 요청 로직, 여기서 requestFailed나 unknown 오류를 던질 수 있음\n}\n"}}]}],"\n",["$","h3",null,{"id":"b8a08ef2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"커스텀 오류 정의"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"열거형을 사용하여 커스텀 오류를 정의하면 오류의 유형을 더 세분화할 수 있습니다. 이에 따라 특정 상황에 맞는 오류 메시지를 제공할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum DatabaseError: Error {\n    case connectionFailed(reason: String)\n    case queryFailed(query: String, description: String)\n    case unknown\n}\n\nfunc fetchUser(id: Int) throws -> User {\n    guard id > 0 else {\n        throw DatabaseError.queryFailed(query: \"SELECT * FROM users WHERE id=-1\", description: \"ID는 0보다 커야 합니다.\")\n    }\n    // 데이터베이스 로직, 여기서 connectionFailed나 unknown 오류를 던질 수 있음\n}\n"}],"position":{"start":{"line":65,"column":1,"offset":1535},"end":{"line":78,"column":4,"offset":1941}}},"children":"enum DatabaseError: Error {\n    case connectionFailed(reason: String)\n    case queryFailed(query: String, description: String)\n    case unknown\n}\n\nfunc fetchUser(id: Int) throws -> User {\n    guard id > 0 else {\n        throw DatabaseError.queryFailed(query: \"SELECT * FROM users WHERE id=-1\", description: \"ID는 0보다 커야 합니다.\")\n    }\n    // 데이터베이스 로직, 여기서 connectionFailed나 unknown 오류를 던질 수 있음\n}\n"}}]}],"\n",["$","h2",null,{"id":"cd6e3225","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 오류와 열거형을 통한 확장성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"고급 오류 처리를 위해 열거형과 커스텀 오류를 함께 사용하면 코드를 확장하기 쉽습니다. 예를 들어, 네트워크 라이브러리를 작성하는 경우 다양한 오류 상황을 미리 정의해두면 나중에 같은 라이브러리를 사용하는 다른 코드에서도 보다 쉽게 오류를 처리할 수 있습니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum AppError: Error {\n    case networkError(NetworkError)\n    case databaseError(DatabaseError)\n    case generalError(description: String)\n}\n\nfunc performOperation() {\n    do {\n        let result = try someRiskyOperation()\n        // 결과 처리\n    } catch let error as NetworkError {\n        throw AppError.networkError(error)\n    } catch let error as DatabaseError {\n        throw AppError.databaseError(error)\n    } catch {\n        throw AppError.generalError(description: error.localizedDescription)\n    }\n}\n"}],"position":{"start":{"line":84,"column":1,"offset":2114},"end":{"line":103,"column":4,"offset":2634}}},"children":"enum AppError: Error {\n    case networkError(NetworkError)\n    case databaseError(DatabaseError)\n    case generalError(description: String)\n}\n\nfunc performOperation() {\n    do {\n        let result = try someRiskyOperation()\n        // 결과 처리\n    } catch let error as NetworkError {\n        throw AppError.networkError(error)\n    } catch let error as DatabaseError {\n        throw AppError.databaseError(error)\n    } catch {\n        throw AppError.generalError(description: error.localizedDescription)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"performOperation","position":{"start":{"line":105,"column":9,"offset":2644},"end":{"line":105,"column":27,"offset":2662}}}],"position":{"start":{"line":105,"column":9,"offset":2644},"end":{"line":105,"column":27,"offset":2662}}},"children":"performOperation"}}]," 함수는 네트워크와 데이터베이스 관련 오류를 각각 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkError","position":{"start":{"line":105,"column":55,"offset":2690},"end":{"line":105,"column":69,"offset":2704}}}],"position":{"start":{"line":105,"column":55,"offset":2690},"end":{"line":105,"column":69,"offset":2704}}},"children":"NetworkError"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DatabaseError","position":{"start":{"line":105,"column":71,"offset":2706},"end":{"line":105,"column":86,"offset":2721}}}],"position":{"start":{"line":105,"column":71,"offset":2706},"end":{"line":105,"column":86,"offset":2721}}},"children":"DatabaseError"}}],"로 캡슐화하여 보다 구체적인 오류 정보를 호출자에게 전달합니다. 이렇게 하면 각 오류 상황에 대한 구체적인 처리가 가능합니다."]}],"\n",["$","h2",null,{"id":"c3b51741","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결과 타입(Result Type)을 활용한 오류 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"최근 Swift에서는 결과 타입(Result Type)도 많이 사용됩니다. 이는 함수가 성공했는지, 실패했는지를 명확하게 표시할 수 있는 방법입니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum LoginError: Error {\n    case invalidCredentials\n    case userNotFound\n    case serverError(description: String)\n}\n\nfunc login(username: String, password: String) -> Result<String, LoginError> {\n    // 로그인 로직\n    // 성공 시: .success(\"토큰\")\n    // 실패 시: .failure(.invalidCredentials) 또는 다른 오류 유형\n}\n\nlet result = login(username: \"user\", password: \"password\")\n\nswitch result {\ncase .success(let token):\n    print(\"로그인 성공, 토큰: \\(token)\")\ncase .failure(let error):\n    switch error {\n    case .invalidCredentials:\n        print(\"유효하지 않은 자격 증명\")\n    case .userNotFound:\n        print(\"사용자를 찾을 수 없습니다.\")\n    case .serverError(let description):\n        print(\"서버 오류: \\(description)\")\n    }\n}\n"}],"position":{"start":{"line":111,"column":1,"offset":2912},"end":{"line":139,"column":4,"offset":3609}}},"children":"enum LoginError: Error {\n    case invalidCredentials\n    case userNotFound\n    case serverError(description: String)\n}\n\nfunc login(username: String, password: String) -> Result<String, LoginError> {\n    // 로그인 로직\n    // 성공 시: .success(\"토큰\")\n    // 실패 시: .failure(.invalidCredentials) 또는 다른 오류 유형\n}\n\nlet result = login(username: \"user\", password: \"password\")\n\nswitch result {\ncase .success(let token):\n    print(\"로그인 성공, 토큰: \\(token)\")\ncase .failure(let error):\n    switch error {\n    case .invalidCredentials:\n        print(\"유효하지 않은 자격 증명\")\n    case .userNotFound:\n        print(\"사용자를 찾을 수 없습니다.\")\n    case .serverError(let description):\n        print(\"서버 오류: \\(description)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"결과 타입을 사용하면 함수의 반환값을 통해 오류를 검사할 수 있으므로 코드의 가독성이 높아집니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 고급 오류 처리를 구현하는 것은 코드의 안정성과 유지보수성을 높이는 중요한 전략입니다. 열거형과 커스텀 오류를 통해 정확하고 세밀한 오류 처리를 구현하면, 코드의 가독성과 재사용성이 훨씬 높아집니다. 또한, 결과 타입을 활용하여 깔끔하고 명확하게 오류를 처리할 수 있습니다. 이 모든 방법을 종합적으로 활용하여 강력한 오류 처리 시스템을 구축해보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축.","toc":[{"tagName":"h1","title":"Swift 고급 오류 처리 전략: 열거형과 커스텀 오류를 사용한 견고한 오류 처리 시스템 구축","id":"18a4f1ae"},{"tagName":"h2","title":"기본 오류 처리","id":"09373091"},{"tagName":"h2","title":"열거형을 활용한 고급 오류 처리","id":"07f043f4"},{"tagName":"h3","title":"기본 열거형 오류","id":"e5c78491"},{"tagName":"h3","title":"커스텀 오류 정의","id":"b8a08ef2"},{"tagName":"h2","title":"커스텀 오류와 열거형을 통한 확장성","id":"cd6e3225"},{"tagName":"h2","title":"결과 타입(Result Type)을 활용한 오류 처리","id":"c3b51741"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
