1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-ReactorKit-%EC%95%B1%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-6a389b60","d"],{"children":["__PAGE__?{\"slug\":\"Swift-ReactorKit-앱의-메모리-관리-최적화-방법-6a389b60\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-ReactorKit-%EC%95%B1%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-6a389b60","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-ReactorKit-앱의-메모리-관리-최적화-방법-6a389b60\"}"},"styles":[]}],"segment":["slug","Swift-ReactorKit-%EC%95%B1%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-6a389b60","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift에서 ReactorKit을 사용하여 앱의 메모리 관리 최적화 방법에 대해 다룹니다. ReactorKit의 기본 개념, 메모리 관리 문제, 효과적인 해결 방법 등을 살펴봅니다."}],["$","meta","3",{"name":"keywords","content":"Swift,ReactorKit,메모리 관리,최적화"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-ReactorKit-%EC%95%B1%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-6a389b60"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift에서 ReactorKit을 사용하여 앱의 메모리 관리 최적화 방법에 대해 다룹니다. ReactorKit의 기본 개념, 메모리 관리 문제, 효과적인 해결 방법 등을 살펴봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-ReactorKit-%EC%95%B1%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%EC%B5%9C%EC%A0%81%ED%99%94-%EB%B0%A9%EB%B2%95-6a389b60"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift에서 ReactorKit을 사용하여 앱의 메모리 관리 최적화 방법에 대해 다룹니다. ReactorKit의 기본 개념, 메모리 관리 문제, 효과적인 해결 방법 등을 살펴봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T439,class MyViewController: UIViewController, View {

    var disposeBag = DisposeBag()
    var reactor: MyReactor? {
        didSet {
            guard let reactor = reactor else { return }
            bind(reactor)
        }
    }

    func bind(_ reactor: MyReactor) {
        reactor.state.map { $0.someState }
            .distinctUntilChanged()
            .bind(to: someLabel.rx.text)
            .disposed(by: disposeBag)
    }
}

class MyReactor: Reactor {
    enum Action { case someAction }
    enum Mutation { case setSomeState(String) }
    struct State { var someState: String }
    
    let initialState = State(someState: "")
    
    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .someAction:
            return Observable.just(.setSomeState("New State"))
        }
    }

    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case .setSomeState(let newSomeState):
            newState.someState = newSomeState
        }
        return newState
    }
}
f:T439,class MyViewController: UIViewController, View {

    var disposeBag = DisposeBag()
    var reactor: MyReactor? {
        didSet {
            guard let reactor = reactor else { return }
            bind(reactor)
        }
    }

    func bind(_ reactor: MyReactor) {
        reactor.state.map { $0.someState }
            .distinctUntilChanged()
            .bind(to: someLabel.rx.text)
            .disposed(by: disposeBag)
    }
}

class MyReactor: Reactor {
    enum Action { case someAction }
    enum Mutation { case setSomeState(String) }
    struct State { var someState: String }
    
    let initialState = State(someState: "")
    
    func mutate(action: Action) -> Observable<Mutation> {
        switch action {
        case .someAction:
            return Observable.just(.setSomeState("New State"))
        }
    }

    func reduce(state: State, mutation: Mutation) -> State {
        var newState = state
        switch mutation {
        case .setSomeState(let newSomeState):
            newState.someState = newSomeState
        }
        return newState
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-19"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"6cab650d","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 ReactorKit을 사용한 메모리 관리 최적화 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 Swift에서 단방향 데이터 흐름을 구현하는 데 매우 유용한 프레임워크입니다. 그러나 사용 중에 메모리 관련 문제가 발생할 수 있습니다. 이 글에서는 ReactorKit을 사용하는 앱에서 메모리 관리 최적화 방법에 대해 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"4aa8f3ae","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"ReactorKit의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["ReactorKit은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor-View","position":{"start":{"line":8,"column":13,"offset":221},"end":{"line":8,"column":27,"offset":235}}}],"position":{"start":{"line":8,"column":13,"offset":221},"end":{"line":8,"column":27,"offset":235}}},"children":"Reactor-View"}}]," 패턴을 기반으로 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":8,"column":42,"offset":250},"end":{"line":8,"column":51,"offset":259}}}],"position":{"start":{"line":8,"column":42,"offset":250},"end":{"line":8,"column":51,"offset":259}}},"children":"Reactor"}}],"는 상태(state)와 액션(action)을 담당하며, 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"View","position":{"start":{"line":8,"column":85,"offset":293},"end":{"line":8,"column":91,"offset":299}}}],"position":{"start":{"line":8,"column":85,"offset":293},"end":{"line":8,"column":91,"offset":299}}},"children":"View"}}],"와 연결합니다. 다시 말해, 사용자의 액션이 Reactor에 전달되어 새로운 상태가 생성되고, 이 상태는 View에 반영됩니다."]}],"\n",["$","h3",null,{"id":"fcfc5628","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Reactor의 구성 요소"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Action:"}]," 사용자의 인풋을 정의합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Mutation:"}]," 액션이 처리된 결과를 변환합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"State:"}]," 현재 상태를 정의합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"Reactor:"}]," 액션을 받아 Mutate하고, 새로운 상태를 생성합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 기본 개념을 유지하면서, 메모리 관리에 신경 쓰지 않으면 메모리 누수(memory leak) 문제가 발생할 수 있습니다. 이를 해결하기 위한 몇 가지 방법을 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"308c5e6c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"메모리 관리 문제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"메모리 누수는 앱의 성능을 저하시킬 뿐만 아니라 결국에는 앱이 충돌(crash)할 수도 있으며, 이는 사용자 경험에 매우 부정적인 영향을 미칩니다. 특히 ReactorKit을 사용하면서 자주 발생할 수 있는 메모리 누수 문제는 다음과 같습니다:"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"강한 참조 사이클(Strong Reference Cycle):"}]," Reactor와 View 사이에 강한 참조가 발생할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"비동기 처리:"}]," 비동기 작업이 완료되기 전에 ViewController가 해제되면 메모리 누수가 발생할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"리스너 처리:"}]," RxSwift의 Observable을 제대로 해제하지 않으면 문제가 발생할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"ea1bcfff","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"메모리 관리 최적화 방법"}],"\n",["$","h3",null,{"id":"a97bbcc1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"약한 참조(Weak Reference) 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["ReactorKit에서 메모리 누수를 방지하기 위해서는 약한 참조를 사용하는 것이 중요합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":31,"column":54,"offset":1106},"end":{"line":31,"column":63,"offset":1115}}}],"position":{"start":{"line":31,"column":54,"offset":1106},"end":{"line":31,"column":63,"offset":1115}}},"children":"Reactor"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"View","position":{"start":{"line":31,"column":65,"offset":1117},"end":{"line":31,"column":71,"offset":1123}}}],"position":{"start":{"line":31,"column":65,"offset":1117},"end":{"line":31,"column":71,"offset":1123}}},"children":"View"}}]," 간의 참조를 약한 참조로 설정하여 강한 참조 사이클을 피할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":33,"column":1,"offset":1166},"end":{"line":75,"column":4,"offset":2259}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":77,"column":9,"offset":2269},"end":{"line":77,"column":18,"offset":2278}}}],"position":{"start":{"line":77,"column":9,"offset":2269},"end":{"line":77,"column":18,"offset":2278}}},"children":"Reactor"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"View","position":{"start":{"line":77,"column":20,"offset":2280},"end":{"line":77,"column":26,"offset":2286}}}],"position":{"start":{"line":77,"column":20,"offset":2280},"end":{"line":77,"column":26,"offset":2286}}},"children":"View"}}]," 간의 강한 참조 사이클을 방지하기 위해 disposeBag을 사용하고 있습니다."]}],"\n",["$","h3",null,{"id":"7ab58238","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"DisposeBag의 올바른 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["RxSwift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DisposeBag","position":{"start":{"line":81,"column":10,"offset":2366},"end":{"line":81,"column":22,"offset":2378}}}],"position":{"start":{"line":81,"column":10,"offset":2366},"end":{"line":81,"column":22,"offset":2378}}},"children":"DisposeBag"}}],"은 메모리 관리를 돕기 위해 필요한 도구입니다. 모든 Observable 구독을 손쉽게 정리할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class MyViewController: UIViewController, View {\n\n    var disposeBag = DisposeBag()\n    var reactor: MyReactor? {\n        didSet {\n            guard let reactor = reactor else { return }\n            bind(reactor)\n        }\n    }\n\n    func bind(_ reactor: MyReactor) {\n        reactor.state.map { $0.someState }\n            .distinctUntilChanged()\n            .bind(to: someLabel.rx.text)\n            .disposed(by: disposeBag)\n    }\n\n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        disposeBag = DisposeBag() // 이전 구독을 모두 해제합니다.\n    }\n}\n"}],"position":{"start":{"line":83,"column":1,"offset":2440},"end":{"line":106,"column":4,"offset":3045}}},"children":"class MyViewController: UIViewController, View {\n\n    var disposeBag = DisposeBag()\n    var reactor: MyReactor? {\n        didSet {\n            guard let reactor = reactor else { return }\n            bind(reactor)\n        }\n    }\n\n    func bind(_ reactor: MyReactor) {\n        reactor.state.map { $0.someState }\n            .distinctUntilChanged()\n            .bind(to: someLabel.rx.text)\n            .disposed(by: disposeBag)\n    }\n\n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        disposeBag = DisposeBag() // 이전 구독을 모두 해제합니다.\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"viewWillDisappear","position":{"start":{"line":108,"column":8,"offset":3054},"end":{"line":108,"column":27,"offset":3073}}}],"position":{"start":{"line":108,"column":8,"offset":3054},"end":{"line":108,"column":27,"offset":3073}}},"children":"viewWillDisappear"}}]," 메서드 내에 disposeBag을 재설정해줍니다. 이는 ViewController가 화면에서 사라질 때 모든 구독을 해제하여 메모리 누수를 방지합니다."]}],"\n",["$","h3",null,{"id":"233424c8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"비동기 작업의 해제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"비동기 작업 또한 신중히 관리해야 합니다. 특히 ReactorKit과 RxSwift를 함께 사용할 때, 비동기 작업이 완료되기 전에 View가 해제될 경우 메모리 누수가 발생할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"func asyncWork() -> Observable<Void> {\n    return Observable.create { observer in\n        // 비동기 작업을 수행합니다.\n        DispatchQueue.global().async {\n            // 작업이 완료된 경우\n            observer.onNext(())\n            observer.onCompleted()\n        }\n        return Disposables.create()\n    }\n}\n"}],"position":{"start":{"line":114,"column":1,"offset":3284},"end":{"line":126,"column":4,"offset":3590}}},"children":"func asyncWork() -> Observable<Void> {\n    return Observable.create { observer in\n        // 비동기 작업을 수행합니다.\n        DispatchQueue.global().async {\n            // 작업이 완료된 경우\n            observer.onNext(())\n            observer.onCompleted()\n        }\n        return Disposables.create()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Disposable","position":{"start":{"line":128,"column":9,"offset":3600},"end":{"line":128,"column":21,"offset":3612}}}],"position":{"start":{"line":128,"column":9,"offset":3600},"end":{"line":128,"column":21,"offset":3612}}},"children":"Disposable"}}],"을 사용하여 비동기 작업이 완료되기 전에 해제되어야 하는 구독을 관리할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 ReactorKit을 사용할 때 메모리 관리 최적화는 매우 중요합니다. 강한 참조 사이클을 피하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"DisposeBag","position":{"start":{"line":132,"column":65,"offset":3732},"end":{"line":132,"column":77,"offset":3744}}}],"position":{"start":{"line":132,"column":65,"offset":3732},"end":{"line":132,"column":77,"offset":3744}}},"children":"DisposeBag"}}],"을 올바르게 사용하며, 비동기 작업을 신중히 관리함으로써 메모리 누수를 방지할 수 있습니다. 이 지침을 따르면 ReactorKit을 사용한 앱의 성능과 안정성을 극대화할 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"올바른 메모리 관리 기법을 적용하여 사용자에게 더 나은 경험을 제공하는 앱을 개발해보세요."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"[Swift] ReactorKit 앱의 메모리 관리 최적화 방법","toc":[{"tagName":"h1","title":"Swift에서 ReactorKit을 사용한 메모리 관리 최적화 방법","id":"6cab650d"},{"tagName":"h2","title":"ReactorKit의 기본 개념","id":"4aa8f3ae"},{"tagName":"h3","title":"Reactor의 구성 요소","id":"fcfc5628"},{"tagName":"h2","title":"메모리 관리 문제","id":"308c5e6c"},{"tagName":"h2","title":"메모리 관리 최적화 방법","id":"ea1bcfff"},{"tagName":"h3","title":"약한 참조(Weak Reference) 사용","id":"a97bbcc1"},{"tagName":"h3","title":"DisposeBag의 올바른 사용","id":"7ab58238"},{"tagName":"h3","title":"비동기 작업의 해제","id":"233424c8"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
