1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","UIKit%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EB%B0%8F-%ED%84%B0%EC%B9%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EA%B5%AC%ED%98%84-52507da9","d"],{"children":["__PAGE__?{\"slug\":\"UIKit으로-그리기-및-터치-이벤트-처리-사용자-인터랙션-구현-52507da9\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","UIKit%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EB%B0%8F-%ED%84%B0%EC%B9%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EA%B5%AC%ED%98%84-52507da9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"UIKit으로-그리기-및-터치-이벤트-처리-사용자-인터랙션-구현-52507da9\"}"},"styles":[]}],"segment":["slug","UIKit%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EB%B0%8F-%ED%84%B0%EC%B9%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EA%B5%AC%ED%98%84-52507da9","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"UIKit을 사용한 그리기와 터치 이벤트 처리를 통해 사용자 인터랙션을 구현하는 방법을 다룹니다. 이 글은 iOS 개발자들이 UIKit을 활용해 사용자 인터페이스와 인터랙션을 더 효과적으로 구현할 수 있도록 돕기 위한 튜토리얼입니다."}],["$","meta","3",{"name":"keywords","content":"iOS,UIKit,그리기,터치 이벤트"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/UIKit%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EB%B0%8F-%ED%84%B0%EC%B9%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EA%B5%AC%ED%98%84-52507da9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"UIKit을 사용한 그리기와 터치 이벤트 처리를 통해 사용자 인터랙션을 구현하는 방법을 다룹니다. 이 글은 iOS 개발자들이 UIKit을 활용해 사용자 인터페이스와 인터랙션을 더 효과적으로 구현할 수 있도록 돕기 위한 튜토리얼입니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/UIKit%EC%9C%BC%EB%A1%9C-%EA%B7%B8%EB%A6%AC%EA%B8%B0-%EB%B0%8F-%ED%84%B0%EC%B9%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%B2%98%EB%A6%AC-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%ED%84%B0%EB%9E%99%EC%85%98-%EA%B5%AC%ED%98%84-52507da9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"UIKit을 사용한 그리기와 터치 이벤트 처리를 통해 사용자 인터랙션을 구현하는 방법을 다룹니다. 이 글은 iOS 개발자들이 UIKit을 활용해 사용자 인터페이스와 인터랙션을 더 효과적으로 구현할 수 있도록 돕기 위한 튜토리얼입니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T5f0,class CustomView: UIView {
    private var circleColor: UIColor = .blue

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.backgroundColor = UIColor.white
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func draw(_ rect: CGRect) {
        super.draw(rect)

        if let context = UIGraphicsGetCurrentContext() {
            let center = CGPoint(x: rect.midX, y: rect.midY)
            let radius = min(rect.width, rect.height) / 4
            let startAngle: CGFloat = 0
            let endAngle: CGFloat = .pi * 2

            context.setFillColor(circleColor.cgColor)
            context.addArc(center: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
            context.fillPath()
        }
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    private func changeCircleColor() {
        circleColor = circleColor == .blue ? .red : .blue
    }
}
f:T5f0,class CustomView: UIView {
    private var circleColor: UIColor = .blue

    override init(frame: CGRect) {
        super.init(frame: frame)
        self.backgroundColor = UIColor.white
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func draw(_ rect: CGRect) {
        super.draw(rect)

        if let context = UIGraphicsGetCurrentContext() {
            let center = CGPoint(x: rect.midX, y: rect.midY)
            let radius = min(rect.width, rect.height) / 4
            let startAngle: CGFloat = 0
            let endAngle: CGFloat = .pi * 2

            context.setFillColor(circleColor.cgColor)
            context.addArc(center: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
            context.fillPath()
        }
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    override func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {
        changeCircleColor()
        setNeedsDisplay()
    }

    private func changeCircleColor() {
        circleColor = circleColor == .blue ? .red : .blue
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-16"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"0033c146","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["UIKit을 사용한 그리기와 터치 이벤트 처리는 중요한 iOS 개발 테크닉 중 하나입니다. 이 튜토리얼에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":4,"column":62,"offset":102},"end":{"line":4,"column":70,"offset":110}}}],"position":{"start":{"line":4,"column":62,"offset":102},"end":{"line":4,"column":70,"offset":110}}},"children":"UIView"}}],"를 확장하여 그리기 및 터치 이벤트를 처리하는 방법을 단계별로 설명합니다. 이 글을 통해 여러분은 사용자와의 상호작용을 더 풍부하게 만들 수 있는 기술을 익힐 수 있습니다."]}],"\n",["$","h2",null,{"id":"62d532a0","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"UIView 확장하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["그리기와 터치 이벤트를 처리하기 위해서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":8,"column":24,"offset":247},"end":{"line":8,"column":32,"offset":255}}}],"position":{"start":{"line":8,"column":24,"offset":247},"end":{"line":8,"column":32,"offset":255}}},"children":"UIView"}}]," 클래스를 서브클래싱할 필요가 있습니다. 이 과정을 통해 우리는 커스텀 뷰를 만들 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nclass CustomView: UIView {\n    // 기본 설정\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.backgroundColor = UIColor.white\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":310},"end":{"line":24,"column":4,"offset":601}}},"children":"import UIKit\n\nclass CustomView: UIView {\n    // 기본 설정\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.backgroundColor = UIColor.white\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["그런 다음 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"draw(_:)","position":{"start":{"line":26,"column":7,"offset":609},"end":{"line":26,"column":17,"offset":619}}}],"position":{"start":{"line":26,"column":7,"offset":609},"end":{"line":26,"column":17,"offset":619}}},"children":"draw(_:)"}}]," 메서드를 재정의하여 그리기를 수행할 수 있습니다. 이 메서드는 뷰의 콘텐츠를 직접 그리기 위해 사용됩니다."]}],"\n",["$","h2",null,{"id":"1fbc78b9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"draw(_:) 메서드 재정의"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"draw(_:)","position":{"start":{"line":30,"column":1,"offset":702},"end":{"line":30,"column":11,"offset":712}}}],"position":{"start":{"line":30,"column":1,"offset":702},"end":{"line":30,"column":11,"offset":712}}},"children":"draw(_:)"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Core Graphics","position":{"start":{"line":30,"column":13,"offset":714},"end":{"line":30,"column":28,"offset":729}}}],"position":{"start":{"line":30,"column":13,"offset":714},"end":{"line":30,"column":28,"offset":729}}},"children":"Core Graphics"}}],"를 이용해 다양한 도형을 그릴 수 있습니다. 예제에서는 간단한 원을 그려봅시다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func draw(_ rect: CGRect) {\n    super.draw(rect)\n\n    if let context = UIGraphicsGetCurrentContext() {\n        let center = CGPoint(x: rect.midX, y: rect.midY)\n        let radius = min(rect.width, rect.height) / 4\n        let startAngle: CGFloat = 0\n        let endAngle: CGFloat = .pi * 2\n\n        context.setFillColor(UIColor.blue.cgColor)\n        context.addArc(center: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        context.fillPath()\n    }\n}\n"}],"position":{"start":{"line":32,"column":1,"offset":775},"end":{"line":47,"column":4,"offset":1289}}},"children":"override func draw(_ rect: CGRect) {\n    super.draw(rect)\n\n    if let context = UIGraphicsGetCurrentContext() {\n        let center = CGPoint(x: rect.midX, y: rect.midY)\n        let radius = min(rect.width, rect.height) / 4\n        let startAngle: CGFloat = 0\n        let endAngle: CGFloat = .pi * 2\n\n        context.setFillColor(UIColor.blue.cgColor)\n        context.addArc(center: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        context.fillPath()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드는 뷰의 중심에 파란색 원을 그립니다. 이제 이 뷰에 터치 이벤트를 추가해 사용자 인터랙션을 구현해봅시다."}],"\n",["$","h2",null,{"id":"2a533929","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"터치 이벤트 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIKit에서는 다양한 터치 이벤트를 처리할 수 있는 메서드를 제공합니다. 그 중 가장 중요한 메서드들은 다음과 같습니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"touchesBegan(_:with:)","position":{"start":{"line":55,"column":3,"offset":1442},"end":{"line":55,"column":26,"offset":1465}}}],"position":{"start":{"line":55,"column":3,"offset":1442},"end":{"line":55,"column":26,"offset":1465}}},"children":"touchesBegan(_:with:)"}}]}],"\n",["$","li","li-1",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"touchesMoved(_:with:)","position":{"start":{"line":56,"column":3,"offset":1468},"end":{"line":56,"column":26,"offset":1491}}}],"position":{"start":{"line":56,"column":3,"offset":1468},"end":{"line":56,"column":26,"offset":1491}}},"children":"touchesMoved(_:with:)"}}]}],"\n",["$","li","li-2",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"touchesEnded(_:with:)","position":{"start":{"line":57,"column":3,"offset":1494},"end":{"line":57,"column":26,"offset":1517}}}],"position":{"start":{"line":57,"column":3,"offset":1494},"end":{"line":57,"column":26,"offset":1517}}},"children":"touchesEnded(_:with:)"}}]}],"\n",["$","li","li-3",{"children":["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"touchesCancelled(_:with:)","position":{"start":{"line":58,"column":3,"offset":1520},"end":{"line":58,"column":30,"offset":1547}}}],"position":{"start":{"line":58,"column":3,"offset":1520},"end":{"line":58,"column":30,"offset":1547}}},"children":"touchesCancelled(_:with:)"}}]}],"\n"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 시작 위치: \\(location)\")\n    }\n}\n\noverride func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 이동 위치: \\(location)\")\n    }\n}\n\noverride func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 종료 위치: \\(location)\")\n    }\n}\n\noverride func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 취소 위치: \\(location)\")\n    }\n}\n"}],"position":{"start":{"line":60,"column":1,"offset":1549},"end":{"line":88,"column":4,"offset":2392}}},"children":"override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 시작 위치: \\(location)\")\n    }\n}\n\noverride func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 이동 위치: \\(location)\")\n    }\n}\n\noverride func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 종료 위치: \\(location)\")\n    }\n}\n\noverride func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {\n    if let touch = touches.first {\n        let location = touch.location(in: self)\n        print(\"터치 취소 위치: \\(location)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 메서드들은 각각 터치가 시작될 때, 이동할 때, 종료될 때, 그리고 취소될 때 호출됩니다. 콘솔에 터치 위치를 출력하는 간단한 예제를 통해 각 메서드의 역할을 이해해보세요."}],"\n",["$","h2",null,{"id":"748c4215","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실제 구현 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 실제로 터치 이벤트에 반응해 도형의 색상을 변경하는 예제를 만들어보겠습니다. 다음은 사용자가 특정 위치를 터치할 때마다 원의 색상이 변경되도록 하는 코드입니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":96,"column":1,"offset":2601},"end":{"line":148,"column":4,"offset":4133}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 터치 이벤트가 발생할 때마다 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"changeCircleColor()","position":{"start":{"line":150,"column":25,"offset":4159},"end":{"line":150,"column":46,"offset":4180}}}],"position":{"start":{"line":150,"column":25,"offset":4159},"end":{"line":150,"column":46,"offset":4180}}},"children":"changeCircleColor()"}}]," 메서드를 호출하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setNeedsDisplay()","position":{"start":{"line":150,"column":58,"offset":4192},"end":{"line":150,"column":77,"offset":4211}}}],"position":{"start":{"line":150,"column":58,"offset":4192},"end":{"line":150,"column":77,"offset":4211}}},"children":"setNeedsDisplay()"}}]," 메서드를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"draw(_:)","position":{"start":{"line":150,"column":86,"offset":4220},"end":{"line":150,"column":96,"offset":4230}}}],"position":{"start":{"line":150,"column":86,"offset":4220},"end":{"line":150,"column":96,"offset":4230}}},"children":"draw(_:)"}}]," 메서드가 다시 호출되도록 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"circleColor","position":{"start":{"line":150,"column":116,"offset":4250},"end":{"line":150,"column":129,"offset":4263}}}],"position":{"start":{"line":150,"column":116,"offset":4250},"end":{"line":150,"column":129,"offset":4263}}},"children":"circleColor"}}]," 프로퍼티를 통해 원의 색상이 변경됩니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 글에서는 UIKit을 사용하여 그리기와 터치 이벤트를 처리하는 방법을 알아보았습니다. 사용자는 이제 직접 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UIView","position":{"start":{"line":154,"column":62,"offset":4356},"end":{"line":154,"column":70,"offset":4364}}}],"position":{"start":{"line":154,"column":62,"offset":4356},"end":{"line":154,"column":70,"offset":4364}}},"children":"UIView"}}],"를 서브클래싱하여 복잡한 그리기와 인터랙션을 구현할 수 있습니다. 이 튜토리얼을 통해 iOS 애플리케이션에서 사용자 인터페이스를 더욱 풍부하게 만드는 방법을 터득할 수 있을 것입니다."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현","toc":[{"tagName":"h1","title":"UIKit으로 그리기 및 터치 이벤트 처리: 사용자 인터랙션 구현","id":"0033c146"},{"tagName":"h2","title":"UIView 확장하기","id":"62d532a0"},{"tagName":"h2","title":"draw(_:) 메서드 재정의","id":"1fbc78b9"},{"tagName":"h2","title":"터치 이벤트 처리","id":"2a533929"},{"tagName":"h2","title":"실제 구현 예제","id":"748c4215"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
