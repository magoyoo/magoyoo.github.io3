1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Hashable%EC%9D%B4-Swift-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-068f5199","d"],{"children":["__PAGE__?{\"slug\":\"Hashable이-Swift-성능을-어떻게-향상시키는지-알아보자-068f5199\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Hashable%EC%9D%B4-Swift-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-068f5199","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Hashable이-Swift-성능을-어떻게-향상시키는지-알아보자-068f5199\"}"},"styles":[]}],"segment":["slug","Hashable%EC%9D%B4-Swift-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-068f5199","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift의 'Hashable' 프로토콜이 성능을 어떻게 향상시키는지에 대해 설명합니다. 해시 함수를 이해하고, 컬렉션에서의 효율적인 데이터 접근 방식과 비교하며 'Hashable'이 실제로 어떻게 성능 향상에 기여하는지 다룹니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Hashable,성능,해시 함수"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Hashable%EC%9D%B4-Swift-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-068f5199"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift의 'Hashable' 프로토콜이 성능을 어떻게 향상시키는지에 대해 설명합니다. 해시 함수를 이해하고, 컬렉션에서의 효율적인 데이터 접근 방식과 비교하며 'Hashable'이 실제로 어떻게 성능 향상에 기여하는지 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Hashable%EC%9D%B4-Swift-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EB%8A%94%EC%A7%80-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90-068f5199"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift의 'Hashable' 프로토콜이 성능을 어떻게 향상시키는지에 대해 설명합니다. 해시 함수를 이해하고, 컬렉션에서의 효율적인 데이터 접근 방식과 비교하며 'Hashable'이 실제로 어떻게 성능 향상에 기여하는지 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-11"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"e75beb9d","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":9,"offset":48},"end":{"line":4,"column":19,"offset":58}}}],"position":{"start":{"line":4,"column":9,"offset":48},"end":{"line":4,"column":19,"offset":58}}},"children":"Hashable"}}]," 프로토콜은 데이터 구조의 성능을 극대화하는 중요한 역할을 합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":57,"offset":96},"end":{"line":4,"column":67,"offset":106}}}],"position":{"start":{"line":4,"column":57,"offset":96},"end":{"line":4,"column":67,"offset":106}}},"children":"Hashable"}}],"은 객체를 해시 값으로 변환하여 컬렉션 타입에서 효율적인 검색과 수정 작업을 가능하게 합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":127,"offset":166},"end":{"line":4,"column":137,"offset":176}}}],"position":{"start":{"line":4,"column":127,"offset":166},"end":{"line":4,"column":137,"offset":176}}},"children":"Hashable"}}],"이 정확히 어떤 방식으로 Swift의 성능을 향상시키는지에 대해 자세히 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"a3667b46","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Hashable 프로토콜이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":8,"offset":254},"end":{"line":8,"column":18,"offset":264}}}],"position":{"start":{"line":8,"column":8,"offset":254},"end":{"line":8,"column":18,"offset":264}}},"children":"Hashable"}}]," 프로토콜은 객체를 고유한 해시 값으로 변환할 수 있도록 합니다. 이 프로토콜을 준수하면 객체를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set","position":{"start":{"line":8,"column":72,"offset":318},"end":{"line":8,"column":77,"offset":323}}}],"position":{"start":{"line":8,"column":72,"offset":318},"end":{"line":8,"column":77,"offset":323}}},"children":"Set"}}]," 또는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Dictionary","position":{"start":{"line":8,"column":81,"offset":327},"end":{"line":8,"column":93,"offset":339}}}],"position":{"start":{"line":8,"column":81,"offset":327},"end":{"line":8,"column":93,"offset":339}}},"children":"Dictionary"}}],"와 같은 컬렉션 타입에 효과적으로 사용할 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":124,"offset":370},"end":{"line":8,"column":134,"offset":380}}}],"position":{"start":{"line":8,"column":124,"offset":370},"end":{"line":8,"column":134,"offset":380}}},"children":"Hashable"}}]," 프로토콜은 다음 두 가지 필수 요구사항을 포함합니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":10,"column":4,"offset":415},"end":{"line":10,"column":17,"offset":428}}}],"position":{"start":{"line":10,"column":4,"offset":415},"end":{"line":10,"column":17,"offset":428}}},"children":"hash(into:)"}}]," 메서드: 이 메서드는 객체의 해시 값을 계산합니다."]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":11,"column":4,"offset":461},"end":{"line":11,"column":15,"offset":472}}}],"position":{"start":{"line":11,"column":4,"offset":461},"end":{"line":11,"column":15,"offset":472}}},"children":"Equatable"}}]," 프로토콜 준수: ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":11,"column":25,"offset":482},"end":{"line":11,"column":35,"offset":492}}}],"position":{"start":{"line":11,"column":25,"offset":482},"end":{"line":11,"column":35,"offset":492}}},"children":"Hashable"}}]," 객체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==","position":{"start":{"line":11,"column":40,"offset":497},"end":{"line":11,"column":44,"offset":501}}}],"position":{"start":{"line":11,"column":40,"offset":497},"end":{"line":11,"column":44,"offset":501}}},"children":"=="}}]," 연산자를 구현해야 합니다."]}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Hashable {\n    var name: String\n    var age: Int\n\n    static func == (lhs: Person, rhs: Person) -> Bool {\n        return lhs.name == rhs.name && lhs.age == rhs.age\n    }\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(name)\n        hasher.combine(age)\n    }\n}\n"}],"position":{"start":{"line":13,"column":1,"offset":518},"end":{"line":27,"column":4,"offset":824}}},"children":"struct Person: Hashable {\n    var name: String\n    var age: Int\n\n    static func == (lhs: Person, rhs: Person) -> Bool {\n        return lhs.name == rhs.name && lhs.age == rhs.age\n    }\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(name)\n        hasher.combine(age)\n    }\n}\n"}}]}],"\n",["$","h2",null,{"id":"7594d18b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"해시 함수와 성능 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":31,"column":1,"offset":843},"end":{"line":31,"column":11,"offset":853}}}],"position":{"start":{"line":31,"column":1,"offset":843},"end":{"line":31,"column":11,"offset":853}}},"children":"Hashable"}}],"을 구현함으로써 얻는 가장 큰 이점은 해시 함수를 통해 데이터 접근이 매우 효율적이라는 것입니다. 해시 함수는 객체를 고유한 해시 값으로 변환합니다. 이 해시 값은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set","position":{"start":{"line":31,"column":103,"offset":945},"end":{"line":31,"column":108,"offset":950}}}],"position":{"start":{"line":31,"column":103,"offset":945},"end":{"line":31,"column":108,"offset":950}}},"children":"Set"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Dictionary","position":{"start":{"line":31,"column":110,"offset":952},"end":{"line":31,"column":122,"offset":964}}}],"position":{"start":{"line":31,"column":110,"offset":952},"end":{"line":31,"column":122,"offset":964}}},"children":"Dictionary"}}],"와 같은 컬렉션에서 데이터를 빠르게 찾아볼 수 있도록 돕습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"동일한 데이터가 다른 메모리 위치에 저장될 수 있는 상황을 피하기 위해, 해시 함수는 데이터를 고유한 값으로 매핑합니다. 이를 통해 시간 복잡도를 O(1)로 낮출 수 있습니다. 이는 선형 검색의 경우 O(n) 시간 복잡도를 가지는 것과 비교할 때 매우 큰 이점입니다."}],"\n",["$","h2",null,{"id":"979ca1db","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"컬렉션에서의 사용"}],"\n",["$","h3",null,{"id":"448ab73b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Set"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set","position":{"start":{"line":39,"column":1,"offset":1175},"end":{"line":39,"column":6,"offset":1180}}}],"position":{"start":{"line":39,"column":1,"offset":1175},"end":{"line":39,"column":6,"offset":1180}}},"children":"Set"}}],"은 고유한 값들만 저장하는 컬렉션입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set","position":{"start":{"line":39,"column":29,"offset":1203},"end":{"line":39,"column":34,"offset":1208}}}],"position":{"start":{"line":39,"column":29,"offset":1203},"end":{"line":39,"column":34,"offset":1208}}},"children":"Set"}}]," 내부에서 값의 존재 여부를 확인하거나 값을 삽입하는 작업은 해시 값을 사용하여 매우 빠르게 수행됩니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var peopleSet: Set<Person> = []\n\nlet person1 = Person(name: \"Alice\", age: 30)\nlet person2 = Person(name: \"Bob\", age: 25)\n\npeopleSet.insert(person1)\npeopleSet.insert(person2)\n\nif peopleSet.contains(person1) {\n    print(\"\\\\(person1.name)는 Set에 존재합니다.\")\n}\n"}],"position":{"start":{"line":41,"column":1,"offset":1268},"end":{"line":53,"column":4,"offset":1533}}},"children":"var peopleSet: Set<Person> = []\n\nlet person1 = Person(name: \"Alice\", age: 30)\nlet person2 = Person(name: \"Bob\", age: 25)\n\npeopleSet.insert(person1)\npeopleSet.insert(person2)\n\nif peopleSet.contains(person1) {\n    print(\"\\\\(person1.name)는 Set에 존재합니다.\")\n}\n"}}]}],"\n",["$","h3",null,{"id":"860e1f95","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Dictionary"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Dictionary","position":{"start":{"line":57,"column":1,"offset":1551},"end":{"line":57,"column":13,"offset":1563}}}],"position":{"start":{"line":57,"column":1,"offset":1551},"end":{"line":57,"column":13,"offset":1563}}},"children":"Dictionary"}}],"는 키-값 쌍으로 데이터를 저장하는 컬렉션입니다. 이 경우 키는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":57,"column":49,"offset":1599},"end":{"line":57,"column":59,"offset":1609}}}],"position":{"start":{"line":57,"column":49,"offset":1599},"end":{"line":57,"column":59,"offset":1609}}},"children":"Hashable"}}]," 프로토콜을 준수해야 합니다. 해시 값을 사용해서 키를 찾아내므로, 키를 통한 값 검색이 매우 빠릅니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"var peopleDict: [String: Person] = [:]\n\npeopleDict[person1.name] = person1\npeopleDict[person2.name] = person2\n\nif let foundPerson = peopleDict[person1.name] {\n    print(\"\\\\(foundPerson.name)의 나이는 \\\\(foundPerson.age)입니다.\")\n}\n"}],"position":{"start":{"line":59,"column":1,"offset":1669},"end":{"line":68,"column":4,"offset":1905}}},"children":"var peopleDict: [String: Person] = [:]\n\npeopleDict[person1.name] = person1\npeopleDict[person2.name] = person2\n\nif let foundPerson = peopleDict[person1.name] {\n    print(\"\\\\(foundPerson.name)의 나이는 \\\\(foundPerson.age)입니다.\")\n}\n"}}]}],"\n",["$","h2",null,{"id":"8f35dc81","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Hashable이 없는 경우"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["만약 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":72,"column":4,"offset":1930},"end":{"line":72,"column":14,"offset":1940}}}],"position":{"start":{"line":72,"column":4,"offset":1930},"end":{"line":72,"column":14,"offset":1940}}},"children":"Hashable"}}]," 프로토콜이 없다면 컬렉션 내부에서 데이터 접근에 시간이 더 많이 걸릴 것입니다. 예를 들어 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array","position":{"start":{"line":72,"column":66,"offset":1992},"end":{"line":72,"column":73,"offset":1999}}}],"position":{"start":{"line":72,"column":66,"offset":1992},"end":{"line":72,"column":73,"offset":1999}}},"children":"Array"}}]," 내부에서 특정 객체를 검색하려면 모든 요소를 순차적으로 검사해야 합니다. 이는 시간 복잡도가 O(n)인 작업입니다. 반면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":72,"column":143,"offset":2069},"end":{"line":72,"column":153,"offset":2079}}}],"position":{"start":{"line":72,"column":143,"offset":2069},"end":{"line":72,"column":153,"offset":2079}}},"children":"Hashable"}}],"을 이용하면 해시 테이블을 통해 O(1)에 가까운 시간에 원소를 찾을 수 있습니다."]}],"\n",["$","h2",null,{"id":"7e7af7e6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실세계 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":76,"column":1,"offset":2138},"end":{"line":76,"column":11,"offset":2148}}}],"position":{"start":{"line":76,"column":1,"offset":2138},"end":{"line":76,"column":11,"offset":2148}}},"children":"Hashable"}}],"의 이점을 더 잘 이해하기 위해 실세계 예제를 살펴보겠습니다. 예를 들어, 학생 관리 시스템에서 각 학생을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":76,"column":71,"offset":2208},"end":{"line":76,"column":81,"offset":2218}}}],"position":{"start":{"line":76,"column":71,"offset":2208},"end":{"line":76,"column":81,"offset":2218}}},"children":"Hashable"}}]," Key로 사용하여 성적을 관리한다고 가정해 봅시다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Student: Hashable {\n    var id: Int\n    var name: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        hasher.combine(name)\n    }\n\n    static func == (lhs: Student, rhs: Student) -> Bool {\n        return lhs.id == rhs.id && lhs.name == rhs.name\n    }\n}\n\nvar grades: [Student: String] = [:]\n\nlet student1 = Student(id: 1, name: \"Tom\")\nlet student2 = Student(id: 2, name: \"Jerry\")\n\ngrades[student1] = \"A\"\ngrades[student2] = \"B\"\n\nif let grade = grades[student1] {\n    print(\"\\\\(student1.name) 학생의 성적은 \\\\(grade)입니다.\")\n}\n\n"}],"position":{"start":{"line":78,"column":1,"offset":2249},"end":{"line":105,"column":4,"offset":2818}}},"children":"struct Student: Hashable {\n    var id: Int\n    var name: String\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(id)\n        hasher.combine(name)\n    }\n\n    static func == (lhs: Student, rhs: Student) -> Bool {\n        return lhs.id == rhs.id && lhs.name == rhs.name\n    }\n}\n\nvar grades: [Student: String] = [:]\n\nlet student1 = Student(id: 1, name: \"Tom\")\nlet student2 = Student(id: 2, name: \"Jerry\")\n\ngrades[student1] = \"A\"\ngrades[student2] = \"B\"\n\nif let grade = grades[student1] {\n    print(\"\\\\(student1.name) 학생의 성적은 \\\\(grade)입니다.\")\n}\n\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":107,"column":10,"offset":2829},"end":{"line":107,"column":20,"offset":2839}}}],"position":{"start":{"line":107,"column":10,"offset":2829},"end":{"line":107,"column":20,"offset":2839}}},"children":"Hashable"}}],"이 얼마나 간편하게 컬렉션을 관리할 수 있게 하는지 볼 수 있습니다. 객체를 키로 사용해 효율적으로 데이터를 찾고 수정할 수 있습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":111,"column":8,"offset":2930},"end":{"line":111,"column":18,"offset":2940}}}],"position":{"start":{"line":111,"column":8,"offset":2930},"end":{"line":111,"column":18,"offset":2940}}},"children":"Hashable"}}]," 프로토콜을 구현하면 데이터 접근 및 수정 시간 복잡도가 O(1)로 개선됩니다. 이는 특히 데이터 양이 많아질수록 큰 성능 이점을 제공합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set","position":{"start":{"line":111,"column":98,"offset":3020},"end":{"line":111,"column":103,"offset":3025}}}],"position":{"start":{"line":111,"column":98,"offset":3020},"end":{"line":111,"column":103,"offset":3025}}},"children":"Set"}}],"이나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Dictionary","position":{"start":{"line":111,"column":106,"offset":3028},"end":{"line":111,"column":118,"offset":3040}}}],"position":{"start":{"line":111,"column":106,"offset":3028},"end":{"line":111,"column":118,"offset":3040}}},"children":"Dictionary"}}],"와 같은 컬렉션을 사용할 때 필수적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":111,"column":140,"offset":3062},"end":{"line":111,"column":150,"offset":3072}}}],"position":{"start":{"line":111,"column":140,"offset":3062},"end":{"line":111,"column":150,"offset":3072}}},"children":"Hashable"}}],"을 구현하여 최대의 성능을 끌어내야 합니다. 이 글이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":111,"column":180,"offset":3102},"end":{"line":111,"column":190,"offset":3112}}}],"position":{"start":{"line":111,"column":180,"offset":3102},"end":{"line":111,"column":190,"offset":3112}}},"children":"Hashable"}}],"이 Swift의 성능을 어떻게 향상시키는지에 대해 명확히 이해하는 데 도움이 되었기를 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자","toc":[{"tagName":"h1","title":"Hashable이 Swift 성능을 어떻게 향상시키는지 알아보자","id":"e75beb9d"},{"tagName":"h2","title":"Hashable 프로토콜이란?","id":"a3667b46"},{"tagName":"h2","title":"해시 함수와 성능 향상","id":"7594d18b"},{"tagName":"h2","title":"컬렉션에서의 사용","id":"979ca1db"},{"tagName":"h3","title":"Set","id":"448ab73b"},{"tagName":"h3","title":"Dictionary","id":"860e1f95"},{"tagName":"h2","title":"Hashable이 없는 경우","id":"8f35dc81"},{"tagName":"h2","title":"실세계 예제","id":"7e7af7e6"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
