1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-Identifiable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-Identifiable-프로토콜을-사용하는-방법\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-Identifiable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-Identifiable-프로토콜을-사용하는-방법\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-Identifiable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯? | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다."}],["$","meta","3",{"name":"keywords","content":"swift,기본문법"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Identifiable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯? | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯? | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Identifiable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯? | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:T139b,
## Swift에서 Identifiable 프로토콜을 사용하는 방법

Swift의 `Identifiable` 프로토콜은 SwiftUI와 함께 사용될 때 매우 유용한 기능을 제공합니다. 이 프로토콜은 컬렉션의 각 요소를 고유하게 식별할 수 있게 해주며, SwiftUI에서 목록을 효율적으로 관리하는 데 중요한 역할을 합니다. 이 글에서는 `Identifiable` 프로토콜의 기본 개념, 사용법, 그리고 실용적인 예제를 통해 이 프로토콜을 자세히 설명하겠습니다.

## 1. Identifiable 프로토콜의 이해

`Identifiable` 프로토콜은 Swift의 표준 라이브러리에서 제공되며, 특정 유형의 객체가 고유 식별자를 가지고 있음을 나타냅니다. 이 프로토콜은 주로 SwiftUI에서 리스트나 컬렉션 뷰를 다룰 때 사용됩니다. `Identifiable` 프로토콜을 채택한 객체는 고유한 `id` 속성을 가져야 합니다.

```swift
protocol Identifiable {
    associatedtype ID: Hashable
    var id: Self.ID { get }
}
```

## 2. Identifiable 프로토콜 구현

### 기본적인 사용 예

기본적으로 `Identifiable` 프로토콜을 사용하려면, 해당 객체에 `id` 속성을 추가해야 합니다. 예를 들어, `Person` 구조체를 만들고 이를 `Identifiable` 프로토콜에 적합하게 만들 수 있습니다.

```swift
struct Person: Identifiable {
    var id: UUID
    var name: String
    var age: Int
}
```

이 예제에서 `Person` 구조체는 `UUID` 타입의 `id` 속성을 가지며, 이는 고유 식별자로 사용됩니다.

### 자동 ID 생성

Swift에서는 `id` 속성을 명시적으로 지정하지 않아도, `Identifiable` 프로토콜을 자동으로 구현할 수 있는 편리한 방법이 있습니다. 만약 `id` 속성을 생략하고, 다른 속성을 `ID` 타입으로 설정하면 됩니다.

```swift
struct Person: Identifiable {
    var id = UUID() // 자동으로 UUID 생성
    var name: String
    var age: Int
}
```

### 커스텀 ID 속성

기본 타입이 아닌 커스텀 타입의 ID를 사용하고자 할 때는, 직접 `ID` 타입을 정의할 수 있습니다.

```swift
struct Book: Identifiable {
    var id: String
    var title: String
    var author: String
}
```

## 3. Identifiable와 SwiftUI

`Identifiable` 프로토콜은 SwiftUI에서 목록을 생성하고 관리하는 데 특히 유용합니다. SwiftUI의 `List` 뷰는 `Identifiable` 프로토콜을 준수하는 데이터 컬렉션을 사용하여 각 행을 고유하게 식별할 수 있습니다.

### List 사용 예

```swift
import SwiftUI

struct Person: Identifiable {
    var id = UUID()
    var name: String
    var age: Int
}

struct ContentView: View {
    let people = [
        Person(name: "Alice", age: 25),
        Person(name: "Bob", age: 30),
        Person(name: "Charlie", age: 35)
    ]

    var body: some View {
        List(people) { person in
            Text("\(person.name), \(person.age) years old")
        }
    }
}
```

위 코드에서는 `List` 뷰가 `Identifiable` 프로토콜을 준수하는 `Person` 객체의 배열을 사용하여 각 행을 생성합니다. `List` 뷰는 `id` 속성을 사용하여 각 `Person` 객체를 고유하게 식별합니다.

### ForEach와 Identifiable

`ForEach` 뷰를 사용하여 동적 뷰 생성을 할 때도 `Identifiable` 프로토콜을 사용할 수 있습니다.

```swift
import SwiftUI

struct ContentView: View {
    let people = [
        Person(name: "Alice", age: 25),
        Person(name: "Bob", age: 30),
        Person(name: "Charlie", age: 35)
    ]

    var body: some View {
        VStack {
            ForEach(people) { person in
                Text("\(person.name), \(person.age) years old")
            }
        }
    }
}
```

이 예제에서도 `ForEach` 뷰가 `Identifiable` 프로토콜을 준수하는 `Person` 객체의 배열을 사용하여 각 텍스트 뷰를 생성합니다.

## 4. Identifiable 프로토콜의 장점

- **코드 간결성**: `Identifiable` 프로토콜을 사용하면 고유 식별자를 쉽게 정의할 수 있어 코드가 간결해집니다.
- **SwiftUI 통합**: SwiftUI의 `List`나 `ForEach`와 같은 뷰와 자연스럽게 통합되어 동적 목록을 쉽게 관리할 수 있습니다.
- **유지보수성**: 고유 식별자를 통해 데이터의 변화와 상태를 명확하게 관리할 수 있어 코드의 유지보수성이 높아집니다.

## 결론

Swift의 `Identifiable` 프로토콜은 고유 식별자를 통해 객체를 관리하고, SwiftUI와의 통합을 통해 동적 목록을 효율적으로 처리할 수 있는 강력한 도구입니다. 다양한 예제를 통해 `Identifiable` 프로토콜의 사용법을 익히고, 실제 프로젝트에서 이를 활용하여 더욱 간결하고 유지보수하기 쉬운 코드를 작성해 보세요.

더 많은 정보는 [Apple Developer Documentation](https://developer.apple.com/documentation/swift/identifiable)에서 확인할 수 있습니다.
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯?"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯?"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"2f02da7e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 Identifiable 프로토콜을 사용하는 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":4,"column":8,"offset":47},"end":{"line":4,"column":22,"offset":61}}}],"position":{"start":{"line":4,"column":8,"offset":47},"end":{"line":4,"column":22,"offset":61}}},"children":"Identifiable"}}]," 프로토콜은 SwiftUI와 함께 사용될 때 매우 유용한 기능을 제공합니다. 이 프로토콜은 컬렉션의 각 요소를 고유하게 식별할 수 있게 해주며, SwiftUI에서 목록을 효율적으로 관리하는 데 중요한 역할을 합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":4,"column":150,"offset":189},"end":{"line":4,"column":164,"offset":203}}}],"position":{"start":{"line":4,"column":150,"offset":189},"end":{"line":4,"column":164,"offset":203}}},"children":"Identifiable"}}]," 프로토콜의 기본 개념, 사용법, 그리고 실용적인 예제를 통해 이 프로토콜을 자세히 설명하겠습니다."]}],"\n",["$","h2",null,{"id":"6491f5d5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. Identifiable 프로토콜의 이해"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":8,"column":15,"offset":303}}}],"position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":8,"column":15,"offset":303}}},"children":"Identifiable"}}]," 프로토콜은 Swift의 표준 라이브러리에서 제공되며, 특정 유형의 객체가 고유 식별자를 가지고 있음을 나타냅니다. 이 프로토콜은 주로 SwiftUI에서 리스트나 컬렉션 뷰를 다룰 때 사용됩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":8,"column":125,"offset":413},"end":{"line":8,"column":139,"offset":427}}}],"position":{"start":{"line":8,"column":125,"offset":413},"end":{"line":8,"column":139,"offset":427}}},"children":"Identifiable"}}]," 프로토콜을 채택한 객체는 고유한 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":8,"column":158,"offset":446},"end":{"line":8,"column":162,"offset":450}}}],"position":{"start":{"line":8,"column":158,"offset":446},"end":{"line":8,"column":162,"offset":450}}},"children":"id"}}]," 속성을 가져야 합니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Identifiable {\n    associatedtype ID: Hashable\n    var id: Self.ID { get }\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":465},"end":{"line":15,"column":4,"offset":563}}},"children":"protocol Identifiable {\n    associatedtype ID: Hashable\n    var id: Self.ID { get }\n}\n"}}]}],"\n",["$","h2",null,{"id":"3d01248b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. Identifiable 프로토콜 구현"}],"\n",["$","h3",null,{"id":"137e0aa1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본적인 사용 예"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["기본적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":21,"column":7,"offset":614},"end":{"line":21,"column":21,"offset":628}}}],"position":{"start":{"line":21,"column":7,"offset":614},"end":{"line":21,"column":21,"offset":628}}},"children":"Identifiable"}}]," 프로토콜을 사용하려면, 해당 객체에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":21,"column":42,"offset":649},"end":{"line":21,"column":46,"offset":653}}}],"position":{"start":{"line":21,"column":42,"offset":649},"end":{"line":21,"column":46,"offset":653}}},"children":"id"}}]," 속성을 추가해야 합니다. 예를 들어, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":21,"column":68,"offset":675},"end":{"line":21,"column":76,"offset":683}}}],"position":{"start":{"line":21,"column":68,"offset":675},"end":{"line":21,"column":76,"offset":683}}},"children":"Person"}}]," 구조체를 만들고 이를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":21,"column":89,"offset":696},"end":{"line":21,"column":103,"offset":710}}}],"position":{"start":{"line":21,"column":89,"offset":696},"end":{"line":21,"column":103,"offset":710}}},"children":"Identifiable"}}]," 프로토콜에 적합하게 만들 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Identifiable {\n    var id: UUID\n    var name: String\n    var age: Int\n}\n"}],"position":{"start":{"line":23,"column":1,"offset":734},"end":{"line":29,"column":4,"offset":833}}},"children":"struct Person: Identifiable {\n    var id: UUID\n    var name: String\n    var age: Int\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":31,"column":8,"offset":842},"end":{"line":31,"column":16,"offset":850}}}],"position":{"start":{"line":31,"column":8,"offset":842},"end":{"line":31,"column":16,"offset":850}}},"children":"Person"}}]," 구조체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"UUID","position":{"start":{"line":31,"column":22,"offset":856},"end":{"line":31,"column":28,"offset":862}}}],"position":{"start":{"line":31,"column":22,"offset":856},"end":{"line":31,"column":28,"offset":862}}},"children":"UUID"}}]," 타입의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":31,"column":33,"offset":867},"end":{"line":31,"column":37,"offset":871}}}],"position":{"start":{"line":31,"column":33,"offset":867},"end":{"line":31,"column":37,"offset":871}}},"children":"id"}}]," 속성을 가지며, 이는 고유 식별자로 사용됩니다."]}],"\n",["$","h3",null,{"id":"57d01eb4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"자동 ID 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":35,"column":10,"offset":923},"end":{"line":35,"column":14,"offset":927}}}],"position":{"start":{"line":35,"column":10,"offset":923},"end":{"line":35,"column":14,"offset":927}}},"children":"id"}}]," 속성을 명시적으로 지정하지 않아도, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":35,"column":35,"offset":948},"end":{"line":35,"column":49,"offset":962}}}],"position":{"start":{"line":35,"column":35,"offset":948},"end":{"line":35,"column":49,"offset":962}}},"children":"Identifiable"}}]," 프로토콜을 자동으로 구현할 수 있는 편리한 방법이 있습니다. 만약 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":35,"column":87,"offset":1000},"end":{"line":35,"column":91,"offset":1004}}}],"position":{"start":{"line":35,"column":87,"offset":1000},"end":{"line":35,"column":91,"offset":1004}}},"children":"id"}}]," 속성을 생략하고, 다른 속성을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ID","position":{"start":{"line":35,"column":109,"offset":1022},"end":{"line":35,"column":113,"offset":1026}}}],"position":{"start":{"line":35,"column":109,"offset":1022},"end":{"line":35,"column":113,"offset":1026}}},"children":"ID"}}]," 타입으로 설정하면 됩니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Identifiable {\n    var id = UUID() // 자동으로 UUID 생성\n    var name: String\n    var age: Int\n}\n"}],"position":{"start":{"line":37,"column":1,"offset":1043},"end":{"line":43,"column":4,"offset":1161}}},"children":"struct Person: Identifiable {\n    var id = UUID() // 자동으로 UUID 생성\n    var name: String\n    var age: Int\n}\n"}}]}],"\n",["$","h3",null,{"id":"045c699f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"커스텀 ID 속성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["기본 타입이 아닌 커스텀 타입의 ID를 사용하고자 할 때는, 직접 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ID","position":{"start":{"line":47,"column":38,"offset":1215},"end":{"line":47,"column":42,"offset":1219}}}],"position":{"start":{"line":47,"column":38,"offset":1215},"end":{"line":47,"column":42,"offset":1219}}},"children":"ID"}}]," 타입을 정의할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Book: Identifiable {\n    var id: String\n    var title: String\n    var author: String\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1237},"end":{"line":55,"column":4,"offset":1343}}},"children":"struct Book: Identifiable {\n    var id: String\n    var title: String\n    var author: String\n}\n"}}]}],"\n",["$","h2",null,{"id":"300dd128","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. Identifiable와 SwiftUI"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":59,"column":1,"offset":1374},"end":{"line":59,"column":15,"offset":1388}}}],"position":{"start":{"line":59,"column":1,"offset":1374},"end":{"line":59,"column":15,"offset":1388}}},"children":"Identifiable"}}]," 프로토콜은 SwiftUI에서 목록을 생성하고 관리하는 데 특히 유용합니다. SwiftUI의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":59,"column":67,"offset":1440},"end":{"line":59,"column":73,"offset":1446}}}],"position":{"start":{"line":59,"column":67,"offset":1440},"end":{"line":59,"column":73,"offset":1446}}},"children":"List"}}]," 뷰는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":59,"column":77,"offset":1450},"end":{"line":59,"column":91,"offset":1464}}}],"position":{"start":{"line":59,"column":77,"offset":1450},"end":{"line":59,"column":91,"offset":1464}}},"children":"Identifiable"}}]," 프로토콜을 준수하는 데이터 컬렉션을 사용하여 각 행을 고유하게 식별할 수 있습니다."]}],"\n",["$","h3",null,{"id":"cb12feaf","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"List 사용 예"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct Person: Identifiable {\n    var id = UUID()\n    var name: String\n    var age: Int\n}\n\nstruct ContentView: View {\n    let people = [\n        Person(name: \"Alice\", age: 25),\n        Person(name: \"Bob\", age: 30),\n        Person(name: \"Charlie\", age: 35)\n    ]\n\n    var body: some View {\n        List(people) { person in\n            Text(\"\\(person.name), \\(person.age) years old\")\n        }\n    }\n}\n"}],"position":{"start":{"line":63,"column":1,"offset":1528},"end":{"line":85,"column":4,"offset":1956}}},"children":"import SwiftUI\n\nstruct Person: Identifiable {\n    var id = UUID()\n    var name: String\n    var age: Int\n}\n\nstruct ContentView: View {\n    let people = [\n        Person(name: \"Alice\", age: 25),\n        Person(name: \"Bob\", age: 30),\n        Person(name: \"Charlie\", age: 35)\n    ]\n\n    var body: some View {\n        List(people) { person in\n            Text(\"\\(person.name), \\(person.age) years old\")\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":87,"column":9,"offset":1966},"end":{"line":87,"column":15,"offset":1972}}}],"position":{"start":{"line":87,"column":9,"offset":1966},"end":{"line":87,"column":15,"offset":1972}}},"children":"List"}}]," 뷰가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":87,"column":19,"offset":1976},"end":{"line":87,"column":33,"offset":1990}}}],"position":{"start":{"line":87,"column":19,"offset":1976},"end":{"line":87,"column":33,"offset":1990}}},"children":"Identifiable"}}]," 프로토콜을 준수하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":87,"column":45,"offset":2002},"end":{"line":87,"column":53,"offset":2010}}}],"position":{"start":{"line":87,"column":45,"offset":2002},"end":{"line":87,"column":53,"offset":2010}}},"children":"Person"}}]," 객체의 배열을 사용하여 각 행을 생성합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":87,"column":79,"offset":2036},"end":{"line":87,"column":85,"offset":2042}}}],"position":{"start":{"line":87,"column":79,"offset":2036},"end":{"line":87,"column":85,"offset":2042}}},"children":"List"}}]," 뷰는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"id","position":{"start":{"line":87,"column":89,"offset":2046},"end":{"line":87,"column":93,"offset":2050}}}],"position":{"start":{"line":87,"column":89,"offset":2046},"end":{"line":87,"column":93,"offset":2050}}},"children":"id"}}]," 속성을 사용하여 각 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":87,"column":105,"offset":2062},"end":{"line":87,"column":113,"offset":2070}}}],"position":{"start":{"line":87,"column":105,"offset":2062},"end":{"line":87,"column":113,"offset":2070}}},"children":"Person"}}]," 객체를 고유하게 식별합니다."]}],"\n",["$","h3",null,{"id":"b7d521b2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"ForEach와 Identifiable"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ForEach","position":{"start":{"line":91,"column":1,"offset":2115},"end":{"line":91,"column":10,"offset":2124}}}],"position":{"start":{"line":91,"column":1,"offset":2115},"end":{"line":91,"column":10,"offset":2124}}},"children":"ForEach"}}]," 뷰를 사용하여 동적 뷰 생성을 할 때도 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":91,"column":33,"offset":2147},"end":{"line":91,"column":47,"offset":2161}}}],"position":{"start":{"line":91,"column":33,"offset":2147},"end":{"line":91,"column":47,"offset":2161}}},"children":"Identifiable"}}]," 프로토콜을 사용할 수 있습니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    let people = [\n        Person(name: \"Alice\", age: 25),\n        Person(name: \"Bob\", age: 30),\n        Person(name: \"Charlie\", age: 35)\n    ]\n\n    var body: some View {\n        VStack {\n            ForEach(people) { person in\n                Text(\"\\(person.name), \\(person.age) years old\")\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":93,"column":1,"offset":2181},"end":{"line":111,"column":4,"offset":2560}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    let people = [\n        Person(name: \"Alice\", age: 25),\n        Person(name: \"Bob\", age: 30),\n        Person(name: \"Charlie\", age: 35)\n    ]\n\n    var body: some View {\n        VStack {\n            ForEach(people) { person in\n                Text(\"\\(person.name), \\(person.age) years old\")\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서도 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ForEach","position":{"start":{"line":113,"column":9,"offset":2570},"end":{"line":113,"column":18,"offset":2579}}}],"position":{"start":{"line":113,"column":9,"offset":2570},"end":{"line":113,"column":18,"offset":2579}}},"children":"ForEach"}}]," 뷰가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":113,"column":22,"offset":2583},"end":{"line":113,"column":36,"offset":2597}}}],"position":{"start":{"line":113,"column":22,"offset":2583},"end":{"line":113,"column":36,"offset":2597}}},"children":"Identifiable"}}]," 프로토콜을 준수하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":113,"column":48,"offset":2609},"end":{"line":113,"column":56,"offset":2617}}}],"position":{"start":{"line":113,"column":48,"offset":2609},"end":{"line":113,"column":56,"offset":2617}}},"children":"Person"}}]," 객체의 배열을 사용하여 각 텍스트 뷰를 생성합니다."]}],"\n",["$","h2",null,{"id":"82b4803d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. Identifiable 프로토콜의 장점"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"코드 간결성"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":117,"column":15,"offset":2691},"end":{"line":117,"column":29,"offset":2705}}}],"position":{"start":{"line":117,"column":15,"offset":2691},"end":{"line":117,"column":29,"offset":2705}}},"children":"Identifiable"}}]," 프로토콜을 사용하면 고유 식별자를 쉽게 정의할 수 있어 코드가 간결해집니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"SwiftUI 통합"}],": SwiftUI의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List","position":{"start":{"line":118,"column":28,"offset":2776},"end":{"line":118,"column":34,"offset":2782}}}],"position":{"start":{"line":118,"column":28,"offset":2776},"end":{"line":118,"column":34,"offset":2782}}},"children":"List"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ForEach","position":{"start":{"line":118,"column":36,"offset":2784},"end":{"line":118,"column":45,"offset":2793}}}],"position":{"start":{"line":118,"column":36,"offset":2784},"end":{"line":118,"column":45,"offset":2793}}},"children":"ForEach"}}],"와 같은 뷰와 자연스럽게 통합되어 동적 목록을 쉽게 관리할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"유지보수성"}],": 고유 식별자를 통해 데이터의 변화와 상태를 명확하게 관리할 수 있어 코드의 유지보수성이 높아집니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":123,"column":8,"offset":2918},"end":{"line":123,"column":22,"offset":2932}}}],"position":{"start":{"line":123,"column":8,"offset":2918},"end":{"line":123,"column":22,"offset":2932}}},"children":"Identifiable"}}]," 프로토콜은 고유 식별자를 통해 객체를 관리하고, SwiftUI와의 통합을 통해 동적 목록을 효율적으로 처리할 수 있는 강력한 도구입니다. 다양한 예제를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Identifiable","position":{"start":{"line":123,"column":111,"offset":3021},"end":{"line":123,"column":125,"offset":3035}}}],"position":{"start":{"line":123,"column":111,"offset":3021},"end":{"line":123,"column":125,"offset":3035}}},"children":"Identifiable"}}]," 프로토콜의 사용법을 익히고, 실제 프로젝트에서 이를 활용하여 더욱 간결하고 유지보수하기 쉬운 코드를 작성해 보세요."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["더 많은 정보는 ",["$","$Le",null,{"props":{"href":"https://developer.apple.com/documentation/swift/identifiable","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swift/identifiable"},"children":[{"type":"text","value":"Apple Developer Documentation","position":{"start":{"line":125,"column":11,"offset":3112},"end":{"line":125,"column":40,"offset":3141}}}],"position":{"start":{"line":125,"column":10,"offset":3111},"end":{"line":125,"column":103,"offset":3204}}},"children":"Apple Developer Documentation"},"post":{"title":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯?","description":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다.","date":"2024-05-29T11:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"기본문법","path":"/tags/기본문법","id":"기본문법"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"","readMin":"5.2","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"Swift에서-Identifiable-프로토콜을-사용하는-방법","content":"$f","category":"swift"},"language":"kr"}],"에서 확인할 수 있습니다."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift에서 Identifiable 프로토콜을 사용하는 방법! 쉬운듯 어려운듯?","toc":[{"tagName":"h2","title":"Swift에서 Identifiable 프로토콜을 사용하는 방법","id":"2f02da7e"},{"tagName":"h2","title":"1. Identifiable 프로토콜의 이해","id":"6491f5d5"},{"tagName":"h2","title":"2. Identifiable 프로토콜 구현","id":"3d01248b"},{"tagName":"h3","title":"기본적인 사용 예","id":"137e0aa1"},{"tagName":"h3","title":"자동 ID 생성","id":"57d01eb4"},{"tagName":"h3","title":"커스텀 ID 속성","id":"045c699f"},{"tagName":"h2","title":"3. Identifiable와 SwiftUI","id":"300dd128"},{"tagName":"h3","title":"List 사용 예","id":"cb12feaf"},{"tagName":"h3","title":"ForEach와 Identifiable","id":"b7d521b2"},{"tagName":"h2","title":"4. Identifiable 프로토콜의 장점","id":"82b4803d"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
