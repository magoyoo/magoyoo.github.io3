1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EB%93%B1-Swift-%EB%A7%9E%EC%B6%A4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-9afd82e9","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-디자인-패턴-구현하기-싱글턴-옵저버-팩토리-패턴-등-Swift-맞춤-디자인-패턴-심층-분석-9afd82e9\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EB%93%B1-Swift-%EB%A7%9E%EC%B6%A4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-9afd82e9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-디자인-패턴-구현하기-싱글턴-옵저버-팩토리-패턴-등-Swift-맞춤-디자인-패턴-심층-분석-9afd82e9\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EB%93%B1-Swift-%EB%A7%9E%EC%B6%A4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-9afd82e9","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift에서 가장 널리 사용되는 디자인 패턴인 싱글턴, 옵저버, 팩토리 패턴에 대해 깊이 있게 분석하고, Swift 코드를 사용해 이들을 어떻게 구현할 수 있는지 다룰 것입니다."}],["$","meta","3",{"name":"keywords","content":"Swift,디자인 패턴,싱글턴,옵저버,팩토리"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EB%93%B1-Swift-%EB%A7%9E%EC%B6%A4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-9afd82e9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift에서 가장 널리 사용되는 디자인 패턴인 싱글턴, 옵저버, 팩토리 패턴에 대해 깊이 있게 분석하고, Swift 코드를 사용해 이들을 어떻게 구현할 수 있는지 다룰 것입니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%8B%B1%EA%B8%80%ED%84%B4-%EC%98%B5%EC%A0%80%EB%B2%84-%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4-%EB%93%B1-Swift-%EB%A7%9E%EC%B6%A4-%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8C%A8%ED%84%B4-%EC%8B%AC%EC%B8%B5-%EB%B6%84%EC%84%9D-9afd82e9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift에서 가장 널리 사용되는 디자인 패턴인 싱글턴, 옵저버, 팩토리 패턴에 대해 깊이 있게 분석하고, Swift 코드를 사용해 이들을 어떻게 구현할 수 있는지 다룰 것입니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fb3ba687","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift는 Apple의 iOS, macOS, watchOS 및 tvOS 애플리케이션 개발을 위해 만들어진 프로그래밍 언어로, 높은 성능과 안전성을 제공하는 동시에 사용하기 쉬운 언어로 설계되었습니다. 이 글에서는 Swift에서 디자인 패턴을 어떻게 구현할 수 있는지에 대해 알아보고, 대표적인 싱글턴(Singleton), 옵저버(Observer), 팩토리(Factory) 패턴을 심층 분석하겠습니다."}],"\n",["$","h2",null,{"id":"e1c2d287","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"싱글턴 패턴"}],"\n",["$","h3",null,{"id":"476966c5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"싱글턴 패턴(Singleton)은 클래스의 인스턴스가 하나만 생성되고, 호출될 때마다 동일한 인스턴스를 반환하는 패턴입니다. 이 패턴은 전역 변수를 대신하여 사용할 수 있으며, 인스턴스가 애플리케이션 내에서 고유한 상태를 유지해야 할 때 유용합니다."}],"\n",["$","h3",null,{"id":"7f04c43e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"구현 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 싱글턴 패턴을 구현하는 것은 매우 간단합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"static","position":{"start":{"line":14,"column":35,"offset":497},"end":{"line":14,"column":43,"offset":505}}}],"position":{"start":{"line":14,"column":35,"offset":497},"end":{"line":14,"column":43,"offset":505}}},"children":"static"}}]," 키워드와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"private init()","position":{"start":{"line":14,"column":49,"offset":511},"end":{"line":14,"column":65,"offset":527}}}],"position":{"start":{"line":14,"column":49,"offset":511},"end":{"line":14,"column":65,"offset":527}}},"children":"private init()"}}]," 메서드를 사용하여 클래스의 인스턴스가 하나만 생성되도록 보장할 수 있습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Singleton {\n    static let shared = Singleton()\n    private init() {}\n    func doSomething() {\n        print(\"Doing something...\")\n    }\n}\n\nlet singleton = Singleton.shared\nsingleton.doSomething()\n"}],"position":{"start":{"line":16,"column":1,"offset":572},"end":{"line":27,"column":4,"offset":787}}},"children":"class Singleton {\n    static let shared = Singleton()\n    private init() {}\n    func doSomething() {\n        print(\"Doing something...\")\n    }\n}\n\nlet singleton = Singleton.shared\nsingleton.doSomething()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Singleton","position":{"start":{"line":29,"column":7,"offset":795},"end":{"line":29,"column":18,"offset":806}}}],"position":{"start":{"line":29,"column":7,"offset":795},"end":{"line":29,"column":18,"offset":806}}},"children":"Singleton"}}]," 클래스의 인스턴스가 오직 하나만 존재하도록 보장합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"shared","position":{"start":{"line":29,"column":50,"offset":838},"end":{"line":29,"column":58,"offset":846}}}],"position":{"start":{"line":29,"column":50,"offset":838},"end":{"line":29,"column":58,"offset":846}}},"children":"shared"}}],"라는 정적 속성에 인스턴스를 저장하고, 외부에서 직접 인스턴스를 생성하지 못하도록 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"init","position":{"start":{"line":29,"column":104,"offset":892},"end":{"line":29,"column":110,"offset":898}}}],"position":{"start":{"line":29,"column":104,"offset":892},"end":{"line":29,"column":110,"offset":898}}},"children":"init"}}]," 메서드를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"private","position":{"start":{"line":29,"column":116,"offset":904},"end":{"line":29,"column":125,"offset":913}}}],"position":{"start":{"line":29,"column":116,"offset":904},"end":{"line":29,"column":125,"offset":913}}},"children":"private"}}],"으로 선언합니다."]}],"\n",["$","h2",null,{"id":"a927e298","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"옵저버 패턴"}],"\n",["$","h3",null,{"id":"476966c5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"옵저버 패턴(Observer)은 객체의 상태 변화를 관찰하는 옵저버들이 있고, 상태가 변할 때마다 자동으로 모든 옵저버들에게 통보되는 패턴입니다. 이 패턴은 주로 이벤트 처리 시스템에서 사용됩니다."}],"\n",["$","h3",null,{"id":"7f04c43e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"구현 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 옵저버 패턴을 구현하려면 프로토콜(protocol)과 델리게이트(delegate) 패턴을 함께 사용합니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Observer {\n    func update(subject: Any)\n}\n\nclass Subject {\n    var observers = [Observer]()\n    var state: Int = { didSet { notifyObservers() } }()\n    func addObserver(observer: Observer) {\n        observers.append(observer)\n    }\n    private func notifyObservers() {\n        for observer in observers {\n            observer.update(subject: self)\n        }\n    }\n}\n\nclass ConcreteObserver: Observer {\n    func update(subject: Any) {\n        if let subject = subject as? Subject {\n            print(\"State has changed to: \\(subject.state)\")\n        }\n    }\n}\n\nlet subject = Subject()\nlet observer = ConcreteObserver()\nsubject.addObserver(observer: observer)\nsubject.state = 10\n"}],"position":{"start":{"line":41,"column":1,"offset":1135},"end":{"line":71,"column":4,"offset":1834}}},"children":"protocol Observer {\n    func update(subject: Any)\n}\n\nclass Subject {\n    var observers = [Observer]()\n    var state: Int = { didSet { notifyObservers() } }()\n    func addObserver(observer: Observer) {\n        observers.append(observer)\n    }\n    private func notifyObservers() {\n        for observer in observers {\n            observer.update(subject: self)\n        }\n    }\n}\n\nclass ConcreteObserver: Observer {\n    func update(subject: Any) {\n        if let subject = subject as? Subject {\n            print(\"State has changed to: \\(subject.state)\")\n        }\n    }\n}\n\nlet subject = Subject()\nlet observer = ConcreteObserver()\nsubject.addObserver(observer: observer)\nsubject.state = 10\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드는 옵저버 패턴을 구현한 예입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Observer","position":{"start":{"line":73,"column":26,"offset":1861},"end":{"line":73,"column":36,"offset":1871}}}],"position":{"start":{"line":73,"column":26,"offset":1861},"end":{"line":73,"column":36,"offset":1871}}},"children":"Observer"}}]," 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"update","position":{"start":{"line":73,"column":43,"offset":1878},"end":{"line":73,"column":51,"offset":1886}}}],"position":{"start":{"line":73,"column":43,"offset":1878},"end":{"line":73,"column":51,"offset":1886}}},"children":"update"}}]," 메서드를 요구하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Subject","position":{"start":{"line":73,"column":63,"offset":1898},"end":{"line":73,"column":72,"offset":1907}}}],"position":{"start":{"line":73,"column":63,"offset":1898},"end":{"line":73,"column":72,"offset":1907}}},"children":"Subject"}}]," 클래스는 옵저버 목록을 유지하며 상태가 변경될 때마다 옵저버들에게 통보합니다."]}],"\n",["$","h2",null,{"id":"afb1e168","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"팩토리 패턴"}],"\n",["$","h3",null,{"id":"476966c5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"팩토리 패턴(Factory)은 객체 생성 로직을 캡슐화하여 클라이언트 코드와 객체 생성 코드를 분리하는 패턴입니다. 이 패턴은 객체 생성의 원천을 감추고, 생성할 객체의 타입을 런타임에 결정하는 데 유용합니다."}],"\n",["$","h3",null,{"id":"7f04c43e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"구현 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 팩토리 패턴을 구현하려면 프로토콜과 클래스 메서드를 함께 사용할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Product {\n    func use()\n}\n\nclass ConcreteProductA: Product {\n    func use() {\n        print(\"Using Product A\")\n    }\n}\n\nclass ConcreteProductB: Product {\n    func use() {\n        print(\"Using Product B\")\n    }\n}\n\nclass Factory {\n    enum ProductType {\n        case A\n        case B\n    }\n\n    static func createProduct(type: ProductType) -> Product {\n        switch type {\n        case .A:\n            return ConcreteProductA()\n        case .B:\n            return ConcreteProductB()\n        }\n    }\n}\n\nlet productA = Factory.createProduct(type: .A)\nproductA.use()\n\nlet productB = Factory.createProduct(type: .B)\nproductB.use()\n"}],"position":{"start":{"line":85,"column":1,"offset":2155},"end":{"line":123,"column":4,"offset":2804}}},"children":"protocol Product {\n    func use()\n}\n\nclass ConcreteProductA: Product {\n    func use() {\n        print(\"Using Product A\")\n    }\n}\n\nclass ConcreteProductB: Product {\n    func use() {\n        print(\"Using Product B\")\n    }\n}\n\nclass Factory {\n    enum ProductType {\n        case A\n        case B\n    }\n\n    static func createProduct(type: ProductType) -> Product {\n        switch type {\n        case .A:\n            return ConcreteProductA()\n        case .B:\n            return ConcreteProductB()\n        }\n    }\n}\n\nlet productA = Factory.createProduct(type: .A)\nproductA.use()\n\nlet productB = Factory.createProduct(type: .B)\nproductB.use()\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드는 팩토리 패턴을 사용하여 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Product","position":{"start":{"line":125,"column":20,"offset":2825},"end":{"line":125,"column":29,"offset":2834}}}],"position":{"start":{"line":125,"column":20,"offset":2825},"end":{"line":125,"column":29,"offset":2834}}},"children":"Product"}}]," 객체를 생성하는 예입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Product","position":{"start":{"line":125,"column":45,"offset":2850},"end":{"line":125,"column":54,"offset":2859}}}],"position":{"start":{"line":125,"column":45,"offset":2850},"end":{"line":125,"column":54,"offset":2859}}},"children":"Product"}}]," 프로토콜은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"use","position":{"start":{"line":125,"column":61,"offset":2866},"end":{"line":125,"column":66,"offset":2871}}}],"position":{"start":{"line":125,"column":61,"offset":2866},"end":{"line":125,"column":66,"offset":2871}}},"children":"use"}}]," 메서드를 요구하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConcreteProductA","position":{"start":{"line":125,"column":78,"offset":2883},"end":{"line":125,"column":96,"offset":2901}}}],"position":{"start":{"line":125,"column":78,"offset":2883},"end":{"line":125,"column":96,"offset":2901}}},"children":"ConcreteProductA"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ConcreteProductB","position":{"start":{"line":125,"column":98,"offset":2903},"end":{"line":125,"column":116,"offset":2921}}}],"position":{"start":{"line":125,"column":98,"offset":2903},"end":{"line":125,"column":116,"offset":2921}}},"children":"ConcreteProductB"}}]," 클래스는 이를 구현합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Factory","position":{"start":{"line":125,"column":132,"offset":2937},"end":{"line":125,"column":141,"offset":2946}}}],"position":{"start":{"line":125,"column":132,"offset":2937},"end":{"line":125,"column":141,"offset":2946}}},"children":"Factory"}}]," 클래스의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"createProduct","position":{"start":{"line":125,"column":147,"offset":2952},"end":{"line":125,"column":162,"offset":2967}}}],"position":{"start":{"line":125,"column":147,"offset":2952},"end":{"line":125,"column":162,"offset":2967}}},"children":"createProduct"}}]," 메서드는 입력된 타입에 따라 올바른 제품 객체를 생성하여 반환합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서 디자인 패턴을 사용하는 것은 코드의 재사용성을 높이고, 유지보수를 용이하게 하며, 코드 품질을 향상시키는 데 매우 유용합니다. 싱글턴, 옵저버, 팩토리 패턴은 이러한 목표를 달성하는 데 도움이 되는 대표적인 패턴들입니다. 각 패턴의 개념과 구현 방법을 명확히 이해함으로써 더욱 효율적이고 유지보수하기 쉬운 코드를 작성할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석.","toc":[{"tagName":"h1","title":"Swift에서 디자인 패턴 구현하기: 싱글턴, 옵저버, 팩토리 패턴 등 Swift 맞춤 디자인 패턴 심층 분석","id":"fb3ba687"},{"tagName":"h2","title":"싱글턴 패턴","id":"e1c2d287"},{"tagName":"h3","title":"개요","id":"476966c5"},{"tagName":"h3","title":"구현 방법","id":"7f04c43e"},{"tagName":"h2","title":"옵저버 패턴","id":"a927e298"},{"tagName":"h3","title":"개요","id":"476966c5"},{"tagName":"h3","title":"구현 방법","id":"7f04c43e"},{"tagName":"h2","title":"팩토리 패턴","id":"afb1e168"},{"tagName":"h3","title":"개요","id":"476966c5"},{"tagName":"h3","title":"구현 방법","id":"7f04c43e"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
