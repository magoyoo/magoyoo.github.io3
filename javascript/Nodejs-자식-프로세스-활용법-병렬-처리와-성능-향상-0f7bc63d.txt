1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-0f7bc63d","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-자식-프로세스-활용법-병렬-처리와-성능-향상-0f7bc63d\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-0f7bc63d","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-자식-프로세스-활용법-병렬-처리와-성능-향상-0f7bc63d\"}"},"styles":[]}],"segment":["slug","Nodejs-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-0f7bc63d","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Node.js의 자식 프로세스를 활용해 병렬 처리를 구현하고 성능을 향상시키는 방법에 대해 알아봅니다. 이를 통해 Node.js 애플리케이션의 효율성과 반응성을 극대화할 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,자식 프로세스,병렬 처리,성능 향상"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-0f7bc63d"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Node.js의 자식 프로세스를 활용해 병렬 처리를 구현하고 성능을 향상시키는 방법에 대해 알아봅니다. 이를 통해 Node.js 애플리케이션의 효율성과 반응성을 극대화할 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%EC%9E%90%EC%8B%9D-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%9C%EC%9A%A9%EB%B2%95-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EC%99%80-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81-0f7bc63d"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Node.js의 자식 프로세스를 활용해 병렬 처리를 구현하고 성능을 향상시키는 방법에 대해 알아봅니다. 이를 통해 Node.js 애플리케이션의 효율성과 반응성을 극대화할 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-09"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"5936b673","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js는 비동기 I/O와 이벤트 기반 아키텍처로 유명한 서버사이드 자바스크립트 런타임입니다. 그러나 단일 스레드로 동작하기 때문에 CPU 집약적인 작업에서는 병목 현상이 발생할 수 있습니다. 이러한 문제를 해결하기 위해 Node.js는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"child_process","position":{"start":{"line":4,"column":137,"offset":174},"end":{"line":4,"column":152,"offset":189}}}],"position":{"start":{"line":4,"column":137,"offset":174},"end":{"line":4,"column":152,"offset":189}}},"children":"child_process"}}]," 모듈을 제공합니다. 이 글에서는 자식 프로세스를 활용해 병렬 처리를 구현하고 Node.js 애플리케이션의 성능을 향상시키는 방법에 대해 자세히 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"78a4eb6c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"자식 프로세스란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["자식 프로세스(child process)는 부모 프로세스(parent process)에 의해 생성된 독립적인 실행 단위를 말합니다. 자식 프로세스는 부모 프로세스와 별도로 실행되며, 자신만의 메모리 공간과 스레드를 가집니다. Node.js에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"child_process","position":{"start":{"line":8,"column":138,"offset":431},"end":{"line":8,"column":153,"offset":446}}}],"position":{"start":{"line":8,"column":138,"offset":431},"end":{"line":8,"column":153,"offset":446}}},"children":"child_process"}}]," 모듈을 사용하여 자식 프로세스를 생성하고 관리할 수 있습니다."]}],"\n",["$","h3",null,{"id":"e31d41c4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"자식 프로세스 생성 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js에서 자식 프로세스를 생성하는 방법은 세 가지가 있습니다: ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"exec","position":{"start":{"line":12,"column":41,"offset":542},"end":{"line":12,"column":47,"offset":548}}}],"position":{"start":{"line":12,"column":41,"offset":542},"end":{"line":12,"column":47,"offset":548}}},"children":"exec"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"spawn","position":{"start":{"line":12,"column":49,"offset":550},"end":{"line":12,"column":56,"offset":557}}}],"position":{"start":{"line":12,"column":49,"offset":550},"end":{"line":12,"column":56,"offset":557}}},"children":"spawn"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fork","position":{"start":{"line":12,"column":58,"offset":559},"end":{"line":12,"column":64,"offset":565}}}],"position":{"start":{"line":12,"column":58,"offset":559},"end":{"line":12,"column":64,"offset":565}}},"children":"fork"}}]," 함수입니다."]}],"\n",["$","h4","h4-0",{"children":"exec"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"exec","position":{"start":{"line":16,"column":1,"offset":585},"end":{"line":16,"column":7,"offset":591}}}],"position":{"start":{"line":16,"column":1,"offset":585},"end":{"line":16,"column":7,"offset":591}}},"children":"exec"}}]," 함수는 새로운 프로세스를 생성하고 명령어를 실행합니다. 모든 결과는 하나의 버퍼에 저장되므로, 큰 데이터를 처리할 때는 적절하지 않습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const { exec } = require('child_process');\n\nexec('ls -l', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.error(`stderr: ${stderr}`);\n});\n"}],"position":{"start":{"line":18,"column":1,"offset":671},"end":{"line":29,"column":4,"offset":927}}},"children":"const { exec } = require('child_process');\n\nexec('ls -l', (error, stdout, stderr) => {\n  if (error) {\n    console.error(`exec error: ${error}`);\n    return;\n  }\n  console.log(`stdout: ${stdout}`);\n  console.error(`stderr: ${stderr}`);\n});\n"}}]}],"\n",["$","h4","h4-1",{"children":"spawn"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"spawn","position":{"start":{"line":33,"column":1,"offset":941},"end":{"line":33,"column":8,"offset":948}}}],"position":{"start":{"line":33,"column":1,"offset":941},"end":{"line":33,"column":8,"offset":948}}},"children":"spawn"}}]," 함수는 명령어와 인자를 받아 새로운 프로세스를 생성합니다. 데이터는 스트림 방식으로 처리되므로, 큰 데이터를 다룰 때 적합합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const { spawn } = require('child_process');\n\nconst ls = spawn('ls', ['-l']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n"}],"position":{"start":{"line":35,"column":1,"offset":1023},"end":{"line":51,"column":4,"offset":1352}}},"children":"const { spawn } = require('child_process');\n\nconst ls = spawn('ls', ['-l']);\n\nls.stdout.on('data', (data) => {\n  console.log(`stdout: ${data}`);\n});\n\nls.stderr.on('data', (data) => {\n  console.error(`stderr: ${data}`);\n});\n\nls.on('close', (code) => {\n  console.log(`child process exited with code ${code}`);\n});\n"}}]}],"\n",["$","h4","h4-2",{"children":"fork"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fork","position":{"start":{"line":55,"column":1,"offset":1365},"end":{"line":55,"column":7,"offset":1371}}}],"position":{"start":{"line":55,"column":1,"offset":1365},"end":{"line":55,"column":7,"offset":1371}}},"children":"fork"}}]," 함수는 Node.js 모듈을 실행하는 새로운 프로세스를 생성합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fork","position":{"start":{"line":55,"column":46,"offset":1410},"end":{"line":55,"column":52,"offset":1416}}}],"position":{"start":{"line":55,"column":46,"offset":1410},"end":{"line":55,"column":52,"offset":1416}}},"children":"fork"}}],"는 주로 멀티프로세싱을 이용한 병렬 처리를 구현할 때 사용됩니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const { fork } = require('child_process');\n\nconst child = fork('child.js');\n\nchild.on('message', (message) => {\n  console.log('Message from child', message);\n});\n\nchild.send({ hello: 'world' });\n"}],"position":{"start":{"line":57,"column":1,"offset":1454},"end":{"line":67,"column":4,"offset":1666}}},"children":"const { fork } = require('child_process');\n\nconst child = fork('child.js');\n\nchild.on('message', (message) => {\n  console.log('Message from child', message);\n});\n\nchild.send({ hello: 'world' });\n"}}]}],"\n",["$","h2",null,{"id":"4160b2cb","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"병렬 처리와 성능 향상"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"자식 프로세스를 활용하면 Node.js 애플리케이션에서 병렬 처리가 가능해집니다. 이를 통해 CPU 집약적인 작업을 효율적으로 분산시키고, 전체 애플리케이션의 성능을 향상시킬 수 있습니다."}],"\n",["$","h3",null,{"id":"e4260927","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 병렬 데이터 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 자식 프로세스를 사용하여 병렬로 데이터를 처리하는 예제입니다."}],"\n",["$","h4","h4-3",{"children":"parent.js"}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const { fork } = require('child_process');\n\nconst data = [1, 2, 3, 4, 5, 6, 7, 8];\nconst numWorkers = 4;\nconst chunkSize = Math.ceil(data.length / numWorkers);\n\nfor (let i = 0; i < numWorkers; i++) {\n  const start = i * chunkSize;\n  const end = start + chunkSize;\n  const workerData = data.slice(start, end);\n  const worker = fork('worker.js');\n\n  worker.send(workerData);\n\n  worker.on('message', (result) => {\n    console.log(`Result from worker: ${result}`);\n  });\n}\n"}],"position":{"start":{"line":79,"column":1,"offset":1867},"end":{"line":98,"column":4,"offset":2353}}},"children":"const { fork } = require('child_process');\n\nconst data = [1, 2, 3, 4, 5, 6, 7, 8];\nconst numWorkers = 4;\nconst chunkSize = Math.ceil(data.length / numWorkers);\n\nfor (let i = 0; i < numWorkers; i++) {\n  const start = i * chunkSize;\n  const end = start + chunkSize;\n  const workerData = data.slice(start, end);\n  const worker = fork('worker.js');\n\n  worker.send(workerData);\n\n  worker.on('message', (result) => {\n    console.log(`Result from worker: ${result}`);\n  });\n}\n"}}]}],"\n",["$","h4","h4-4",{"children":"worker.js"}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"process.on('message', (data) => {\n  const result = data.map(x => x * 2);\n  process.send(result);\n  process.exit();\n});\n"}],"position":{"start":{"line":102,"column":1,"offset":2371},"end":{"line":108,"column":4,"offset":2507}}},"children":"process.on('message', (data) => {\n  const result = data.map(x => x * 2);\n  process.send(result);\n  process.exit();\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 데이터를 동일한 크기만큼 분할하고 각 분할된 데이터를 개별 자식 프로세스에서 병렬로 처리합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"parent.js","position":{"start":{"line":110,"column":63,"offset":2571},"end":{"line":110,"column":74,"offset":2582}}}],"position":{"start":{"line":110,"column":63,"offset":2571},"end":{"line":110,"column":74,"offset":2582}}},"children":"parent.js"}}],"는 데이터를 분할하고 각 자식 프로세스를 생성하여 작업을 할당합니다. 각 자식 프로세스(",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"worker.js","position":{"start":{"line":110,"column":123,"offset":2631},"end":{"line":110,"column":134,"offset":2642}}}],"position":{"start":{"line":110,"column":123,"offset":2631},"end":{"line":110,"column":134,"offset":2642}}},"children":"worker.js"}}],")는 할당된 데이터 부분을 처리한 후 결과를 부모 프로세스로 전송합니다. 이를 통해 병렬 처리가 가능해지고, 성능이 향상됩니다."]}],"\n",["$","h2",null,{"id":"20b558f7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"자식 프로세스 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"자식 프로세스를 생성하고 나면, 이를 효율적으로 관리해야 합니다. 자식 프로세스의 상태를 모니터링하고, 필요시 프로세스를 종료하는 등의 관리 작업이 필요합니다."}],"\n",["$","h3",null,{"id":"4771473f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 자식 프로세스 모니터링 및 종료"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 자식 프로세스의 상태를 모니터링하고 종료하는 예제입니다."}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"const { fork } = require('child_process');\n\nconst child = fork('child.js');\n\nchild.on('message', (message) => {\n  console.log('Message from child:', message);\n});\n\nchild.on('exit', (code) => {\n  console.log(`Child process exited with code ${code}`);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('Gracefully shutting down...\n');\n  child.kill('SIGINT');\n  process.exit();\n});\n"}],"position":{"start":{"line":120,"column":1,"offset":2885},"end":{"line":139,"column":4,"offset":3279}}},"children":"const { fork } = require('child_process');\n\nconst child = fork('child.js');\n\nchild.on('message', (message) => {\n  console.log('Message from child:', message);\n});\n\nchild.on('exit', (code) => {\n  console.log(`Child process exited with code ${code}`);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('Gracefully shutting down...\n');\n  child.kill('SIGINT');\n  process.exit();\n});\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 자식 프로세스를 생성하고, 메시지와 종료 이벤트를 처리합니다. 부모 프로세스가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SIGINT","position":{"start":{"line":141,"column":53,"offset":3333},"end":{"line":141,"column":61,"offset":3341}}}],"position":{"start":{"line":141,"column":53,"offset":3333},"end":{"line":141,"column":61,"offset":3341}}},"children":"SIGINT"}}]," 신호를 받을 때 자식 프로세스를 종료하는 방법도 보여줍니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js의 자식 프로세스를 활용하면 단일 스레드의 한계를 극복하고 병렬 처리를 통해 애플리케이션의 성능을 크게 향상시킬 수 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"exec","position":{"start":{"line":145,"column":79,"offset":3462},"end":{"line":145,"column":85,"offset":3468}}}],"position":{"start":{"line":145,"column":79,"offset":3462},"end":{"line":145,"column":85,"offset":3468}}},"children":"exec"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"spawn","position":{"start":{"line":145,"column":87,"offset":3470},"end":{"line":145,"column":94,"offset":3477}}}],"position":{"start":{"line":145,"column":87,"offset":3470},"end":{"line":145,"column":94,"offset":3477}}},"children":"spawn"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fork","position":{"start":{"line":145,"column":96,"offset":3479},"end":{"line":145,"column":102,"offset":3485}}}],"position":{"start":{"line":145,"column":96,"offset":3479},"end":{"line":145,"column":102,"offset":3485}}},"children":"fork"}}]," 함수를 적절히 사용하여 자식 프로세스를 생성하고 관리하는 방법을 익히면, 더욱 효율적이고 반응성 높은 애플리케이션을 개발할 수 있습니다. 이 글에서 소개한 자식 프로세스 활용법을 통해 여러분의 Node.js 프로젝트가 더욱 강력해지길 바랍니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상","toc":[{"tagName":"h1","title":"Node.js 자식 프로세스 활용법: 병렬 처리와 성능 향상","id":"5936b673"},{"tagName":"h2","title":"자식 프로세스란?","id":"78a4eb6c"},{"tagName":"h3","title":"자식 프로세스 생성 방법","id":"e31d41c4"},{"tagName":"h2","title":"병렬 처리와 성능 향상","id":"4160b2cb"},{"tagName":"h3","title":"예제: 병렬 데이터 처리","id":"e4260927"},{"tagName":"h2","title":"자식 프로세스 관리","id":"20b558f7"},{"tagName":"h3","title":"예제: 자식 프로세스 모니터링 및 종료","id":"4771473f"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
