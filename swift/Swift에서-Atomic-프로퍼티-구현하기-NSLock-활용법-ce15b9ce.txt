1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-Atomic-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-NSLock-%ED%99%9C%EC%9A%A9%EB%B2%95-ce15b9ce","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-Atomic-프로퍼티-구현하기-NSLock-활용법-ce15b9ce\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-Atomic-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-NSLock-%ED%99%9C%EC%9A%A9%EB%B2%95-ce15b9ce","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-Atomic-프로퍼티-구현하기-NSLock-활용법-ce15b9ce\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-Atomic-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-NSLock-%ED%99%9C%EC%9A%A9%EB%B2%95-ce15b9ce","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift에서 thread-safe한 atomic 프로퍼티를 구현하기 위해 NSLock을 활용하는 방법을 다룹니다. Swift의 동시성 문제를 해결하는 데 필요한 기초와 실습 예제를 통해 NSLock의 사용법을 자세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Atomic,NSLock,동시성"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Atomic-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-NSLock-%ED%99%9C%EC%9A%A9%EB%B2%95-ce15b9ce"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift에서 thread-safe한 atomic 프로퍼티를 구현하기 위해 NSLock을 활용하는 방법을 다룹니다. Swift의 동시성 문제를 해결하는 데 필요한 기초와 실습 예제를 통해 NSLock의 사용법을 자세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Atomic-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-NSLock-%ED%99%9C%EC%9A%A9%EB%B2%95-ce15b9ce"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift에서 thread-safe한 atomic 프로퍼티를 구현하기 위해 NSLock을 활용하는 방법을 다룹니다. Swift의 동시성 문제를 해결하는 데 필요한 기초와 실습 예제를 통해 NSLock의 사용법을 자세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner2.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner2.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-27"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"faf39c07","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift로 애플리케이션을 개발하다 보면 멀티스레드 환경에서 데이터 일관성을 유지하는 것이 중요합니다. 특히 여러 스레드가 동시에 접근할 수 있는 변수를 안전하게 다루는 것은 필수입니다. 이를 위해 'Atomic' 프로퍼티를 구현할 수 있으며, 이 과정에서 NSLock을 활용할 수 있습니다."}],"\n",["$","h2",null,{"id":"cb9aa739","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Atomic의 필요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Atomic 연산은 처리되는 동안 중단되지 않는 연산으로, 동시성 프로그래밍에서 중요한 개념입니다. 예를 들어, 여러 스레드가 같은 변수에 접근하는 경우, 중간에 다른 스레드가 변수의 값을 변경할 수 있습니다. 이로 인해 데이터 레이스(data race)와 같은 문제가 발생할 수 있습니다. 이를 방지하기 위해 Atomic 연산 또는 프로퍼티가 필요합니다."}],"\n",["$","h3",null,{"id":"58128829","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"데이터 레이스란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["데이터 레이스는 두 개 이상의 스레드가 동시에 같은 메모리 위치에 접근하여 데이터를 변경할 때 발생하는 문제입니다. 이 문제가 발생하면 예측 불가능한 동작이나 버그가 발생할 수 있습니다. Swift에서는 이러한 문제를 피하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":12,"column":130,"offset":567},"end":{"line":12,"column":138,"offset":575}}}],"position":{"start":{"line":12,"column":130,"offset":567},"end":{"line":12,"column":138,"offset":575}}},"children":"NSLock"}}],"을 사용하여 변수의 접근을 제어할 수 있습니다."]}],"\n",["$","h2",null,{"id":"abe86d82","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"NSLock을 사용한 Atomic 프로퍼티 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 NSLock을 사용하여 Atomic 프로퍼티를 구현하는 방법을 알아보겠습니다. NSLock은 기본적으로 두 작업이 동시에 실행되지 않도록 보장하는 잠금(lock) 메커니즘입니다."}],"\n",["$","h3",null,{"id":"96611b1e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"NSLock 기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["우선 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":20,"column":4,"offset":760},"end":{"line":20,"column":12,"offset":768}}}],"position":{"start":{"line":20,"column":4,"offset":760},"end":{"line":20,"column":12,"offset":768}}},"children":"NSLock"}}],"의 기본 사용법을 보겠습니다. 간단한 예제를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":20,"column":40,"offset":796},"end":{"line":20,"column":48,"offset":804}}}],"position":{"start":{"line":20,"column":40,"offset":796},"end":{"line":20,"column":48,"offset":804}}},"children":"NSLock"}}],"의 동작을 이해해 보죠."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass Counter {\n    private var value = 0\n    private let lock = NSLock()\n\n    func increment() {\n        lock.lock()\n        value += 1\n        lock.unlock()\n    }\n\n    func getValue() -> Int {\n        lock.lock()\n        let result = value\n        lock.unlock()\n        return result\n    }\n}\n\nlet counter = Counter()\ncounter.increment()\nprint(counter.getValue())  // 출력: 1\n"}],"position":{"start":{"line":22,"column":1,"offset":819},"end":{"line":46,"column":4,"offset":1225}}},"children":"import Foundation\n\nclass Counter {\n    private var value = 0\n    private let lock = NSLock()\n\n    func increment() {\n        lock.lock()\n        value += 1\n        lock.unlock()\n    }\n\n    func getValue() -> Int {\n        lock.lock()\n        let result = value\n        lock.unlock()\n        return result\n    }\n}\n\nlet counter = Counter()\ncounter.increment()\nprint(counter.getValue())  // 출력: 1\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위의 코드에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Counter","position":{"start":{"line":48,"column":9,"offset":1235},"end":{"line":48,"column":18,"offset":1244}}}],"position":{"start":{"line":48,"column":9,"offset":1235},"end":{"line":48,"column":18,"offset":1244}}},"children":"Counter"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value","position":{"start":{"line":48,"column":24,"offset":1250},"end":{"line":48,"column":31,"offset":1257}}}],"position":{"start":{"line":48,"column":24,"offset":1250},"end":{"line":48,"column":31,"offset":1257}}},"children":"value"}}],"라는 정수형 변수를 가지며, 이 값을 안전하게 증가시키기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":48,"column":66,"offset":1292},"end":{"line":48,"column":74,"offset":1300}}}],"position":{"start":{"line":48,"column":66,"offset":1292},"end":{"line":48,"column":74,"offset":1300}}},"children":"NSLock"}}]," 객체를 사용합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"increment","position":{"start":{"line":48,"column":86,"offset":1312},"end":{"line":48,"column":97,"offset":1323}}}],"position":{"start":{"line":48,"column":86,"offset":1312},"end":{"line":48,"column":97,"offset":1323}}},"children":"increment"}}]," 메서드와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"getValue","position":{"start":{"line":48,"column":103,"offset":1329},"end":{"line":48,"column":113,"offset":1339}}}],"position":{"start":{"line":48,"column":103,"offset":1329},"end":{"line":48,"column":113,"offset":1339}}},"children":"getValue"}}]," 메서드는 잠금과 잠금해제를 통해 동시성 문제를 피합니다."]}],"\n",["$","h3",null,{"id":"ad899da4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Atomic 프로퍼티로 확장하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 예제를 확장하여 진정한 의미의 Atomic 프로퍼티를 만들어 보겠습니다. 여기서는 제네릭을 사용하여 다양한 타입의 프로퍼티에 적용할 수 있도록 할 것입니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass Atomic<Value> {\n    private var value: Value\n    private let lock = NSLock()\n\n    init(_ value: Value) {\n        self.value = value\n    }\n\n    var get: Value {\n        lock.lock()\n        let result = value\n        lock.unlock()\n        return result\n    }\n\n    func set(_ newValue: Value) {\n        lock.lock()\n        value = newValue\n        lock.unlock()\n    }\n}\n\n// 사용 예제\nlet atomicInt = Atomic(0)\n\n// 쓰레드 안전하게 값 설정\nDispatchQueue.global().async {\n    for _ in 0..<1000 {\n        atomicInt.set(atomicInt.get + 1)\n    }\n}\n\nDispatchQueue.global().async {\n    for _ in 0..<1000 {\n        atomicInt.set(atomicInt.get + 1)\n    }\n}\n\n// 잠시 대기 후 결과 확인\nDispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n    print(atomicInt.get)  // 출력: 2000 (예상)\n}\n"}],"position":{"start":{"line":54,"column":1,"offset":1487},"end":{"line":99,"column":4,"offset":2271}}},"children":"import Foundation\n\nclass Atomic<Value> {\n    private var value: Value\n    private let lock = NSLock()\n\n    init(_ value: Value) {\n        self.value = value\n    }\n\n    var get: Value {\n        lock.lock()\n        let result = value\n        lock.unlock()\n        return result\n    }\n\n    func set(_ newValue: Value) {\n        lock.lock()\n        value = newValue\n        lock.unlock()\n    }\n}\n\n// 사용 예제\nlet atomicInt = Atomic(0)\n\n// 쓰레드 안전하게 값 설정\nDispatchQueue.global().async {\n    for _ in 0..<1000 {\n        atomicInt.set(atomicInt.get + 1)\n    }\n}\n\nDispatchQueue.global().async {\n    for _ in 0..<1000 {\n        atomicInt.set(atomicInt.get + 1)\n    }\n}\n\n// 잠시 대기 후 결과 확인\nDispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n    print(atomicInt.get)  // 출력: 2000 (예상)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 제네릭 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Atomic","position":{"start":{"line":101,"column":13,"offset":2285},"end":{"line":101,"column":21,"offset":2293}}}],"position":{"start":{"line":101,"column":13,"offset":2285},"end":{"line":101,"column":21,"offset":2293}}},"children":"Atomic"}}]," 클래스를 정의하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value","position":{"start":{"line":101,"column":33,"offset":2305},"end":{"line":101,"column":40,"offset":2312}}}],"position":{"start":{"line":101,"column":33,"offset":2305},"end":{"line":101,"column":40,"offset":2312}}},"children":"value"}}],"에 접근할 때마다 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"lock","position":{"start":{"line":101,"column":50,"offset":2322},"end":{"line":101,"column":56,"offset":2328}}}],"position":{"start":{"line":101,"column":50,"offset":2322},"end":{"line":101,"column":56,"offset":2328}}},"children":"lock"}}],"을 사용하여 동시성 문제를 피합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"get","position":{"start":{"line":101,"column":77,"offset":2349},"end":{"line":101,"column":82,"offset":2354}}}],"position":{"start":{"line":101,"column":77,"offset":2349},"end":{"line":101,"column":82,"offset":2354}}},"children":"get"}}]," 프로퍼티와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"set","position":{"start":{"line":101,"column":89,"offset":2361},"end":{"line":101,"column":94,"offset":2366}}}],"position":{"start":{"line":101,"column":89,"offset":2361},"end":{"line":101,"column":94,"offset":2366}}},"children":"set"}}]," 메서드를 통해 안전하게 값을 가져오고 설정할 수 있습니다."]}],"\n",["$","h2",null,{"id":"3ea27a4d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"요약"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 글에서는 Swift에서 'Atomic' 프로퍼티를 구현하는 방법을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":105,"column":40,"offset":2447},"end":{"line":105,"column":48,"offset":2455}}}],"position":{"start":{"line":105,"column":40,"offset":2447},"end":{"line":105,"column":48,"offset":2455}}},"children":"NSLock"}}],"을 사용하여 설명했습니다. 기본적인 동작 원리부터 실제 예제까지 다루었으며, 이를 통해 동시성 문제를 해결할 수 있는 방법을 제시했습니다. NSLock은 간단하지만 강력한 도구로, 멀티스레드 환경에서 데이터를 안전하게 관리하는 데 유용합니다. 다양한 상황에서 이러한 기법을 이용해 안전한 Swift 애플리케이션을 개발해 보세요."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법","toc":[{"tagName":"h1","title":"Swift에서 Atomic 프로퍼티 구현하기: NSLock 활용법","id":"faf39c07"},{"tagName":"h2","title":"Atomic의 필요성","id":"cb9aa739"},{"tagName":"h3","title":"데이터 레이스란?","id":"58128829"},{"tagName":"h2","title":"NSLock을 사용한 Atomic 프로퍼티 구현","id":"abe86d82"},{"tagName":"h3","title":"NSLock 기본 사용법","id":"96611b1e"},{"tagName":"h3","title":"Atomic 프로퍼티로 확장하기","id":"ad899da4"},{"tagName":"h2","title":"요약","id":"3ea27a4d"}],"language":"kr"}]}]]}]]
8:null
