1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EB%A1%9C-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A1%9C%EB%94%A9-%EB%B7%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-Circular-Loading-View-aafdcf42","d"],{"children":["__PAGE__?{\"slug\":\"Swift로-안드로이드-스타일-로딩-뷰-구현하기-Circular-Loading-View-aafdcf42\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EB%A1%9C-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A1%9C%EB%94%A9-%EB%B7%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-Circular-Loading-View-aafdcf42","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift로-안드로이드-스타일-로딩-뷰-구현하기-Circular-Loading-View-aafdcf42\"}"},"styles":[]}],"segment":["slug","Swift%EB%A1%9C-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A1%9C%EB%94%A9-%EB%B7%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-Circular-Loading-View-aafdcf42","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Swift를 사용해 안드로이드 스타일의 원형 로딩 뷰(Circular Loading View)를 구현하는 방법에 대해 설명합니다. iOS 개발자들이 Swift 언어로 애플리케이션의 로딩 화면을 멋지게 꾸밀 수 있도록 도와드릴 것입니다."}],["$","meta","3",{"name":"keywords","content":"Swift,iOS,로딩 뷰,UI 개발"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EB%A1%9C-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A1%9C%EB%94%A9-%EB%B7%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-Circular-Loading-View-aafdcf42"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Swift를 사용해 안드로이드 스타일의 원형 로딩 뷰(Circular Loading View)를 구현하는 방법에 대해 설명합니다. iOS 개발자들이 Swift 언어로 애플리케이션의 로딩 화면을 멋지게 꾸밀 수 있도록 도와드릴 것입니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EB%A1%9C-%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%A1%9C%EB%94%A9-%EB%B7%B0-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-Circular-Loading-View-aafdcf42"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Swift를 사용해 안드로이드 스타일의 원형 로딩 뷰(Circular Loading View)를 구현하는 방법에 대해 설명합니다. iOS 개발자들이 Swift 언어로 애플리케이션의 로딩 화면을 멋지게 꾸밀 수 있도록 도와드릴 것입니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
12:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
13:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T5ad,class CircularLoadingView: UIView {
    private var spinnerLayer: CAShapeLayer!

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayer()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupLayer()
    }

    private func setupLayer() {
        spinnerLayer = CAShapeLayer()
        layer.addSublayer(spinnerLayer)
        configureSpinnerLayer()
    }

    private func configureSpinnerLayer() {
        let arcCenter = CGPoint(x: bounds.width / 2, y: bounds.height / 2)
        let radius = min(bounds.width, bounds.height) / 2.0
        let startAngle = CGFloat(-Double.pi / 2)
        let endAngle = CGFloat(1.5 * Double.pi)

        let path = UIBezierPath(arcCenter: arcCenter, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
        spinnerLayer.path = path.cgPath
        spinnerLayer.strokeColor = UIColor.blue.cgColor
        spinnerLayer.fillColor = UIColor.clear.cgColor
        spinnerLayer.lineWidth = 5
        spinnerLayer.lineCap = .round

        startSpinning()
    }

    private func startSpinning() {
        let rotationAnimation = CABasicAnimation(keyPath: "transform.rotation")
        rotationAnimation.fromValue = 0
        rotationAnimation.toValue = Double.pi * 2
        rotationAnimation.duration = 1
        rotationAnimation.repeatCount = .infinity
        spinnerLayer.add(rotationAnimation, forKey: "rotation")
    }
}
f:T5ad,class CircularLoadingView: UIView {
    private var spinnerLayer: CAShapeLayer!

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayer()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupLayer()
    }

    private func setupLayer() {
        spinnerLayer = CAShapeLayer()
        layer.addSublayer(spinnerLayer)
        configureSpinnerLayer()
    }

    private func configureSpinnerLayer() {
        let arcCenter = CGPoint(x: bounds.width / 2, y: bounds.height / 2)
        let radius = min(bounds.width, bounds.height) / 2.0
        let startAngle = CGFloat(-Double.pi / 2)
        let endAngle = CGFloat(1.5 * Double.pi)

        let path = UIBezierPath(arcCenter: arcCenter, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
        spinnerLayer.path = path.cgPath
        spinnerLayer.strokeColor = UIColor.blue.cgColor
        spinnerLayer.fillColor = UIColor.clear.cgColor
        spinnerLayer.lineWidth = 5
        spinnerLayer.lineCap = .round

        startSpinning()
    }

    private func startSpinning() {
        let rotationAnimation = CABasicAnimation(keyPath: "transform.rotation")
        rotationAnimation.fromValue = 0
        rotationAnimation.toValue = Double.pi * 2
        rotationAnimation.duration = 1
        rotationAnimation.repeatCount = .infinity
        spinnerLayer.add(rotationAnimation, forKey: "rotation")
    }
}
10:T6ab,class CircularLoadingView: UIView {
    private var spinnerLayer: CAShapeLayer!
    var lineWidth: CGFloat = 5 {
        didSet {
            spinnerLayer.lineWidth = lineWidth
        }
    }
    var spinnerColor: UIColor = .blue {
        didSet {
            spinnerLayer.strokeColor = spinnerColor.cgColor
        }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayer()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupLayer()
    }

    private func setupLayer() {
        spinnerLayer = CAShapeLayer()
        layer.addSublayer(spinnerLayer)
        configureSpinnerLayer()
    }

    private func configureSpinnerLayer() {
        let arcCenter = CGPoint(x: bounds.width / 2, y: bounds.height / 2)
        let radius = min(bounds.width, bounds.height) / 2.0
        let startAngle = CGFloat(-Double.pi / 2)
        let endAngle = CGFloat(1.5 * Double.pi)

        let path = UIBezierPath(arcCenter: arcCenter, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
        spinnerLayer.path = path.cgPath
        spinnerLayer.strokeColor = spinnerColor.cgColor
        spinnerLayer.fillColor = UIColor.clear.cgColor
        spinnerLayer.lineWidth = lineWidth
        spinnerLayer.lineCap = .round

        startSpinning()
    }

    private func startSpinning() {
        let rotationAnimation = CABasicAnimation(keyPath: "transform.rotation")
        rotationAnimation.fromValue = 0
        rotationAnimation.toValue = Double.pi * 2
        rotationAnimation.duration = 1
        rotationAnimation.repeatCount = .infinity
        spinnerLayer.add(rotationAnimation, forKey: "rotation")
    }
}
11:T6ab,class CircularLoadingView: UIView {
    private var spinnerLayer: CAShapeLayer!
    var lineWidth: CGFloat = 5 {
        didSet {
            spinnerLayer.lineWidth = lineWidth
        }
    }
    var spinnerColor: UIColor = .blue {
        didSet {
            spinnerLayer.strokeColor = spinnerColor.cgColor
        }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayer()
    }

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupLayer()
    }

    private func setupLayer() {
        spinnerLayer = CAShapeLayer()
        layer.addSublayer(spinnerLayer)
        configureSpinnerLayer()
    }

    private func configureSpinnerLayer() {
        let arcCenter = CGPoint(x: bounds.width / 2, y: bounds.height / 2)
        let radius = min(bounds.width, bounds.height) / 2.0
        let startAngle = CGFloat(-Double.pi / 2)
        let endAngle = CGFloat(1.5 * Double.pi)

        let path = UIBezierPath(arcCenter: arcCenter, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)
        spinnerLayer.path = path.cgPath
        spinnerLayer.strokeColor = spinnerColor.cgColor
        spinnerLayer.fillColor = UIColor.clear.cgColor
        spinnerLayer.lineWidth = lineWidth
        spinnerLayer.lineCap = .round

        startSpinning()
    }

    private func startSpinning() {
        let rotationAnimation = CABasicAnimation(keyPath: "transform.rotation")
        rotationAnimation.fromValue = 0
        rotationAnimation.toValue = Double.pi * 2
        rotationAnimation.duration = 1
        rotationAnimation.repeatCount = .infinity
        spinnerLayer.add(rotationAnimation, forKey: "rotation")
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-14"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"f316a7e7","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"안드로이드 개발 환경에서는 원형으로 돌아가는 로딩 애니메이션이 매우 일반적입니다. 이러한 로딩 뷰는 사용자 경험을 향상시키고, 로드 중임을 명확하게 전달하는 데 유용합니다. 이 글에서는 Swift를 사용하여 iOS에서 안드로이드 스타일의 원형 로딩 뷰를 구현하는 방법을 설명하겠습니다."}],"\n",["$","h2",null,{"id":"80b6855c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. 프로젝트 설정"}],"\n",["$","h3",null,{"id":"a9772edc","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"새로운 Xcode 프로젝트 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저, 새로운 Xcode 프로젝트를 생성합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Single View App","position":{"start":{"line":9,"column":28,"offset":279},"end":{"line":9,"column":45,"offset":296}}}],"position":{"start":{"line":9,"column":28,"offset":279},"end":{"line":9,"column":45,"offset":296}}},"children":"Single View App"}}]," 템플릿을 선택한 후 프로젝트 이름과 기타 설정을 지정합니다. 여기서는 프로젝트 이름을 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CircularLoadingViewDemo","position":{"start":{"line":9,"column":94,"offset":345},"end":{"line":9,"column":119,"offset":370}}}],"position":{"start":{"line":9,"column":94,"offset":345},"end":{"line":9,"column":119,"offset":370}}},"children":"CircularLoadingViewDemo"}}],"로 설정하겠습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\nimport Foundation\n"}],"position":{"start":{"line":11,"column":1,"offset":382},"end":{"line":14,"column":4,"offset":425}}},"children":"import UIKit\nimport Foundation\n"}}]}],"\n",["$","h2",null,{"id":"f1ab5b58","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. 커스텀 로딩 뷰 클래스 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["팀에서 재사용할 수 있는 커스텀 로딩 뷰를 만들기 위해 새로운 Swift 파일을 생성합니다. 파일 이름은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CircularLoadingView","position":{"start":{"line":17,"column":60,"offset":509},"end":{"line":17,"column":81,"offset":530}}}],"position":{"start":{"line":17,"column":60,"offset":509},"end":{"line":17,"column":81,"offset":530}}},"children":"CircularLoadingView"}}],"로 합니다."]}],"\n",["$","h3",null,{"id":"da39a3ee","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CircularLoadingView","position":{"start":{"line":19,"column":5,"offset":542},"end":{"line":19,"column":26,"offset":563}}}],"position":{"start":{"line":19,"column":5,"offset":542},"end":{"line":19,"column":26,"offset":563}}},"children":"CircularLoadingView"}}]," 클래스 구현"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":21,"column":1,"offset":572},"end":{"line":66,"column":4,"offset":2037}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["클래스를 정의하고 스피너 레이어를 설정하는 초기화 메서드(",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"init","position":{"start":{"line":68,"column":33,"offset":2071},"end":{"line":68,"column":39,"offset":2077}}}],"position":{"start":{"line":68,"column":33,"offset":2071},"end":{"line":68,"column":39,"offset":2077}}},"children":"init"}}],")와 스피너 레이어의 구성 메서드를 작성했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CABasicAnimation","position":{"start":{"line":68,"column":67,"offset":2105},"end":{"line":68,"column":85,"offset":2123}}}],"position":{"start":{"line":68,"column":67,"offset":2105},"end":{"line":68,"column":85,"offset":2123}}},"children":"CABasicAnimation"}}],"을 사용하여 스피너가 무한히 회전하도록 했습니다."]}],"\n",["$","h2",null,{"id":"e381d8a9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. 뷰 컨트롤러에 CircularLoadingView 추가하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 이 커스텀 뷰를 뷰 컨트롤러에 추가해 보겠습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController.swift","position":{"start":{"line":71,"column":32,"offset":2222},"end":{"line":71,"column":54,"offset":2244}}}],"position":{"start":{"line":71,"column":32,"offset":2222},"end":{"line":71,"column":54,"offset":2244}}},"children":"ViewController.swift"}}]," 파일을 열어 다음과 같이 작성합니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import UIKit\n\nclass ViewController: UIViewController {\n    private var loadingView: CircularLoadingView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        addLoadingView()\n    }\n\n    private func addLoadingView() {\n        let size: CGFloat = 100\n        let frame = CGRect(x: (view.bounds.width - size) / 2, y: (view.bounds.height - size) / 2, width: size, height: size)\n        loadingView = CircularLoadingView(frame: frame)\n        view.addSubview(loadingView)\n    }\n}\n"}],"position":{"start":{"line":73,"column":1,"offset":2267},"end":{"line":92,"column":4,"offset":2811}}},"children":"import UIKit\n\nclass ViewController: UIViewController {\n    private var loadingView: CircularLoadingView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        addLoadingView()\n    }\n\n    private func addLoadingView() {\n        let size: CGFloat = 100\n        let frame = CGRect(x: (view.bounds.width - size) / 2, y: (view.bounds.height - size) / 2, width: size, height: size)\n        loadingView = CircularLoadingView(frame: frame)\n        view.addSubview(loadingView)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 프로젝트를 빌드하고 실행하면 원형 로딩 뷰가 화면 중앙에서 회전하는 것을 볼 수 있습니다."}],"\n",["$","h2",null,{"id":"320ccbc6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. 사용자 정의 옵션 추가"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"필요에 따라 더 많은 사용자 정의 옵션을 추가할 수 있습니다. 예를 들어, 스피너의 색상, 선 두께 등을 매개변수로 받아 설정할 수 있도록 합니다."}],"\n",["$","h3",null,{"id":"da39a3ee","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CircularLoadingView","position":{"start":{"line":99,"column":5,"offset":2975},"end":{"line":99,"column":26,"offset":2996}}}],"position":{"start":{"line":99,"column":5,"offset":2975},"end":{"line":99,"column":26,"offset":2996}}},"children":"CircularLoadingView"}}]," 개선"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$10"}],"position":{"start":{"line":101,"column":1,"offset":3001},"end":{"line":156,"column":4,"offset":4720}}},"children":"$11"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 스피너의 색상과 두께를 쉽게 변경할 수 있습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"// ViewController.swift\nloadingView = CircularLoadingView(frame: frame)\nloadingView.lineWidth = 8\nloadingView.spinnerColor = .red\nview.addSubview(loadingView)\n"}],"position":{"start":{"line":160,"column":1,"offset":4754},"end":{"line":166,"column":4,"offset":4925}}},"children":"// ViewController.swift\nloadingView = CircularLoadingView(frame: frame)\nloadingView.lineWidth = 8\nloadingView.spinnerColor = .red\nview.addSubview(loadingView)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이렇게 하면 붉은색의 더 두꺼운 스피너를 볼 수 있습니다."}],"\n",["$","h2",null,{"id":"ed8464a3","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"마무리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 글에서는 Swift를 사용해 안드로이드 스타일의 원형 로딩 뷰를 구현하는 방법을 다루었습니다. 기본적인 설정부터 시작해, 사용자 정의 옵션을 추가하는 방법까지 설명했습니다. 커스텀 로딩 뷰를 통해 앱의 사용자 경험을 향상시킬 수 있는 멋진 방법을 찾길 바랍니다."}]]}]}],["$","$L12",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L13",null,{"articleTitle":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View","toc":[{"tagName":"h1","title":"Swift로 안드로이드 스타일 로딩 뷰 구현하기: Circular Loading View","id":"f316a7e7"},{"tagName":"h2","title":"1. 프로젝트 설정","id":"80b6855c"},{"tagName":"h3","title":"새로운 Xcode 프로젝트 생성","id":"a9772edc"},{"tagName":"h2","title":"2. 커스텀 로딩 뷰 클래스 만들기","id":"f1ab5b58"},{"tagName":"h3","title":"$undefined","id":""},{"tagName":"h2","title":"3. 뷰 컨트롤러에 CircularLoadingView 추가하기","id":"e381d8a9"},{"tagName":"h2","title":"4. 사용자 정의 옵션 추가","id":"320ccbc6"},{"tagName":"h3","title":"$undefined","id":""},{"tagName":"h2","title":"마무리","id":"ed8464a3"}],"language":"kr"}]}]]}]]
8:null
