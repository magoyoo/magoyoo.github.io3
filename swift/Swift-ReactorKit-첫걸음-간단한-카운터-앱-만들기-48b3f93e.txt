1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-ReactorKit-%EC%B2%AB%EA%B1%B8%EC%9D%8C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%B9%B4%EC%9A%B4%ED%84%B0-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-48b3f93e","d"],{"children":["__PAGE__?{\"slug\":\"Swift-ReactorKit-첫걸음-간단한-카운터-앱-만들기-48b3f93e\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-ReactorKit-%EC%B2%AB%EA%B1%B8%EC%9D%8C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%B9%B4%EC%9A%B4%ED%84%B0-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-48b3f93e","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-ReactorKit-첫걸음-간단한-카운터-앱-만들기-48b3f93e\"}"},"styles":[]}],"segment":["slug","Swift-ReactorKit-%EC%B2%AB%EA%B1%B8%EC%9D%8C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%B9%B4%EC%9A%B4%ED%84%B0-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-48b3f93e","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 iOS 개발을 위해 스위프트와 ReactorKit을 사용해 간단한 카운터 앱을 만드는 방법을 설명합니다. 이 튜토리얼은 기본적인 구성 요소부터 시작하여 단계별로 진행하며, ReactorKit의 핵심 기능을 이해하는 데 도움을 줍니다."}],["$","meta","3",{"name":"keywords","content":"Swift,ReactorKit,iOS,카운터 앱"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-ReactorKit-%EC%B2%AB%EA%B1%B8%EC%9D%8C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%B9%B4%EC%9A%B4%ED%84%B0-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-48b3f93e"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 iOS 개발을 위해 스위프트와 ReactorKit을 사용해 간단한 카운터 앱을 만드는 방법을 설명합니다. 이 튜토리얼은 기본적인 구성 요소부터 시작하여 단계별로 진행하며, ReactorKit의 핵심 기능을 이해하는 데 도움을 줍니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-ReactorKit-%EC%B2%AB%EA%B1%B8%EC%9D%8C-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%B9%B4%EC%9A%B4%ED%84%B0-%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-48b3f93e"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 iOS 개발을 위해 스위프트와 ReactorKit을 사용해 간단한 카운터 앱을 만드는 방법을 설명합니다. 이 튜토리얼은 기본적인 구성 요소부터 시작하여 단계별로 진행하며, ReactorKit의 핵심 기능을 이해하는 데 도움을 줍니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T46e,import UIKit
import ReactorKit
import RxSwift
import RxCocoa

class CounterViewController: UIViewController, View {
    var disposeBag = DisposeBag()
    let increaseButton = UIButton()
    let decreaseButton = UIButton()
    let valueLabel = UILabel()

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.addSubview(increaseButton)
        self.view.addSubview(decreaseButton)
        self.view.addSubview(valueLabel)
        self.reactor = CounterReactor()
    }

    func bind(reactor: CounterReactor) {
        // Action: 버튼 클릭 시 액션 발생
        increaseButton.rx.tap
            .map { Reactor.Action.increase }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        decreaseButton.rx.tap
            .map { Reactor.Action.decrease }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        // State: 상태 변화 시 UI 업데이트
        reactor.state.map { $0.value }
            .distinctUntilChanged()
            .map { "\($0)" }
            .bind(to: valueLabel.rx.text)
            .disposed(by: disposeBag)
    }
}
f:T46e,import UIKit
import ReactorKit
import RxSwift
import RxCocoa

class CounterViewController: UIViewController, View {
    var disposeBag = DisposeBag()
    let increaseButton = UIButton()
    let decreaseButton = UIButton()
    let valueLabel = UILabel()

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.addSubview(increaseButton)
        self.view.addSubview(decreaseButton)
        self.view.addSubview(valueLabel)
        self.reactor = CounterReactor()
    }

    func bind(reactor: CounterReactor) {
        // Action: 버튼 클릭 시 액션 발생
        increaseButton.rx.tap
            .map { Reactor.Action.increase }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        decreaseButton.rx.tap
            .map { Reactor.Action.decrease }
            .bind(to: reactor.action)
            .disposed(by: disposeBag)

        // State: 상태 변화 시 UI 업데이트
        reactor.state.map { $0.value }
            .distinctUntilChanged()
            .map { "\($0)" }
            .bind(to: valueLabel.rx.text)
            .disposed(by: disposeBag)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-24"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"a95a3672","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 iOS 애플리케이션의 반응형 프로그래밍을 위한 아키텍처 라이브러리로, React 패턴을 기반으로 합니다. 이 튜토리얼에서는 ReactorKit을 사용하여 간단한 카운터 앱을 만드는 방법을 단계별로 설명하겠습니다. 이 과정을 통해 ReactorKit의 기본 개념과 주요 구성 요소를 익히게 될 것입니다."}],"\n",["$","h2",null,{"id":"e97d4bc1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"1. ReactorKit 소개"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"ReactorKit은 React 패턴을 적용한 아키텍처로, 애플리케이션 상태 관리와 뷰의 로직을 깔끔하게 분리하는 데 중점을 둡니다. 주요 구성 요소는 다음과 같습니다."}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Reactor"}],": 애플리케이션의 상태와 로직을 관리합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"View"}],": 사용자 인터페이스를 담당하며, Reactor의 상태 변화를 구독합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"Action"}],": 사용자가 발생시키는 이벤트들을 정의합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"Mutation"}],": Action이 발생했을 때 상태를 어떻게 변경할 것인지 정의합니다."]}],"\n",["$","li","li-4",{"children":[["$","strong",null,{"className":"font-black","children":"State"}],": 앱의 현재 상태를 나타냅니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 이 개념들을 실제 코드에서 어떻게 사용하는지 살펴보겠습니다."}],"\n",["$","h2",null,{"id":"b9926dd5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"2. 프로젝트 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["먼저, Xcode에서 새로운 프로젝트를 생성하고, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ReactorKit","position":{"start":{"line":20,"column":29,"offset":635},"end":{"line":20,"column":41,"offset":647}}}],"position":{"start":{"line":20,"column":29,"offset":635},"end":{"line":20,"column":41,"offset":647}}},"children":"ReactorKit"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RxSwift","position":{"start":{"line":20,"column":43,"offset":649},"end":{"line":20,"column":52,"offset":658}}}],"position":{"start":{"line":20,"column":43,"offset":649},"end":{"line":20,"column":52,"offset":658}}},"children":"RxSwift"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RxCocoa","position":{"start":{"line":20,"column":54,"offset":660},"end":{"line":20,"column":63,"offset":669}}}],"position":{"start":{"line":20,"column":54,"offset":660},"end":{"line":20,"column":63,"offset":669}}},"children":"RxCocoa"}}],"를 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CocoaPods","position":{"start":{"line":20,"column":65,"offset":671},"end":{"line":20,"column":76,"offset":682}}}],"position":{"start":{"line":20,"column":65,"offset":671},"end":{"line":20,"column":76,"offset":682}}},"children":"CocoaPods"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Swift Package Manager","position":{"start":{"line":20,"column":78,"offset":684},"end":{"line":20,"column":101,"offset":707}}}],"position":{"start":{"line":20,"column":78,"offset":684},"end":{"line":20,"column":101,"offset":707}}},"children":"Swift Package Manager"}}],"를 이용해 설치합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Podfile","position":{"start":{"line":20,"column":114,"offset":720},"end":{"line":20,"column":123,"offset":729}}}],"position":{"start":{"line":20,"column":114,"offset":720},"end":{"line":20,"column":123,"offset":729}}},"children":"Podfile"}}],"에 다음 내용을 추가한 뒤 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"pod install","position":{"start":{"line":20,"column":138,"offset":744},"end":{"line":20,"column":151,"offset":757}}}],"position":{"start":{"line":20,"column":138,"offset":744},"end":{"line":20,"column":151,"offset":757}}},"children":"pod install"}}],"을 실행합니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-ruby","node":{"type":"element","tagName":"code","properties":{"className":["language-ruby"]},"children":[{"type":"text","value":"pod 'ReactorKit'\npod 'RxSwift'\npod 'RxCocoa'\n"}],"position":{"start":{"line":22,"column":1,"offset":767},"end":{"line":26,"column":4,"offset":823}}},"children":"pod 'ReactorKit'\npod 'RxSwift'\npod 'RxCocoa'\n"}}]}],"\n",["$","h2",null,{"id":"4ec73a68","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"3. 기본 구조 설정"}],"\n",["$","h3",null,{"id":"af32b022","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Reactor 생성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Reactor","position":{"start":{"line":32,"column":1,"offset":857},"end":{"line":32,"column":10,"offset":866}}}],"position":{"start":{"line":32,"column":1,"offset":857},"end":{"line":32,"column":10,"offset":866}}},"children":"Reactor"}}],"는 앱의 상태와 로직을 관리하는 역할을 합니다. 우리는 카운터 값의 증가와 감소를 처리할 것이므로, 다음과 같이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CounterReactor","position":{"start":{"line":32,"column":73,"offset":929},"end":{"line":32,"column":89,"offset":945}}}],"position":{"start":{"line":32,"column":73,"offset":929},"end":{"line":32,"column":89,"offset":945}}},"children":"CounterReactor"}}],"를 정의합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import ReactorKit\nimport RxSwift\n\nclass CounterReactor: Reactor {\n    // Action: 사용자 이벤트 정의\n    enum Action {\n        case increase\n        case decrease\n    }\n\n    // Mutation: 상태 변화를 정의\n    enum Mutation {\n        case increaseValue\n        case decreaseValue\n    }\n\n    // State: 앱의 상태 정의\n    struct State {\n        var value: Int\n    }\n\n    // 초기 상태 설정\n    let initialState: State = State(value: 0)\n\n    // Action을 받아서 Mutation으로 변환\n    func mutate(action: Action) -> Observable<Mutation> {\n        switch action {\n        case .increase:\n            return Observable.just(Mutation.increaseValue)\n        case .decrease:\n            return Observable.just(Mutation.decreaseValue)\n        }\n    }\n\n    // Mutation을 받아서 State로 변환\n    func reduce(state: State, mutation: Mutation) -> State {\n        var newState = state\n        switch mutation {\n        case .increaseValue:\n            newState.value += 1\n        case .decreaseValue:\n            newState.value -= 1\n        }\n        return newState\n    }\n}\n"}],"position":{"start":{"line":34,"column":1,"offset":955},"end":{"line":81,"column":4,"offset":1980}}},"children":"import ReactorKit\nimport RxSwift\n\nclass CounterReactor: Reactor {\n    // Action: 사용자 이벤트 정의\n    enum Action {\n        case increase\n        case decrease\n    }\n\n    // Mutation: 상태 변화를 정의\n    enum Mutation {\n        case increaseValue\n        case decreaseValue\n    }\n\n    // State: 앱의 상태 정의\n    struct State {\n        var value: Int\n    }\n\n    // 초기 상태 설정\n    let initialState: State = State(value: 0)\n\n    // Action을 받아서 Mutation으로 변환\n    func mutate(action: Action) -> Observable<Mutation> {\n        switch action {\n        case .increase:\n            return Observable.just(Mutation.increaseValue)\n        case .decrease:\n            return Observable.just(Mutation.decreaseValue)\n        }\n    }\n\n    // Mutation을 받아서 State로 변환\n    func reduce(state: State, mutation: Mutation) -> State {\n        var newState = state\n        switch mutation {\n        case .increaseValue:\n            newState.value += 1\n        case .decreaseValue:\n            newState.value -= 1\n        }\n        return newState\n    }\n}\n"}}]}],"\n",["$","h3",null,{"id":"5113ead5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"View 설정"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewController","position":{"start":{"line":85,"column":4,"offset":1998},"end":{"line":85,"column":20,"offset":2014}}}],"position":{"start":{"line":85,"column":4,"offset":1998},"end":{"line":85,"column":20,"offset":2014}}},"children":"ViewController"}}],"를 설정하여 인터페이스와 Reactor의 상태를 연결합니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":87,"column":1,"offset":2049},"end":{"line":127,"column":4,"offset":3159}}},"children":"$f"}}]}],"\n",["$","h2",null,{"id":"893067fb","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"4. UI 구성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Storyboard","position":{"start":{"line":131,"column":1,"offset":3174},"end":{"line":131,"column":13,"offset":3186}}}],"position":{"start":{"line":131,"column":1,"offset":3174},"end":{"line":131,"column":13,"offset":3186}}},"children":"Storyboard"}}]," 또는 코드로 버튼과 레이블을 추가하여 레이아웃을 구성합니다. 이 글에서는 코드로 레이아웃을 구성하는 방법을 보여드리겠습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"override func viewDidLoad() {\n    super.viewDidLoad()\n    self.setupView()\n    self.reactor = CounterReactor()\n}\n\nfunc setupView() {\n    // 버튼 및 레이블 속성 설정\n    increaseButton.setTitle(\"+\", for: .normal)\n    increaseButton.setTitleColor(.blue, for: .normal)\n    decreaseButton.setTitle(\"-\", for: .normal)\n    decreaseButton.setTitleColor(.red, for: .normal)\n    valueLabel.text = \"0\"\n    valueLabel.textAlignment = .center\n    \n    // 레이아웃 설정\n    let stackView = UIStackView(arrangedSubviews: [decreaseButton, valueLabel, increaseButton])\n    stackView.axis = .horizontal\n    stackView.distribution = .fillEqually\n    self.view.addSubview(stackView)\n    \n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n        stackView.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),\n        stackView.centerYAnchor.constraint(equalTo: self.view.centerYAnchor),\n        stackView.widthAnchor.constraint(equalToConstant: 200)\n    ])\n}\n"}],"position":{"start":{"line":133,"column":1,"offset":3258},"end":{"line":162,"column":4,"offset":4249}}},"children":"override func viewDidLoad() {\n    super.viewDidLoad()\n    self.setupView()\n    self.reactor = CounterReactor()\n}\n\nfunc setupView() {\n    // 버튼 및 레이블 속성 설정\n    increaseButton.setTitle(\"+\", for: .normal)\n    increaseButton.setTitleColor(.blue, for: .normal)\n    decreaseButton.setTitle(\"-\", for: .normal)\n    decreaseButton.setTitleColor(.red, for: .normal)\n    valueLabel.text = \"0\"\n    valueLabel.textAlignment = .center\n    \n    // 레이아웃 설정\n    let stackView = UIStackView(arrangedSubviews: [decreaseButton, valueLabel, increaseButton])\n    stackView.axis = .horizontal\n    stackView.distribution = .fillEqually\n    self.view.addSubview(stackView)\n    \n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n        stackView.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),\n        stackView.centerYAnchor.constraint(equalTo: self.view.centerYAnchor),\n        stackView.widthAnchor.constraint(equalToConstant: 200)\n    ])\n}\n"}}]}],"\n",["$","h2",null,{"id":"804c1600","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"5. 최종 확인"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 앱을 실행하여 버튼을 클릭할 때마다 카운터 값이 증가하고 감소하는지 확인해 볼 수 있습니다. 정상적으로 작동한다면, 성공적으로 ReactorKit을 이용하여 간단한 카운터 앱을 만든 것입니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이번 튜토리얼에서는 ReactorKit의 기본 개념과 구성 요소를 살펴보고, 이를 활용하여 간단한 카운터 앱을 만들어 보았습니다. ReactorKit을 사용하면 상태 관리와 뷰 로직을 깔끔하게 분리할 수 있어 유지 보수와 확장이 용이합니다. 이 글을 통해 ReactorKit의 기초를 이해하고, 더 복잡한 애플리케이션에도 적용할 수 있는 준비가 되었기를 바랍니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기","toc":[{"tagName":"h1","title":"[Swift] ReactorKit 첫걸음: 간단한 카운터 앱 만들기","id":"a95a3672"},{"tagName":"h2","title":"1. ReactorKit 소개","id":"e97d4bc1"},{"tagName":"h2","title":"2. 프로젝트 설정","id":"b9926dd5"},{"tagName":"h2","title":"3. 기본 구조 설정","id":"4ec73a68"},{"tagName":"h3","title":"Reactor 생성","id":"af32b022"},{"tagName":"h3","title":"View 설정","id":"5113ead5"},{"tagName":"h2","title":"4. UI 구성","id":"893067fb"},{"tagName":"h2","title":"5. 최종 확인","id":"804c1600"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
