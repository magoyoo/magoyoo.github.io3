1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-NSLock%EC%99%80-NSRecursiveLock%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-35be7d38","d"],{"children":["__PAGE__?{\"slug\":\"iOS-성능-최적화-NSLock와-NSRecursiveLock으로-동시성-문제-해결하기-35be7d38\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-NSLock%EC%99%80-NSRecursiveLock%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-35be7d38","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS-성능-최적화-NSLock와-NSRecursiveLock으로-동시성-문제-해결하기-35be7d38\"}"},"styles":[]}],"segment":["slug","iOS-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-NSLock%EC%99%80-NSRecursiveLock%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-35be7d38","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"본 글에서는 iOS 개발 시 성능 최적화를 위해 사용되는 두 가지 중요한 동기화 도구인 `NSLock`과 `NSRecursiveLock`에 대해 알아보고, 이를 통해 동시성 문제를 효과적으로 해결하는 방법을 소개합니다."}],["$","meta","3",{"name":"keywords","content":"iOS,성능 최적화,NSLock,NSRecursiveLock"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-NSLock%EC%99%80-NSRecursiveLock%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-35be7d38"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"본 글에서는 iOS 개발 시 성능 최적화를 위해 사용되는 두 가지 중요한 동기화 도구인 `NSLock`과 `NSRecursiveLock`에 대해 알아보고, 이를 통해 동시성 문제를 효과적으로 해결하는 방법을 소개합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94-NSLock%EC%99%80-NSRecursiveLock%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%8B%9C%EC%84%B1-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0-35be7d38"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"본 글에서는 iOS 개발 시 성능 최적화를 위해 사용되는 두 가지 중요한 동기화 도구인 `NSLock`과 `NSRecursiveLock`에 대해 알아보고, 이를 통해 동시성 문제를 효과적으로 해결하는 방법을 소개합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner4.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner4.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-02"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"01545cc6","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["iOS 애플리케이션 개발 시 동시성 문제는 매우 중요합니다. 여러 스레드에서 동시다발적으로 발생하는 연산은 앱의 성능 및 안정성에 큰 영향을 미칩니다. 이를 해결하기 위해 iOS에서는 다양한 동기화 메커니즘을 제공합니다. 이번 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":4,"column":133,"offset":186},"end":{"line":4,"column":141,"offset":194}}}],"position":{"start":{"line":4,"column":133,"offset":186},"end":{"line":4,"column":141,"offset":194}}},"children":"NSLock"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":4,"column":143,"offset":196},"end":{"line":4,"column":160,"offset":213}}}],"position":{"start":{"line":4,"column":143,"offset":196},"end":{"line":4,"column":160,"offset":213}}},"children":"NSRecursiveLock"}}],"을 중심으로 동시성 문제를 해결하는 방법을 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"c5c44d77","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"NSLock의 이해와 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":8,"column":1,"offset":266},"end":{"line":8,"column":9,"offset":274}}}],"position":{"start":{"line":8,"column":1,"offset":266},"end":{"line":8,"column":9,"offset":274}}},"children":"NSLock"}}],"은 가장 기본적인 형태의 동기화 도구입니다. 이를 통해 특정 코드 블록이 하나의 스레드에 의해 독점적으로 실행되도록 보장할 수 있습니다. 예를 들어, 여러 스레드가 동일한 리소스를 동시에 접근하려고 할 때, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":8,"column":125,"offset":390},"end":{"line":8,"column":133,"offset":398}}}],"position":{"start":{"line":8,"column":125,"offset":390},"end":{"line":8,"column":133,"offset":398}}},"children":"NSLock"}}],"을 사용하여 이를 제어할 수 있습니다."]}],"\n",["$","h3",null,{"id":"ac4393b7","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"NSLock의 기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":12,"column":5,"offset":445},"end":{"line":12,"column":13,"offset":453}}}],"position":{"start":{"line":12,"column":5,"offset":445},"end":{"line":12,"column":13,"offset":453}}},"children":"NSLock"}}],"의 기본 사용 예제입니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass SafeArray<T> {\n    private var array = [T]()\n    private let lock = NSLock()\n    \n    func append(_ item: T) {\n        lock.lock()\n        array.append(item)\n        lock.unlock()\n    }\n    \n    func getItem(at index: Int) -> T? {\n        lock.lock()\n        defer { lock.unlock() }\n        return index < array.count ? array[index] : nil\n    }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":469},"end":{"line":33,"column":4,"offset":853}}},"children":"import Foundation\n\nclass SafeArray<T> {\n    private var array = [T]()\n    private let lock = NSLock()\n    \n    func append(_ item: T) {\n        lock.lock()\n        array.append(item)\n        lock.unlock()\n    }\n    \n    func getItem(at index: Int) -> T? {\n        lock.lock()\n        defer { lock.unlock() }\n        return index < array.count ? array[index] : nil\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"SafeArray","position":{"start":{"line":35,"column":9,"offset":863},"end":{"line":35,"column":20,"offset":874}}}],"position":{"start":{"line":35,"column":9,"offset":863},"end":{"line":35,"column":20,"offset":874}}},"children":"SafeArray"}}],"라는 클래스가 있으며, 이 클래스는 내부적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":35,"column":46,"offset":900},"end":{"line":35,"column":54,"offset":908}}}],"position":{"start":{"line":35,"column":46,"offset":900},"end":{"line":35,"column":54,"offset":908}}},"children":"NSLock"}}],"을 사용하여 배열에 대한 동시 접근을 안전하게 처리합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"lock.lock()","position":{"start":{"line":35,"column":87,"offset":941},"end":{"line":35,"column":100,"offset":954}}}],"position":{"start":{"line":35,"column":87,"offset":941},"end":{"line":35,"column":100,"offset":954}}},"children":"lock.lock()"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"lock.unlock()","position":{"start":{"line":35,"column":102,"offset":956},"end":{"line":35,"column":117,"offset":971}}}],"position":{"start":{"line":35,"column":102,"offset":956},"end":{"line":35,"column":117,"offset":971}}},"children":"lock.unlock()"}}]," 메서드를 사용하여, 코드 블록이 중복 실행되지 않도록 합니다."]}],"\n",["$","h3",null,{"id":"f1147138","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"왜 NSLock을 사용할까?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":39,"column":1,"offset":1029},"end":{"line":39,"column":9,"offset":1037}}}],"position":{"start":{"line":39,"column":1,"offset":1029},"end":{"line":39,"column":9,"offset":1037}}},"children":"NSLock"}}],"은 매우 단순하지만 강력한 도구입니다. 간단한 동기화가 필요할 때, 특히 특정 리소스에 대한 독점권을 보장해야 할 때 유용합니다. 그러나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":39,"column":86,"offset":1114},"end":{"line":39,"column":94,"offset":1122}}}],"position":{"start":{"line":39,"column":86,"offset":1114},"end":{"line":39,"column":94,"offset":1122}}},"children":"NSLock"}}],"은 객체를 잠그고 해제하는 비용이 있으므로, 너무 자주 사용하면 성능 저하를 초래할 수 있습니다."]}],"\n",["$","h2",null,{"id":"318614b8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"NSRecursiveLock의 이해와 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":43,"column":1,"offset":1206},"end":{"line":43,"column":18,"offset":1223}}}],"position":{"start":{"line":43,"column":1,"offset":1206},"end":{"line":43,"column":18,"offset":1223}}},"children":"NSRecursiveLock"}}],"은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":43,"column":20,"offset":1225},"end":{"line":43,"column":28,"offset":1233}}}],"position":{"start":{"line":43,"column":20,"offset":1225},"end":{"line":43,"column":28,"offset":1233}}},"children":"NSLock"}}],"과 비슷하지만, 한 가지 중요한 차이점이 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":43,"column":57,"offset":1262},"end":{"line":43,"column":74,"offset":1279}}}],"position":{"start":{"line":43,"column":57,"offset":1262},"end":{"line":43,"column":74,"offset":1279}}},"children":"NSRecursiveLock"}}],"은 동일 스레드에서 동일한 락을 여러 번 획득할 수 있다는 점입니다. 이는 재귀적인 함수 호출이나 중첩된 잠금을 필요로 하는 경우에 매우 유용합니다."]}],"\n",["$","h3",null,{"id":"27f12cf2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"NSRecursiveLock의 기본 사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["다음은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":47,"column":5,"offset":1397},"end":{"line":47,"column":22,"offset":1414}}}],"position":{"start":{"line":47,"column":5,"offset":1397},"end":{"line":47,"column":22,"offset":1414}}},"children":"NSRecursiveLock"}}],"의 기본 사용 예제입니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Foundation\n\nclass RecursiveLockExample {\n    private let lock = NSRecursiveLock()\n    \n    func recursiveMethod(value: Int) {\n        lock.lock()\n        print(\"Value: \\(value)\")\n        if value > 0 {\n            recursiveMethod(value: value - 1)\n        }\n        lock.unlock()\n    }\n}\n"}],"position":{"start":{"line":49,"column":1,"offset":1430},"end":{"line":64,"column":4,"offset":1737}}},"children":"import Foundation\n\nclass RecursiveLockExample {\n    private let lock = NSRecursiveLock()\n    \n    func recursiveMethod(value: Int) {\n        lock.lock()\n        print(\"Value: \\(value)\")\n        if value > 0 {\n            recursiveMethod(value: value - 1)\n        }\n        lock.unlock()\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"RecursiveLockExample","position":{"start":{"line":66,"column":9,"offset":1747},"end":{"line":66,"column":31,"offset":1769}}}],"position":{"start":{"line":66,"column":9,"offset":1747},"end":{"line":66,"column":31,"offset":1769}}},"children":"RecursiveLockExample"}}],"이라는 클래스가 있으며, 재귀적으로 값을 출력하는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"recursiveMethod","position":{"start":{"line":66,"column":59,"offset":1797},"end":{"line":66,"column":76,"offset":1814}}}],"position":{"start":{"line":66,"column":59,"offset":1797},"end":{"line":66,"column":76,"offset":1814}}},"children":"recursiveMethod"}}]," 메서드를 가지고 있습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":66,"column":92,"offset":1830},"end":{"line":66,"column":109,"offset":1847}}}],"position":{"start":{"line":66,"column":92,"offset":1830},"end":{"line":66,"column":109,"offset":1847}}},"children":"NSRecursiveLock"}}],"을 사용하여 동일한 스레드에서 여러 번 락을 획득하고 해제할 수 있습니다."]}],"\n",["$","h3",null,{"id":"01a6e76d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"NSRecursiveLock을 선택하는 이유"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["재귀적 함수 호출이나 중첩된 락을 사용해야 하는 경우에 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":70,"column":32,"offset":1951},"end":{"line":70,"column":49,"offset":1968}}}],"position":{"start":{"line":70,"column":32,"offset":1951},"end":{"line":70,"column":49,"offset":1968}}},"children":"NSRecursiveLock"}}],"이 필수적입니다. 일반적인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":70,"column":64,"offset":1983},"end":{"line":70,"column":72,"offset":1991}}}],"position":{"start":{"line":70,"column":64,"offset":1983},"end":{"line":70,"column":72,"offset":1991}}},"children":"NSLock"}}],"은 동일한 스레드에서 여러 번 락을 획득하려고 하면 데드락을 발생시키기 때문에, 이러한 시나리오에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":70,"column":129,"offset":2048},"end":{"line":70,"column":146,"offset":2065}}}],"position":{"start":{"line":70,"column":129,"offset":2048},"end":{"line":70,"column":146,"offset":2065}}},"children":"NSRecursiveLock"}}],"을 사용하는 것이 중요합니다."]}],"\n",["$","h2",null,{"id":"7c59db9e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"NSLock과 NSRecursiveLock의 차이점과 선택 기준"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":74,"column":1,"offset":2123},"end":{"line":74,"column":9,"offset":2131}}}],"position":{"start":{"line":74,"column":1,"offset":2123},"end":{"line":74,"column":9,"offset":2131}}},"children":"NSLock"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":74,"column":11,"offset":2133},"end":{"line":74,"column":28,"offset":2150}}}],"position":{"start":{"line":74,"column":11,"offset":2133},"end":{"line":74,"column":28,"offset":2150}}},"children":"NSRecursiveLock"}}],"의 주요 차이점은 다음과 같습니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"중첩 잠금 허용 여부"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":76,"column":21,"offset":2191},"end":{"line":76,"column":29,"offset":2199}}}],"position":{"start":{"line":76,"column":21,"offset":2191},"end":{"line":76,"column":29,"offset":2199}}},"children":"NSLock"}}],"은 동일 스레드에서 중첩 잠금을 허용하지 않지만, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":76,"column":57,"offset":2227},"end":{"line":76,"column":74,"offset":2244}}}],"position":{"start":{"line":76,"column":57,"offset":2227},"end":{"line":76,"column":74,"offset":2244}}},"children":"NSRecursiveLock"}}],"은 동일 스레드에서 여러 번 잠금이 가능합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"성능"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":77,"column":12,"offset":2282},"end":{"line":77,"column":20,"offset":2290}}}],"position":{"start":{"line":77,"column":12,"offset":2282},"end":{"line":77,"column":20,"offset":2290}}},"children":"NSLock"}}],"이 성능 면에서 더 효율적입니다. 중첩 잠금이 필요 없는 경우 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":77,"column":55,"offset":2325},"end":{"line":77,"column":63,"offset":2333}}}],"position":{"start":{"line":77,"column":55,"offset":2325},"end":{"line":77,"column":63,"offset":2333}}},"children":"NSLock"}}],"을 사용하는 것이 더 좋은 선택입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"사용 사례"}],": 간단한 동기화가 필요한 경우 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":78,"column":31,"offset":2385},"end":{"line":78,"column":39,"offset":2393}}}],"position":{"start":{"line":78,"column":31,"offset":2385},"end":{"line":78,"column":39,"offset":2393}}},"children":"NSLock"}}],", 재귀적 함수 호출이나 중첩 잠금이 필요한 경우 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":78,"column":67,"offset":2421},"end":{"line":78,"column":84,"offset":2438}}}],"position":{"start":{"line":78,"column":67,"offset":2421},"end":{"line":78,"column":84,"offset":2438}}},"children":"NSRecursiveLock"}}],"을 선택하면 됩니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"2c13f0ef","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"성능 최적화를 위한 추가 고려 사항"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"동기화 메커니즘만으로 성능을 최적화하는 것은 충분하지 않을 수 있습니다. 다음은 추가적으로 고려해야 할 성능 최적화 팁입니다:"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"비동기 프로그래밍"}],": GCD(Grand Central Dispatch)와 같은 비동기 프로그래밍 도구를 사용하여 스레드 수를 최소화하고 병렬 처리를 극대화합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"메모리 관리"}],": 자동 참조 카운트(ARC)를 이해하고, 강한 참조 사이클을 피하기 위한 적절한 메모리 관리 전략을 사용합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"프로파일링"}],": Instruments와 같은 도구를 사용하여 성능을 프로파일링하고, 병목 지점을 찾아 최적화합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"효율적인 알고리즘"}],": 동기화 메커니즘 이외에도 효율적인 알고리즘과 자료 구조를 사용하는 것이 중요합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["동시성 문제는 iOS 애플리케이션의 성능 및 안정성에 큰 영향을 미치는 중요한 문제입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":91,"column":52,"offset":2915},"end":{"line":91,"column":60,"offset":2923}}}],"position":{"start":{"line":91,"column":52,"offset":2915},"end":{"line":91,"column":60,"offset":2923}}},"children":"NSLock"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":91,"column":62,"offset":2925},"end":{"line":91,"column":79,"offset":2942}}}],"position":{"start":{"line":91,"column":62,"offset":2925},"end":{"line":91,"column":79,"offset":2942}}},"children":"NSRecursiveLock"}}],"은 이러한 문제를 해결하는 데 매우 유용한 도구입니다. 간단한 동기화가 필요할 때는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSLock","position":{"start":{"line":91,"column":126,"offset":2989},"end":{"line":91,"column":134,"offset":2997}}}],"position":{"start":{"line":91,"column":126,"offset":2989},"end":{"line":91,"column":134,"offset":2997}}},"children":"NSLock"}}],"을, 재귀적 함수 호출이나 중첩 잠금이 필요한 경우에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NSRecursiveLock","position":{"start":{"line":91,"column":165,"offset":3028},"end":{"line":91,"column":182,"offset":3045}}}],"position":{"start":{"line":91,"column":165,"offset":3028},"end":{"line":91,"column":182,"offset":3045}}},"children":"NSRecursiveLock"}}],"을 사용하는 것이 좋습니다. 올바른 동기화 메커니즘을 선택하여 애플리케이션의 성능을 최적화하고, 사용자 경험을 향상시킬 수 있습니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기","toc":[{"tagName":"h1","title":"iOS 성능 최적화: NSLock와 NSRecursiveLock으로 동시성 문제 해결하기","id":"01545cc6"},{"tagName":"h2","title":"NSLock의 이해와 사용","id":"c5c44d77"},{"tagName":"h3","title":"NSLock의 기본 사용법","id":"ac4393b7"},{"tagName":"h3","title":"왜 NSLock을 사용할까?","id":"f1147138"},{"tagName":"h2","title":"NSRecursiveLock의 이해와 사용","id":"318614b8"},{"tagName":"h3","title":"NSRecursiveLock의 기본 사용법","id":"27f12cf2"},{"tagName":"h3","title":"NSRecursiveLock을 선택하는 이유","id":"01a6e76d"},{"tagName":"h2","title":"NSLock과 NSRecursiveLock의 차이점과 선택 기준","id":"7c59db9e"},{"tagName":"h2","title":"성능 최적화를 위한 추가 고려 사항","id":"2c13f0ef"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
