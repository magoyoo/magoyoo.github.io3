1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C-Hashable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서-Hashable-프로토콜-문제-해결하기\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C-Hashable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서-Hashable-프로토콜-문제-해결하기\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C-Hashable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다."}],["$","meta","3",{"name":"keywords","content":"swift,기본문법"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Hashable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C-Hashable-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EA%B8%B0"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기! | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":62313,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:T14a1,
## Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기

Swift에서 객체를 컬렉션의 키로 사용하거나 집합(Set)의 요소로 사용하려면 해당 객체가 `Hashable` 프로토콜을 준수해야 합니다. 그러나 때로는 "Swift does not conform to protocol 'Hashable'" 오류 메시지를 볼 수 있습니다. 이 글에서는 `Hashable` 프로토콜의 개념과 해당 프로토콜을 준수하지 않는 문제를 해결하는 방법에 대해 자세히 설명하겠습니다.

## Hashable 프로토콜이란?

`Hashable` 프로토콜은 객체를 해시 가능한 상태로 만들기 위한 프로토콜입니다. `Hashable`을 준수하는 객체는 해시 값을 제공할 수 있으며, 이는 해당 객체를 빠르게 비교하거나 검색하는 데 사용됩니다. Swift 표준 라이브러리의 많은 컬렉션 타입(예: `Dictionary`와 `Set`)은 내부적으로 해시 값을 사용합니다.

### Hashable 프로토콜의 요구 사항

`Hashable` 프로토콜을 준수하려면 객체는 `hash(into:)` 메서드를 구현해야 하며, 이는 객체의 속성 값을 해시 함수에 전달합니다. 또한, `Equatable` 프로토콜을 준수해야 하며, 이는 두 객체가 동일한지 비교할 수 있는 메서드를 제공합니다.

```swift
protocol Hashable: Equatable {
    func hash(into hasher: inout Hasher)
}
```

## 'Hashable' 프로토콜 준수 문제 해결하기

### 기본 사용 예제

`Hashable` 프로토콜을 준수하는 객체를 정의하기 위해, 다음과 같이 `hash(into:)` 메서드를 구현할 수 있습니다.

```swift
struct Person: Hashable {
    var name: String
    var age: Int

    func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(age)
    }
}

let person1 = Person(name: "Alice", age: 30)
let person2 = Person(name: "Bob", age: 25)

var peopleSet: Set<Person> = [person1, person2]
print(peopleSet)
```

이 예제에서는 `Person` 구조체가 `Hashable` 프로토콜을 준수하며, `hash(into:)` 메서드를 통해 `name`과 `age` 속성을 해시 함수에 결합합니다.

### 자동 Hashable 구현

Swift 4.1 이후로, 컴파일러는 구조체가 모든 저장 속성이 `Hashable`을 준수하는 경우 자동으로 `Hashable`을 구현할 수 있습니다.

```swift
struct Person: Hashable {
    var name: String
    var age: Int
}

let person1 = Person(name: "Alice", age: 30)
let person2 = Person(name: "Bob", age: 25)

var peopleSet: Set<Person> = [person1, person2]
print(peopleSet)
```

위 예제에서는 `Person` 구조체가 자동으로 `Hashable`을 준수합니다.

### 커스텀 타입에서 Hashable 구현

특정 클래스나 구조체가 `Hashable` 프로토콜을 준수하지 않는 경우, 이를 수동으로 구현해야 할 수 있습니다.

```swift
class Car: Hashable {
    var make: String
    var model: String
    var year: Int

    init(make: String, model: String, year: Int) {
        self.make = make
        self.model = model
        self.year = year
    }

    static func == (lhs: Car, rhs: Car) -> Bool {
        return lhs.make == rhs.make && lhs.model == rhs.model && lhs.year == rhs.year
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(make)
        hasher.combine(model)
        hasher.combine(year)
    }
}

let car1 = Car(make: "Toyota", model: "Corolla", year: 2018)
let car2 = Car(make: "Honda", model: "Civic", year: 2020)

var carSet: Set<Car> = [car1, car2]
print(carSet)
```

이 예제에서 `Car` 클래스는 `Hashable` 프로토콜을 준수하도록 `==` 연산자와 `hash(into:)` 메서드를 구현합니다.

## 'Hashable' 프로토콜 준수 문제 발생 이유와 해결 방법

### 문제 원인

1. **저장 속성의 타입이 Hashable을 준수하지 않음**: `Hashable`을 준수하려면 모든 저장 속성이 `Hashable`을 준수해야 합니다.
2. **클래스 상속**: 클래스가 상속 구조를 가지면, 자동으로 `Hashable`을 준수할 수 없습니다. 이 경우 수동으로 구현해야 합니다.
3. **커스텀 타입의 사용**: 커스텀 타입이 `Hashable`을 준수하지 않으면 이를 수동으로 구현해야 합니다.

### 해결 방법

1. **저장 속성 타입 확인**: 모든 저장 속성이 `Hashable`을 준수하는지 확인하고, 필요시 이를 준수하도록 구현합니다.
2. **수동 구현**: 자동으로 `Hashable`을 준수하지 않는 경우, `Equatable`과 `Hashable` 프로토콜을 수동으로 구현합니다.
3. **상속 구조에서 Hashable 구현**: 클래스 상속 구조에서는 `Equatable`과 `Hashable`을 적절히 구현하여 프로토콜을 준수합니다.

## 결론

Swift에서 `Hashable` 프로토콜을 준수하지 않는 문제는 대부분 저장 속성의 타입이나 상속 구조와 관련이 있습니다. 이를 해결하려면, 모든 저장 속성이 `Hashable`을 준수하도록 하고, 필요시 `Equatable`과 `Hashable`을 수동으로 구현해야 합니다. 이를 통해 Swift 컬렉션에서 객체를 효과적으로 사용할 수 있습니다.

더 많은 정보는 [Apple Developer Documentation](https://developer.apple.com/documentation/swift/hashable)에서 확인할 수 있습니다.
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-29"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"48a42c8a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 객체를 컬렉션의 키로 사용하거나 집합(Set)의 요소로 사용하려면 해당 객체가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":53,"offset":98},"end":{"line":4,"column":63,"offset":108}}}],"position":{"start":{"line":4,"column":53,"offset":98},"end":{"line":4,"column":63,"offset":108}}},"children":"Hashable"}}]," 프로토콜을 준수해야 합니다. 그러나 때로는 \"Swift does not conform to protocol 'Hashable'\" 오류 메시지를 볼 수 있습니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":4,"column":161,"offset":206},"end":{"line":4,"column":171,"offset":216}}}],"position":{"start":{"line":4,"column":161,"offset":206},"end":{"line":4,"column":171,"offset":216}}},"children":"Hashable"}}]," 프로토콜의 개념과 해당 프로토콜을 준수하지 않는 문제를 해결하는 방법에 대해 자세히 설명하겠습니다."]}],"\n",["$","h2",null,{"id":"a3667b46","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Hashable 프로토콜이란?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":1,"offset":295},"end":{"line":8,"column":11,"offset":305}}}],"position":{"start":{"line":8,"column":1,"offset":295},"end":{"line":8,"column":11,"offset":305}}},"children":"Hashable"}}]," 프로토콜은 객체를 해시 가능한 상태로 만들기 위한 프로토콜입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":8,"column":49,"offset":343},"end":{"line":8,"column":59,"offset":353}}}],"position":{"start":{"line":8,"column":49,"offset":343},"end":{"line":8,"column":59,"offset":353}}},"children":"Hashable"}}],"을 준수하는 객체는 해시 값을 제공할 수 있으며, 이는 해당 객체를 빠르게 비교하거나 검색하는 데 사용됩니다. Swift 표준 라이브러리의 많은 컬렉션 타입(예: ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Dictionary","position":{"start":{"line":8,"column":150,"offset":444},"end":{"line":8,"column":162,"offset":456}}}],"position":{"start":{"line":8,"column":150,"offset":444},"end":{"line":8,"column":162,"offset":456}}},"children":"Dictionary"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set","position":{"start":{"line":8,"column":164,"offset":458},"end":{"line":8,"column":169,"offset":463}}}],"position":{"start":{"line":8,"column":164,"offset":458},"end":{"line":8,"column":169,"offset":463}}},"children":"Set"}}],")은 내부적으로 해시 값을 사용합니다."]}],"\n",["$","h3",null,{"id":"b14d2228","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Hashable 프로토콜의 요구 사항"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":12,"column":1,"offset":512},"end":{"line":12,"column":11,"offset":522}}}],"position":{"start":{"line":12,"column":1,"offset":512},"end":{"line":12,"column":11,"offset":522}}},"children":"Hashable"}}]," 프로토콜을 준수하려면 객체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":12,"column":28,"offset":539},"end":{"line":12,"column":41,"offset":552}}}],"position":{"start":{"line":12,"column":28,"offset":539},"end":{"line":12,"column":41,"offset":552}}},"children":"hash(into:)"}}]," 메서드를 구현해야 하며, 이는 객체의 속성 값을 해시 함수에 전달합니다. 또한, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":12,"column":87,"offset":598},"end":{"line":12,"column":98,"offset":609}}}],"position":{"start":{"line":12,"column":87,"offset":598},"end":{"line":12,"column":98,"offset":609}}},"children":"Equatable"}}]," 프로토콜을 준수해야 하며, 이는 두 객체가 동일한지 비교할 수 있는 메서드를 제공합니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol Hashable: Equatable {\n    func hash(into hasher: inout Hasher)\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":661},"end":{"line":18,"column":4,"offset":747}}},"children":"protocol Hashable: Equatable {\n    func hash(into hasher: inout Hasher)\n}\n"}}]}],"\n",["$","h2",null,{"id":"81ded247","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"'Hashable' 프로토콜 준수 문제 해결하기"}],"\n",["$","h3",null,{"id":"e163f81a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 사용 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":24,"column":1,"offset":794},"end":{"line":24,"column":11,"offset":804}}}],"position":{"start":{"line":24,"column":1,"offset":794},"end":{"line":24,"column":11,"offset":804}}},"children":"Hashable"}}]," 프로토콜을 준수하는 객체를 정의하기 위해, 다음과 같이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":24,"column":43,"offset":836},"end":{"line":24,"column":56,"offset":849}}}],"position":{"start":{"line":24,"column":43,"offset":836},"end":{"line":24,"column":56,"offset":849}}},"children":"hash(into:)"}}]," 메서드를 구현할 수 있습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Hashable {\n    var name: String\n    var age: Int\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(name)\n        hasher.combine(age)\n    }\n}\n\nlet person1 = Person(name: \"Alice\", age: 30)\nlet person2 = Person(name: \"Bob\", age: 25)\n\nvar peopleSet: Set<Person> = [person1, person2]\nprint(peopleSet)\n"}],"position":{"start":{"line":26,"column":1,"offset":868},"end":{"line":42,"column":4,"offset":1208}}},"children":"struct Person: Hashable {\n    var name: String\n    var age: Int\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(name)\n        hasher.combine(age)\n    }\n}\n\nlet person1 = Person(name: \"Alice\", age: 30)\nlet person2 = Person(name: \"Bob\", age: 25)\n\nvar peopleSet: Set<Person> = [person1, person2]\nprint(peopleSet)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":44,"column":9,"offset":1218},"end":{"line":44,"column":17,"offset":1226}}}],"position":{"start":{"line":44,"column":9,"offset":1218},"end":{"line":44,"column":17,"offset":1226}}},"children":"Person"}}]," 구조체가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":44,"column":23,"offset":1232},"end":{"line":44,"column":33,"offset":1242}}}],"position":{"start":{"line":44,"column":23,"offset":1232},"end":{"line":44,"column":33,"offset":1242}}},"children":"Hashable"}}]," 프로토콜을 준수하며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":44,"column":46,"offset":1255},"end":{"line":44,"column":59,"offset":1268}}}],"position":{"start":{"line":44,"column":46,"offset":1255},"end":{"line":44,"column":59,"offset":1268}}},"children":"hash(into:)"}}]," 메서드를 통해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name","position":{"start":{"line":44,"column":68,"offset":1277},"end":{"line":44,"column":74,"offset":1283}}}],"position":{"start":{"line":44,"column":68,"offset":1277},"end":{"line":44,"column":74,"offset":1283}}},"children":"name"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age","position":{"start":{"line":44,"column":76,"offset":1285},"end":{"line":44,"column":81,"offset":1290}}}],"position":{"start":{"line":44,"column":76,"offset":1285},"end":{"line":44,"column":81,"offset":1290}}},"children":"age"}}]," 속성을 해시 함수에 결합합니다."]}],"\n",["$","h3",null,{"id":"8d630a22","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"자동 Hashable 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift 4.1 이후로, 컴파일러는 구조체가 모든 저장 속성이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":48,"column":37,"offset":1366},"end":{"line":48,"column":47,"offset":1376}}}],"position":{"start":{"line":48,"column":37,"offset":1366},"end":{"line":48,"column":47,"offset":1376}}},"children":"Hashable"}}],"을 준수하는 경우 자동으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":48,"column":62,"offset":1391},"end":{"line":48,"column":72,"offset":1401}}}],"position":{"start":{"line":48,"column":62,"offset":1391},"end":{"line":48,"column":72,"offset":1401}}},"children":"Hashable"}}],"을 구현할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"struct Person: Hashable {\n    var name: String\n    var age: Int\n}\n\nlet person1 = Person(name: \"Alice\", age: 30)\nlet person2 = Person(name: \"Bob\", age: 25)\n\nvar peopleSet: Set<Person> = [person1, person2]\nprint(peopleSet)\n"}],"position":{"start":{"line":50,"column":1,"offset":1416},"end":{"line":61,"column":4,"offset":1649}}},"children":"struct Person: Hashable {\n    var name: String\n    var age: Int\n}\n\nlet person1 = Person(name: \"Alice\", age: 30)\nlet person2 = Person(name: \"Bob\", age: 25)\n\nvar peopleSet: Set<Person> = [person1, person2]\nprint(peopleSet)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":63,"column":9,"offset":1659},"end":{"line":63,"column":17,"offset":1667}}}],"position":{"start":{"line":63,"column":9,"offset":1659},"end":{"line":63,"column":17,"offset":1667}}},"children":"Person"}}]," 구조체가 자동으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":63,"column":28,"offset":1678},"end":{"line":63,"column":38,"offset":1688}}}],"position":{"start":{"line":63,"column":28,"offset":1678},"end":{"line":63,"column":38,"offset":1688}}},"children":"Hashable"}}],"을 준수합니다."]}],"\n",["$","h3",null,{"id":"65cbfb1c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"커스텀 타입에서 Hashable 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["특정 클래스나 구조체가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":67,"column":14,"offset":1737},"end":{"line":67,"column":24,"offset":1747}}}],"position":{"start":{"line":67,"column":14,"offset":1737},"end":{"line":67,"column":24,"offset":1747}}},"children":"Hashable"}}]," 프로토콜을 준수하지 않는 경우, 이를 수동으로 구현해야 할 수 있습니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class Car: Hashable {\n    var make: String\n    var model: String\n    var year: Int\n\n    init(make: String, model: String, year: Int) {\n        self.make = make\n        self.model = model\n        self.year = year\n    }\n\n    static func == (lhs: Car, rhs: Car) -> Bool {\n        return lhs.make == rhs.make && lhs.model == rhs.model && lhs.year == rhs.year\n    }\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(make)\n        hasher.combine(model)\n        hasher.combine(year)\n    }\n}\n\nlet car1 = Car(make: \"Toyota\", model: \"Corolla\", year: 2018)\nlet car2 = Car(make: \"Honda\", model: \"Civic\", year: 2020)\n\nvar carSet: Set<Car> = [car1, car2]\nprint(carSet)\n"}],"position":{"start":{"line":69,"column":1,"offset":1790},"end":{"line":97,"column":4,"offset":2474}}},"children":"class Car: Hashable {\n    var make: String\n    var model: String\n    var year: Int\n\n    init(make: String, model: String, year: Int) {\n        self.make = make\n        self.model = model\n        self.year = year\n    }\n\n    static func == (lhs: Car, rhs: Car) -> Bool {\n        return lhs.make == rhs.make && lhs.model == rhs.model && lhs.year == rhs.year\n    }\n\n    func hash(into hasher: inout Hasher) {\n        hasher.combine(make)\n        hasher.combine(model)\n        hasher.combine(year)\n    }\n}\n\nlet car1 = Car(make: \"Toyota\", model: \"Corolla\", year: 2018)\nlet car2 = Car(make: \"Honda\", model: \"Civic\", year: 2020)\n\nvar carSet: Set<Car> = [car1, car2]\nprint(carSet)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Car","position":{"start":{"line":99,"column":8,"offset":2483},"end":{"line":99,"column":13,"offset":2488}}}],"position":{"start":{"line":99,"column":8,"offset":2483},"end":{"line":99,"column":13,"offset":2488}}},"children":"Car"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":99,"column":19,"offset":2494},"end":{"line":99,"column":29,"offset":2504}}}],"position":{"start":{"line":99,"column":19,"offset":2494},"end":{"line":99,"column":29,"offset":2504}}},"children":"Hashable"}}]," 프로토콜을 준수하도록 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==","position":{"start":{"line":99,"column":42,"offset":2517},"end":{"line":99,"column":46,"offset":2521}}}],"position":{"start":{"line":99,"column":42,"offset":2517},"end":{"line":99,"column":46,"offset":2521}}},"children":"=="}}]," 연산자와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"hash(into:)","position":{"start":{"line":99,"column":52,"offset":2527},"end":{"line":99,"column":65,"offset":2540}}}],"position":{"start":{"line":99,"column":52,"offset":2527},"end":{"line":99,"column":65,"offset":2540}}},"children":"hash(into:)"}}]," 메서드를 구현합니다."]}],"\n",["$","h2",null,{"id":"5f91fe7b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"'Hashable' 프로토콜 준수 문제 발생 이유와 해결 방법"}],"\n",["$","h3",null,{"id":"813fc5fd","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"문제 원인"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"저장 속성의 타입이 Hashable을 준수하지 않음"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":105,"column":38,"offset":2641},"end":{"line":105,"column":48,"offset":2651}}}],"position":{"start":{"line":105,"column":38,"offset":2641},"end":{"line":105,"column":48,"offset":2651}}},"children":"Hashable"}}],"을 준수하려면 모든 저장 속성이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":105,"column":66,"offset":2669},"end":{"line":105,"column":76,"offset":2679}}}],"position":{"start":{"line":105,"column":66,"offset":2669},"end":{"line":105,"column":76,"offset":2679}}},"children":"Hashable"}}],"을 준수해야 합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"클래스 상속"}],": 클래스가 상속 구조를 가지면, 자동으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":106,"column":38,"offset":2728},"end":{"line":106,"column":48,"offset":2738}}}],"position":{"start":{"line":106,"column":38,"offset":2728},"end":{"line":106,"column":48,"offset":2738}}},"children":"Hashable"}}],"을 준수할 수 없습니다. 이 경우 수동으로 구현해야 합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"커스텀 타입의 사용"}],": 커스텀 타입이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":107,"column":28,"offset":2799},"end":{"line":107,"column":38,"offset":2809}}}],"position":{"start":{"line":107,"column":28,"offset":2799},"end":{"line":107,"column":38,"offset":2809}}},"children":"Hashable"}}],"을 준수하지 않으면 이를 수동으로 구현해야 합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"9d672dc2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"해결 방법"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"저장 속성 타입 확인"}],": 모든 저장 속성이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":111,"column":31,"offset":2880},"end":{"line":111,"column":41,"offset":2890}}}],"position":{"start":{"line":111,"column":31,"offset":2880},"end":{"line":111,"column":41,"offset":2890}}},"children":"Hashable"}}],"을 준수하는지 확인하고, 필요시 이를 준수하도록 구현합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"수동 구현"}],": 자동으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":112,"column":20,"offset":2943},"end":{"line":112,"column":30,"offset":2953}}}],"position":{"start":{"line":112,"column":20,"offset":2943},"end":{"line":112,"column":30,"offset":2953}}},"children":"Hashable"}}],"을 준수하지 않는 경우, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":112,"column":44,"offset":2967},"end":{"line":112,"column":55,"offset":2978}}}],"position":{"start":{"line":112,"column":44,"offset":2967},"end":{"line":112,"column":55,"offset":2978}}},"children":"Equatable"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":112,"column":57,"offset":2980},"end":{"line":112,"column":67,"offset":2990}}}],"position":{"start":{"line":112,"column":57,"offset":2980},"end":{"line":112,"column":67,"offset":2990}}},"children":"Hashable"}}]," 프로토콜을 수동으로 구현합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"상속 구조에서 Hashable 구현"}],": 클래스 상속 구조에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":113,"column":42,"offset":3050},"end":{"line":113,"column":53,"offset":3061}}}],"position":{"start":{"line":113,"column":42,"offset":3050},"end":{"line":113,"column":53,"offset":3061}}},"children":"Equatable"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":113,"column":55,"offset":3063},"end":{"line":113,"column":65,"offset":3073}}}],"position":{"start":{"line":113,"column":55,"offset":3063},"end":{"line":113,"column":65,"offset":3073}}},"children":"Hashable"}}],"을 적절히 구현하여 프로토콜을 준수합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":117,"column":9,"offset":3113},"end":{"line":117,"column":19,"offset":3123}}}],"position":{"start":{"line":117,"column":9,"offset":3113},"end":{"line":117,"column":19,"offset":3123}}},"children":"Hashable"}}]," 프로토콜을 준수하지 않는 문제는 대부분 저장 속성의 타입이나 상속 구조와 관련이 있습니다. 이를 해결하려면, 모든 저장 속성이 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":117,"column":91,"offset":3195},"end":{"line":117,"column":101,"offset":3205}}}],"position":{"start":{"line":117,"column":91,"offset":3195},"end":{"line":117,"column":101,"offset":3205}}},"children":"Hashable"}}],"을 준수하도록 하고, 필요시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Equatable","position":{"start":{"line":117,"column":117,"offset":3221},"end":{"line":117,"column":128,"offset":3232}}}],"position":{"start":{"line":117,"column":117,"offset":3221},"end":{"line":117,"column":128,"offset":3232}}},"children":"Equatable"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Hashable","position":{"start":{"line":117,"column":130,"offset":3234},"end":{"line":117,"column":140,"offset":3244}}}],"position":{"start":{"line":117,"column":130,"offset":3234},"end":{"line":117,"column":140,"offset":3244}}},"children":"Hashable"}}],"을 수동으로 구현해야 합니다. 이를 통해 Swift 컬렉션에서 객체를 효과적으로 사용할 수 있습니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["더 많은 정보는 ",["$","$Le",null,{"props":{"href":"https://developer.apple.com/documentation/swift/hashable","node":{"type":"element","tagName":"a","properties":{"href":"https://developer.apple.com/documentation/swift/hashable"},"children":[{"type":"text","value":"Apple Developer Documentation","position":{"start":{"line":119,"column":11,"offset":3312},"end":{"line":119,"column":40,"offset":3341}}}],"position":{"start":{"line":119,"column":10,"offset":3311},"end":{"line":119,"column":99,"offset":3400}}},"children":"Apple Developer Documentation"},"post":{"title":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!","description":"Swift에서 문자열에 텍스트를 추가하는 다양한 방법을 설명합니다. + 연산자, append 메서드, 문자열 보간법, joined 메서드 등의 사용법과 예제를 제공합니다.","date":"2024-05-29T11:13:07.322Z","tags":[{"name":"swift","path":"/tags/swift","id":"swift"},{"name":"기본문법","path":"/tags/기본문법","id":"기본문법"}],"author":"마고유","banner":"/images/swiftBasic.jpg","project":"","readMin":"5.4","totalCnt":0,"monthlyCnt":0,"weeklyCnt":0,"slug":"Swift에서-Hashable-프로토콜-문제-해결하기","content":"$f","category":"swift"},"language":"kr"}],"에서 확인할 수 있습니다."]}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기!","toc":[{"tagName":"h2","title":"Swift에서 'Hashable' 프로토콜을 준수하지 않는 문제 해결하기","id":"48a42c8a"},{"tagName":"h2","title":"Hashable 프로토콜이란?","id":"a3667b46"},{"tagName":"h3","title":"Hashable 프로토콜의 요구 사항","id":"b14d2228"},{"tagName":"h2","title":"'Hashable' 프로토콜 준수 문제 해결하기","id":"81ded247"},{"tagName":"h3","title":"기본 사용 예제","id":"e163f81a"},{"tagName":"h3","title":"자동 Hashable 구현","id":"8d630a22"},{"tagName":"h3","title":"커스텀 타입에서 Hashable 구현","id":"65cbfb1c"},{"tagName":"h2","title":"'Hashable' 프로토콜 준수 문제 발생 이유와 해결 방법","id":"5f91fe7b"},{"tagName":"h3","title":"문제 원인","id":"813fc5fd"},{"tagName":"h3","title":"해결 방법","id":"9d672dc2"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
