1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift%EB%A1%9C-Custom-View%EC%99%80-Protocol-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b6071b4c","d"],{"children":["__PAGE__?{\"slug\":\"iOS-개발-Swift로-Custom-View와-Protocol-활용하기-b6071b4c\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift%EB%A1%9C-Custom-View%EC%99%80-Protocol-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b6071b4c","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"iOS-개발-Swift로-Custom-View와-Protocol-활용하기-b6071b4c\"}"},"styles":[]}],"segment":["slug","iOS-%EA%B0%9C%EB%B0%9C-Swift%EB%A1%9C-Custom-View%EC%99%80-Protocol-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b6071b4c","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"iOS 개발: Swift로 Custom View와 Protocol 활용하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 iOS 앱 개발에서 Swift를 사용하여 Custom View를 만들고 Protocol을 활용하는 방법에 대해 자세히 설명합니다. 다양한 예제와 함께 기본 개념부터 고급 개념까지 순차적으로 다룹니다."}],["$","meta","3",{"name":"keywords","content":"iOS,Swift,Custom View,Protocol"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C-Swift%EB%A1%9C-Custom-View%EC%99%80-Protocol-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b6071b4c"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"iOS 개발: Swift로 Custom View와 Protocol 활용하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"iOS 개발: Swift로 Custom View와 Protocol 활용하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 iOS 앱 개발에서 Swift를 사용하여 Custom View를 만들고 Protocol을 활용하는 방법에 대해 자세히 설명합니다. 다양한 예제와 함께 기본 개념부터 고급 개념까지 순차적으로 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/iOS-%EA%B0%9C%EB%B0%9C-Swift%EB%A1%9C-Custom-View%EC%99%80-Protocol-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0-b6071b4c"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"iOS 개발: Swift로 Custom View와 Protocol 활용하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 iOS 앱 개발에서 Swift를 사용하여 Custom View를 만들고 Protocol을 활용하는 방법에 대해 자세히 설명합니다. 다양한 예제와 함께 기본 개념부터 고급 개념까지 순차적으로 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T592,import UIKit

class CircularProgressBarView: UIView {

    private var progressLayer = CAShapeLayer()
    private var trackLayer = CAShapeLayer()
    
    var progressColor: UIColor = .blue {
        didSet {
            progressLayer.strokeColor = progressColor.cgColor
        }
    }
    var trackColor: UIColor = .lightGray {
        didSet {
            trackLayer.strokeColor = trackColor.cgColor
        }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayers()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupLayers()
    }
    
    private func setupLayers() {
        let circularPath = UIBezierPath(arcCenter: center, radius: 100, startAngle: -CGFloat.pi / 2, endAngle: 3 * CGFloat.pi / 2, clockwise: true)
        
        trackLayer.path = circularPath.cgPath
        trackLayer.fillColor = UIColor.clear.cgColor
        trackLayer.strokeColor = trackColor.cgColor
        trackLayer.lineWidth = 10
        layer.addSublayer(trackLayer)
        
        progressLayer.path = circularPath.cgPath
        progressLayer.fillColor = UIColor.clear.cgColor
        progressLayer.strokeColor = progressColor.cgColor
        progressLayer.lineWidth = 10
        progressLayer.strokeEnd = 0
        layer.addSublayer(progressLayer)
    }

    func setProgress(to progress: CGFloat) {
        progressLayer.strokeEnd = progress
    }
}
f:T592,import UIKit

class CircularProgressBarView: UIView {

    private var progressLayer = CAShapeLayer()
    private var trackLayer = CAShapeLayer()
    
    var progressColor: UIColor = .blue {
        didSet {
            progressLayer.strokeColor = progressColor.cgColor
        }
    }
    var trackColor: UIColor = .lightGray {
        didSet {
            trackLayer.strokeColor = trackColor.cgColor
        }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        setupLayers()
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        setupLayers()
    }
    
    private func setupLayers() {
        let circularPath = UIBezierPath(arcCenter: center, radius: 100, startAngle: -CGFloat.pi / 2, endAngle: 3 * CGFloat.pi / 2, clockwise: true)
        
        trackLayer.path = circularPath.cgPath
        trackLayer.fillColor = UIColor.clear.cgColor
        trackLayer.strokeColor = trackColor.cgColor
        trackLayer.lineWidth = 10
        layer.addSublayer(trackLayer)
        
        progressLayer.path = circularPath.cgPath
        progressLayer.fillColor = UIColor.clear.cgColor
        progressLayer.strokeColor = progressColor.cgColor
        progressLayer.lineWidth = 10
        progressLayer.strokeEnd = 0
        layer.addSublayer(progressLayer)
    }

    func setProgress(to progress: CGFloat) {
        progressLayer.strokeEnd = progress
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"iOS 개발: Swift로 Custom View와 Protocol 활용하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"iOS 개발: Swift로 Custom View와 Protocol 활용하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-16"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"f1108b6c","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"iOS 개발: Swift로 Custom View와 Protocol 활용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"iOS 앱 개발에서 사용자 정의 뷰(Custom View)는 중요한 역할을 합니다. 사용자에게 보다 일관된 UI를 제공하고, 코드의 재사용성을 높이며, 유지보수를 용이하게 합니다. 또한, Protocol을 활용하면 코드의 유연성을 극대화할 수 있습니다. 이번 글에서는 Swift를 사용하여 Custom View를 만들고, Protocol을 활용하여 효과적으로 연동하는 방법을 다루겠습니다."}],"\n",["$","h2",null,{"id":"337e9ce1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Custom View란 무엇인가?"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Custom View는 UIKit의 기본 컴포넌트가 아닌, 개발자가 직접 정의한 뷰를 의미합니다. 기본 제공되는 컴포넌트만으로는 구현할 수 없는 독특한 UI나 기능을 필요로 할 때 Custom View를 제작합니다. 이러한 Custom View는 여러 용도로 사용될 수 있습니다."}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"일관된 UI 구성"}],": 동일한 스타일의 UI를 여러 곳에서 사용할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"코드 재사용성 증가"}],": 반복되는 코드를 줄이고, 유지보수를 용이하게 합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 UI 구성"}],": 기본 컴포넌트로 표현할 수 없는 복잡한 UI를 설계합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"dccbcd88","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Custom View 만들기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Custom View를 만들기 위해선 UIView를 상속받아 새로운 클래스를 작성합니다. 이때 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"init(frame:)","position":{"start":{"line":16,"column":54,"offset":670},"end":{"line":16,"column":68,"offset":684}}}],"position":{"start":{"line":16,"column":54,"offset":670},"end":{"line":16,"column":68,"offset":684}}},"children":"init(frame:)"}}],"나 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"init(coder:)","position":{"start":{"line":16,"column":70,"offset":686},"end":{"line":16,"column":84,"offset":700}}}],"position":{"start":{"line":16,"column":70,"offset":686},"end":{"line":16,"column":84,"offset":700}}},"children":"init(coder:)"}}],"와 같은 Initializer를 오버라이드합니다."]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"예를 들어, 원형 프로그래스바를 만들었다고 가정해 봅시다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":20,"column":1,"offset":763},"end":{"line":70,"column":4,"offset":2201}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이렇게 하면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CircularProgressBarView","position":{"start":{"line":71,"column":9,"offset":2210},"end":{"line":71,"column":34,"offset":2235}}}],"position":{"start":{"line":71,"column":9,"offset":2210},"end":{"line":71,"column":34,"offset":2235}}},"children":"CircularProgressBarView"}}],"를 프로젝트 어디서든 사용하여 원형 프로그래스바를 쉽게 구현할 수 있습니다."]}],"\n",["$","h2",null,{"id":"b9432090","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Protocol의 활용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Protocol은 Swift의 강력한 기능 중 하나로, 특정 기능을 수행하기 위한 메소드나 프로퍼티를 정의하는데 사용됩니다. 이를 통해 클래스나 구조체가 프로토콜을 채택함으로써 특정 기능을 반드시 구현하게 강제할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Custom View와 Protocol을 결합하면 매우 유연한 디자인이 가능합니다. 예를 들어, 여러개의 Custom View가 동일한 이벤트를 처리해야 하는 상황에서 Protocol을 사용할 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"먼저, 프로토콜을 정의해 봅시다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"protocol ProgressBarDelegate: AnyObject {\n    func progressDidChange(to progress: CGFloat)\n}\n"}],"position":{"start":{"line":81,"column":1,"offset":2561},"end":{"line":85,"column":4,"offset":2666}}},"children":"protocol ProgressBarDelegate: AnyObject {\n    func progressDidChange(to progress: CGFloat)\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"그리고 Custom View 클래스에 이 프로토콜을 반영합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class CircularProgressBarView: UIView {\n\n    weak var delegate: ProgressBarDelegate?\n\n    // 이전 코드 동일\n\n    func setProgress(to progress: CGFloat) {\n        progressLayer.strokeEnd = progress\n        delegate?.progressDidChange(to: progress)\n    }\n}\n"}],"position":{"start":{"line":88,"column":1,"offset":2704},"end":{"line":100,"column":4,"offset":2965}}},"children":"class CircularProgressBarView: UIView {\n\n    weak var delegate: ProgressBarDelegate?\n\n    // 이전 코드 동일\n\n    func setProgress(to progress: CGFloat) {\n        progressLayer.strokeEnd = progress\n        delegate?.progressDidChange(to: progress)\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이제 이 Custom View를 사용하는 클래스에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ProgressBarDelegate","position":{"start":{"line":101,"column":30,"offset":2995},"end":{"line":101,"column":51,"offset":3016}}}],"position":{"start":{"line":101,"column":30,"offset":2995},"end":{"line":101,"column":51,"offset":3016}}},"children":"ProgressBarDelegate"}}]," 프로토콜을 채택하고, 해당 메소드를 구현해야 합니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"class ViewController: UIViewController, ProgressBarDelegate {\n\n    var progressBarView: CircularProgressBarView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // 초기화 및 레이아웃 설정 생략\n        progressBarView.delegate = self\n    }\n\n    func progressDidChange(to progress: CGFloat) {\n        print(\"Progress: \\(progress)\")\n    }\n}\n"}],"position":{"start":{"line":103,"column":1,"offset":3048},"end":{"line":118,"column":4,"offset":3409}}},"children":"class ViewController: UIViewController, ProgressBarDelegate {\n\n    var progressBarView: CircularProgressBarView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // 초기화 및 레이아웃 설정 생략\n        progressBarView.delegate = self\n    }\n\n    func progressDidChange(to progress: CGFloat) {\n        print(\"Progress: \\(progress)\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이를 통해, 각 Custom View 객체가 동일한 방식으로 이벤트를 통보할 수 있습니다. 이 방법은 코드의 유연성을 극대화할 뿐만 아니라, 유지보수성을 높이는 데도 매우 유용합니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift를 사용하여 Custom View를 제작하고 Protocol을 활용하면, iOS 앱 개발의 효율성을 크게 높일 수 있습니다. 다양한 UI 구성 요소를 쉽게 재사용할 수 있을 뿐만 아니라, 코드의 일관성과 유연성을 높여 유지보수를 용이하게 할 수 있습니다. 이 글에서 다룬 기본 개념과 예제를 바탕으로 여러분의 프로젝트에서도 Custom View와 Protocol을 적극 활용해 보시기 바랍니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"iOS 개발: Swift로 Custom View와 Protocol 활용하기","toc":[{"tagName":"h1","title":"iOS 개발: Swift로 Custom View와 Protocol 활용하기","id":"f1108b6c"},{"tagName":"h2","title":"Custom View란 무엇인가?","id":"337e9ce1"},{"tagName":"h2","title":"Custom View 만들기","id":"dccbcd88"},{"tagName":"h2","title":"Protocol의 활용","id":"b9432090"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
