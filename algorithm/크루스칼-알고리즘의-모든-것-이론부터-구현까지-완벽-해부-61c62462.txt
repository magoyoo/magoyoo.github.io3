1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-%EC%9D%B4%EB%A1%A0%EB%B6%80%ED%84%B0-%EA%B5%AC%ED%98%84%EA%B9%8C%EC%A7%80-%EC%99%84%EB%B2%BD-%ED%95%B4%EB%B6%80-61c62462","d"],{"children":["__PAGE__?{\"slug\":\"크루스칼-알고리즘의-모든-것-이론부터-구현까지-완벽-해부-61c62462\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-%EC%9D%B4%EB%A1%A0%EB%B6%80%ED%84%B0-%EA%B5%AC%ED%98%84%EA%B9%8C%EC%A7%80-%EC%99%84%EB%B2%BD-%ED%95%B4%EB%B6%80-61c62462","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"크루스칼-알고리즘의-모든-것-이론부터-구현까지-완벽-해부-61c62462\"}"},"styles":[]}],"segment":["slug","%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-%EC%9D%B4%EB%A1%A0%EB%B6%80%ED%84%B0-%EA%B5%AC%ED%98%84%EA%B9%8C%EC%A7%80-%EC%99%84%EB%B2%BD-%ED%95%B4%EB%B6%80-61c62462","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"크루스칼 알고리즘은 그래프의 최소 스패닝 트리를 찾는 알고리즘으로, 간단하면서도 강력한 성능을 자랑합니다. 이번 글에서는 크루스칼 알고리즘의 이론적인 배경부터 실제 구현 방법에 이르기까지 자세히 설명합니다."}],["$","meta","3",{"name":"keywords","content":"Kruskal,algorithm,그래프 이론,프로그래밍"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-%EC%9D%B4%EB%A1%A0%EB%B6%80%ED%84%B0-%EA%B5%AC%ED%98%84%EA%B9%8C%EC%A7%80-%EC%99%84%EB%B2%BD-%ED%95%B4%EB%B6%80-61c62462"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"크루스칼 알고리즘은 그래프의 최소 스패닝 트리를 찾는 알고리즘으로, 간단하면서도 강력한 성능을 자랑합니다. 이번 글에서는 크루스칼 알고리즘의 이론적인 배경부터 실제 구현 방법에 이르기까지 자세히 설명합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%ED%81%AC%EB%A3%A8%EC%8A%A4%EC%B9%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-%EC%9D%B4%EB%A1%A0%EB%B6%80%ED%84%B0-%EA%B5%AC%ED%98%84%EA%B9%8C%EC%A7%80-%EC%99%84%EB%B2%BD-%ED%95%B4%EB%B6%80-61c62462"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"크루스칼 알고리즘은 그래프의 최소 스패닝 트리를 찾는 알고리즘으로, 간단하면서도 강력한 성능을 자랑합니다. 이번 글에서는 크루스칼 알고리즘의 이론적인 배경부터 실제 구현 방법에 이르기까지 자세히 설명합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/defaultBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-10"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"067f9f77","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"크루스칼 알고리즘은 컴퓨터 과학에서 중요한 최소 스패닝 트리(MST)를 찾는 대표적인 알고리즘 중 하나입니다. 이 글에서는 크루스칼 알고리즘의 개념, 동작 원리, 그리고 실제 코드 구현까지 다룹니다. 크루스칼 알고리즘은 간선 기반 알고리즘으로, 주로 많은 그래프 문제를 해결하는 데 사용됩니다."}],"\n",["$","h2",null,{"id":"c3a6a92d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"크루스칼 알고리즘의 개요"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["크루스칼 알고리즘은 1956년에 최초로 소개되었습니다. 이 알고리즘은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"그래프의 모든 간선","position":{"start":{"line":8,"column":40,"offset":260},"end":{"line":8,"column":52,"offset":272}}}],"position":{"start":{"line":8,"column":40,"offset":260},"end":{"line":8,"column":52,"offset":272}}},"children":"그래프의 모든 간선"}}],"을 적은 비용 순으로 정렬한 후, ",["$","strong",null,{"className":"font-black","children":"사이클"}],"이 형성되지 않도록 하나씩 간선을 추가하여 최소 스패닝 트리를 구성하는 방법입니다."]}],"\n",["$","h3",null,{"id":"64c2188a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"그래프 이론 배경"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"그래프(Graph)","position":{"start":{"line":12,"column":3,"offset":363},"end":{"line":12,"column":15,"offset":375}}}],"position":{"start":{"line":12,"column":3,"offset":363},"end":{"line":12,"column":15,"offset":375}}},"children":"그래프(Graph)"}}],": 정점(Vertex)과 간선(Edge)으로 구성된 데이터 구조입니다."]}],"\n",["$","li","li-1",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"스패닝 트리(Spanning Tree)","position":{"start":{"line":13,"column":3,"offset":417},"end":{"line":13,"column":26,"offset":440}}}],"position":{"start":{"line":13,"column":3,"offset":417},"end":{"line":13,"column":26,"offset":440}}},"children":"스패닝 트리(Spanning Tree)"}}],": 주어진 그래프의 모든 정점을 포함하는 트리입니다. 즉, 그래프의 부분집합으로 간선은 최소한으로 사용됩니다."]}],"\n",["$","li","li-2",{"children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"최소 스패닝 트리(Minimum Spanning Tree, MST)","position":{"start":{"line":14,"column":3,"offset":504},"end":{"line":14,"column":42,"offset":543}}}],"position":{"start":{"line":14,"column":3,"offset":504},"end":{"line":14,"column":42,"offset":543}}},"children":"최소 스패닝 트리(Minimum Spanning Tree, MST)"}}],": 모든 정점을 연결하면서 전체 간선 가중치의 합이 최소인 스패닝 트리입니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"f65d7793","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"크루스칼 알고리즘의 동작 원리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"크루스칼 알고리즘은 다음과 같은 단계로 진행됩니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"그래프의 모든 간선을 가중치 오름차순으로 정렬합니다."}],"\n",["$","li","li-1",{"children":"간선을 하나씩 선택하면서, 현재 간선이 잇는 두 정점이 같은 트리에 속해 있지 않다면, 현재 간선을 최소 스패닝 트리에 추가합니다."}],"\n",["$","li","li-2",{"children":["간선을 추가했을 때 사이클이 생기지 않도록 합니다. 이를 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Union-Find","position":{"start":{"line":22,"column":39,"offset":788},"end":{"line":22,"column":51,"offset":800}}}],"position":{"start":{"line":22,"column":39,"offset":788},"end":{"line":22,"column":51,"offset":800}}},"children":"Union-Find"}}]," 자료구조를 사용합니다."]}],"\n",["$","li","li-3",{"children":"모든 정점이 연결될 때까지 반복합니다."}],"\n"]}],"\n",["$","h2",null,{"id":"7b4df210","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"크루스칼 알고리즘의 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 Python을 사용하여 크루스칼 알고리즘을 구현하는 방법을 살펴보겠습니다. 일반적으로 Union-Find 자료구조를 사용하여 사이클을 방지합니다."}],"\n",["$","h3",null,{"id":"195f4917","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"필요한 함수 정의"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":["$","strong",null,{"className":"font-black","children":"Union-Find 자료구조"}]}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, u):\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u, v):\n        root_u = self.find(u)\n        root_v = self.find(v)\n\n        if root_u != root_v:\n            if self.rank[root_u] > self.rank[root_v]:\n                self.parent[root_v] = root_u\n            elif self.rank[root_u] < self.rank[root_v]:\n                self.parent[root_u] = root_v\n            else:\n                self.parent[root_v] = root_u\n                self.rank[root_u] += 1\n"}],"position":{"start":{"line":33,"column":1,"offset":983},"end":{"line":56,"column":4,"offset":1666}}},"children":"class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, u):\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u, v):\n        root_u = self.find(u)\n        root_v = self.find(v)\n\n        if root_u != root_v:\n            if self.rank[root_u] > self.rank[root_v]:\n                self.parent[root_v] = root_u\n            elif self.rank[root_u] < self.rank[root_v]:\n                self.parent[root_u] = root_v\n            else:\n                self.parent[root_v] = root_u\n                self.rank[root_u] += 1\n"}}]}],"\n",["$","ol","ol-2",{"start":2,"children":["\n",["$","li","li-0",{"children":["$","strong",null,{"className":"font-black","children":"크루스칼 알고리즘 코어 함수"}]}],"\n"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def kruskal(n, edges):\n    mst = []\n    uf = UnionFind(n)\n\n    edges.sort(key=lambda x: x[2])  # 가중치 기준 오름차순 정렬\n\n    for u, v, weight in edges:\n        if uf.find(u) != uf.find(v):\n            uf.union(u, v)\n            mst.append((u, v, weight))\n\n    return mst\n"}],"position":{"start":{"line":60,"column":1,"offset":1692},"end":{"line":73,"column":4,"offset":1968}}},"children":"def kruskal(n, edges):\n    mst = []\n    uf = UnionFind(n)\n\n    edges.sort(key=lambda x: x[2])  # 가중치 기준 오름차순 정렬\n\n    for u, v, weight in edges:\n        if uf.find(u) != uf.find(v):\n            uf.union(u, v)\n            mst.append((u, v, weight))\n\n    return mst\n"}}]}],"\n",["$","h3",null,{"id":"ac931ba2","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제 실행"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 몇 가지 예제를 통해 크루스칼 알고리즘이 어떻게 작동하는지 살펴보겠습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"# 정점 수와 간선 정보\nn = 4\nedges = [\n    (0, 1, 10),\n    (0, 2, 6),\n    (0, 3, 5),\n    (1, 3, 15),\n    (2, 3, 4)\n]\n\nmst = kruskal(n, edges)\nprint(\"Minimum Spanning Tree: \", mst)\n"}],"position":{"start":{"line":79,"column":1,"offset":2027},"end":{"line":92,"column":4,"offset":2211}}},"children":"# 정점 수와 간선 정보\nn = 4\nedges = [\n    (0, 1, 10),\n    (0, 2, 6),\n    (0, 3, 5),\n    (1, 3, 15),\n    (2, 3, 4)\n]\n\nmst = kruskal(n, edges)\nprint(\"Minimum Spanning Tree: \", mst)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 예제에서는 4개의 정점과 5개의 간선이 주어졌으며, 이 간선들 중에서 최소 가중치를 갖는 스패닝 트리를 찾아 출력을 확인할 수 있습니다."}],"\n",["$","h2",null,{"id":"9ce08523","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"크루스칼 알고리즘의 시간 복잡도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["크루스칼 알고리즘의 시간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(E log E)","position":{"start":{"line":98,"column":20,"offset":2334},"end":{"line":98,"column":32,"offset":2346}}}],"position":{"start":{"line":98,"column":20,"offset":2334},"end":{"line":98,"column":32,"offset":2346}}},"children":"O(E log E)"}}],"입니다. 여기서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"E","position":{"start":{"line":98,"column":41,"offset":2355},"end":{"line":98,"column":44,"offset":2358}}}],"position":{"start":{"line":98,"column":41,"offset":2355},"end":{"line":98,"column":44,"offset":2358}}},"children":"E"}}],"는 그래프의 간선 수를 의미합니다. 이는 간선들을 정렬하는 데 필요한 시간에서 옵니다. 최악의 경우를 고려하더라도 크루스칼 알고리즘은 상당히 효율적이며, Union-Find 자료구조 덕분에 추가적인 최적화도 가능합니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"크루스칼 알고리즘은 그 단순성에도 불구하고 강력한 성능을 가진 알고리즘입니다. 최소 스패닝 트리를 쉽게 찾을 수 있고, 다양한 그래프 문제에서 활용될 수 있습니다. 이 글에서는 크루스칼 알고리즘의 이론적 배경부터 실제 코드 구현까지 자세히 다뤘으며, 이를 통해 적극적으로 문제를 해결하는 데 도움을 주고자 했습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부","toc":[{"tagName":"h1","title":"크루스칼 알고리즘의 모든 것: 이론부터 구현까지 완벽 해부","id":"067f9f77"},{"tagName":"h2","title":"크루스칼 알고리즘의 개요","id":"c3a6a92d"},{"tagName":"h3","title":"그래프 이론 배경","id":"64c2188a"},{"tagName":"h3","title":"크루스칼 알고리즘의 동작 원리","id":"f65d7793"},{"tagName":"h2","title":"크루스칼 알고리즘의 구현","id":"7b4df210"},{"tagName":"h3","title":"필요한 함수 정의","id":"195f4917"},{"tagName":"h3","title":"예제 실행","id":"ac931ba2"},{"tagName":"h2","title":"크루스칼 알고리즘의 시간 복잡도","id":"9ce08523"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
