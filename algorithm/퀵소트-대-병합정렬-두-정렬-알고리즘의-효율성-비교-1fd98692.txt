1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%ED%80%B5%EC%86%8C%ED%8A%B8-%EB%8C%80-%EB%B3%91%ED%95%A9%EC%A0%95%EB%A0%AC-%EB%91%90-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EB%B9%84%EA%B5%90-1fd98692","d"],{"children":["__PAGE__?{\"slug\":\"퀵소트-대-병합정렬-두-정렬-알고리즘의-효율성-비교-1fd98692\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%ED%80%B5%EC%86%8C%ED%8A%B8-%EB%8C%80-%EB%B3%91%ED%95%A9%EC%A0%95%EB%A0%AC-%EB%91%90-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EB%B9%84%EA%B5%90-1fd98692","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"퀵소트-대-병합정렬-두-정렬-알고리즘의-효율성-비교-1fd98692\"}"},"styles":[]}],"segment":["slug","%ED%80%B5%EC%86%8C%ED%8A%B8-%EB%8C%80-%EB%B3%91%ED%95%A9%EC%A0%95%EB%A0%AC-%EB%91%90-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EB%B9%84%EA%B5%90-1fd98692","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"퀵소트와 병합정렬은 둘 다 높은 효율성을 자랑하는 정렬 알고리즘입니다. 이 글에서는 두 알고리즘의 작동 방식, 시간 복잡도, 공간 복잡도 등을 비교하여 어떤 상황에서 더 나은 선택이 될 수 있는지 탐구합니다."}],["$","meta","3",{"name":"keywords","content":"퀵소트,병합정렬,알고리즘,정렬"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%ED%80%B5%EC%86%8C%ED%8A%B8-%EB%8C%80-%EB%B3%91%ED%95%A9%EC%A0%95%EB%A0%AC-%EB%91%90-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EB%B9%84%EA%B5%90-1fd98692"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"퀵소트와 병합정렬은 둘 다 높은 효율성을 자랑하는 정렬 알고리즘입니다. 이 글에서는 두 알고리즘의 작동 방식, 시간 복잡도, 공간 복잡도 등을 비교하여 어떤 상황에서 더 나은 선택이 될 수 있는지 탐구합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%ED%80%B5%EC%86%8C%ED%8A%B8-%EB%8C%80-%EB%B3%91%ED%95%A9%EC%A0%95%EB%A0%AC-%EB%91%90-%EC%A0%95%EB%A0%AC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%84%B1-%EB%B9%84%EA%B5%90-1fd98692"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"퀵소트와 병합정렬은 둘 다 높은 효율성을 자랑하는 정렬 알고리즘입니다. 이 글에서는 두 알고리즘의 작동 방식, 시간 복잡도, 공간 복잡도 등을 비교하여 어떤 상황에서 더 나은 선택이 될 수 있는지 탐구합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/algorithmImg.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-08"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"0af722b3","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["정렬 알고리즘은 데이터를 정렬해야 하는 수많은 작업에 필수적입니다. 이 중에서도 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"퀵소트(QuickSort)","position":{"start":{"line":4,"column":46,"offset":79},"end":{"line":4,"column":62,"offset":95}}}],"position":{"start":{"line":4,"column":46,"offset":79},"end":{"line":4,"column":62,"offset":95}}},"children":"퀵소트(QuickSort)"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"병합정렬(MergeSort)","position":{"start":{"line":4,"column":64,"offset":97},"end":{"line":4,"column":81,"offset":114}}}],"position":{"start":{"line":4,"column":64,"offset":97},"end":{"line":4,"column":81,"offset":114}}},"children":"병합정렬(MergeSort)"}}],"은 가장 널리 사용되는 효율적인 알고리즘입니다. 두 알고리즘 모두 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"분할 정복(Divide and Conquer)","position":{"start":{"line":4,"column":118,"offset":151},"end":{"line":4,"column":145,"offset":178}}}],"position":{"start":{"line":4,"column":118,"offset":151},"end":{"line":4,"column":145,"offset":178}}},"children":"분할 정복(Divide and Conquer)"}}]," 개념을 기반으로 하지만, 그 구현 방식과 특성은 다릅니다. 이 글에서는 퀵소트와 병합정렬의 작동 방식, 시간 복잡도, 공간 복잡도를 중심으로 비교하고 어떤 상황에서 어느 알고리즘이 더 적합한지 살펴보겠습니다."]}],"\n",["$","h2",null,{"id":"7511f166","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"퀵소트(QuickSort)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["퀵소트는 C.A.R. Hoare에 의해 개발된 알고리즘입니다. 이 알고리즘은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"분할 정복","position":{"start":{"line":8,"column":44,"offset":359},"end":{"line":8,"column":51,"offset":366}}}],"position":{"start":{"line":8,"column":44,"offset":359},"end":{"line":8,"column":51,"offset":366}}},"children":"분할 정복"}}]," 방법을 사용하여 리스트를 정렬합니다. 우선 리스트에서 하나의 '피벗' 요소를 선택하고, 이 피벗을 기준으로 리스트를 두 개의 하위 리스트로 분할합니다. 하나는 피벗보다 작은 요소들로, 다른 하나는 피벗보다 큰 요소들로 구성됩니다. 이렇게 분할된 리스트를 재귀적으로 정렬하는 방식입니다."]}],"\n",["$","h3",null,{"id":"a727814a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"퀵소트 작동 방식"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":"피벗을 선택합니다. 일반적으로 리스트의 첫 요소, 마지막 요소, 혹은 중간 요소를 피벗으로 선택합니다."}],"\n",["$","li","li-1",{"children":"피벗을 기준으로 리스트를 두 개의 부분 리스트로 분할합니다. 하나는 피벗보다 작은 요소들, 다른 하나는 피벗보다 큰 요소들입니다."}],"\n",["$","li","li-2",{"children":"두 부분 리스트에 대해 퀵소트를 재귀적으로 수행합니다."}],"\n",["$","li","li-3",{"children":"재귀적 정렬이 완료되면 두 리스트를 합쳐 정렬된 리스트를 반환합니다."}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def quick_sort(arr):\n    if len(arr) <= 1: \n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n"}],"position":{"start":{"line":17,"column":1,"offset":757},"end":{"line":26,"column":4,"offset":1048}}},"children":"def quick_sort(arr):\n    if len(arr) <= 1: \n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n"}}]}],"\n",["$","h3",null,{"id":"51eef631","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"시간 복잡도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["퀵소트의 평균 시간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n log n)","position":{"start":{"line":30,"column":17,"offset":1078},"end":{"line":30,"column":29,"offset":1090}}}],"position":{"start":{"line":30,"column":17,"offset":1078},"end":{"line":30,"column":29,"offset":1090}}},"children":"O(n log n)"}}],"입니다. 하지만 최악의 경우에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":30,"column":47,"offset":1108},"end":{"line":30,"column":55,"offset":1116}}}],"position":{"start":{"line":30,"column":47,"offset":1108},"end":{"line":30,"column":55,"offset":1116}}},"children":"O(n^2)"}}],"가 될 수 있습니다. 이는 피벗 선택이 부적절할 때 발생합니다. 예를 들어, 이미 정렬된 리스트에서 첫 번째나 마지막 요소를 항상 피벗으로 선택하면 최악의 경우가 발생할 수 있습니다."]}],"\n",["$","h3",null,{"id":"ac9d1e0f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"공간 복잡도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["퀵소트의 공간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(log n)","position":{"start":{"line":34,"column":14,"offset":1245},"end":{"line":34,"column":24,"offset":1255}}}],"position":{"start":{"line":34,"column":14,"offset":1245},"end":{"line":34,"column":24,"offset":1255}}},"children":"O(log n)"}}],"입니다. 이는 재귀 호출 스택의 깊이와 관련이 있습니다. 이는 대부분의 경우에 효율적인 수준이지만, 최악의 경우에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":34,"column":89,"offset":1320},"end":{"line":34,"column":95,"offset":1326}}}],"position":{"start":{"line":34,"column":89,"offset":1320},"end":{"line":34,"column":95,"offset":1326}}},"children":"O(n)"}}],"이 될 수 있습니다."]}],"\n",["$","h2",null,{"id":"359b205d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"병합정렬(MergeSort)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["병합정렬은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"존 폰 노이만(John von Neumann)","position":{"start":{"line":38,"column":7,"offset":1365},"end":{"line":38,"column":34,"offset":1392}}}],"position":{"start":{"line":38,"column":7,"offset":1365},"end":{"line":38,"column":34,"offset":1392}}},"children":"존 폰 노이만(John von Neumann)"}}],"에 의해 개발된 알고리즘입니다. 이 알고리즘 역시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"분할 정복","position":{"start":{"line":38,"column":62,"offset":1420},"end":{"line":38,"column":69,"offset":1427}}}],"position":{"start":{"line":38,"column":62,"offset":1420},"end":{"line":38,"column":69,"offset":1427}}},"children":"분할 정복"}}]," 방법을 사용하지만, 퀵소트와는 다르게 리스트를 절반으로 분할하고 각각을 재귀적으로 정렬한 후, 두 정렬된 리스트를 병합하여 최종적으로 정렬된 리스트를 얻습니다."]}],"\n",["$","h3",null,{"id":"d2b2a6cf","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"병합정렬 작동 방식"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":"리스트의 중간 지점을 찾아 두 개의 하위 리스트로 분할합니다."}],"\n",["$","li","li-1",{"children":"각 하위 리스트에 대해 병합정렬을 재귀적으로 수행합니다."}],"\n",["$","li","li-2",{"children":"두 정렬된 하위 리스트를 병합하여 하나의 정렬된 리스트로 만듭니다."}],"\n"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"}],"position":{"start":{"line":46,"column":1,"offset":1650},"end":{"line":68,"column":4,"offset":2174}}},"children":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"}}]}],"\n",["$","h3",null,{"id":"51eef631","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"시간 복잡도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["병합정렬의 시간 복잡도는 항상 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n log n)","position":{"start":{"line":72,"column":18,"offset":2205},"end":{"line":72,"column":30,"offset":2217}}}],"position":{"start":{"line":72,"column":18,"offset":2205},"end":{"line":72,"column":30,"offset":2217}}},"children":"O(n log n)"}}]," 입니다. 이는 리스트가 항상 절반씩 분할되고, 병합 과정에서 추가적인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":72,"column":70,"offset":2257},"end":{"line":72,"column":76,"offset":2263}}}],"position":{"start":{"line":72,"column":70,"offset":2257},"end":{"line":72,"column":76,"offset":2263}}},"children":"O(n)"}}]," 시간이 소요되기 때문입니다."]}],"\n",["$","h3",null,{"id":"ac9d1e0f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"공간 복잡도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["병합정렬의 공간 복잡도는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":76,"column":15,"offset":2307},"end":{"line":76,"column":21,"offset":2313}}}],"position":{"start":{"line":76,"column":15,"offset":2307},"end":{"line":76,"column":21,"offset":2313}}},"children":"O(n)"}}],"입니다. 이는 병합 과정에서 추가적인 배열이 필요하기 때문입니다. 이는 큰 데이터를 다룰 때 메모리 사용량이 많아질 수 있습니다."]}],"\n",["$","h2",null,{"id":"b3bef17f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"퀵소트와 병합정렬 비교"}],"\n",["$","h3",null,{"id":"1a5d73de","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"성능"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["퀵소트는 평균적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n log n)","position":{"start":{"line":82,"column":12,"offset":2423},"end":{"line":82,"column":24,"offset":2435}}}],"position":{"start":{"line":82,"column":12,"offset":2423},"end":{"line":82,"column":24,"offset":2435}}},"children":"O(n log n)"}}],"의 시간 복잡도를 가지지만, 최악의 경우 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n^2)","position":{"start":{"line":82,"column":47,"offset":2458},"end":{"line":82,"column":55,"offset":2466}}}],"position":{"start":{"line":82,"column":47,"offset":2458},"end":{"line":82,"column":55,"offset":2466}}},"children":"O(n^2)"}}],"이 될 수 있습니다. 이에 비해 병합정렬은 항상 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(n log n)","position":{"start":{"line":82,"column":82,"offset":2493},"end":{"line":82,"column":94,"offset":2505}}}],"position":{"start":{"line":82,"column":82,"offset":2493},"end":{"line":82,"column":94,"offset":2505}}},"children":"O(n log n)"}}],"의 시간 복잡도를 유지합니다. 이로 인해 데이터의 특성에 따라 선택이 달라질 수 있습니다. 예를 들어, 거의 정렬된 데이터에서는 퀵소트가 더 나을 수 있고, 무작위 데이터에서는 병합정렬이 더 안정적일 수 있습니다."]}],"\n",["$","h3",null,{"id":"2c8bae07","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"메모리 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["퀵소트는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"인플레이스","position":{"start":{"line":86,"column":6,"offset":2643},"end":{"line":86,"column":13,"offset":2650}}}],"position":{"start":{"line":86,"column":6,"offset":2643},"end":{"line":86,"column":13,"offset":2650}}},"children":"인플레이스"}}]," 알고리즘으로, 추가 메모리 사용이 적습니다. 이는 제한된 메모리 환경에서 더욱 유리합니다. 반면 병합정렬은 추가 배열을 필요로 하므로 메모리 사용량이 더 큽니다."]}],"\n",["$","h3",null,{"id":"b7d9a9ab","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"구현 난이도"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"퀵소트는 구현이 비교적 간단하지만 피벗 선택이 중요한 역할을 합니다. 반면 병합정렬은 구현이 더 복잡할 수 있지만, 항상 안정된 성능을 보장합니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"퀵소트와 병합정렬은 각기 다른 장단점을 지니고 있습니다. 퀵소트는 평균적으로 더 빠른 성능을 보이지만, 최악의 경우 성능 저하가 있을 수 있습니다. 병합정렬은 일정한 성능을 보장하지만, 메모리 사용량이 많습니다. 따라서 특정 상황과 데이터 특성에 맞춰 적절한 알고리즘을 선택하는 것이 중요합니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교","toc":[{"tagName":"h1","title":"퀵소트 대 병합정렬: 두 정렬 알고리즘의 효율성 비교","id":"0af722b3"},{"tagName":"h2","title":"퀵소트(QuickSort)","id":"7511f166"},{"tagName":"h3","title":"퀵소트 작동 방식","id":"a727814a"},{"tagName":"h3","title":"시간 복잡도","id":"51eef631"},{"tagName":"h3","title":"공간 복잡도","id":"ac9d1e0f"},{"tagName":"h2","title":"병합정렬(MergeSort)","id":"359b205d"},{"tagName":"h3","title":"병합정렬 작동 방식","id":"d2b2a6cf"},{"tagName":"h3","title":"시간 복잡도","id":"51eef631"},{"tagName":"h3","title":"공간 복잡도","id":"ac9d1e0f"},{"tagName":"h2","title":"퀵소트와 병합정렬 비교","id":"b3bef17f"},{"tagName":"h3","title":"성능","id":"1a5d73de"},{"tagName":"h3","title":"메모리 사용","id":"2c8bae07"},{"tagName":"h3","title":"구현 난이도","id":"b7d9a9ab"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
