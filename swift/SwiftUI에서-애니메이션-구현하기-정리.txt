1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%A0%95%EB%A6%AC","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI에서-애니메이션-구현하기-정리\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%A0%95%EB%A6%AC","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI에서-애니메이션-구현하기-정리\"}"},"styles":[]}],"segment":["slug","SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%A0%95%EB%A6%AC","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 SwiftUI에서 기본 및 커스텀 애니메이션을 구현하는 방법을 자세히 설명합니다. 기본 애니메이션부터 스프링 애니메이션, EaseInOut 애니메이션, 중첩 및 조합 애니메이션, 지연된 애니메이션까지 다양한 예제를 통해 애니메이션의 원리와 적용 방법을 이해할 수 있습니다. SwiftUI의 애니메이션 기능을 활용하여 더욱 동적이고 매력적인 사용자 인터페이스를 만드는 방법을 알아보세요."}],["$","meta","3",{"name":"keywords","content":"swift,swiftUI,animation"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%A0%95%EB%A6%AC"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 SwiftUI에서 기본 및 커스텀 애니메이션을 구현하는 방법을 자세히 설명합니다. 기본 애니메이션부터 스프링 애니메이션, EaseInOut 애니메이션, 중첩 및 조합 애니메이션, 지연된 애니메이션까지 다양한 예제를 통해 애니메이션의 원리와 적용 방법을 이해할 수 있습니다. SwiftUI의 애니메이션 기능을 활용하여 더욱 동적이고 매력적인 사용자 인터페이스를 만드는 방법을 알아보세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI%EC%97%90%EC%84%9C-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-%EC%A0%95%EB%A6%AC"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 SwiftUI에서 기본 및 커스텀 애니메이션을 구현하는 방법을 자세히 설명합니다. 기본 애니메이션부터 스프링 애니메이션, EaseInOut 애니메이션, 중첩 및 조합 애니메이션, 지연된 애니메이션까지 다양한 예제를 통해 애니메이션의 원리와 적용 방법을 이해할 수 있습니다. SwiftUI의 애니메이션 기능을 활용하여 더욱 동적이고 매력적인 사용자 인터페이스를 만드는 방법을 알아보세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBasic.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBasic.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-27"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"3c38ab36","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 애플의 최신 UI 프레임워크로, 선언형 문법을 통해 간결하고 직관적인 방식으로 사용자 인터페이스를 구축할 수 있게 합니다. 그 중에서도 애니메이션은 사용자 경험을 향상시키는 중요한 요소입니다. SwiftUI에서는 다양한 애니메이션을 손쉽게 구현할 수 있으며, 기본 애니메이션부터 커스텀 애니메이션까지 폭넓게 지원합니다. 이번 글에서는 SwiftUI에서 기본 및 커스텀 애니메이션을 구현하는 방법에 대해 자세히 알아보겠습니다."}],"\n",["$","h2",null,{"id":"846d5326","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기본 애니메이션은 SwiftUI에서 매우 간단하게 구현할 수 있습니다. SwiftUI의 기본 애니메이션은 상태 변화를 감지하여 자동으로 애니메이션을 적용합니다. 이를 위해 .animation() modifier를 사용합니다."}],"\n",["$","h3",null,{"id":"2567a4c6","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 간단한 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 버튼을 클릭할 때마다 뷰의 크기가 변경되는 간단한 예제입니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.default)\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":489},"end":{"line":43,"column":4,"offset":1164}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.default)\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 .animation(.default)를 사용하여 상태(isExpanded)가 변경될 때 크기 변화에 애니메이션을 적용했습니다. .animation(.default)는 기본 애니메이션으로, 부드럽게 변화합니다."}],"\n",["$","h2",null,{"id":"d7c7451d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"커스텀 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기본 애니메이션 외에도 SwiftUI는 다양한 커스텀 애니메이션을 제공합니다. 커스텀 애니메이션은 애니메이션의 속성(예: 속도, 지연 시간, 스프링 효과 등)을 세밀하게 조정할 수 있습니다."}],"\n",["$","h3",null,{"id":"47a7a8ef","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 스프링 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"스프링 애니메이션은 자연스러운 탄성 효과를 주는 애니메이션입니다. .spring() modifier를 사용하여 구현할 수 있습니다."}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.spring(response: 0.5, dampingFraction: 0.6, blendDuration: 0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":55,"column":1,"offset":1507},"end":{"line":84,"column":4,"offset":2236}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.spring(response: 0.5, dampingFraction: 0.6, blendDuration: 0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 .animation(.spring(response:dampingFraction:blendDuration:))을 사용하여 스프링 애니메이션을 적용했습니다. response는 애니메이션의 속도를, dampingFraction은 애니메이션의 탄성 정도를, blendDuration은 애니메이션 간의 블렌딩 시간을 설정합니다."}],"\n",["$","h3",null,{"id":"d5cb87f5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: EaseInOut 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"EaseInOut 애니메이션은 시작과 끝 부분에서 천천히 움직이고, 중간 부분에서 빠르게 움직이는 애니메이션입니다. .easeInOut() modifier를 사용하여 구현할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.easeInOut(duration: 1.0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":92,"column":1,"offset":2556},"end":{"line":121,"column":4,"offset":3248}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.easeInOut(duration: 1.0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 .animation(.easeInOut(duration:))을 사용하여 EaseInOut 애니메이션을 적용했습니다. duration은 애니메이션의 지속 시간을 설정합니다."}],"\n",["$","h2",null,{"id":"d9d58b3c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"애니메이션의 중첩 및 조합"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI에서는 여러 애니메이션을 중첩하거나 조합하여 복잡한 애니메이션을 구현할 수 있습니다. 이는 각 애니메이션의 시작 및 종료 시점을 조정하여 다양한 효과를 줄 수 있습니다."}],"\n",["$","h3",null,{"id":"0e12e263","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 중첩 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 크기와 색상이 동시에 변경되는 중첩 애니메이션의 예제입니다."}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(isExpanded ? Color.red : Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.easeInOut(duration: 1.0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size and Color\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":133,"column":1,"offset":3533},"end":{"line":162,"column":4,"offset":4260}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(isExpanded ? Color.red : Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(.easeInOut(duration: 1.0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size and Color\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 색상과 크기 변화를 동시에 애니메이션으로 적용했습니다. isExpanded 상태가 변경될 때, .animation(.easeInOut(duration: 1.0))이 적용되어 색상과 크기가 동시에 부드럽게 변화합니다."}],"\n",["$","h2",null,{"id":"eca32491","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"애니메이션 제어"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI에서는 애니메이션의 시작과 종료 시점을 제어할 수 있는 다양한 방법을 제공합니다. .delay() modifier를 사용하여 애니메이션을 지연시키거나, .repeatForever() modifier를 사용하여 애니메이션을 무한 반복할 수 있습니다."}],"\n",["$","h3",null,{"id":"a8e4b11b","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"예제: 지연된 애니메이션"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 버튼을 클릭한 후 1초 뒤에 애니메이션이 시작되는 예제입니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(Animation.easeInOut(duration: 1.0).delay(1.0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size with Delay\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}],"position":{"start":{"line":174,"column":1,"offset":4610},"end":{"line":203,"column":4,"offset":5333}}},"children":"import SwiftUI\n\nstruct ContentView: View {\n    @State private var isExpanded = false\n\n    var body: some View {\n        VStack {\n            Spacer()\n\n            Rectangle()\n                .fill(Color.blue)\n                .frame(width: isExpanded ? 300 : 100, height: isExpanded ? 300 : 100)\n                .animation(Animation.easeInOut(duration: 1.0).delay(1.0))\n\n            Spacer()\n\n            Button(action: {\n                isExpanded.toggle()\n            }) {\n                Text(\"Toggle Size with Delay\")\n                    .padding()\n                    .background(Color.blue)\n                    .foregroundColor(.white)\n                    .cornerRadius(10)\n            }\n        }\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 코드에서 .animation(Animation.easeInOut(duration: 1.0).delay(1.0))을 사용하여 버튼 클릭 후 1초 뒤에 애니메이션이 시작되도록 설정했습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 애니메이션을 손쉽게 구현할 수 있는 강력한 도구들을 제공합니다. 기본 애니메이션부터 커스텀 애니메이션까지 다양한 옵션을 활용하여 더욱 풍부하고 동적인 사용자 경험을 제공할 수 있습니다. 애니메이션의 속성, 시작 및 종료 시점, 반복 등을 세밀하게 제어하여 원하는 애니메이션 효과를 구현해 보세요. SwiftUI의 애니메이션 기능을 잘 활용하면, 앱의 인터페이스를 더욱 매력적으로 만들 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기","toc":[{"tagName":"h2","title":"기본 및 커스텀 애니메이션: SwiftUI에서 애니메이션 구현하기","id":"3c38ab36"},{"tagName":"h2","title":"기본 애니메이션","id":"846d5326"},{"tagName":"h3","title":"예제: 간단한 애니메이션","id":"2567a4c6"},{"tagName":"h2","title":"커스텀 애니메이션","id":"d7c7451d"},{"tagName":"h3","title":"예제: 스프링 애니메이션","id":"47a7a8ef"},{"tagName":"h3","title":"예제: EaseInOut 애니메이션","id":"d5cb87f5"},{"tagName":"h2","title":"애니메이션의 중첩 및 조합","id":"d9d58b3c"},{"tagName":"h3","title":"예제: 중첩 애니메이션","id":"0e12e263"},{"tagName":"h2","title":"애니메이션 제어","id":"eca32491"},{"tagName":"h3","title":"예제: 지연된 애니메이션","id":"a8e4b11b"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
