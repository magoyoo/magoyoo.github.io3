1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift-Combine-Subject%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9%EB%B2%95","d"],{"children":["__PAGE__?{\"slug\":\"Swift-Combine-Subject의-이해와-활용법\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift-Combine-Subject%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9%EB%B2%95","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift-Combine-Subject의-이해와-활용법\"}"},"styles":[]}],"segment":["slug","Swift-Combine-Subject%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9%EB%B2%95","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift Combine Subject의 이해와 활용법 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"Combine의 `PassthroughSubject`와 `CurrentValueSubject`의 개념과 차이점을 설명하고, 실제 애플리케이션에서 이를 사용하는 방법을 다룹니다."}],["$","meta","3",{"name":"keywords","content":"swift,combine"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift-Combine-Subject%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9%EB%B2%95"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift Combine Subject의 이해와 활용법 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift Combine Subject의 이해와 활용법 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"Combine의 `PassthroughSubject`와 `CurrentValueSubject`의 개념과 차이점을 설명하고, 실제 애플리케이션에서 이를 사용하는 방법을 다룹니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift-Combine-Subject%EC%9D%98-%EC%9D%B4%ED%95%B4%EC%99%80-%ED%99%9C%EC%9A%A9%EB%B2%95"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swift-combine.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift Combine Subject의 이해와 활용법 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"Combine의 `PassthroughSubject`와 `CurrentValueSubject`의 개념과 차이점을 설명하고, 실제 애플리케이션에서 이를 사용하는 방법을 다룹니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swift-combine.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T948,let url = URL(string: "https://jsonplaceholder.typicode.com/todos/1")!
let dataTaskPublisher = URLSession.shared.dataTaskPublisher(for: url)

let cancellable = dataTaskPublisher.sink(receiveCompletion: { completion in
    switch completion {
    case .finished:
        print("Finished")
    case .failure(let error):
        print("Error: \(error)")
    }
}, receiveValue: { data, response in# Swift Combine Subject의 이해와 활용법

Swift Combine은 애플의 리액티브 프로그래밍 프레임워크로, 비동기 이벤트 처리와 데이터 스트림 관리를 위해 설계되었습니다. Combine의 핵심 구성 요소 중 하나인 Subject는 Publisher와 Subscriber의 역할을 동시에 수행할 수 있는 특별한 객체입니다. 이 글에서는 Swift Combine의 Subject에 대한 기본 개념과 다양한 활용법에 대해 알아보겠습니다.

## Subject란 무엇인가?

Subject는 Combine에서 매우 유용한 구성 요소로, Publisher처럼 데이터를 발행할 수 있고 Subscriber처럼 다른 Publisher로부터 데이터를 받을 수 있습니다. 따라서 Subject는 데이터 스트림을 제어하거나 중간에서 데이터를 가공하는 데 유용합니다. Combine 프레임워크는 두 가지 주요 유형의 Subject를 제공합니다:

1. **PassthroughSubject**: 초기값 없이 새로운 값을 발행하는 Subject입니다.
2. **CurrentValueSubject**: 초기값을 가지며 최신 값을 유지하는 Subject입니다.

## PassthroughSubject

### 기본 개념

PassthroughSubject는 초기값이 없으며, 새로운 값을 발행하는 역할을 합니다. 값을 발행하기 전까지는 아무 데이터도 가지고 있지 않습니다. 따라서 주로 이벤트를 전달하는 데 사용됩니다.

### 사용 예제

PassthroughSubject의 기본 사용법을 살펴보겠습니다.

```swift
import Combine

// PassthroughSubject 생성
let subject = PassthroughSubject<String, Never>()

// Subscriber 생성 및 구독
let cancellable = subject.sink(receiveCompletion: { completion in
    switch completion {
    case .finished:
        print("Finished")
    case .failure(let error):
        print("Error: \(error)")
    }
}, receiveValue: { value in
    print("Received value: \(value)")
})

// 값 발행
subject.send("Hello")
subject.send("Combine")
subject.send(completion: .finished)
f:T948,let url = URL(string: "https://jsonplaceholder.typicode.com/todos/1")!
let dataTaskPublisher = URLSession.shared.dataTaskPublisher(for: url)

let cancellable = dataTaskPublisher.sink(receiveCompletion: { completion in
    switch completion {
    case .finished:
        print("Finished")
    case .failure(let error):
        print("Error: \(error)")
    }
}, receiveValue: { data, response in# Swift Combine Subject의 이해와 활용법

Swift Combine은 애플의 리액티브 프로그래밍 프레임워크로, 비동기 이벤트 처리와 데이터 스트림 관리를 위해 설계되었습니다. Combine의 핵심 구성 요소 중 하나인 Subject는 Publisher와 Subscriber의 역할을 동시에 수행할 수 있는 특별한 객체입니다. 이 글에서는 Swift Combine의 Subject에 대한 기본 개념과 다양한 활용법에 대해 알아보겠습니다.

## Subject란 무엇인가?

Subject는 Combine에서 매우 유용한 구성 요소로, Publisher처럼 데이터를 발행할 수 있고 Subscriber처럼 다른 Publisher로부터 데이터를 받을 수 있습니다. 따라서 Subject는 데이터 스트림을 제어하거나 중간에서 데이터를 가공하는 데 유용합니다. Combine 프레임워크는 두 가지 주요 유형의 Subject를 제공합니다:

1. **PassthroughSubject**: 초기값 없이 새로운 값을 발행하는 Subject입니다.
2. **CurrentValueSubject**: 초기값을 가지며 최신 값을 유지하는 Subject입니다.

## PassthroughSubject

### 기본 개념

PassthroughSubject는 초기값이 없으며, 새로운 값을 발행하는 역할을 합니다. 값을 발행하기 전까지는 아무 데이터도 가지고 있지 않습니다. 따라서 주로 이벤트를 전달하는 데 사용됩니다.

### 사용 예제

PassthroughSubject의 기본 사용법을 살펴보겠습니다.

```swift
import Combine

// PassthroughSubject 생성
let subject = PassthroughSubject<String, Never>()

// Subscriber 생성 및 구독
let cancellable = subject.sink(receiveCompletion: { completion in
    switch completion {
    case .finished:
        print("Finished")
    case .failure(let error):
        print("Error: \(error)")
    }
}, receiveValue: { value in
    print("Received value: \(value)")
})

// 값 발행
subject.send("Hello")
subject.send("Combine")
subject.send(completion: .finished)
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swift-combine.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift Combine Subject의 이해와 활용법"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift Combine Subject의 이해와 활용법"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-28"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"7bd4e442","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다양한 Swift Combine Publisher 사용 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift Combine은 애플의 리액티브 프로그래밍 프레임워크로, 비동기 이벤트 처리와 데이터 스트림 관리를 위해 설계되었습니다. Combine은 Publisher와 Subscriber로 구성되며, Publisher는 데이터를 발행하는 역할을 합니다. 이 글에서는 다양한 Swift Combine Publisher와 그 사용 예제에 대해 알아보겠습니다."}],"\n",["$","h2",null,{"id":"0d820170","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본 Publisher 타입"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Combine 프레임워크는 다양한 내장 Publisher 타입을 제공하여 다양한 상황에 맞게 사용할 수 있습니다. 주요 Publisher 타입과 그 사용 예제를 살펴보겠습니다."}],"\n",["$","h3",null,{"id":"e9b44bbe","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Just"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Just","position":{"start":{"line":12,"column":1,"offset":369},"end":{"line":12,"column":7,"offset":375}}}],"position":{"start":{"line":12,"column":1,"offset":369},"end":{"line":12,"column":7,"offset":375}}},"children":"Just"}}],"는 단 하나의 값을 발행하는 Publisher입니다. 오류를 발생시키지 않으며, 매우 간단한 형태의 Publisher입니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\n\nlet justPublisher = Just(\"Hello, Combine!\")\n\nlet cancellable = justPublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}],"position":{"start":{"line":14,"column":1,"offset":446},"end":{"line":29,"column":4,"offset":799}}},"children":"import Combine\n\nlet justPublisher = Just(\"Hello, Combine!\")\n\nlet cancellable = justPublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 \"Hello, Combine!\" 문자열을 발행하고 완료를 출력합니다."}],"\n",["$","h3",null,{"id":"047ca540","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Future"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Future","position":{"start":{"line":35,"column":1,"offset":859},"end":{"line":35,"column":9,"offset":867}}}],"position":{"start":{"line":35,"column":1,"offset":859},"end":{"line":35,"column":9,"offset":867}}},"children":"Future"}}],"는 비동기 작업의 결과를 발행하는 Publisher입니다. 비동기 작업이 완료되었을 때, 결과 값을 한 번 발행하고 종료합니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let futurePublisher = Future<String, Error> { promise in\n    DispatchQueue.global().asyncAfter(deadline: .now() + 1) {\n        promise(.success(\"Async result\"))\n    }\n}\n\nlet cancellable = futurePublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}],"position":{"start":{"line":37,"column":1,"offset":940},"end":{"line":54,"column":4,"offset":1404}}},"children":"let futurePublisher = Future<String, Error> { promise in\n    DispatchQueue.global().asyncAfter(deadline: .now() + 1) {\n        promise(.success(\"Async result\"))\n    }\n}\n\nlet cancellable = futurePublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 비동기 작업이 완료된 후 \"Async result\"를 발행합니다."}],"\n",["$","h3",null,{"id":"714ae55e","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Deferred"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Deferred","position":{"start":{"line":60,"column":1,"offset":1464},"end":{"line":60,"column":11,"offset":1474}}}],"position":{"start":{"line":60,"column":1,"offset":1464},"end":{"line":60,"column":11,"offset":1474}}},"children":"Deferred"}}],"는 Subscriber가 구독할 때까지 Publisher의 생성 및 실행을 지연시키는 역할을 합니다. 이를 통해 구독 시점에 Publisher를 동적으로 생성할 수 있습니다."]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let deferredPublisher = Deferred {\n    Just(Date())\n}\n\nlet cancellable = deferredPublisher.sink(receiveValue: { value in\n    print(\"Received date: \\(value)\")\n})\n"}],"position":{"start":{"line":62,"column":1,"offset":1573},"end":{"line":70,"column":4,"offset":1746}}},"children":"let deferredPublisher = Deferred {\n    Just(Date())\n}\n\nlet cancellable = deferredPublisher.sink(receiveValue: { value in\n    print(\"Received date: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 구독 시점에 현재 날짜와 시간을 발행합니다."}],"\n",["$","h3",null,{"id":"3159fe42","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Empty"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Empty","position":{"start":{"line":76,"column":1,"offset":1791},"end":{"line":76,"column":8,"offset":1798}}}],"position":{"start":{"line":76,"column":1,"offset":1791},"end":{"line":76,"column":8,"offset":1798}}},"children":"Empty"}}],"는 즉시 완료되거나 오류를 발생시키지 않고 아무 값도 발행하지 않는 Publisher입니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let emptyPublisher = Empty<Int, Never>()\n\nlet cancellable = emptyPublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure:\n        print(\"Error\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}],"position":{"start":{"line":78,"column":1,"offset":1851},"end":{"line":91,"column":4,"offset":2165}}},"children":"let emptyPublisher = Empty<Int, Never>()\n\nlet cancellable = emptyPublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure:\n        print(\"Error\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 아무 값도 발행하지 않고 완료됩니다."}],"\n",["$","h3",null,{"id":"2758e327","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Fail"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Fail","position":{"start":{"line":97,"column":1,"offset":2205},"end":{"line":97,"column":7,"offset":2211}}}],"position":{"start":{"line":97,"column":1,"offset":2205},"end":{"line":97,"column":7,"offset":2211}}},"children":"Fail"}}],"는 특정 오류를 즉시 발행하고 완료되는 Publisher입니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"enum MyError: Error {\n    case exampleError\n}\n\nlet failPublisher = Fail<Int, MyError>(error: .exampleError)\n\nlet cancellable = failPublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}],"position":{"start":{"line":99,"column":1,"offset":2248},"end":{"line":116,"column":4,"offset":2649}}},"children":"enum MyError: Error {\n    case exampleError\n}\n\nlet failPublisher = Fail<Int, MyError>(error: .exampleError)\n\nlet cancellable = failPublisher.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 오류를 발행하고 종료됩니다."}],"\n",["$","h2",null,{"id":"55ab082b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Sequence를 Publisher로 사용하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Combine은 배열과 같은 Sequence 타입을 Publisher로 변환할 수 있습니다."}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let numbers = [1, 2, 3, 4, 5].publisher\n\nlet cancellable = numbers.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received number: \\(value)\")\n})\n"}],"position":{"start":{"line":124,"column":1,"offset":2757},"end":{"line":137,"column":4,"offset":3085}}},"children":"let numbers = [1, 2, 3, 4, 5].publisher\n\nlet cancellable = numbers.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received number: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 배열의 각 요소를 순차적으로 발행하고 완료됩니다."}],"\n",["$","h2",null,{"id":"270b8a36","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Timer Publisher"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Combine은 주기적으로 값을 발행하는 Timer Publisher도 제공합니다."}],"\n",["$","pre","pre-6",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let timerPublisher = Timer.publish(every: 1.0, on: .main, in: .default).autoconnect()\n\nlet cancellable = timerPublisher.sink(receiveValue: { value in\n    print(\"Timer fired at: \\(value)\")\n})\n"}],"position":{"start":{"line":145,"column":1,"offset":3190},"end":{"line":151,"column":4,"offset":3393}}},"children":"let timerPublisher = Timer.publish(every: 1.0, on: .main, in: .default).autoconnect()\n\nlet cancellable = timerPublisher.sink(receiveValue: { value in\n    print(\"Timer fired at: \\(value)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 1초마다 현재 시간을 발행합니다."}],"\n",["$","h2",null,{"id":"49a46669","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"NotificationCenter Publisher"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"NotificationCenter에서 게시된 알림을 Publisher로 사용할 수도 있습니다."}],"\n",["$","pre","pre-7",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"let notificationPublisher = NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)\n\nlet cancellable = notificationPublisher.sink(receiveValue: { notification in\n    print(\"Received notification: \\(notification)\")\n})\n"}],"position":{"start":{"line":159,"column":1,"offset":3508},"end":{"line":165,"column":4,"offset":3766}}},"children":"let notificationPublisher = NotificationCenter.default.publisher(for: UIApplication.didBecomeActiveNotification)\n\nlet cancellable = notificationPublisher.sink(receiveValue: { notification in\n    print(\"Received notification: \\(notification)\")\n})\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 예제는 앱이 활성화될 때마다 알림을 발행합니다."}],"\n",["$","h2",null,{"id":"f098dfef","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"URLSession Data Task Publisher"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Combine을 사용하여 네트워크 요청도 처리할 수 있습니다."}],"\n",["$","pre","pre-8",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":173,"column":1,"offset":3869},"end":{"line":227,"column":5,"offset":5553}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"PassthroughSubject","position":{"start":{"line":229,"column":8,"offset":5562},"end":{"line":229,"column":28,"offset":5582}}}],"position":{"start":{"line":229,"column":8,"offset":5562},"end":{"line":229,"column":28,"offset":5582}}},"children":"PassthroughSubject"}}],"는 \"Hello\"와 \"Combine\" 문자열을 발행하고, 발행된 값은 Subscriber에 의해 출력됩니다. 마지막으로 완료 이벤트를 발행하여 스트림이 종료되었음을 알립니다."]}],"\n",["$","h3",null,{"id":"949c92ed","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"이벤트 처리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"PassthroughSubject는 주로 사용자 입력 이벤트, 네트워크 응답 등과 같은 일회성 이벤트를 처리하는 데 유용합니다. 예를 들어, 버튼 클릭 이벤트를 처리하는 경우를 생각해볼 수 있습니다."}],"\n",["$","pre","pre-9",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\nimport UIKit\n\n// 버튼 생성\nlet button = UIButton()\n\n// PassthroughSubject 생성\nlet buttonTapSubject = PassthroughSubject<Void, Never>()\n\n// 버튼 클릭 이벤트를 PassthroughSubject로 전달\nbutton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n\n@objc func buttonTapped() {\n    buttonTapSubject.send()\n}\n\n// Subscriber 생성 및 구독\nlet cancellable = buttonTapSubject.sink {\n    print(\"Button was tapped!\")\n}\n"}],"position":{"start":{"line":235,"column":1,"offset":5806},"end":{"line":256,"column":4,"offset":6236}}},"children":"import Combine\nimport UIKit\n\n// 버튼 생성\nlet button = UIButton()\n\n// PassthroughSubject 생성\nlet buttonTapSubject = PassthroughSubject<Void, Never>()\n\n// 버튼 클릭 이벤트를 PassthroughSubject로 전달\nbutton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n\n@objc func buttonTapped() {\n    buttonTapSubject.send()\n}\n\n// Subscriber 생성 및 구독\nlet cancellable = buttonTapSubject.sink {\n    print(\"Button was tapped!\")\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 버튼 클릭 이벤트가 발생할 때마다 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"buttonTapSubject","position":{"start":{"line":258,"column":27,"offset":6264},"end":{"line":258,"column":45,"offset":6282}}}],"position":{"start":{"line":258,"column":27,"offset":6264},"end":{"line":258,"column":45,"offset":6282}}},"children":"buttonTapSubject"}}],"가 값을 발행하고, Subscriber는 이를 받아서 처리합니다."]}],"\n",["$","h2",null,{"id":"5f891e0f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"CurrentValueSubject"}],"\n",["$","h3",null,{"id":"9f41f9b8","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"CurrentValueSubject는 초기값을 가지며, 최신 값을 유지하는 역할을 합니다. 새로운 값을 발행할 때마다 최신 값이 업데이트되며, Subscriber가 구독할 때 현재 저장된 값을 즉시 받을 수 있습니다."}],"\n",["$","h3",null,{"id":"af7af39c","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"CurrentValueSubject의 기본 사용법을 살펴보겠습니다."}],"\n",["$","pre","pre-10",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\n\n// CurrentValueSubject 생성 (초기값 설정)\nlet subject = CurrentValueSubject<String, Never>(\"Initial value\")\n\n// Subscriber 생성 및 구독\nlet cancellable = subject.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n\n// 값 발행\nsubject.send(\"Updated value\")\nsubject.send(\"Another update\")\nsubject.send(completion: .finished)\n"}],"position":{"start":{"line":270,"column":1,"offset":6528},"end":{"line":292,"column":4,"offset":7060}}},"children":"import Combine\n\n// CurrentValueSubject 생성 (초기값 설정)\nlet subject = CurrentValueSubject<String, Never>(\"Initial value\")\n\n// Subscriber 생성 및 구독\nlet cancellable = subject.sink(receiveCompletion: { completion in\n    switch completion {\n    case .finished:\n        print(\"Finished\")\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}, receiveValue: { value in\n    print(\"Received value: \\(value)\")\n})\n\n// 값 발행\nsubject.send(\"Updated value\")\nsubject.send(\"Another update\")\nsubject.send(completion: .finished)\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CurrentValueSubject","position":{"start":{"line":294,"column":8,"offset":7069},"end":{"line":294,"column":29,"offset":7090}}}],"position":{"start":{"line":294,"column":8,"offset":7069},"end":{"line":294,"column":29,"offset":7090}}},"children":"CurrentValueSubject"}}],"는 \"Initial value\"로 초기화되며, 새로운 값이 발행될 때마다 최신 값이 업데이트됩니다. 구독자는 항상 최신 값을 받을 수 있습니다."]}],"\n",["$","h3",null,{"id":"0bfbe571","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"상태 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"CurrentValueSubject는 주로 상태 관리를 위해 사용됩니다. 예를 들어, ViewModel에서 UI 상태를 관리하는 경우를 생각해볼 수 있습니다."}],"\n",["$","pre","pre-11",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import Combine\n\nclass ViewModel {\n    // CurrentValueSubject를 사용하여 상태 관리\n    var state = CurrentValueSubject<String, Never>(\"Initial state\")\n\n    func updateState(newState: String) {\n        state.send(newState)\n    }\n}\n\n// ViewModel 인스턴스 생성\nlet viewModel = ViewModel()\n\n// Subscriber 생성 및 구독\nlet cancellable = viewModel.state.sink { value in\n    print(\"State updated to: \\(value)\")\n}\n\n// 상태 업데이트\nviewModel.updateState(newState: \"Loading\")\nviewModel.updateState(newState: \"Loaded\")\n"}],"position":{"start":{"line":300,"column":1,"offset":7273},"end":{"line":323,"column":4,"offset":7767}}},"children":"import Combine\n\nclass ViewModel {\n    // CurrentValueSubject를 사용하여 상태 관리\n    var state = CurrentValueSubject<String, Never>(\"Initial state\")\n\n    func updateState(newState: String) {\n        state.send(newState)\n    }\n}\n\n// ViewModel 인스턴스 생성\nlet viewModel = ViewModel()\n\n// Subscriber 생성 및 구독\nlet cancellable = viewModel.state.sink { value in\n    print(\"State updated to: \\(value)\")\n}\n\n// 상태 업데이트\nviewModel.updateState(newState: \"Loading\")\nviewModel.updateState(newState: \"Loaded\")\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ViewModel","position":{"start":{"line":325,"column":8,"offset":7776},"end":{"line":325,"column":19,"offset":7787}}}],"position":{"start":{"line":325,"column":8,"offset":7776},"end":{"line":325,"column":19,"offset":7787}}},"children":"ViewModel"}}],"은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"CurrentValueSubject","position":{"start":{"line":325,"column":21,"offset":7789},"end":{"line":325,"column":42,"offset":7810}}}],"position":{"start":{"line":325,"column":21,"offset":7789},"end":{"line":325,"column":42,"offset":7810}}},"children":"CurrentValueSubject"}}],"를 사용하여 UI 상태를 관리하며, 상태가 업데이트될 때마다 Subscriber에게 최신 상태를 전달합니다."]}],"\n",["$","h2",null,{"id":"8a71f8df","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"PassthroughSubject와 CurrentValueSubject 비교"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"PassthroughSubject와 CurrentValueSubject는 각각 고유한 용도와 특성을 가지고 있습니다. PassthroughSubject는 주로 일회성 이벤트를 처리하는 데 사용되며, CurrentValueSubject는 최신 상태를 관리하는 데 적합합니다. 두 Subject를 적절히 활용하면 다양한 비동기 데이터 스트림을 효과적으로 처리할 수 있습니다."}],"\n",["$","h3",null,{"id":"59e2e049","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용 사례 요약"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"PassthroughSubject"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"초기값이 필요 없는 경우"}],"\n",["$","li","li-1",{"children":"일회성 이벤트(예: 사용자 입력, 네트워크 응답) 처리"}],"\n",["$","li","li-2",{"children":"값을 발행하기 전까지는 아무 데이터도 보유하지 않음"}],"\n"]}],"\n"]}],"\n",["$","li","li-1",{"children":["\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"CurrentValueSubject"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"초기값이 필요한 경우"}],"\n",["$","li","li-1",{"children":"상태 관리(예: UI 상태) 및 최신 값 유지"}],"\n",["$","li","li-2",{"children":"구독 시점에 최신 값을 즉시 전달"}],"\n"]}],"\n"]}],"\n"]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift Combine의 Subject는 비동기 데이터 스트림을 제어하고 관리하는 데 매우 유용한 도구입니다. PassthroughSubject와 CurrentValueSubject를 적절히 활용하면 다양한 비동기 이벤트와 상태 변화를 효율적으로 처리할 수 있습니다. Combine을 사용하여 복잡한 비동기 로직을 간단하고 명확하게 구현할 수 있으며, 이를 통해 더 나은 사용자 경험을 제공할 수 있습니다. Subject의 기본 개념과 사용법을 이해하고 다양한 예제를 통해 익숙해지면, 리액티브 프로그래밍의 강력한 기능을 최대한 활용할 수 있을 것입니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift Combine Subject의 이해와 활용법","toc":[{"tagName":"h2","title":"다양한 Swift Combine Publisher 사용 예제","id":"7bd4e442"},{"tagName":"h2","title":"기본 Publisher 타입","id":"0d820170"},{"tagName":"h3","title":"Just","id":"e9b44bbe"},{"tagName":"h3","title":"Future","id":"047ca540"},{"tagName":"h3","title":"Deferred","id":"714ae55e"},{"tagName":"h3","title":"Empty","id":"3159fe42"},{"tagName":"h3","title":"Fail","id":"2758e327"},{"tagName":"h2","title":"Sequence를 Publisher로 사용하기","id":"55ab082b"},{"tagName":"h2","title":"Timer Publisher","id":"270b8a36"},{"tagName":"h2","title":"NotificationCenter Publisher","id":"49a46669"},{"tagName":"h2","title":"URLSession Data Task Publisher","id":"f098dfef"},{"tagName":"h3","title":"이벤트 처리","id":"949c92ed"},{"tagName":"h2","title":"CurrentValueSubject","id":"5f891e0f"},{"tagName":"h3","title":"기본 개념","id":"9f41f9b8"},{"tagName":"h3","title":"사용 예제","id":"af7af39c"},{"tagName":"h3","title":"상태 관리","id":"0bfbe571"},{"tagName":"h2","title":"PassthroughSubject와 CurrentValueSubject 비교","id":"8a71f8df"},{"tagName":"h3","title":"사용 사례 요약","id":"59e2e049"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
