1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","JavaScript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-7e472c87","d"],{"children":["__PAGE__?{\"slug\":\"JavaScript-프로토타입-객체-지향-프로그래밍-이해하기-7e472c87\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","JavaScript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-7e472c87","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"JavaScript-프로토타입-객체-지향-프로그래밍-이해하기-7e472c87\"}"},"styles":[]}],"segment":["slug","JavaScript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-7e472c87","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 JavaScript의 프로토타입 기반 객체 지향 프로그래밍 방식을 이해하는 데 도움이 됩니다. JavaScript가 객체와 프로토타입을 어떻게 활용하여 상속과 코드 재사용을 구현하는지에 대해 탐구합니다."}],["$","meta","3",{"name":"keywords","content":"JavaScript,프로토타입,객체 지향 프로그래밍,코드 재사용"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/JavaScript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-7e472c87"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 JavaScript의 프로토타입 기반 객체 지향 프로그래밍 방식을 이해하는 데 도움이 됩니다. JavaScript가 객체와 프로토타입을 어떻게 활용하여 상속과 코드 재사용을 구현하는지에 대해 탐구합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/JavaScript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-7e472c87"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 JavaScript의 프로토타입 기반 객체 지향 프로그래밍 방식을 이해하는 데 도움이 됩니다. JavaScript가 객체와 프로토타입을 어떻게 활용하여 상속과 코드 재사용을 구현하는지에 대해 탐구합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-02"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"6f43f790","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"JavaScript는 유연하면서도 강력한 언어입니다. 특히, 객체지향 프로그래밍(OOP) 방식을 지원하면서 다른 언어와는 다르게 프로토타입 기반의 상속을 사용합니다. 이 글에서는 JavaScript의 프로토타입 기반 OOP를 이해하고 더 나아가 효율적으로 활용하는 방법에 대해 알아보겠습니다."}],"\n",["$","h2",null,{"id":"e3b4fe3f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"객체 생성 및 프로토타입 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["JavaScript에서의 객체는 속성과 메서드의 집합입니다. 객체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object","position":{"start":{"line":8,"column":39,"offset":265},"end":{"line":8,"column":47,"offset":273}}}],"position":{"start":{"line":8,"column":39,"offset":265},"end":{"line":8,"column":47,"offset":273}}},"children":"Object"}}]," 생성자 함수나 객체 리터럴을 사용하여 생성할 수 있습니다. 예를 들어, 다음과 같습니다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 객체 리터럴을 사용한 객체 생성\nconst person = {\n    name: 'John',\n    age: 30,\n    greet() {\n        console.log(`Hello, my name is ${this.name}`);\n    }\n};\n\n// 객체 사용하는 예\nperson.greet();  // Outputs: Hello, my name is John\n"}],"position":{"start":{"line":10,"column":1,"offset":325},"end":{"line":22,"column":4,"offset":555}}},"children":"// 객체 리터럴을 사용한 객체 생성\nconst person = {\n    name: 'John',\n    age: 30,\n    greet() {\n        console.log(`Hello, my name is ${this.name}`);\n    }\n};\n\n// 객체 사용하는 예\nperson.greet();  // Outputs: Hello, my name is John\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["프로토타입은 JavaScript에서 상속을 구현하는 핵심적인 개념입니다. 기본적으로 모든 객체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"__proto__","position":{"start":{"line":24,"column":55,"offset":611},"end":{"line":24,"column":66,"offset":622}}}],"position":{"start":{"line":24,"column":55,"offset":611},"end":{"line":24,"column":66,"offset":622}}},"children":"__proto__"}}],"라는 숨겨진 프로퍼티를 가지며, 이는 자신을 생성한 생성자의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prototype","position":{"start":{"line":24,"column":100,"offset":656},"end":{"line":24,"column":111,"offset":667}}}],"position":{"start":{"line":24,"column":100,"offset":656},"end":{"line":24,"column":111,"offset":667}}},"children":"prototype"}}]," 프로퍼티를 참조합니다. 예를 들어, 위의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"person","position":{"start":{"line":24,"column":135,"offset":691},"end":{"line":24,"column":143,"offset":699}}}],"position":{"start":{"line":24,"column":135,"offset":691},"end":{"line":24,"column":143,"offset":699}}},"children":"person"}}]," 객체는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object.prototype","position":{"start":{"line":24,"column":148,"offset":704},"end":{"line":24,"column":166,"offset":722}}}],"position":{"start":{"line":24,"column":148,"offset":704},"end":{"line":24,"column":166,"offset":722}}},"children":"Object.prototype"}}],"을 상속받습니다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 프로토타입 체인 확인\nconsole.log(person.__proto__ === Object.prototype);  // true\n"}],"position":{"start":{"line":26,"column":1,"offset":733},"end":{"line":29,"column":4,"offset":826}}},"children":"// 프로토타입 체인 확인\nconsole.log(person.__proto__ === Object.prototype);  // true\n"}}]}],"\n",["$","h2",null,{"id":"6b5d9782","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"생성자 함수와 프로토타입"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"생성자 함수는 새로운 객체를 만들기 위한 템플릿 역할을 합니다. 생성자 함수를 이용하면 여러 객체를 생성할 때 효율적으로 속성과 메서드를 공유할 수 있습니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 생성자 함수\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\n// 프로토타입 메서드 추가\nPerson.prototype.greet = function() {\n    console.log(`Hello, my name is ${this.name}`);\n};\n\n// 새로운 객체 생성\nconst john = new Person('John', 30);\nconst jane = new Person('Jane', 25);\n\n// 메서드 호출\njohn.greet();  // Outputs: Hello, my name is John\njane.greet();  // Outputs: Hello, my name is Jane\n"}],"position":{"start":{"line":35,"column":1,"offset":936},"end":{"line":54,"column":4,"offset":1344}}},"children":"// 생성자 함수\nfunction Person(name, age) {\n    this.name = name;\n    this.age = age;\n}\n\n// 프로토타입 메서드 추가\nPerson.prototype.greet = function() {\n    console.log(`Hello, my name is ${this.name}`);\n};\n\n// 새로운 객체 생성\nconst john = new Person('John', 30);\nconst jane = new Person('Jane', 25);\n\n// 메서드 호출\njohn.greet();  // Outputs: Hello, my name is John\njane.greet();  // Outputs: Hello, my name is Jane\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":56,"column":8,"offset":1353},"end":{"line":56,"column":16,"offset":1361}}}],"position":{"start":{"line":56,"column":8,"offset":1353},"end":{"line":56,"column":16,"offset":1361}}},"children":"Person"}}]," 생성자 함수는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"name","position":{"start":{"line":56,"column":25,"offset":1370},"end":{"line":56,"column":31,"offset":1376}}}],"position":{"start":{"line":56,"column":25,"offset":1370},"end":{"line":56,"column":31,"offset":1376}}},"children":"name"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"age","position":{"start":{"line":56,"column":33,"offset":1378},"end":{"line":56,"column":38,"offset":1383}}}],"position":{"start":{"line":56,"column":33,"offset":1378},"end":{"line":56,"column":38,"offset":1383}}},"children":"age"}}]," 속성을 초기화합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"greet","position":{"start":{"line":56,"column":51,"offset":1396},"end":{"line":56,"column":58,"offset":1403}}}],"position":{"start":{"line":56,"column":51,"offset":1396},"end":{"line":56,"column":58,"offset":1403}}},"children":"greet"}}]," 메서드는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person.prototype","position":{"start":{"line":56,"column":64,"offset":1409},"end":{"line":56,"column":82,"offset":1427}}}],"position":{"start":{"line":56,"column":64,"offset":1409},"end":{"line":56,"column":82,"offset":1427}}},"children":"Person.prototype"}}],"에 정의되어 있으며, 이를 통해 모든 인스턴스가 공유하게 됩니다. 따라서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"john","position":{"start":{"line":56,"column":123,"offset":1468},"end":{"line":56,"column":129,"offset":1474}}}],"position":{"start":{"line":56,"column":123,"offset":1468},"end":{"line":56,"column":129,"offset":1474}}},"children":"john"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"jane","position":{"start":{"line":56,"column":131,"offset":1476},"end":{"line":56,"column":137,"offset":1482}}}],"position":{"start":{"line":56,"column":131,"offset":1476},"end":{"line":56,"column":137,"offset":1482}}},"children":"jane"}}],"은 각각 자신의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"greet","position":{"start":{"line":56,"column":146,"offset":1491},"end":{"line":56,"column":153,"offset":1498}}}],"position":{"start":{"line":56,"column":146,"offset":1491},"end":{"line":56,"column":153,"offset":1498}}},"children":"greet"}}]," 메서드를 호출할 수 있습니다."]}],"\n",["$","h2",null,{"id":"a379b631","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"프로토타입 체인"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["프로토타입 체인은 객체 탐색 시 사용되는 메커니즘입니다. 특정 객체에서 프로퍼티를 찾지 못하면, 그 객체의 프로토타입 체인 상위 객체를 탐색합니다. 이 과정은 최종적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object.prototype","position":{"start":{"line":60,"column":96,"offset":1625},"end":{"line":60,"column":114,"offset":1643}}}],"position":{"start":{"line":60,"column":96,"offset":1625},"end":{"line":60,"column":114,"offset":1643}}},"children":"Object.prototype"}}],"에 도달할 때까지 계속됩니다."]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 객체 생성\nconst obj = { a: 1 };\n\n// 속성 탐색\nconsole.log(obj.a);  // Outputs: 1\nconsole.log(obj.toString());  // Outputs: [object Object]\n"}],"position":{"start":{"line":62,"column":1,"offset":1661},"end":{"line":69,"column":4,"offset":1812}}},"children":"// 객체 생성\nconst obj = { a: 1 };\n\n// 속성 탐색\nconsole.log(obj.a);  // Outputs: 1\nconsole.log(obj.toString());  // Outputs: [object Object]\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"obj","position":{"start":{"line":71,"column":8,"offset":1821},"end":{"line":71,"column":13,"offset":1826}}}],"position":{"start":{"line":71,"column":8,"offset":1821},"end":{"line":71,"column":13,"offset":1826}}},"children":"obj"}}],"에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"toString","position":{"start":{"line":71,"column":16,"offset":1829},"end":{"line":71,"column":26,"offset":1839}}}],"position":{"start":{"line":71,"column":16,"offset":1829},"end":{"line":71,"column":26,"offset":1839}}},"children":"toString"}}]," 메서드가 없지만, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object.prototype","position":{"start":{"line":71,"column":37,"offset":1850},"end":{"line":71,"column":55,"offset":1868}}}],"position":{"start":{"line":71,"column":37,"offset":1850},"end":{"line":71,"column":55,"offset":1868}}},"children":"Object.prototype"}}],"에 정의된 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"toString","position":{"start":{"line":71,"column":61,"offset":1874},"end":{"line":71,"column":71,"offset":1884}}}],"position":{"start":{"line":71,"column":61,"offset":1874},"end":{"line":71,"column":71,"offset":1884}}},"children":"toString"}}],"을 사용합니다. 이처럼 객체는 프로토타입 체인을 통해 상속 관계를 형성합니다."]}],"\n",["$","h2",null,{"id":"0185d52b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"클래스와 프로토타입"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["ES6(ECMAScript 2015)에서 JavaScript는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class","position":{"start":{"line":75,"column":36,"offset":1979},"end":{"line":75,"column":43,"offset":1986}}}],"position":{"start":{"line":75,"column":36,"offset":1979},"end":{"line":75,"column":43,"offset":1986}}},"children":"class"}}]," 문법을 도입하여 더 깔끔하고 직관적인 객체지향 프로그래밍 스타일을 제공합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class","position":{"start":{"line":75,"column":88,"offset":2031},"end":{"line":75,"column":95,"offset":2038}}}],"position":{"start":{"line":75,"column":88,"offset":2031},"end":{"line":75,"column":95,"offset":2038}}},"children":"class"}}],"는 사실 함수이며 기존의 프로토타입 기반 상속을 여전히 사용합니다."]}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 클래스 정의\nclass Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // 메서드 정의\n    greet() {\n        console.log(`Hello, my name is ${this.name}`);\n    }\n}\n\n// 객체 생성\nconst john = new Person('John', 30);\nconst jane = new Person('Jane', 25);\n\n// 메서드 호출\njohn.greet();  // Outputs: Hello, my name is John\njane.greet();  // Outputs: Hello, my name is Jane\n"}],"position":{"start":{"line":77,"column":1,"offset":2077},"end":{"line":98,"column":4,"offset":2491}}},"children":"// 클래스 정의\nclass Person {\n    constructor(name, age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    // 메서드 정의\n    greet() {\n        console.log(`Hello, my name is ${this.name}`);\n    }\n}\n\n// 객체 생성\nconst john = new Person('John', 30);\nconst jane = new Person('Jane', 25);\n\n// 메서드 호출\njohn.greet();  // Outputs: Hello, my name is John\njane.greet();  // Outputs: Hello, my name is Jane\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Person","position":{"start":{"line":100,"column":8,"offset":2500},"end":{"line":100,"column":16,"offset":2508}}}],"position":{"start":{"line":100,"column":8,"offset":2500},"end":{"line":100,"column":16,"offset":2508}}},"children":"Person"}}]," 클래스는 생성자와 메서드를 정의하고 이를 통해 객체를 생성합니다. 클래스 내부에서 정의된 메서드 역시 프로토타입 체인에 의해 공유됩니다."]}],"\n",["$","h2",null,{"id":"a331a73e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상속과 서브클래싱"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["JavaScript의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class","position":{"start":{"line":104,"column":13,"offset":2613},"end":{"line":104,"column":20,"offset":2620}}}],"position":{"start":{"line":104,"column":13,"offset":2613},"end":{"line":104,"column":20,"offset":2620}}},"children":"class"}}]," 문법은 쉽게 상속을 구현할 수 있는 방법을 제공합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"extends","position":{"start":{"line":104,"column":52,"offset":2652},"end":{"line":104,"column":61,"offset":2661}}}],"position":{"start":{"line":104,"column":52,"offset":2652},"end":{"line":104,"column":61,"offset":2661}}},"children":"extends"}}]," 키워드를 사용하여 서브클래스를 정의할 수 있습니다."]}],"\n",["$","pre","pre-5",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 부모 클래스\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        console.log(`${this.name} makes a noise.`);\n    }\n}\n\n// 자식 클래스\nclass Dog extends Animal {\n    constructor(name, breed) {\n        super(name);  // 부모 클래스의 생성자를 호출\n        this.breed = breed;\n    }\n\n    speak() {\n        console.log(`${this.name} barks.`);\n    }\n}\n\n// 객체 생성\nconst dog = new Dog('Rex', 'German Shepherd');\n\ndog.speak();  // Outputs: Rex barks.\n"}],"position":{"start":{"line":106,"column":1,"offset":2692},"end":{"line":134,"column":4,"offset":3171}}},"children":"// 부모 클래스\nclass Animal {\n    constructor(name) {\n        this.name = name;\n    }\n\n    speak() {\n        console.log(`${this.name} makes a noise.`);\n    }\n}\n\n// 자식 클래스\nclass Dog extends Animal {\n    constructor(name, breed) {\n        super(name);  // 부모 클래스의 생성자를 호출\n        this.breed = breed;\n    }\n\n    speak() {\n        console.log(`${this.name} barks.`);\n    }\n}\n\n// 객체 생성\nconst dog = new Dog('Rex', 'German Shepherd');\n\ndog.speak();  // Outputs: Rex barks.\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Dog","position":{"start":{"line":136,"column":8,"offset":3180},"end":{"line":136,"column":13,"offset":3185}}}],"position":{"start":{"line":136,"column":8,"offset":3180},"end":{"line":136,"column":13,"offset":3185}}},"children":"Dog"}}]," 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Animal","position":{"start":{"line":136,"column":19,"offset":3191},"end":{"line":136,"column":27,"offset":3199}}}],"position":{"start":{"line":136,"column":19,"offset":3191},"end":{"line":136,"column":27,"offset":3199}}},"children":"Animal"}}]," 클래스를 상속받아 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"speak","position":{"start":{"line":136,"column":38,"offset":3210},"end":{"line":136,"column":45,"offset":3217}}}],"position":{"start":{"line":136,"column":38,"offset":3210},"end":{"line":136,"column":45,"offset":3217}}},"children":"speak"}}]," 메서드를 오버라이드합니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"super","position":{"start":{"line":136,"column":61,"offset":3233},"end":{"line":136,"column":68,"offset":3240}}}],"position":{"start":{"line":136,"column":61,"offset":3233},"end":{"line":136,"column":68,"offset":3240}}},"children":"super"}}]," 키워드는 부모 클래스의 생성자를 호출하는 데 사용됩니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["JavaScript의 프로토타입 기반 객체지향 프로그래밍 방식은 매우 유연하며, 다양한 방법으로 활용할 수 있습니다. 프로토타입 체인을 통해 객체 간 상속 관계를 쉽게 구현할 수 있으며, 도시적 OOP 스타일의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"class","position":{"start":{"line":140,"column":119,"offset":3399},"end":{"line":140,"column":126,"offset":3406}}}],"position":{"start":{"line":140,"column":119,"offset":3399},"end":{"line":140,"column":126,"offset":3406}}},"children":"class"}}]," 문법도 사용할 수 있습니다. 이 글을 통해 JavaScript의 객체지향 프로그래밍 개념을 잘 이해하고 실제 프로젝트에 적용해보세요."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기","toc":[{"tagName":"h1","title":"JavaScript 프로토타입: 객체 지향 프로그래밍 이해하기","id":"6f43f790"},{"tagName":"h2","title":"객체 생성 및 프로토타입 이해하기","id":"e3b4fe3f"},{"tagName":"h2","title":"생성자 함수와 프로토타입","id":"6b5d9782"},{"tagName":"h2","title":"프로토타입 체인","id":"a379b631"},{"tagName":"h2","title":"클래스와 프로토타입","id":"0185d52b"},{"tagName":"h2","title":"상속과 서브클래싱","id":"a331a73e"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
