1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC-%EC%9D%B4%ED%95%AD-%EA%B2%80%EC%83%89%EA%B9%8C%EC%A7%80-f72341f9","d"],{"children":["__PAGE__?{\"slug\":\"분할-정복-완벽-가이드-병합-정렬-퀵-정렬-이항-검색까지-f72341f9\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC-%EC%9D%B4%ED%95%AD-%EA%B2%80%EC%83%89%EA%B9%8C%EC%A7%80-f72341f9","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"분할-정복-완벽-가이드-병합-정렬-퀵-정렬-이항-검색까지-f72341f9\"}"},"styles":[]}],"segment":["slug","%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC-%EC%9D%B4%ED%95%AD-%EA%B2%80%EC%83%89%EA%B9%8C%EC%A7%80-f72341f9","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"분할 정복 알고리즘은 큰 문제를 더 작은 하위 문제로 나눠 해결하는 방법론을 의미합니다. 이 글에서는 분할 정복의 개념을 이해하고, 병합 정렬, 퀵 정렬, 이항 검색과 같은 대표적인 알고리즘을 다룹니다. 각 알고리즘의 작동 원리와 구현 방법을 통해 실전 활용 능력을 배양합니다."}],["$","meta","3",{"name":"keywords","content":"분할 정복,병합 정렬,퀵 정렬,이항 검색"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC-%EC%9D%B4%ED%95%AD-%EA%B2%80%EC%83%89%EA%B9%8C%EC%A7%80-f72341f9"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"분할 정복 알고리즘은 큰 문제를 더 작은 하위 문제로 나눠 해결하는 방법론을 의미합니다. 이 글에서는 분할 정복의 개념을 이해하고, 병합 정렬, 퀵 정렬, 이항 검색과 같은 대표적인 알고리즘을 다룹니다. 각 알고리즘의 작동 원리와 구현 방법을 통해 실전 활용 능력을 배양합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5-%EC%99%84%EB%B2%BD-%EA%B0%80%EC%9D%B4%EB%93%9C-%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC-%ED%80%B5-%EC%A0%95%EB%A0%AC-%EC%9D%B4%ED%95%AD-%EA%B2%80%EC%83%89%EA%B9%8C%EC%A7%80-f72341f9"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"분할 정복 알고리즘은 큰 문제를 더 작은 하위 문제로 나눠 해결하는 방법론을 의미합니다. 이 글에서는 분할 정복의 개념을 이해하고, 병합 정렬, 퀵 정렬, 이항 검색과 같은 대표적인 알고리즘을 다룹니다. 각 알고리즘의 작동 원리와 구현 방법을 통해 실전 활용 능력을 배양합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/defaultBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/defaultBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-14"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"a587922c","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"분할 정복(Divide and Conquer)은 알고리즘 설계 패러다임의 하나로, 주어진 문제를 더 작은 하위 문제로 나눈 후 각각을 재귀적으로 해결하고, 그 결과를 합쳐서 원래 문제를 해결하는 방식입니다. 이 글에서는 분할 정복의 개념을 이해한 후, 병합 정렬(Merge sort), 퀵 정렬(Quick sort), 이항 검색(Binary Search) 알고리즘을 중심으로 설명하겠습니다."}],"\n",["$","h2",null,{"id":"7316cf3a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"분할 정복의 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"분할 정복은 크게 세 가지 단계로 이루어집니다:"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"분할(Divide)"}],": 문제를 더 작은 하위 문제로 나누는 단계입니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"정복(Conquer)"}],": 나눈 하위 문제를 재귀적으로 해결하는 단계입니다. 하위 문제가 충분히 작아질 때까지 이 단계를 반복합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"병합(Combine)"}],": 해결된 하위 문제를 합쳐 원래 문제의 해답을 얻는 단계입니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이 방식은 특히 재귀 호출을 통해서 구현되며, 각 단계가 문제의 특성에 맞게 최적화될 수 있습니다."}],"\n",["$","h2",null,{"id":"20676e3e","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"병합 정렬 (Merge Sort)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"병합 정렬은 분할 정복 알고리즘의 대표적인 예로, 데이터를 정렬하는데 사용됩니다. 병합 정렬의 과정은 다음과 같습니다:"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"분할"}],": 주어진 배열을 중간을 기준으로 두 개의 하위 배열로 나눕니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"정복"}],": 나눈 하위 배열을 재귀적으로 병합 정렬을 이용해 정렬합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"병합"}],": 두 개의 정렬된 하위 배열을 병합하여 하나의 정렬된 배열을 만듭니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"779530b3","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"병합 정렬의 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"아래는 Python으로 구현한 병합 정렬의 예제입니다:"}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"}],"position":{"start":{"line":28,"column":1,"offset":823},"end":{"line":50,"column":4,"offset":1347}}},"children":"def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result\n"}}]}],"\n",["$","h2",null,{"id":"e9bb12f9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"퀵 정렬 (Quick Sort)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"퀵 정렬은 병합 정렬과 유사하지만, 보다 효율적인 방식으로 작동합니다. 퀵 정렬은 다음과 같은 단계로 이루어져 있습니다:"}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"분할"}],": 기준 요소(pivot)를 선택하여, 이 기준보다 작은 요소들은 기준의 왼쪽에, 큰 요소들은 기준의 오른쪽에 배열합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"정복"}],": 기준의 왼쪽과 오른쪽 부분을 독립적으로 정렬합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"병합"}],": 퀵 정렬은 병합 단계가 필요 없이 기준의 위치가 고정되므로, 이 단계는 생략됩니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"9afb11f5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"퀵 정렬의 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"아래는 Python으로 구현한 퀵 정렬의 예제입니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n"}],"position":{"start":{"line":64,"column":1,"offset":1662},"end":{"line":73,"column":4,"offset":1952}}},"children":"def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n"}}]}],"\n",["$","h2",null,{"id":"1239d828","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"이항 검색 (Binary Search)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이항 검색은 이미 정렬된 배열에서 원하는 값을 효율적으로 찾는 방식입니다. 이 알고리즘은 다음과 같이 작동합니다:"}],"\n",["$","ol","ol-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"분할"}],": 배열의 중간 요소를 선택합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"비교"}],": 중간 요소와 찾으려는 값을 비교합니다.\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":"찾으려는 값이 중간 요소보다 작으면, 배열의 왼쪽 부분을 탐색합니다."}],"\n",["$","li","li-1",{"children":"찾으려는 값이 중간 요소보다 크면, 배열의 오른쪽 부분을 탐색합니다."}],"\n"]}],"\n"]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"반복"}],": 위 과정을 중간 요소를 기준으로 남은 배열을 다시 나누어 반복합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"85d75217","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"이항 검색의 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"아래는 Python으로 구현한 이항 검색의 예제입니다:"}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"}],"position":{"start":{"line":89,"column":1,"offset":2295},"end":{"line":102,"column":4,"offset":2598}}},"children":"def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"분할 정복 알고리즘은 복잡한 문제를 더 작은 문제로 나눠 해결하는 매우 강력한 방법입니다. 병합 정렬, 퀵 정렬, 이항 검색은 각기 다른 문제를 해결하기 위해 설계된 대표적인 분할 정복 알고리즘입니다. 이 글에서는 이들을 이해하고 간단히 구현해보는 예제를 통해 그 원리를 살펴보았습니다. 분할 정복 알고리즘을 제대로 이해한다면, 다양한 문제에 적용해 효율적인 해결책을 찾을 수 있을 것입니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지","toc":[{"tagName":"h1","title":"분할 정복 완벽 가이드: 병합 정렬, 퀵 정렬, 이항 검색까지","id":"a587922c"},{"tagName":"h2","title":"분할 정복의 기본 개념","id":"7316cf3a"},{"tagName":"h2","title":"병합 정렬 (Merge Sort)","id":"20676e3e"},{"tagName":"h3","title":"병합 정렬의 구현","id":"779530b3"},{"tagName":"h2","title":"퀵 정렬 (Quick Sort)","id":"e9bb12f9"},{"tagName":"h3","title":"퀵 정렬의 구현","id":"9afb11f5"},{"tagName":"h2","title":"이항 검색 (Binary Search)","id":"1239d828"},{"tagName":"h3","title":"이항 검색의 구현","id":"85d75217"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
