1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EA%B3%BC-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-9bf4d09b","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-배포-전략-지속적-통합과-배포-자동화-9bf4d09b\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EA%B3%BC-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-9bf4d09b","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-배포-전략-지속적-통합과-배포-자동화-9bf4d09b\"}"},"styles":[]}],"segment":["slug","Nodejs-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EA%B3%BC-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-9bf4d09b","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 배포 전략: 지속적 통합과 배포 자동화 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js 애플리케이션의 배포 전략과 지속적 통합 및 배포(CI/CD) 자동화에 대해 다룬다. CI/CD의 기본 개념부터 도구 선택, 실제 구현 사례를 통해 효율적이고 안정적인 배포 환경을 구축하는 방법을 설명한다."}],["$","meta","3",{"name":"keywords","content":"Node.js,CI/CD,배포,자동화"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EA%B3%BC-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-9bf4d09b"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 배포 전략: 지속적 통합과 배포 자동화 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 배포 전략: 지속적 통합과 배포 자동화 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js 애플리케이션의 배포 전략과 지속적 통합 및 배포(CI/CD) 자동화에 대해 다룬다. CI/CD의 기본 개념부터 도구 선택, 실제 구현 사례를 통해 효율적이고 안정적인 배포 환경을 구축하는 방법을 설명한다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%EB%B0%B0%ED%8F%AC-%EC%A0%84%EB%9E%B5-%EC%A7%80%EC%86%8D%EC%A0%81-%ED%86%B5%ED%95%A9%EA%B3%BC-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94-9bf4d09b"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 배포 전략: 지속적 통합과 배포 자동화 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js 애플리케이션의 배포 전략과 지속적 통합 및 배포(CI/CD) 자동화에 대해 다룬다. CI/CD의 기본 개념부터 도구 선택, 실제 구현 사례를 통해 효율적이고 안정적인 배포 환경을 구축하는 방법을 설명한다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 배포 전략: 지속적 통합과 배포 자동화"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 배포 전략: 지속적 통합과 배포 자동화"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-31"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"1f0af1e2","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 배포 전략: 지속적 통합과 배포 자동화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js 애플리케이션을 효율적으로 배포하기 위한 전략과 방법에는 여러 가지가 있다. 특히, 지속적 통합(Continuous Integration, CI)과 지속적 배포(Continuous Deployment, CD)는 개발과 운영의 경계를 허물고 빠르고 안정적인 배포를 가능하게 한다. 이 글에서는 CI/CD의 기본 개념부터 도구 선택, 실제 구현 사례까지 다루어 Node.js 애플리케이션의 배포 전략을 깊이 있게 탐구하고자 한다."}],"\n",["$","h2",null,{"id":"7ecfae74","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"지속적 통합(CI)과 지속적 배포(CD)의 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"지속적 통합(CI)은 개발자가 작은 코드 변경 사항을 지속적으로 애플리케이션에 통합하는 방식이다. 이를 통해 새로운 변경 사항이 기존 코드와 잘 통합되는지 자주 확인할 수 있다. CI는 다음과 같은 이점을 제공한다."}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"신속한 피드백"}],": 코드 변경 사항이 문제를 일으킬 경우, 즉시 피드백을 받아 보완할 수 있다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"협업 증진"}],": 여러 개발자가 동시에 작업하더라도 코드가 충돌하는 상황을 최소화할 수 있다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"품질 향상"}],": 테스트 자동화를 통해 코드 품질을 유지할 수 있다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"지속적 배포(CD)는 애플리케이션을 릴리스하는 과정을 자동화하는 방식이다. 이는 자동화된 테스트를 통과한 후, 새로운 기능이나 버그 수정이 프로덕션 환경에 자동으로 배포되게 한다. CD는 다음과 같은 이점을 제공한다."}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"빈번한 릴리스"}],": 더 자주, 더 작은 단위의 릴리스를 가능하게 하여 사용자의 피드백을 빠르게 반영할 수 있다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"리스크 감소"}],": 작은 단위로 배포하기 때문에 릴리스 실패의 위험을 줄일 수 있다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"일관성 유지"}],": 배포 자동화를 통해 인간 오류를 최소화하고 일관된 배포 과정을 유지할 수 있다."]}],"\n"]}],"\n",["$","h2",null,{"id":"8fdf87cc","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"CI/CD 파이프라인 설계"}],"\n",["$","h3",null,{"id":"d4161f30","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. 버전 관리 시스템(Git)"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["CI/CD 파이프라인의 첫 번째 단계는 코드 변경 사항을 추적하기 위해 버전 관리 시스템을 사용하는 것이다. Git은 가장 널리 사용되는 버전 관리 시스템으로, 대부분의 CI/CD 도구와도 잘 통합된다. 저장소에는 반드시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main","position":{"start":{"line":24,"column":125,"offset":1058},"end":{"line":24,"column":131,"offset":1064}}}],"position":{"start":{"line":24,"column":125,"offset":1058},"end":{"line":24,"column":131,"offset":1064}}},"children":"main"}}]," 또는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"master","position":{"start":{"line":24,"column":135,"offset":1068},"end":{"line":24,"column":143,"offset":1076}}}],"position":{"start":{"line":24,"column":135,"offset":1068},"end":{"line":24,"column":143,"offset":1076}}},"children":"master"}}]," 브랜치가 있어야 하며, 모든 코드 변경 사항은 별도의 브랜치에서 작업한 후, 풀 리퀘스트를 통해 검토 후 병합해야 한다."]}],"\n",["$","h3",null,{"id":"be40082a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. 자동화된 테스트"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["코드 변경 사항이 병합되면 자동화된 테스트가 실행되어야 한다. 이 과정에서는 유닛 테스트, 통합 테스트, 그리고 종단 간(end-to-end) 테스트를 포함할 수 있다. 테스트 도구로는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mocha","position":{"start":{"line":28,"column":105,"offset":1267},"end":{"line":28,"column":112,"offset":1274}}}],"position":{"start":{"line":28,"column":105,"offset":1267},"end":{"line":28,"column":112,"offset":1274}}},"children":"Mocha"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Jest","position":{"start":{"line":28,"column":114,"offset":1276},"end":{"line":28,"column":120,"offset":1282}}}],"position":{"start":{"line":28,"column":114,"offset":1276},"end":{"line":28,"column":120,"offset":1282}}},"children":"Jest"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Chai","position":{"start":{"line":28,"column":122,"offset":1284},"end":{"line":28,"column":128,"offset":1290}}}],"position":{"start":{"line":28,"column":122,"offset":1284},"end":{"line":28,"column":128,"offset":1290}}},"children":"Chai"}}]," 등이 주로 사용된다."]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// 예제: Mocha를 사용한 간단한 유닛 테스트\nconst assert = require('assert');\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      assert.strictEqual([1,2,3].indexOf(4), -1);\n    });\n  });\n});\n"}],"position":{"start":{"line":30,"column":1,"offset":1304},"end":{"line":40,"column":4,"offset":1591}}},"children":"// 예제: Mocha를 사용한 간단한 유닛 테스트\nconst assert = require('assert');\ndescribe('Array', function() {\n  describe('#indexOf()', function() {\n    it('should return -1 when the value is not present', function() {\n      assert.strictEqual([1,2,3].indexOf(4), -1);\n    });\n  });\n});\n"}}]}],"\n",["$","h3",null,{"id":"b0d905d4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. 코드 품질 검사 및 스타일 검사"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["코드 스타일과 품질을 일관되게 유지하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ESLint","position":{"start":{"line":44,"column":26,"offset":1644},"end":{"line":44,"column":34,"offset":1652}}}],"position":{"start":{"line":44,"column":26,"offset":1644},"end":{"line":44,"column":34,"offset":1652}}},"children":"ESLint"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Prettier","position":{"start":{"line":44,"column":36,"offset":1654},"end":{"line":44,"column":46,"offset":1664}}}],"position":{"start":{"line":44,"column":36,"offset":1654},"end":{"line":44,"column":46,"offset":1664}}},"children":"Prettier"}}],"와 같은 도구를 사용하여 자동화된 검사를 수행한다. 이러한 도구는 코드의 가독성을 높이고, 잠재적인 버그를 미리 발견하는 데 도움을 준다."]}],"\n",["$","h3",null,{"id":"90d8d8f5","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4. 빌드 및 배포"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["서버에 배포되기 전에 코드가 올바르게 빌드되어야 한다. 빌드 도구로는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Webpack","position":{"start":{"line":48,"column":40,"offset":1798},"end":{"line":48,"column":49,"offset":1807}}}],"position":{"start":{"line":48,"column":40,"offset":1798},"end":{"line":48,"column":49,"offset":1807}}},"children":"Webpack"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Gulp","position":{"start":{"line":48,"column":51,"offset":1809},"end":{"line":48,"column":57,"offset":1815}}}],"position":{"start":{"line":48,"column":51,"offset":1809},"end":{"line":48,"column":57,"offset":1815}}},"children":"Gulp"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Grunt","position":{"start":{"line":48,"column":59,"offset":1817},"end":{"line":48,"column":66,"offset":1824}}}],"position":{"start":{"line":48,"column":59,"offset":1817},"end":{"line":48,"column":66,"offset":1824}}},"children":"Grunt"}}]," 등이 있다. 빌드가 완료되면 애플리케이션을 실제 서버에 배포하는 과정이 필요하다. 여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Docker","position":{"start":{"line":48,"column":118,"offset":1876},"end":{"line":48,"column":126,"offset":1884}}}],"position":{"start":{"line":48,"column":118,"offset":1876},"end":{"line":48,"column":126,"offset":1884}}},"children":"Docker"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Kubernetes","position":{"start":{"line":48,"column":128,"offset":1886},"end":{"line":48,"column":140,"offset":1898}}}],"position":{"start":{"line":48,"column":128,"offset":1886},"end":{"line":48,"column":140,"offset":1898}}},"children":"Kubernetes"}}],"를 사용해 컨테이너화하여 배포할 수 있다."]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-yaml","node":{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"text","value":"# 예제: 간단한 Dockerfile 예제\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]\n"}],"position":{"start":{"line":50,"column":1,"offset":1923},"end":{"line":59,"column":4,"offset":2079}}},"children":"# 예제: 간단한 Dockerfile 예제\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ \"node\", \"server.js\" ]\n"}}]}],"\n",["$","h2",null,{"id":"6c8c16ca","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"CI/CD 도구 선택"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"많은 CI/CD 도구가 존재하지만, 그 중 대표적인 몇 가지를 소개한다."}],"\n",["$","h3",null,{"id":"2142143f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"1. Jenkins"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Jenkins는 오픈소스 자동화 서버로, CI/CD 파이프라인을 설정하는 데 자주 사용된다. 플러그인 시스템이 잘 되어 있어 다양한 작업을 자동화할 수 있다."}],"\n",["$","h3",null,{"id":"6e3b7cc9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"2. Travis CI"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Travis CI는 GitHub와 연동하여 CI/CD 파이프라인을 설정할 수 있는 호스팅 서비스이다. 설정이 간단하고, 오픈소스 프로젝트에 무료로 제공된다."}],"\n",["$","h3",null,{"id":"6473d997","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"3. CircleCI"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"CircleCI는 빠르고 효율적인 빌드 환경을 제공하는 것으로 알려져 있다. 다양한 언어와 플랫폼을 지원하며, UI가 직관적이다."}],"\n",["$","h3",null,{"id":"a2928735","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"4. GitHub Actions"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GitHub Actions는 GitHub에서 제공하는 CI/CD 도구로, 저장소 내에서 파이프라인 설정을 쉽게 관리할 수 있다. GitHub와의 통합이 매우 매끄럽다."}],"\n",["$","h2",null,{"id":"a812afe8","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"실제 구현 사례: GitHub Actions를 이용한 CI/CD"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"GitHub Actions를 이용해 Node.js 애플리케이션의 CI/CD를 설정하는 기본 예제는 다음과 같다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-yaml","node":{"type":"element","tagName":"code","properties":{"className":["language-yaml"]},"children":[{"type":"text","value":"# 예제: GitHub Actions 워크플로우 파일\nname: Node.js CI/CD\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run tests\n      run: npm test\n\n    - name: Build\n      run: npm run build\n\n    - name: Deploy\n      run: echo \"Deploying to production...\"\n"}],"position":{"start":{"line":85,"column":1,"offset":2665},"end":{"line":119,"column":4,"offset":3229}}},"children":"# 예제: GitHub Actions 워크플로우 파일\nname: Node.js CI/CD\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v2\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v2\n      with:\n        node-version: '14'\n\n    - name: Install dependencies\n      run: npm install\n\n    - name: Run tests\n      run: npm test\n\n    - name: Build\n      run: npm run build\n\n    - name: Deploy\n      run: echo \"Deploying to production...\"\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 코드가 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main","position":{"start":{"line":121,"column":13,"offset":3243},"end":{"line":121,"column":19,"offset":3249}}}],"position":{"start":{"line":121,"column":13,"offset":3243},"end":{"line":121,"column":19,"offset":3249}}},"children":"main"}}]," 브랜치에 푸시되거나 풀 리퀘스트가 생성될 때, CI/CD 워크플로우가 자동으로 실행된다. 이 과정에서 코드 체크아웃, Node.js 설정, 의존성 설치, 테스트 실행, 빌드, 배포까지의 과정을 자동화할 수 있다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js 애플리케이션의 지속적 통합과 배포 자동화는 높은 효율성과 안정성을 제공한다. CI/CD 파이프라인을 올바르게 설계하고 구현함으로써 코드 품질을 유지하고, 빠르고 신속한 배포를 가능하게 할 수 있다. 이 글에서 다룬 내용들을 참고하여 자신만의 CI/CD 파이프라인을 구현해보길 바란다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 배포 전략: 지속적 통합과 배포 자동화","toc":[{"tagName":"h1","title":"Node.js 배포 전략: 지속적 통합과 배포 자동화","id":"1f0af1e2"},{"tagName":"h2","title":"지속적 통합(CI)과 지속적 배포(CD)의 개념","id":"7ecfae74"},{"tagName":"h2","title":"CI/CD 파이프라인 설계","id":"8fdf87cc"},{"tagName":"h3","title":"1. 버전 관리 시스템(Git)","id":"d4161f30"},{"tagName":"h3","title":"2. 자동화된 테스트","id":"be40082a"},{"tagName":"h3","title":"3. 코드 품질 검사 및 스타일 검사","id":"b0d905d4"},{"tagName":"h3","title":"4. 빌드 및 배포","id":"90d8d8f5"},{"tagName":"h2","title":"CI/CD 도구 선택","id":"6c8c16ca"},{"tagName":"h3","title":"1. Jenkins","id":"2142143f"},{"tagName":"h3","title":"2. Travis CI","id":"6e3b7cc9"},{"tagName":"h3","title":"3. CircleCI","id":"6473d997"},{"tagName":"h3","title":"4. GitHub Actions","id":"a2928735"},{"tagName":"h2","title":"실제 구현 사례: GitHub Actions를 이용한 CI/CD","id":"a812afe8"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
