1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-%ED%8C%81-61743b49","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-성능-튜닝-빠르고-효율적인-코드-작성-팁-61743b49\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-%ED%8C%81-61743b49","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-성능-튜닝-빠르고-효율적인-코드-작성-팁-61743b49\"}"},"styles":[]}],"segment":["slug","Nodejs-%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-%ED%8C%81-61743b49","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js의 성능을 최적화하고 빠르고 효율적인 코드를 작성하기 위한 다양한 튜닝 팁을 다룹니다. 주요 내용을 통해 개발자는 애플리케이션의 성능을 크게 향상시킬 수 있습니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,성능 튜닝,코드 최적화,JavaScript"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-%ED%8C%81-61743b49"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js의 성능을 최적화하고 빠르고 효율적인 코드를 작성하기 위한 다양한 튜닝 팁을 다룹니다. 주요 내용을 통해 개발자는 애플리케이션의 성능을 크게 향상시킬 수 있습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1-%ED%8C%81-61743b49"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js의 성능을 최적화하고 빠르고 효율적인 코드를 작성하기 위한 다양한 튜닝 팁을 다룹니다. 주요 내용을 통해 개발자는 애플리케이션의 성능을 크게 향상시킬 수 있습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-01"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"a1bf00b9","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js는 비차단식 I/O와 이벤트 드리븐 구조 덕분에 높은 성능을 자랑합니다. 하지만 잘못된 코드 구현은 이 성능을 저해할 수 있습니다. 이 글에서는 Node.js 애플리케이션에서 성능을 극대화하기 위한 다양한 방법들을 다뤄보겠습니다."}],"\n",["$","h2",null,{"id":"b4e6341d","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"이벤트 루프 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js의 핵심은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"이벤트 루프","position":{"start":{"line":8,"column":14,"offset":202},"end":{"line":8,"column":22,"offset":210}}}],"position":{"start":{"line":8,"column":14,"offset":202},"end":{"line":8,"column":22,"offset":210}}},"children":"이벤트 루프"}}],"입니다. 이벤트 루프는 논블로킹 I/O 작업과 함께 동작하여, 단일 스레드로도 높은 성능을 구현할 수 있게 합니다. 이벤트 루프가 어떻게 작동하는지 이해하는 것은 성능 튜닝의 첫걸음입니다. 이벤트 루프는 다음과 같은 단계로 구성됩니다:"]}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"타이머"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setTimeout","position":{"start":{"line":10,"column":13,"offset":355},"end":{"line":10,"column":25,"offset":367}}}],"position":{"start":{"line":10,"column":13,"offset":355},"end":{"line":10,"column":25,"offset":367}}},"children":"setTimeout"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setInterval","position":{"start":{"line":10,"column":27,"offset":369},"end":{"line":10,"column":40,"offset":382}}}],"position":{"start":{"line":10,"column":27,"offset":369},"end":{"line":10,"column":40,"offset":382}}},"children":"setInterval"}}],"의 콜백 실행"]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"I/O 콜백"}],": 네트워크, 파일 등 다양한 I/O 작업의 콜백 처리"]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"데이터베이스와 약속된 작업"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Promise","position":{"start":{"line":12,"column":24,"offset":457},"end":{"line":12,"column":33,"offset":466}}}],"position":{"start":{"line":12,"column":24,"offset":457},"end":{"line":12,"column":33,"offset":466}}},"children":"Promise"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"async/await","position":{"start":{"line":12,"column":35,"offset":468},"end":{"line":12,"column":48,"offset":481}}}],"position":{"start":{"line":12,"column":35,"offset":468},"end":{"line":12,"column":48,"offset":481}}},"children":"async/await"}}],"의 처리"]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"클로즈 콜백"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"close","position":{"start":{"line":13,"column":16,"offset":501},"end":{"line":13,"column":23,"offset":508}}}],"position":{"start":{"line":13,"column":16,"offset":501},"end":{"line":13,"column":23,"offset":508}}},"children":"close"}}]," 이벤트의 콜백 처리"]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이벤트 루프가 효율적으로 작동하기 위해 코드는 가능한 한 짧아야 합니다. 긴 작업은 워커 스레드 또는 적절한 비동기식 방법으로 분리해야 합니다."}],"\n",["$","h2",null,{"id":"b5d65d04","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"비동기 코드 작성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js는 비동기 I/O를 기본으로 하여 높은 성능을 유지합니다. 다음은 비동기 코드 작성을 위한 몇 가지 방법입니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"콜백"}],": 가장 전통적인 방식입니다. 하지만 콜백 헬을 방지하려면 적절한 에러 처리가 필요합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Promise"}],": 콜백 헬을 줄이기 위한 좋은 방법입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"then()","position":{"start":{"line":22,"column":39,"offset":785},"end":{"line":22,"column":47,"offset":793}}}],"position":{"start":{"line":22,"column":39,"offset":785},"end":{"line":22,"column":47,"offset":793}}},"children":"then()"}}],"과 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"catch()","position":{"start":{"line":22,"column":49,"offset":795},"end":{"line":22,"column":58,"offset":804}}}],"position":{"start":{"line":22,"column":49,"offset":795},"end":{"line":22,"column":58,"offset":804}}},"children":"catch()"}}],"를 사용하여 체이닝할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"async/await"}],": 최신 문법으로써 코드가 더 읽기 쉽게 됩니다. 하지만 반드시 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"try/catch","position":{"start":{"line":23,"column":54,"offset":877},"end":{"line":23,"column":65,"offset":888}}}],"position":{"start":{"line":23,"column":54,"offset":877},"end":{"line":23,"column":65,"offset":888}}},"children":"try/catch"}}]," 블록으로 에러 처리를 해야 합니다."]}],"\n"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// Promise 예제\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    fs.readFile('data.txt', (err, data) => {\n      if (err) reject(err);\n      else resolve(data);\n    });\n  });\n}\n\nfetchData()\n  .then(data => console.log(data))\n  .catch(err => console.error(err));\n\n// async/await 예제\nasync function fetchData() {\n  try {\n    const data = await fs.promises.readFile('data.txt');\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n"}],"position":{"start":{"line":25,"column":1,"offset":910},"end":{"line":49,"column":4,"offset":1392}}},"children":"// Promise 예제\nfunction fetchData() {\n  return new Promise((resolve, reject) => {\n    fs.readFile('data.txt', (err, data) => {\n      if (err) reject(err);\n      else resolve(data);\n    });\n  });\n}\n\nfetchData()\n  .then(data => console.log(data))\n  .catch(err => console.error(err));\n\n// async/await 예제\nasync function fetchData() {\n  try {\n    const data = await fs.promises.readFile('data.txt');\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n"}}]}],"\n",["$","h2",null,{"id":"48eb6f91","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"메모리 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["메모리 누수가 발생하면 Node.js의 성능이 저하됩니다. Node.js에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"가비지 컬렉터","position":{"start":{"line":53,"column":45,"offset":1449},"end":{"line":53,"column":54,"offset":1458}}}],"position":{"start":{"line":53,"column":45,"offset":1449},"end":{"line":53,"column":54,"offset":1458}}},"children":"가비지 컬렉터"}}],"가 주기적으로 메모리를 정리하지만, 여전히 메모리 누수를 주의 깊게 관리해야 합니다:"]}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"전역 변수 지양"}],": 전역 변수는 애플리케이션 전체에 걸쳐 영향을 미치므로, 메모리 누수의 원인이 될 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"타이머와 콜백 정리"}],": 사용 후에는 타이머와 콜백을 명시적으로 제거해야 합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"클로저"}],": 클로저를 사용할 때 참고하지 않는 변수는 적절히 관리해야 합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"71cd8fcd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"코드 프로파일링"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"프로파일링 도구를 사용하면 코드의 병목 지점을 쉽게 찾아낼 수 있습니다. Node.js에서는 다음과 같은 도구를 사용합니다:"}],"\n",["$","ul","ul-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"Node.js의 내장 프로파일러"}],": ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"--prof","position":{"start":{"line":63,"column":26,"offset":1784},"end":{"line":63,"column":34,"offset":1792}}}],"position":{"start":{"line":63,"column":26,"offset":1784},"end":{"line":63,"column":34,"offset":1792}}},"children":"--prof"}}]," 플래그를 사용하여 프로파일링 정보를 생성할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"Clinic.js"}],": 더 시각적이고 사용하기 쉬운 프로파일링 도구입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"V8 프로파일러"}],": V8 엔진의 프로파일링 도구를 사용하여 상세한 정보를 얻을 수 있습니다."]}],"\n"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-bash","node":{"type":"element","tagName":"code","properties":{"className":["language-bash"]},"children":[{"type":"text","value":"node --prof app.js\nclinic doctor -- node app.js\n"}],"position":{"start":{"line":67,"column":1,"offset":1929},"end":{"line":70,"column":4,"offset":1988}}},"children":"node --prof app.js\nclinic doctor -- node app.js\n"}}]}],"\n",["$","h2",null,{"id":"eb6b8b96","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"데이터베이스 최적화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"데이터베이스 쿼리는 애플리케이션의 성능에 큰 영향을 미칩니다. 데이터베이스의 성능을 최적화하기 위한 몇 가지 방법은 다음과 같습니다:"}],"\n",["$","ul","ul-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"인덱스 사용"}],": 인덱스를 올바르게 사용하면 쿼리 속도를 크게 향상시킬 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"캐싱"}],": 자주 사용되는 데이터를 캐싱하여 데이터베이스 부하를 줄입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"덜 필요한 데이터 최소화"}],": 필요한 데이터만 쿼리하여 오버헤드를 줄입니다."]}],"\n"]}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// Redis를 사용한 캐싱 예제\nconst redis = require('redis');\nconst client = redis.createClient();\n\nfunction getUser(userId) {\n  return new Promise((resolve, reject) => {\n    client.get(userId, (err, data) => {\n      if (err) reject(err);\n      else if (data) resolve(JSON.parse(data));\n      else {\n        db.query('SELECT * FROM users WHERE id = ?', [userId], (err, result) => {\n          if (err) reject(err);\n          else {\n            client.setex(userId, 3600, JSON.stringify(result));\n            resolve(result);\n          }\n        });\n      }\n    });\n  });\n}\n"}],"position":{"start":{"line":80,"column":1,"offset":2226},"end":{"line":102,"column":4,"offset":2805}}},"children":"// Redis를 사용한 캐싱 예제\nconst redis = require('redis');\nconst client = redis.createClient();\n\nfunction getUser(userId) {\n  return new Promise((resolve, reject) => {\n    client.get(userId, (err, data) => {\n      if (err) reject(err);\n      else if (data) resolve(JSON.parse(data));\n      else {\n        db.query('SELECT * FROM users WHERE id = ?', [userId], (err, result) => {\n          if (err) reject(err);\n          else {\n            client.setex(userId, 3600, JSON.stringify(result));\n            resolve(result);\n          }\n        });\n      }\n    });\n  });\n}\n"}}]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Node.js의 성능을 최적화하기 위해서는 이벤트 루프의 이해, 비동기 코드 작성, 메모리 관리, 코드 프로파일링, 데이터베이스 최적화 등의 다양한 측면에서 접근해야 합니다. 이 글에서 다룬 팁들을 참고하여 고성능의 Node.js 애플리케이션을 구축해보세요."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁","toc":[{"tagName":"h1","title":"Node.js 성능 튜닝: 빠르고 효율적인 코드 작성 팁","id":"a1bf00b9"},{"tagName":"h2","title":"이벤트 루프 이해하기","id":"b4e6341d"},{"tagName":"h2","title":"비동기 코드 작성","id":"b5d65d04"},{"tagName":"h2","title":"메모리 관리","id":"48eb6f91"},{"tagName":"h2","title":"코드 프로파일링","id":"71cd8fcd"},{"tagName":"h2","title":"데이터베이스 최적화","id":"eb6b8b96"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
