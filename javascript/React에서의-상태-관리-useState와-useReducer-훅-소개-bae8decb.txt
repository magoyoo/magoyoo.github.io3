1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState%EC%99%80-useReducer-%ED%9B%85-%EC%86%8C%EA%B0%9C-bae8decb","d"],{"children":["__PAGE__?{\"slug\":\"React에서의-상태-관리-useState와-useReducer-훅-소개-bae8decb\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState%EC%99%80-useReducer-%ED%9B%85-%EC%86%8C%EA%B0%9C-bae8decb","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"React에서의-상태-관리-useState와-useReducer-훅-소개-bae8decb\"}"},"styles":[]}],"segment":["slug","React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState%EC%99%80-useReducer-%ED%9B%85-%EC%86%8C%EA%B0%9C-bae8decb","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"React에서의 상태 관리: useState와 useReducer 훅 소개. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 React에서의 상태 관리 방법인 `useState`와 `useReducer` 훅을 중심으로 상태를 관리하는 방법을 설명합니다. 두 훅의 사용법과 각각의 장단점을 비교하여 React 앱 개발 시 어떤 상황에서 어떤 방법을 사용할지 알아봅니다."}],["$","meta","3",{"name":"keywords","content":"React,useState,useReducer,상태 관리"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState%EC%99%80-useReducer-%ED%9B%85-%EC%86%8C%EA%B0%9C-bae8decb"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"React에서의 상태 관리: useState와 useReducer 훅 소개. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"React에서의 상태 관리: useState와 useReducer 훅 소개. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 React에서의 상태 관리 방법인 `useState`와 `useReducer` 훅을 중심으로 상태를 관리하는 방법을 설명합니다. 두 훅의 사용법과 각각의 장단점을 비교하여 React 앱 개발 시 어떤 상황에서 어떤 방법을 사용할지 알아봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/React%EC%97%90%EC%84%9C%EC%9D%98-%EC%83%81%ED%83%9C-%EA%B4%80%EB%A6%AC-useState%EC%99%80-useReducer-%ED%9B%85-%EC%86%8C%EA%B0%9C-bae8decb"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"React에서의 상태 관리: useState와 useReducer 훅 소개. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 React에서의 상태 관리 방법인 `useState`와 `useReducer` 훅을 중심으로 상태를 관리하는 방법을 설명합니다. 두 훅의 사용법과 각각의 장단점을 비교하여 React 앱 개발 시 어떤 상황에서 어떤 방법을 사용할지 알아봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner1.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner1.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"React에서의 상태 관리: useState와 useReducer 훅 소개."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"React에서의 상태 관리: useState와 useReducer 훅 소개."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-26"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"612b12a0","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"React에서의 상태 관리: useState와 useReducer 훅 소개"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React는 컴포넌트 기반의 라이브러리로, 상태(state)를 사용하여 UI 변화를 관리합니다. 상태 관리는 React 앱 개발에서 매우 중요한 부분을 차지하며, 이를 효율적으로 관리하는 것이 필요합니다. 이 글에서는 React의 상태 관리 훅인 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":4,"column":139,"offset":184},"end":{"line":4,"column":149,"offset":194}}}],"position":{"start":{"line":4,"column":139,"offset":184},"end":{"line":4,"column":149,"offset":194}}},"children":"useState"}}],"와 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":4,"column":151,"offset":196},"end":{"line":4,"column":163,"offset":208}}}],"position":{"start":{"line":4,"column":151,"offset":196},"end":{"line":4,"column":163,"offset":208}}},"children":"useReducer"}}],"에 대해 자세히 알아보고, 각각의 사용법과 장단점을 비교하여 어떤 상황에서 어떤 방법을 사용할지에 대해 설명합니다."]}],"\n",["$","h2",null,{"id":"3fad2b32","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useState 훅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":8,"column":11,"offset":299}}}],"position":{"start":{"line":8,"column":1,"offset":289},"end":{"line":8,"column":11,"offset":299}}},"children":"useState"}}],"는 React에서 가장 기본적인 상태 관리 훅으로, 함수형 컴포넌트 내에서 상태 값을 추가할 수 있게 해줍니다. 매우 간단하고 직관적인 API를 제공하므로 소규모 상태 관리에 적합합니다."]}],"\n",["$","h3",null,{"id":"09685c1a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":12,"column":1,"offset":414},"end":{"line":12,"column":11,"offset":424}}}],"position":{"start":{"line":12,"column":1,"offset":414},"end":{"line":12,"column":11,"offset":424}}},"children":"useState"}}],"는 아래와 같은 형식을 사용합니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import { useState } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":14,"column":1,"offset":445},"end":{"line":27,"column":4,"offset":704}}},"children":"import { useState } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increase</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":29,"column":1,"offset":706},"end":{"line":29,"column":11,"offset":716}}}],"position":{"start":{"line":29,"column":1,"offset":706},"end":{"line":29,"column":11,"offset":716}}},"children":"useState"}}],"는 초기 상태 값을 인자로 받아 상태 값과 상태를 갱신하는 함수를 반환합니다. 위 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"count","position":{"start":{"line":29,"column":62,"offset":767},"end":{"line":29,"column":69,"offset":774}}}],"position":{"start":{"line":29,"column":62,"offset":767},"end":{"line":29,"column":69,"offset":774}}},"children":"count"}}],"는 상태 값이며, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setCount","position":{"start":{"line":29,"column":79,"offset":784},"end":{"line":29,"column":89,"offset":794}}}],"position":{"start":{"line":29,"column":79,"offset":784},"end":{"line":29,"column":89,"offset":794}}},"children":"setCount"}}],"는 상태 갱신 함수입니다."]}],"\n",["$","h3",null,{"id":"acb58e36","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"장단점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"장점"}],":"]}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"간단함"}],": 사용법이 매우 간단하고 직관적입니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"초기 설정"}],": 초기 상태 값을 설정하기 용이합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"독립성"}],": 상태와 상태 갱신 로직이 컴포넌트 내부에만 국한됩니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"단점"}],":"]}],"\n",["$","ul","ul-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 상태 관리의 어려움"}],": 복잡한 상태 업데이트 로직을 처리하는 데는 적합하지 않습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"동시 업데이트 문제"}],": 여러 상태를 동시에 업데이트할 때 충돌이 발생할 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"ed412d6f","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"useReducer 훅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":44,"column":1,"offset":1072},"end":{"line":44,"column":13,"offset":1084}}}],"position":{"start":{"line":44,"column":1,"offset":1072},"end":{"line":44,"column":13,"offset":1084}}},"children":"useReducer"}}],"는 보다 복잡한 상태 관리와 로직을 처리하기 위해 사용되는 훅입니다. 주로 상태가 여러 단계로 나뉘어지고, 다양한 액션(action)에 따라 상태가 변경되는 경우에 적합합니다."]}],"\n",["$","h3",null,{"id":"09685c1a","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":48,"column":1,"offset":1193},"end":{"line":48,"column":13,"offset":1205}}}],"position":{"start":{"line":48,"column":1,"offset":1193},"end":{"line":48,"column":13,"offset":1205}}},"children":"useReducer"}}],"는 아래와 같은 형식을 사용합니다:"]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"import { useReducer } from 'react';\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction CounterComponent() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'increment' })}>Increase</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrease</button>\n    </div>\n  );\n}\n"}],"position":{"start":{"line":50,"column":1,"offset":1226},"end":{"line":77,"column":4,"offset":1873}}},"children":"import { useReducer } from 'react';\n\nconst initialState = { count: 0 };\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return { count: state.count + 1 };\n    case 'decrement':\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n}\n\nfunction CounterComponent() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <div>\n      <p>Count: {state.count}</p>\n      <button onClick={() => dispatch({ type: 'increment' })}>Increase</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>Decrease</button>\n    </div>\n  );\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":79,"column":1,"offset":1875},"end":{"line":79,"column":13,"offset":1887}}}],"position":{"start":{"line":79,"column":1,"offset":1875},"end":{"line":79,"column":13,"offset":1887}}},"children":"useReducer"}}],"는 리듀서 함수와 초기 상태를 인자로 받아 상태 값과 디스패치(dispatch) 함수를 반환합니다. 리듀서 함수는 현재 상태와 액션을 받아 새로운 상태를 반환하는 함수입니다."]}],"\n",["$","h3",null,{"id":"acb58e36","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"장단점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"장점"}],":"]}],"\n",["$","ul","ul-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 상태 관리에 용이"}],": 복잡한 상태 업데이트와 다양한 액션 관리에 적합합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"명확한 로직 분리"}],": 상태 갱신 로직을 리듀서 함수로 분리하여 코드의 가독성과 유지보수성을 높입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"동시 업데이트 처리"}],": 여러 상태를 동시에 업데이트하는 상황에서 더 적합합니다."]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":[["$","strong",null,{"className":"font-black","children":"단점"}],":"]}],"\n",["$","ul","ul-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"초기 설정의 복잡성"}],": 설정과 초기화 과정이 다소 복잡할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"보일러플레이트 코드 증가"}],": 소규모 상태 관리에 비해 코드가 길어질 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"499e44b5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"상황별 사용법 비교"}],"\n",["$","h3",null,{"id":"6e0f22d9","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"간단한 상태 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["간단한 상태 관리가 필요한 경우에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":96,"column":21,"offset":2323},"end":{"line":96,"column":31,"offset":2333}}}],"position":{"start":{"line":96,"column":21,"offset":2323},"end":{"line":96,"column":31,"offset":2333}}},"children":"useState"}}],"가 더 적합합니다. 예를 들면, 단순히 카운터 기능을 구현하거나 특정 UI 요소의 토글 상태를 관리하는 경우입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":96,"column":96,"offset":2398},"end":{"line":96,"column":106,"offset":2408}}}],"position":{"start":{"line":96,"column":96,"offset":2398},"end":{"line":96,"column":106,"offset":2408}}},"children":"useState"}}],"는 간단하고 직관적이므로 빠르게 기능을 구현할 수 있습니다."]}],"\n",["$","h3",null,{"id":"02fba1fe","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"복잡한 상태 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["여러 단계로 나뉘어진 복잡한 상태 관리와 다양한 액션이 필요한 경우에는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":100,"column":41,"offset":2498},"end":{"line":100,"column":53,"offset":2510}}}],"position":{"start":{"line":100,"column":41,"offset":2498},"end":{"line":100,"column":53,"offset":2510}}},"children":"useReducer"}}],"가 더 적합합니다. 예를 들면, 폼 상태를 관리하거나, 여러 페이지에서 공통으로 사용하는 상태를 관리하는 경우입니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":100,"column":119,"offset":2576},"end":{"line":100,"column":131,"offset":2588}}}],"position":{"start":{"line":100,"column":119,"offset":2576},"end":{"line":100,"column":131,"offset":2588}}},"children":"useReducer"}}],"는 상태 관리 로직을 명확하게 분리하여 코드의 가독성을 높여줍니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["React에서의 상태 관리는 애플리케이션의 성능과 유지보수에 중요한 영향을 미칩니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useState","position":{"start":{"line":104,"column":49,"offset":2682},"end":{"line":104,"column":59,"offset":2692}}}],"position":{"start":{"line":104,"column":49,"offset":2682},"end":{"line":104,"column":59,"offset":2692}}},"children":"useState"}}],"는 간단한 상태 관리에 적합하며, 빠르고 직관적인 사용법을 제공합니다. 반면, ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"useReducer","position":{"start":{"line":104,"column":103,"offset":2736},"end":{"line":104,"column":115,"offset":2748}}}],"position":{"start":{"line":104,"column":103,"offset":2736},"end":{"line":104,"column":115,"offset":2748}}},"children":"useReducer"}}],"는 복잡한 상태 관리와 다양한 액션 처리에 유리하며, 상태 관리 로직을 분리하여 코드의 가독성과 유지보수를 용이하게 합니다. 상황에 맞게 적절한 훅을 선택하여 효율적인 React 앱을 개발하는 것이 중요합니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"React에서의 상태 관리: useState와 useReducer 훅 소개.","toc":[{"tagName":"h1","title":"React에서의 상태 관리: useState와 useReducer 훅 소개","id":"612b12a0"},{"tagName":"h2","title":"useState 훅","id":"3fad2b32"},{"tagName":"h3","title":"사용법","id":"09685c1a"},{"tagName":"h3","title":"장단점","id":"acb58e36"},{"tagName":"h2","title":"useReducer 훅","id":"ed412d6f"},{"tagName":"h3","title":"사용법","id":"09685c1a"},{"tagName":"h3","title":"장단점","id":"acb58e36"},{"tagName":"h2","title":"상황별 사용법 비교","id":"499e44b5"},{"tagName":"h3","title":"간단한 상태 관리","id":"6e0f22d9"},{"tagName":"h3","title":"복잡한 상태 관리","id":"02fba1fe"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
