1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["algorithm",{"children":[["slug","%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EC%8B%A0-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%84%EB%A1%9C%EC%96%B4%EB%A0%B5%EC%A7%80-%EC%95%8A%EB%84%A4","d"],{"children":["__PAGE__?{\"slug\":\"최적화의-신-다익스트라-알고리즘-별로어렵지-않네\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","algorithm","children",["slug","%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EC%8B%A0-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%84%EB%A1%9C%EC%96%B4%EB%A0%B5%EC%A7%80-%EC%95%8A%EB%84%A4","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"최적화의-신-다익스트라-알고리즘-별로어렵지-않네\"}"},"styles":[]}],"segment":["slug","%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EC%8B%A0-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%84%EB%A1%9C%EC%96%B4%EB%A0%B5%EC%A7%80-%EC%95%8A%EB%84%A4","d"]},"styles":[]}],"segment":"algorithm"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네? | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"다익스트라 알고리즘의 원리와 구현 방법, 다양한 응용 사례, 최적화 기법을 상세히 소개합니다. 효율적인 경로 탐색 알고리즘을 이해하고 실무에 활용해 보세요."}],["$","meta","3",{"name":"keywords","content":"알고리즘,다익스트라,면접질문"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/algorithm/%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EC%8B%A0-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%84%EB%A1%9C%EC%96%B4%EB%A0%B5%EC%A7%80-%EC%95%8A%EB%84%A4"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네? | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네? | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"다익스트라 알고리즘의 원리와 구현 방법, 다양한 응용 사례, 최적화 기법을 상세히 소개합니다. 효율적인 경로 탐색 알고리즘을 이해하고 실무에 활용해 보세요."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/algorithm/%EC%B5%9C%EC%A0%81%ED%99%94%EC%9D%98-%EC%8B%A0-%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EB%B3%84%EB%A1%9C%EC%96%B4%EB%A0%B5%EC%A7%80-%EC%95%8A%EB%84%A4"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네? | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"다익스트라 알고리즘의 원리와 구현 방법, 다양한 응용 사례, 최적화 기법을 상세히 소개합니다. 효율적인 경로 탐색 알고리즘을 이해하고 실무에 활용해 보세요."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/algorithmImg.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","406:static/chunks/app/algorithm/[slug]/page-94b16d6f374c2d4c.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/algorithmImg.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네?"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네?"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-05-31"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h2",null,{"id":"7ba0732b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다익스트라 알고리즘의 원리와 구현 방법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘은 그래프 이론에서 한 정점에서 다른 모든 정점으로의 최단 경로를 찾는 알고리즘입니다. 이 알고리즘은 가중치가 있는 그래프에서 사용되며, 음의 가중치를 갖지 않는 경우에만 적용됩니다. 다익스트라 알고리즘의 핵심 원리는 각 정점에 대해 현재까지 발견된 최단 경로를 반복적으로 갱신하며 최단 경로를 확정하는 것입니다."}],"\n",["$","h2",null,{"id":"5fd03035","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다익스트라 알고리즘의 기본 개념"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"초기화"}],": 시작 정점에서 다른 모든 정점으로의 거리를 무한대로 설정하고, 시작 정점의 거리는 0으로 설정합니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"미방문 정점 집합"}],": 모든 정점을 미방문 집합에 추가합니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"가장 짧은 거리 선택"}],": 미방문 정점 중 가장 짧은 거리를 가진 정점을 선택합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"거리 갱신"}],": 선택된 정점을 통해 다른 정점으로 가는 경로가 더 짧은 경우, 그 거리를 갱신합니다."]}],"\n",["$","li","li-4",{"children":[["$","strong",null,{"className":"font-black","children":"방문 완료"}],": 선택된 정점을 방문 집합에 추가하고, 미방문 집합에서 제거합니다."]}],"\n",["$","li","li-5",{"children":[["$","strong",null,{"className":"font-black","children":"반복"}],": 미방문 정점 집합이 비어 있지 않은 동안 3~5 과정을 반복합니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"d44bce61","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다익스트라 알고리즘의 구현"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘은 우선순위 큐를 사용하여 효율적으로 구현할 수 있습니다. Python을 사용한 구현 예시는 다음과 같습니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-python","node":{"type":"element","tagName":"code","properties":{"className":["language-python"]},"children":[{"type":"text","value":"import heapq\n\ndef dijkstra(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    priority_queue = [(0, start)]\n\n    while priority_queue:\n        current_distance, current_node = heapq.heappop(priority_queue)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance + weight\n\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(priority_queue, (distance, neighbor))\n\n    return distances\n"}],"position":{"start":{"line":19,"column":1,"offset":653},"end":{"line":41,"column":4,"offset":1294}}},"children":"import heapq\n\ndef dijkstra(graph, start):\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    priority_queue = [(0, start)]\n\n    while priority_queue:\n        current_distance, current_node = heapq.heappop(priority_queue)\n\n        if current_distance > distances[current_node]:\n            continue\n\n        for neighbor, weight in graph[current_node].items():\n            distance = current_distance + weight\n\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(priority_queue, (distance, neighbor))\n\n    return distances\n"}}]}],"\n",["$","h2",null,{"id":"83f30044","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다익스트라 알고리즘의 응용 사례"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘은 다양한 분야에서 응용될 수 있습니다. 대표적인 사례는 다음과 같습니다."}],"\n",["$","h2",null,{"id":"c4e8365a","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"네트워크 라우팅"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"네트워크에서 패킷을 가장 빠르고 효율적으로 전달하기 위해 최단 경로를 찾는 데 다익스트라 알고리즘이 사용됩니다. 인터넷 라우팅 프로토콜 중 하나인 OSPF(Open Shortest Path First)는 다익스트라 알고리즘을 기반으로 합니다."}],"\n",["$","h2",null,{"id":"5fecf815","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"내비게이션 시스템"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"내비게이션 시스템은 도로 맵에서 최단 경로를 찾기 위해 다익스트라 알고리즘을 사용합니다. 실시간 교통 정보를 반영하여 최단 경로를 동적으로 계산할 수 있습니다."}],"\n",["$","h2",null,{"id":"13a519f9","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"로봇 경로 계획"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"로봇 공학에서 로봇이 주어진 맵에서 목표 지점까지 충돌 없이 이동하기 위해 다익스트라 알고리즘을 사용할 수 있습니다. 이는 로봇의 효율적인 경로 계획과 이동에 중요한 역할을 합니다."}],"\n",["$","h2",null,{"id":"6241598b","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다익스트라 알고리즘의 최적화 기법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘은 기본적으로 효율적이지만, 대규모 그래프에서 성능을 더욱 향상시키기 위한 여러 최적화 기법이 존재합니다."}],"\n",["$","h2",null,{"id":"535a7de5","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"힙 자료구조 사용"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘의 효율성을 높이기 위해 우선순위 큐로 힙(heap) 자료구조를 사용합니다. 이를 통해 최소 거리를 가진 정점을 효율적으로 찾을 수 있습니다."}],"\n",["$","h2",null,{"id":"bcae71cd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"피보나치 힙"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"기본적으로 사용하는 이진 힙보다 더 빠른 피보나치 힙(Fibonacci heap)을 사용하면 다익스트라 알고리즘의 시간 복잡도를 개선할 수 있습니다. 피보나치 힙을 사용하면 최단 경로 검색 시간이 줄어들어 대규모 그래프에서 유리합니다."}],"\n",["$","h2",null,{"id":"58239811","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Bidirectional 다익스트라 알고리즘"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"양방향 다익스트라 알고리즘은 시작 정점과 목표 정점에서 동시에 탐색을 시작하여 만나는 지점을 찾는 방식입니다. 이 방법은 탐색 범위를 줄여 알고리즘의 효율성을 크게 향상시킬 수 있습니다."}],"\n",["$","h2",null,{"id":"49913694","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"A* 알고리즘"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘에 휴리스틱을 추가한 A* 알고리즘은 목표 지점까지의 예상 거리를 고려하여 탐색을 진행합니다. 이는 탐색 경로를 줄이고 효율성을 높이는 데 도움이 됩니다."}],"\n",["$","h2",null,{"id":"9ebb00cd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다익스트라 알고리즘의 한계와 대안"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다익스트라 알고리즘은 음의 가중치를 가진 그래프에는 적용할 수 없다는 한계가 있습니다. 이러한 경우, 벨만-포드 알고리즘을 사용하는 것이 적합합니다. 벨만-포드 알고리즘은 음의 가중치가 존재하는 그래프에서도 최단 경로를 찾을 수 있습니다."}],"\n",["$","h2",null,{"id":"4e299bbd","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"벨만-포드 알고리즘"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"벨만-포드 알고리즘은 모든 간선에 대해 반복적으로 거리 갱신을 수행하여 최단 경로를 찾습니다. 이 알고리즘은 음의 사이클을 탐지할 수 있어 특정 문제를 해결하는 데 유용합니다."}],"\n",["$","hr","hr-0",{}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"결론적으로, 다익스트라 알고리즘은 다양한 응용 분야에서 중요한 역할을 하며, 효율적인 최단 경로 탐색을 위한 여러 최적화 기법이 존재합니다. 알고리즘의 원리를 이해하고 다양한 상황에 맞게 적절히 활용함으로써, 복잡한 문제를 효과적으로 해결할 수 있습니다. 다익스트라 알고리즘의 한계를 인식하고 대안을 고려함으로써, 더욱 향상된 성능을 기대할 수 있습니다."}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"최적화의 신 다익스트라 알고리즘: 원리, 예시, 별로 안 어렵네?","toc":[{"tagName":"h2","title":"다익스트라 알고리즘의 원리와 구현 방법","id":"7ba0732b"},{"tagName":"h2","title":"다익스트라 알고리즘의 기본 개념","id":"5fd03035"},{"tagName":"h2","title":"다익스트라 알고리즘의 구현","id":"d44bce61"},{"tagName":"h2","title":"다익스트라 알고리즘의 응용 사례","id":"83f30044"},{"tagName":"h2","title":"네트워크 라우팅","id":"c4e8365a"},{"tagName":"h2","title":"내비게이션 시스템","id":"5fecf815"},{"tagName":"h2","title":"로봇 경로 계획","id":"13a519f9"},{"tagName":"h2","title":"다익스트라 알고리즘의 최적화 기법","id":"6241598b"},{"tagName":"h2","title":"힙 자료구조 사용","id":"535a7de5"},{"tagName":"h2","title":"피보나치 힙","id":"bcae71cd"},{"tagName":"h2","title":"Bidirectional 다익스트라 알고리즘","id":"58239811"},{"tagName":"h2","title":"A* 알고리즘","id":"49913694"},{"tagName":"h2","title":"다익스트라 알고리즘의 한계와 대안","id":"9ebb00cd"},{"tagName":"h2","title":"벨만-포드 알고리즘","id":"4e299bbd"}],"language":"kr"}]}]]}]]
8:null
