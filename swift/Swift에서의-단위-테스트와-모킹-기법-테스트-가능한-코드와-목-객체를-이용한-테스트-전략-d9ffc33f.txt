1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%AA%A8%ED%82%B9-%EA%B8%B0%EB%B2%95-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%99%80-%EB%AA%A9-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-d9ffc33f","d"],{"children":["__PAGE__?{\"slug\":\"Swift에서의-단위-테스트와-모킹-기법-테스트-가능한-코드와-목-객체를-이용한-테스트-전략-d9ffc33f\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%AA%A8%ED%82%B9-%EA%B8%B0%EB%B2%95-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%99%80-%EB%AA%A9-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-d9ffc33f","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Swift에서의-단위-테스트와-모킹-기법-테스트-가능한-코드와-목-객체를-이용한-테스트-전략-d9ffc33f\"}"},"styles":[]}],"segment":["slug","Swift%EC%97%90%EC%84%9C%EC%9D%98-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%AA%A8%ED%82%B9-%EA%B8%B0%EB%B2%95-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%99%80-%EB%AA%A9-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-d9ffc33f","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략. | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글에서는 Swift에서 단위 테스트 작성 방법과 모킹 기법을 통해 테스트 가능한 코드를 만들고, 목 객체를 활용한 테스트 전략을 논의합니다. 주요 개념과 코드 예제를 통해 구체적으로 이해해봅니다."}],["$","meta","3",{"name":"keywords","content":"Swift,Unit Testing,Mocking,Test Strategy"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%AA%A8%ED%82%B9-%EA%B8%B0%EB%B2%95-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%99%80-%EB%AA%A9-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-d9ffc33f"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략. | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략. | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글에서는 Swift에서 단위 테스트 작성 방법과 모킹 기법을 통해 테스트 가능한 코드를 만들고, 목 객체를 활용한 테스트 전략을 논의합니다. 주요 개념과 코드 예제를 통해 구체적으로 이해해봅니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/Swift%EC%97%90%EC%84%9C%EC%9D%98-%EB%8B%A8%EC%9C%84-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%AA%A8%ED%82%B9-%EA%B8%B0%EB%B2%95-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%BD%94%EB%93%9C%EC%99%80-%EB%AA%A9-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%84%EB%9E%B5-d9ffc33f"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략. | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글에서는 Swift에서 단위 테스트 작성 방법과 모킹 기법을 통해 테스트 가능한 코드를 만들고, 목 객체를 활용한 테스트 전략을 논의합니다. 주요 개념과 코드 예제를 통해 구체적으로 이해해봅니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner5.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"MarkDownCode","async":false}
10:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
11:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:T42c,import XCTest
import Cuckoo
@testable import YourProject

class NetworkManagerTests: XCTestCase {
    var mockURLSession: MockURLSession!
    var networkManager: NetworkManager!

    override func setUp() {
        super.setUp()
        mockURLSession = MockURLSession()
        networkManager = NetworkManager(session: mockURLSession)
    }

    func testFetchData() {
        let mockData = "Test Data".data(using: .utf8)!
        let mockResponse = HTTPURLResponse(url: URL(string: "https://example.com")!, statusCode: 200, httpVersion: nil, headerFields: nil)!
        stub(mockURLSession) { stub in
            when(stub.dataTask(with: any(), completionHandler: any())).thenReturn((mockData, mockResponse, nil))
        }

        let expectation = XCTestExpectation(description: "Fetch data from network")

        networkManager.fetchData(from: "https://example.com") { data, response, error in
            XCTAssertNotNil(data)
            XCTAssertNil(error)
            expectation.fulfill()
        }

        wait(for: [expectation], timeout: 5.0)
    }
}
f:T42c,import XCTest
import Cuckoo
@testable import YourProject

class NetworkManagerTests: XCTestCase {
    var mockURLSession: MockURLSession!
    var networkManager: NetworkManager!

    override func setUp() {
        super.setUp()
        mockURLSession = MockURLSession()
        networkManager = NetworkManager(session: mockURLSession)
    }

    func testFetchData() {
        let mockData = "Test Data".data(using: .utf8)!
        let mockResponse = HTTPURLResponse(url: URL(string: "https://example.com")!, statusCode: 200, httpVersion: nil, headerFields: nil)!
        stub(mockURLSession) { stub in
            when(stub.dataTask(with: any(), completionHandler: any())).thenReturn((mockData, mockResponse, nil))
        }

        let expectation = XCTestExpectation(description: "Fetch data from network")

        networkManager.fetchData(from: "https://example.com") { data, response, error in
            XCTAssertNotNil(data)
            XCTAssertNil(error)
            expectation.fulfill()
        }

        wait(for: [expectation], timeout: 5.0)
    }
}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner5.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략."}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략."}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-07-02"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"60a26803","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"단위 테스트(Unit Testing)는 소프트웨어 개발에서 핵심적인 부분으로, 작은 단위의 코드(일반적으로 함수나 메서드)가 독립적으로 기능하는지를 검증하는 데 사용됩니다. Swift에서도 이를 위해 다양한 도구와 기법이 존재합니다. 이 글에서는 Swift에서 단위 테스트를 작성하는 방법과 함께, 목(Mock) 객체를 활용한 테스트 전략에 대해 설명하겠습니다."}],"\n",["$","h2",null,{"id":"b561e7df","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"단위 테스트의 중요성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"단위 테스트는 코드의 신뢰성을 높이고 유지보수성을 개선하는 데 크게 기여합니다. 주요 장점으로는 다음과 같습니다:"}],"\n",["$","ul","ul-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"버그 발견"}],": 코드에서 발생할 수 있는 버그를 조기에 발견할 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"리팩토링 안전성"}],": 리팩토링 작업 중 코드의 기능이 변하지 않았는지를 쉽게 검증할 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"문서화"}],": 테스트 코드는 코드의 동작을 명확히 이해할 수 있는 문서 역할을 합니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"개발 속도 향상"}],": 변경 사항에 대한 빠른 피드백을 받을 수 있어 개발 속도가 향상됩니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"1caa831c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"Swift에서의 단위 테스트 작성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Swift에서는 Xcode와 함께 제공되는 XCTest 프레임워크를 사용해 단위 테스트를 작성할 수 있습니다. 기본적인 테스트 클래스는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"XCTestCase","position":{"start":{"line":17,"column":77,"offset":656},"end":{"line":17,"column":89,"offset":668}}}],"position":{"start":{"line":17,"column":77,"offset":656},"end":{"line":17,"column":89,"offset":668}}},"children":"XCTestCase"}}],"를 상속받아 작성합니다. 다음은 실제로 단위 테스트를 작성하는 과정입니다:"]}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"import XCTest\n@testable import YourProject\n\nclass ExampleTests: XCTestCase {\n    func testAddition() {\n        let result = 2 + 3\n        XCTAssertEqual(result, 5, \"Addition result should be 5\")\n    }\n}\n"}],"position":{"start":{"line":19,"column":1,"offset":711},"end":{"line":29,"column":4,"offset":926}}},"children":"import XCTest\n@testable import YourProject\n\nclass ExampleTests: XCTestCase {\n    func testAddition() {\n        let result = 2 + 3\n        XCTAssertEqual(result, 5, \"Addition result should be 5\")\n    }\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 코드에서는 간단한 덧셈 테스트를 작성하였습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"XCTAssertEqual","position":{"start":{"line":31,"column":30,"offset":957},"end":{"line":31,"column":46,"offset":973}}}],"position":{"start":{"line":31,"column":30,"offset":957},"end":{"line":31,"column":46,"offset":973}}},"children":"XCTAssertEqual"}}]," 메서드를 사용해 결과가 예상 값과 동일한지를 확인합니다."]}],"\n",["$","h2",null,{"id":"d4ee578c","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"목 객체(Mocking) 기법"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["단위 테스트를 작성할 때, 특히 외부 의존성이 있는 코드를 테스트할 경우에는 목 객체(Mock Object)를 활용합니다. 목 객체는 실제 객체의 동작을 흉내내서 테스트가 독립적으로 이루어질 수 있도록 돕습니다. Swift에서는 주요 외부 라이브러리로는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Cuckoo","position":{"start":{"line":35,"column":143,"offset":1170},"end":{"line":35,"column":151,"offset":1178}}}],"position":{"start":{"line":35,"column":143,"offset":1170},"end":{"line":35,"column":151,"offset":1178}}},"children":"Cuckoo"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mockingjay","position":{"start":{"line":35,"column":153,"offset":1180},"end":{"line":35,"column":165,"offset":1192}}}],"position":{"start":{"line":35,"column":153,"offset":1180},"end":{"line":35,"column":165,"offset":1192}}},"children":"Mockingjay"}}],", ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Mocker","position":{"start":{"line":35,"column":167,"offset":1194},"end":{"line":35,"column":175,"offset":1202}}}],"position":{"start":{"line":35,"column":167,"offset":1194},"end":{"line":35,"column":175,"offset":1202}}},"children":"Mocker"}}]," 등이 있습니다. 여기서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Cuckoo","position":{"start":{"line":35,"column":190,"offset":1217},"end":{"line":35,"column":198,"offset":1225}}}],"position":{"start":{"line":35,"column":190,"offset":1217},"end":{"line":35,"column":198,"offset":1225}}},"children":"Cuckoo"}}],"를 사용한 예제를 소개하겠습니다."]}],"\n",["$","h3",null,{"id":"082b19a4","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"Cuckoo를 이용한 목 객체 생성"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":["$","strong",null,{"className":"font-black","children":"프로젝트에 Cuckoo 설치"}]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"CocoaPods나 Carthage, Swift Package Manager를 사용해 Cuckoo를 설치할 수 있습니다. 여기서는 CocoaPods 예제를 보겠습니다:"}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-ruby","node":{"type":"element","tagName":"code","properties":{"className":["language-ruby"]},"children":[{"type":"text","value":"pod 'Cuckoo'\n"}],"position":{"start":{"line":43,"column":1,"offset":1389},"end":{"line":45,"column":4,"offset":1413}}},"children":"pod 'Cuckoo'\n"}}]}],"\n",["$","ol","ol-1",{"start":2,"children":["\n",["$","li","li-0",{"children":["$","strong",null,{"className":"font-black","children":"목 객체 생성 스크립트 작성"}]}],"\n"]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Cuckoo는 런타임이 아닌 빌드 타임에 목 객체를 생성합니다. 그렇기 때문에 빌드 파이프라인에 해당 스크립트를 추가해야 합니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-sh","node":{"type":"element","tagName":"code","properties":{"className":["language-sh"]},"children":[{"type":"text","value":"./Pods/Cuckoo/run generate --testable \"YourProject\" -o \"GeneratedMocks.swift\"\n"}],"position":{"start":{"line":51,"column":1,"offset":1513},"end":{"line":53,"column":4,"offset":1600}}},"children":"./Pods/Cuckoo/run generate --testable \"YourProject\" -o \"GeneratedMocks.swift\"\n"}}]}],"\n",["$","ol","ol-2",{"start":3,"children":["\n",["$","li","li-0",{"children":["$","strong",null,{"className":"font-black","children":"목 객체를 이용한 테스트 작성"}]}],"\n"]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-swift","node":{"type":"element","tagName":"code","properties":{"className":["language-swift"]},"children":[{"type":"text","value":"$e"}],"position":{"start":{"line":57,"column":1,"offset":1627},"end":{"line":90,"column":4,"offset":2707}}},"children":"$f"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NetworkManager","position":{"start":{"line":92,"column":9,"offset":2717},"end":{"line":92,"column":25,"offset":2733}}}],"position":{"start":{"line":92,"column":9,"offset":2717},"end":{"line":92,"column":25,"offset":2733}}},"children":"NetworkManager"}}]," 클래스의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"fetchData","position":{"start":{"line":92,"column":31,"offset":2739},"end":{"line":92,"column":42,"offset":2750}}}],"position":{"start":{"line":92,"column":31,"offset":2739},"end":{"line":92,"column":42,"offset":2750}}},"children":"fetchData"}}]," 메서드를 테스트하기 위해 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"MockURLSession","position":{"start":{"line":92,"column":57,"offset":2765},"end":{"line":92,"column":73,"offset":2781}}}],"position":{"start":{"line":92,"column":57,"offset":2765},"end":{"line":92,"column":73,"offset":2781}}},"children":"MockURLSession"}}],"을 사용했습니다. ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"stub","position":{"start":{"line":92,"column":83,"offset":2791},"end":{"line":92,"column":89,"offset":2797}}}],"position":{"start":{"line":92,"column":83,"offset":2791},"end":{"line":92,"column":89,"offset":2797}}},"children":"stub"}}]," 함수를 이용해 메서드의 동작을 지정하고 이를 통해 실제 네트워크 호출을 모방했습니다."]}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"Swift에서의 단위 테스트와 모킹 기법은 효율적이고 신뢰성 높은 코드를 작성하는 데 중요한 도구입니다. XCTest를 사용해 테스트 코드를 작성하고, Cuckoo와 같은 목 객체 라이브러리를 활용해 외부 의존성을 제거함으로써 테스트 가능성을 높일 수 있습니다. 이러한 테스트 전략은 유지보수성과 코드 품질을 향상시키는 데 큰 도움이 됩니다."}]]}]}],["$","$L10",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$L11",null,{"articleTitle":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략.","toc":[{"tagName":"h1","title":"Swift에서의 단위 테스트와 모킹 기법: 테스트 가능한 코드와 목 객체를 이용한 테스트 전략","id":"60a26803"},{"tagName":"h2","title":"단위 테스트의 중요성","id":"b561e7df"},{"tagName":"h2","title":"Swift에서의 단위 테스트 작성","id":"1caa831c"},{"tagName":"h2","title":"목 객체(Mocking) 기법","id":"d4ee578c"},{"tagName":"h3","title":"Cuckoo를 이용한 목 객체 생성","id":"082b19a4"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
