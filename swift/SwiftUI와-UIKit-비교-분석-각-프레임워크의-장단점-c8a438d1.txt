1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["swift",{"children":[["slug","SwiftUI%EC%99%80-UIKit-%EB%B9%84%EA%B5%90-%EB%B6%84%EC%84%9D-%EA%B0%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-c8a438d1","d"],{"children":["__PAGE__?{\"slug\":\"SwiftUI와-UIKit-비교-분석-각-프레임워크의-장단점-c8a438d1\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","swift","children",["slug","SwiftUI%EC%99%80-UIKit-%EB%B9%84%EA%B5%90-%EB%B6%84%EC%84%9D-%EA%B0%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-c8a438d1","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"SwiftUI와-UIKit-비교-분석-각-프레임워크의-장단점-c8a438d1\"}"},"styles":[]}],"segment":["slug","SwiftUI%EC%99%80-UIKit-%EB%B9%84%EA%B5%90-%EB%B6%84%EC%84%9D-%EA%B0%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-c8a438d1","d"]},"styles":[]}],"segment":"swift"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"SwiftUI와 UIKit은 iOS 개발에서 자주 사용되는 두 가지 주요 프레임워크입니다. 이 글에서는 이 두 프레임워크의 기본 개념과 함께 각각의 장단점을 비교 분석하여 어떤 상황에서 어떤 프레임워크를 선택하는 것이 적합한지 알아보겠습니다."}],["$","meta","3",{"name":"keywords","content":"SwiftUI,UIKit,iOS 개발,프레임워크 비교"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/swift/SwiftUI%EC%99%80-UIKit-%EB%B9%84%EA%B5%90-%EB%B6%84%EC%84%9D-%EA%B0%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-c8a438d1"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"SwiftUI와 UIKit은 iOS 개발에서 자주 사용되는 두 가지 주요 프레임워크입니다. 이 글에서는 이 두 프레임워크의 기본 개념과 함께 각각의 장단점을 비교 분석하여 어떤 상황에서 어떤 프레임워크를 선택하는 것이 적합한지 알아보겠습니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/swift/SwiftUI%EC%99%80-UIKit-%EB%B9%84%EA%B5%90-%EB%B6%84%EC%84%9D-%EA%B0%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90-c8a438d1"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"SwiftUI와 UIKit은 iOS 개발에서 자주 사용되는 두 가지 주요 프레임워크입니다. 이 글에서는 이 두 프레임워크의 기본 개념과 함께 각각의 장단점을 비교 분석하여 어떤 상황에서 어떤 프레임워크를 선택하는 것이 적합한지 알아보겠습니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/swiftBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
d:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
e:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","288:static/chunks/app/swift/[slug]/page-4841b882b9c15aba.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/swiftBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-06-28"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"fe954085","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"iOS 개발을 시작하려는 사람들은 SwiftUI와 UIKit이라는 두 가지 주요 프레임워크에 대해 반드시 알아야 합니다. 이 두 프레임워크는 iOS 앱 개발 환경에서 널리 사용되곤 하지만, 각각의 특징과 장단점이 있습니다. 이번 글에서는 SwiftUI와 UIKit의 기본 개념을 설명하고, 각각의 장단점을 비교 분석하여 어떤 상황에서 어떤 프레임워크를 선택하는 것이 좋은지 알아보겠습니다."}],"\n",["$","h2",null,{"id":"49846515","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 2019년에 애플이 발표한 최신 UI 프레임워크로, 선언형 프로그래밍 방식을 사용합니다. 코드와 UI를 같은 파일에서 작성할 수 있으며, 실시간 프리뷰 기능을 제공하여 개발자들이 코드 작성과 동시에 UI 변화를 즉각적으로 확인할 수 있습니다."}],"\n",["$","h3",null,{"id":"f40e2138","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"SwiftUI의 장점"}],"\n",["$","ol","ol-0",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"선언형 프로그래밍 방식"}],": SwiftUI는 선언형 프로그래밍 방식을 채택하여 UI 요소를 정의하고, 데이터 변화에 따라 UI가 자동으로 업데이트됩니다. 이는 코드의 길이를 줄이고 유지보수를 쉽게 만듭니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"즉각적인 피드백"}],": Xcode의 SwiftUI 프리뷰 기능을 통해 코드 변경사항을 실시간으로 확인할 수 있습니다. 이는 개발 속도를 크게 향상시킵니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"일관된 디자인"}],": SwiftUI는 여러 애플 플랫폼(iOS, macOS, watchOS, tvOS)을 지원하며, 일관된 디자인 패턴을 쉽게 구현할 수 있습니다."]}],"\n",["$","li","li-3",{"children":[["$","strong",null,{"className":"font-black","children":"코드 재사용성"}],": SwiftUI는 다양한 플랫폼에서 재사용할 수 있는 구성 요소로 앱을 만들 수 있습니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"e79f579d","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"SwiftUI의 단점"}],"\n",["$","ol","ol-1",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"제한된 기능"}],": SwiftUI는 아직 상대적으로 새로운 프레임워크이기 때문에, UIKit이 제공하는 모든 기능을 지원하지는 않습니다. 특정 작업이나 고급 기능 구현 시 제약이 있을 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"성숙도"}],": SwiftUI는 비교적 최근에 등장한 프레임워크입니다. 따라서 커뮤니티와 문서화 수준이 UIKit에 비해 적은 편입니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"호환성"}],": SwiftUI는 iOS 13 이상에서만 사용할 수 있습니다. 즉, iOS 13 이하 버전을 지원해야 하는 앱에서는 사용할 수 없습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"7e18d9e2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"UIKit 기본 개념"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIKit은 2008년 iPhone SDK와 함께 출시된 프레임워크로, 오랜 기간 동안 iOS 개발자들에게 널리 사용돼 왔습니다. UIKit은 객체 지향 프로그래밍 방식을 사용하며, 클래스를 통해 UI 요소를 생성하고 관리합니다."}],"\n",["$","h3",null,{"id":"ba7bdcac","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UIKit의 장점"}],"\n",["$","ol","ol-2",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"완전한 기능"}],": UIKit은 특정 기능이나 사용자 경험을 제공하는 데 필요한 모든 도구와 기능을 갖추고 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"성숙도"}],": 다년간의 사용과 업데이트를 통해 안정성과 성숙도가 매우 높습니다. 개발 커뮤니티도 크고, 문서화도 잘되어 있어 정보 찾기가 쉽습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"광범위한 호환성"}],": iOS 2.0부터 현재까지 모든 버전에서 사용할 수 있어, 다양한 iOS 버전을 지원하는 앱을 만드는 데 적합합니다."]}],"\n"]}],"\n",["$","h3",null,{"id":"53bb7806","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"UIKit의 단점"}],"\n",["$","ol","ol-3",{"children":["\n",["$","li","li-0",{"children":[["$","strong",null,{"className":"font-black","children":"복잡한 코드"}],": UIKit은 UI가 복잡해질수록 코드도 복잡해지는 경향이 있습니다. 이는 유지보수와 업데이트를 어렵게 만들 수 있습니다."]}],"\n",["$","li","li-1",{"children":[["$","strong",null,{"className":"font-black","children":"느린 피드백 루프"}],": UIKit은 코드 변경 후 Xcode를 빌드하고 디바이스나 시뮬레이터에서 실행해봐야 결과를 확인할 수 있어 피드백 루프가 다소 느릴 수 있습니다."]}],"\n",["$","li","li-2",{"children":[["$","strong",null,{"className":"font-black","children":"플랫폼 간 일관성 부족"}],": UIKit은 iOS에 최적화되어 있어 다른 애플 플랫폼에서 UI를 재사용하기 어려울 수 있습니다."]}],"\n"]}],"\n",["$","h2",null,{"id":"969671d1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"SwiftUI와 UIKit 비교"}],"\n",["$","h3",null,{"id":"2b6d8ca7","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"사용성 및 학습 곡선"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 선언형 프로그래밍 방식을 사용하여 간단하고 직관적인 코드 작성을 가능하게 합니다. 따라서 SwiftUI는 새로 시작하는 개발자들에게 빠르게 배우기 쉽습니다. 반면, UIKit은 객체 지향 프로그래밍을 기반으로 하여 많은 구성 요소와 패턴을 이해해야 하므로 학습 곡선이 더 가파릅니다."}],"\n",["$","h3",null,{"id":"454fa57f","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"커뮤니티 및 문서화"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIKit은 오랜 역사를 자랑하는 만큼, 광범위한 커뮤니티 지원과 문서, 예제가 풍부합니다. 반면 SwiftUI는 아직 신생 프레임워크로, 관련 리소스가 다소 제한적일 수 있습니다. 그러나 SwiftUI 커뮤니티도 빠르게 성장하고 있어, 점점 더 많은 자료와 새로운 기술들이 추가되고 있습니다."}],"\n",["$","h3",null,{"id":"3adad792","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"실행 성능 및 효율성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"UIKit은 오랜 시간동안 최적화를 거쳐 왔기 때문에 안정성과 성능 면에서 우수합니다. 반면 SwiftUI는 새로운 기술들을 많이 도입했기 때문에 일부 영역에서 성능 문제나 예기치 않은 버그가 발생할 수 있습니다. 그러나 애플은 SwiftUI의 성능 개선과 안정성 향상을 위해 지속적으로 업데이트하고 있습니다."}],"\n",["$","h3",null,{"id":"49632cc1","className":"md:text-[24px] text-[20px] font-medium leading-[140%] md:py-[30px] py-[18px] text-gray-800","children":"코드 재사용성 및 확장성"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI는 여러 애플 플랫폼에서 쉽게 코드 재사용이 가능합니다. 이는 앱 개발 시 코드 유지보수를 용이하게 하고, 여러 플랫폼을 동시에 지원하는 앱 개발에 큰 도움이 됩니다. UIKit은 iOS에 최적화되어 있어, 다른 애플 플랫폼에서 코드 재사용이 어려울 수 있습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"SwiftUI와 UIKit 모두 각각의 강점과 약점을 가지고 있으며, 상황에 따라 적합한 프레임워크를 선택하는 것이 중요합니다. 만약 빠르게 발전하는 최신 기술과 일관된 디자인 패턴을 선호한다면 SwiftUI를 고려해볼 가치가 있습니다. 반면 검증된 안정성과 모든 기능을 갖춘 프레임워크를 원한다면 UIKit이 더 나은 선택이 될 수 있습니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"결국 최적의 선택은 여러분의 프로젝트 요구사항과 개발 환경에 따라 달라질 것입니다. 두 프레임워크를 모두 학습하고 적절히 활용함으로써 더욱 훌륭한 iOS 앱을 개발할 수 있을 것입니다."}]]}]}],["$","$Ld",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Le",null,{"articleTitle":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점","toc":[{"tagName":"h1","title":"SwiftUI와 UIKit 비교 분석: 각 프레임워크의 장단점","id":"fe954085"},{"tagName":"h2","title":"SwiftUI 기본 개념","id":"49846515"},{"tagName":"h3","title":"SwiftUI의 장점","id":"f40e2138"},{"tagName":"h3","title":"SwiftUI의 단점","id":"e79f579d"},{"tagName":"h2","title":"UIKit 기본 개념","id":"7e18d9e2"},{"tagName":"h3","title":"UIKit의 장점","id":"ba7bdcac"},{"tagName":"h3","title":"UIKit의 단점","id":"53bb7806"},{"tagName":"h2","title":"SwiftUI와 UIKit 비교","id":"969671d1"},{"tagName":"h3","title":"사용성 및 학습 곡선","id":"2b6d8ca7"},{"tagName":"h3","title":"커뮤니티 및 문서화","id":"454fa57f"},{"tagName":"h3","title":"실행 성능 및 효율성","id":"3adad792"},{"tagName":"h3","title":"코드 재사용성 및 확장성","id":"49632cc1"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
