1:HL["/_next/static/media/c9a5bc6a7c948fb0-s.p.woff2",{"as":"font","type":"font/woff2"}]
2:HL["/_next/static/css/98e4530578c425d7.css",{"as":"style"}]
0:["BTzIZmIeYXT3BlsSUt3SU",[[["",{"children":["javascript",{"children":[["slug","Nodejs-%EC%9B%8C%EC%BB%A4-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A1%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-4c8fb36f","d"],{"children":["__PAGE__?{\"slug\":\"Nodejs-워커-스레드로-멀티스레딩-구현하기-4c8fb36f\"}",{}]}]}]},"$undefined","$undefined",true],"$L3",[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98e4530578c425d7.css","precedence":"next"}]],"$L4"]]]]
5:I{"id":42879,"chunks":["185:static/chunks/app/layout-b198f10c98e34978.js"],"name":"GoogleAnalytics","async":false}
6:I{"id":47767,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
7:I{"id":57920,"chunks":["272:static/chunks/webpack-2f2428fbb7549638.js","971:static/chunks/fd9d1056-695585668d16e3fb.js","596:static/chunks/596-e6a99af3279f5db8.js"],"name":"default","async":false}
3:[null,["$","html",null,{"lang":"ko","children":[["$","$L5",null,{}],["$","body",null,{"className":"__className_aaf875","children":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$","$L6",null,{"parallelRouterKey":"children","segmentPath":["children","javascript","children",["slug","Nodejs-%EC%9B%8C%EC%BB%A4-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A1%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-4c8fb36f","d"],"children"],"loading":"$undefined","loadingStyles":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","template":["$","$L7",null,{}],"templateStyles":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","childProp":{"current":["$L8","$L9",null],"segment":"__PAGE__?{\"slug\":\"Nodejs-워커-스레드로-멀티스레딩-구현하기-4c8fb36f\"}"},"styles":[]}],"segment":["slug","Nodejs-%EC%9B%8C%EC%BB%A4-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A1%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-4c8fb36f","d"]},"styles":[]}],"segment":"javascript"},"styles":[]}]}]]}],null]
4:[["$","meta","0",{"charSet":"utf-8"}],["$","title","1",{"children":"Node.js 워커 스레드로 멀티스레딩 구현하기 | 마고자비 블로그"}],["$","meta","2",{"name":"description","content":"이 글은 Node.js에서 `워커 스레드(worker threads)` 모듈을 사용하여 멀티스레딩을 구현하는 방법에 대해 설명합니다. `워커 스레드`는 CPU 집약적인 작업을 메인 스레드와 분리하여 성능을 향상시키는 데 유용합니다."}],["$","meta","3",{"name":"keywords","content":"Node.js,워크 스레드,멀티스레딩,JavaScript"}],["$","meta","4",{"name":"viewport","content":"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no"}],["$","link","5",{"rel":"canonical","href":"https://magomercy.com/javascript/Nodejs-%EC%9B%8C%EC%BB%A4-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A1%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-4c8fb36f"}],["$","meta","6",{"name":"apple-mobile-web-app-capable","content":"yes"}],["$","meta","7",{"name":"apple-mobile-web-app-title","content":"Node.js 워커 스레드로 멀티스레딩 구현하기 | 마고자비 블로그"}],["$","meta","8",{"name":"apple-mobile-web-app-status-bar-style","content":"default"}],["$","meta","9",{"property":"og:title","content":"Node.js 워커 스레드로 멀티스레딩 구현하기 | 마고자비 블로그"}],["$","meta","10",{"property":"og:description","content":"이 글은 Node.js에서 `워커 스레드(worker threads)` 모듈을 사용하여 멀티스레딩을 구현하는 방법에 대해 설명합니다. `워커 스레드`는 CPU 집약적인 작업을 메인 스레드와 분리하여 성능을 향상시키는 데 유용합니다."}],["$","meta","11",{"property":"og:url","content":"https://magomercy.com/javascript/Nodejs-%EC%9B%8C%EC%BB%A4-%EC%8A%A4%EB%A0%88%EB%93%9C%EB%A1%9C-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%94%A9-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0-4c8fb36f"}],["$","meta","12",{"property":"og:site_name","content":"마고자비 블로그 | 마구잡이로 하고 싶은 것을 합니다."}],["$","meta","13",{"property":"og:locale","content":"kr"}],["$","meta","14",{"property":"og:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","meta","15",{"property":"og:type","content":"website"}],["$","meta","16",{"name":"twitter:card","content":"summary"}],["$","meta","17",{"name":"twitter:creator","content":"마고자비 블로그"}],["$","meta","18",{"name":"twitter:title","content":"Node.js 워커 스레드로 멀티스레딩 구현하기 | 마고자비 블로그"}],["$","meta","19",{"name":"twitter:description","content":"이 글은 Node.js에서 `워커 스레드(worker threads)` 모듈을 사용하여 멀티스레딩을 구현하는 방법에 대해 설명합니다. `워커 스레드`는 CPU 집약적인 작업을 메인 스레드와 분리하여 성능을 향상시키는 데 유용합니다."}],["$","meta","20",{"name":"twitter:image","content":"https://magomercy.com/images/javascriptBanner3.jpg"}],["$","link","21",{"rel":"icon","href":"https://magomercy.com/favicon32.png"}],["$","link","22",{"rel":"apple-touch-icon","href":"https://magomercy.com/favicon32.png"}],["$","meta","23",{"name":"next-size-adjust"}]]
a:I{"id":22873,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
b:I{"id":84423,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
c:I{"id":2346,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
d:I{"id":67490,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"MarkDownCode","async":false}
e:I{"id":87272,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
f:I{"id":55026,"chunks":["986:static/chunks/986-5f83c849e7b0dffa.js","754:static/chunks/754-8b5d90286cb88ad9.js","543:static/chunks/543-fe4d83430fed7822.js","172:static/chunks/app/javascript/[slug]/page-5d9f0fdf07008d20.js"],"name":"","async":false}
9:[["$","$La",null,{"language":"kr","screenType":"ARTICLE_DETAIL"}],["$","section",null,{"className":"flex fixed top-0 left-0 w-full  md:h-[600px] h-[300px] justify-center","style":{"backgroundImage":"url(/images/javascriptBanner3.jpg)","backgroundPosition":"center","backgroundSize":"contain","backgroundRepeat":"no-repeat"},"children":[["$","div",null,{"className":"w-full md:h-[600px] h-[300px]  bg-[#171E24] bg-opacity-[0.35] absolute top-0 left-0"}],["$","div",null,{"className":"hidden md:flex flex-col justify-end w-[100%] md:w-[700px] px-[20px] pb-[100px]","children":["$","h1",null,{"className":"font-semibold text-[40px] text-gray-100 text-shadow-default z-40","children":"Node.js 워커 스레드로 멀티스레딩 구현하기"}]}]]}],["$","main",null,{"className":"flex flex-row justify-center md:py-[120px] py-[60px] bg-white md:mt-[600px] mt-[300px] relative z-30 ","children":[["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","div",null,{"className":"toc sticky top-[90px] flex flex-col","children":["$","$Lb",null,{}]}]}],["$","article",null,{"className":"flex flex-col w-full md:w-[600px] px-[20px] md:px-[0px] gap-[40px]","children":[["$","div",null,{"className":"md:hidden border-b-[0.6px] pb-[40px] border-gray-200","children":["$","h1",null,{"className":"text-[28px] font-bold leading-[150%]","children":"Node.js 워커 스레드로 멀티스레딩 구현하기"}]}],["$","div",null,{"className":"flex flex-col","children":[["$","$Lc",null,{}],["$","div",null,{"children":["작성일 : ",["$","time",null,{"children":"2024-08-07"}]]}]]}],["$","div",null,{"children":["$","div",null,{"className":"md-to-html","children":[["$","h1",null,{"id":"1f1d244a","className":"md:text-[42px] text-[26px] font-bold leading-[150%] md:py-[50px] py-[30px] text-gray-900","children":"Node.js 워커 스레드로 멀티스레딩 구현하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js는 기본적으로 싱글 스레드 이벤트 루프를 사용합니다. 이는 대부분의 I/O 작업에 효율적이지만 CPU 집약적인 작업에 대해서는 성능이 떨어질 수 있습니다. 이 문제를 해결하기 위해 Node.js는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"워커 스레드(worker threads)","position":{"start":{"line":4,"column":118,"offset":149},"end":{"line":4,"column":142,"offset":173}}}],"position":{"start":{"line":4,"column":118,"offset":149},"end":{"line":4,"column":142,"offset":173}}},"children":"워커 스레드(worker threads)"}}]," 모듈을 제공합니다. 이 글에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"워커 스레드","position":{"start":{"line":4,"column":161,"offset":192},"end":{"line":4,"column":169,"offset":200}}}],"position":{"start":{"line":4,"column":161,"offset":192},"end":{"line":4,"column":169,"offset":200}}},"children":"워커 스레드"}}]," 모듈을 활용하여 Node.js에서 멀티스레딩을 구현하는 방법에 대해 알아보겠습니다."]}],"\n",["$","h2",null,{"id":"4c4014e4","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"워커 스레드 모듈 이해하기"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"워크 스레드는 Node.js 버전 10.5.0에서 도입되었으며, 이를 통해 메인 스레드와 분리된 별도의 스레드에서 작업을 실행할 수 있습니다. 이는 CPU 집약적인 작업을 메인 스레드로부터 분리하여 애플리케이션의 반응성을 유지하는 데 도움이 됩니다."}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["워크 스레드는 기본적으로 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"worker_threads","position":{"start":{"line":10,"column":15,"offset":424},"end":{"line":10,"column":31,"offset":440}}}],"position":{"start":{"line":10,"column":15,"offset":424},"end":{"line":10,"column":31,"offset":440}}},"children":"worker_threads"}}]," 모듈을 사용하여 생성됩니다. 이 모듈은 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Worker","position":{"start":{"line":10,"column":54,"offset":463},"end":{"line":10,"column":62,"offset":471}}}],"position":{"start":{"line":10,"column":54,"offset":463},"end":{"line":10,"column":62,"offset":471}}},"children":"Worker"}}]," 클래스를 제공하며, 새로운 스레드를 생성하고 관리하는 데 사용됩니다."]}],"\n",["$","h2",null,{"id":"d5f9dbc6","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"기본적인 워커 스레드 예제"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"다음은 기본적인 워커 스레드 예제입니다. 이 예제에서는 메인 스레드와 워커 스레드 간의 메시지 교환을 수행합니다."}],"\n",["$","pre","pre-0",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// main.js\nconst { Worker } = require('worker_threads');\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./worker.js', { workerData });\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nrunService('Hello, Worker!')\n  .then((result) => console.log(result))\n  .catch((err) => console.error(err));\n"}],"position":{"start":{"line":16,"column":1,"offset":597},"end":{"line":35,"column":4,"offset":1129}}},"children":"// main.js\nconst { Worker } = require('worker_threads');\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./worker.js', { workerData });\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nrunService('Hello, Worker!')\n  .then((result) => console.log(result))\n  .catch((err) => console.error(err));\n"}}]}],"\n",["$","pre","pre-1",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// worker.js\nconst { parentPort, workerData } = require('worker_threads');\n\nparentPort.postMessage(`Worker received: ${workerData}`);\n"}],"position":{"start":{"line":37,"column":1,"offset":1131},"end":{"line":42,"column":4,"offset":1282}}},"children":"// worker.js\nconst { parentPort, workerData } = require('worker_threads');\n\nparentPort.postMessage(`Worker received: ${workerData}`);\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["이 예제에서 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"main.js","position":{"start":{"line":44,"column":8,"offset":1291},"end":{"line":44,"column":17,"offset":1300}}}],"position":{"start":{"line":44,"column":8,"offset":1291},"end":{"line":44,"column":17,"offset":1300}}},"children":"main.js"}}],"는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"worker.js","position":{"start":{"line":44,"column":19,"offset":1302},"end":{"line":44,"column":30,"offset":1313}}}],"position":{"start":{"line":44,"column":19,"offset":1302},"end":{"line":44,"column":30,"offset":1313}}},"children":"worker.js"}}],"를 워커 스레드로 생성하고, 메인 스레드와 워커 스레드 간의 메시지 교환을 수행합니다. 워커 스레드는 메인 스레드로부터 데이터를 받아서 처리하고 결과를 반환합니다."]}],"\n",["$","h2",null,{"id":"37e665c7","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"워커 스레드에서 CPU 집약적인 작업 수행"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"이제 CPU 집약적인 작업을 워커 스레드에서 수행하는 방법을 살펴보겠습니다. 예를 들어, 큰 소수(prime)를 찾는 작업입니다."}],"\n",["$","pre","pre-2",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// main.js\nconst { Worker } = require('worker_threads');\n\nfunction findLargePrime() {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./prime-worker.js');\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nfindLargePrime()\n  .then((result) => console.log(`Found a large prime: ${result}`))\n  .catch((err) => console.error(err));\n"}],"position":{"start":{"line":50,"column":1,"offset":1509},"end":{"line":69,"column":4,"offset":2039}}},"children":"// main.js\nconst { Worker } = require('worker_threads');\n\nfunction findLargePrime() {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./prime-worker.js');\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nfindLargePrime()\n  .then((result) => console.log(`Found a large prime: ${result}`))\n  .catch((err) => console.error(err));\n"}}]}],"\n",["$","pre","pre-3",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// prime-worker.js\nconst { parentPort } = require('worker_threads');\n\nfunction isPrime(num) {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction findLargePrime() {\n  let num = 2;\n  while (true) {\n    if (isPrime(num)) return num;\n    num++;\n  }\n}\n\nparentPort.postMessage(findLargePrime());\n"}],"position":{"start":{"line":71,"column":1,"offset":2041},"end":{"line":91,"column":4,"offset":2411}}},"children":"// prime-worker.js\nconst { parentPort } = require('worker_threads');\n\nfunction isPrime(num) {\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}\n\nfunction findLargePrime() {\n  let num = 2;\n  while (true) {\n    if (isPrime(num)) return num;\n    num++;\n  }\n}\n\nparentPort.postMessage(findLargePrime());\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["위 예제에서는 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"prime-worker.js","position":{"start":{"line":93,"column":9,"offset":2421},"end":{"line":93,"column":26,"offset":2438}}}],"position":{"start":{"line":93,"column":9,"offset":2421},"end":{"line":93,"column":26,"offset":2438}}},"children":"prime-worker.js"}}],"가 큰 소수를 찾는 작업을 수행합니다. 이 작업은 CPU 집약적이며, 메인 스레드와 분리된 워커 스레드에서 실행됨으로써 메인 스레드가 다른 작업을 계속해서 수행할 수 있도록 합니다."]}],"\n",["$","h2",null,{"id":"291139d1","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"다중 워커 스레드 관리"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"복잡한 애플리케이션에서는 한 번에 여러 워커 스레드를 생성하고 관리해야 할 필요가 있습니다. 이를 위해 우리는 여러 워커 스레드를 생성하고 처리하는 예제를 살펴보겠습니다."}],"\n",["$","pre","pre-4",{"children":["$","$Ld",null,{"props":{"className":"language-javascript","node":{"type":"element","tagName":"code","properties":{"className":["language-javascript"]},"children":[{"type":"text","value":"// main.js\nconst { Worker } = require('worker_threads');\nconst numWorkers = 4;\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./worker.js', { workerData });\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nfor (let i = 0; i < numWorkers; i++) {\n  runService(`Data ${i + 1}`)\n    .then((result) => console.log(result))\n    .catch((err) => console.error(err));\n}\n"}],"position":{"start":{"line":99,"column":1,"offset":2656},"end":{"line":121,"column":4,"offset":3256}}},"children":"// main.js\nconst { Worker } = require('worker_threads');\nconst numWorkers = 4;\n\nfunction runService(workerData) {\n  return new Promise((resolve, reject) => {\n    const worker = new Worker('./worker.js', { workerData });\n    worker.on('message', resolve);\n    worker.on('error', reject);\n    worker.on('exit', (code) => {\n      if (code !== 0)\n        reject(new Error(`Worker stopped with exit code ${code}`));\n    });\n  });\n}\n\nfor (let i = 0; i < numWorkers; i++) {\n  runService(`Data ${i + 1}`)\n    .then((result) => console.log(result))\n    .catch((err) => console.error(err));\n}\n"}}]}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":"위 예제는 4개의 워커 스레드를 생성하고 각각의 워커가 데이터를 처리하도록 합니다. 이를 통해 CPU 집약적인 작업을 병렬로 수행하여 성능을 최적화할 수 있습니다."}],"\n",["$","h2",null,{"id":"5b12bcf2","className":"md:text-[32px] text-[22px] font-semibold leading-[145%] md:py-[30px] py-[20px] text-gray-800","children":"결론"}],"\n",["$","p",null,{"className":"md:text-[16px] text-[15px] leading-[180%] text-gray-800 md:py-[20px] py-[20px]","children":["Node.js의 ",["$","$Ld",null,{"props":{"node":{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"워커 스레드","position":{"start":{"line":127,"column":10,"offset":3368},"end":{"line":127,"column":18,"offset":3376}}}],"position":{"start":{"line":127,"column":10,"offset":3368},"end":{"line":127,"column":18,"offset":3376}}},"children":"워커 스레드"}}]," 모듈을 사용하여 CPU 집약적인 작업을 메인 스레드와 분리함으로써 애플리케이션의 성능을 향상시킬 수 있습니다. 위에서 설명한 기본적인 예제를 통해 워커 스레드를 사용하는 방법을 이해하고, 다양한 상황에 맞게 응용할 수 있습니다. 이를 통해 더욱 효율적이고 반응성 높은 Node.js 애플리케이션을 개발할 수 있을 것입니다."]}]]}]}],["$","$Le",null,{}]]}],["$","div",null,{"className":"xl:flex hidden w-[300px]","children":["$","$Lf",null,{"articleTitle":"Node.js 워커 스레드로 멀티스레딩 구현하기","toc":[{"tagName":"h1","title":"Node.js 워커 스레드로 멀티스레딩 구현하기","id":"1f1d244a"},{"tagName":"h2","title":"워커 스레드 모듈 이해하기","id":"4c4014e4"},{"tagName":"h2","title":"기본적인 워커 스레드 예제","id":"d5f9dbc6"},{"tagName":"h2","title":"워커 스레드에서 CPU 집약적인 작업 수행","id":"37e665c7"},{"tagName":"h2","title":"다중 워커 스레드 관리","id":"291139d1"},{"tagName":"h2","title":"결론","id":"5b12bcf2"}],"language":"kr"}]}]]}]]
8:null
